#![feature(prelude_import)]
#[prelude_import]
use std::prelude::rust_2021::*;
#[macro_use]
extern crate std;
pub mod analyzer {
    pub mod db {
        use std::sync::{Arc, Mutex};
        use salsa::DebugWithDb;
        pub struct Database {
            storage: salsa::Storage<Self>,
            logs: Option<Arc<Mutex<Vec<String>>>>,
        }
        impl salsa::database::AsSalsaDatabase for Database {
            fn as_salsa_database(&self) -> &dyn salsa::Database {
                self
            }
        }
        impl salsa::storage::HasJars for Database {
            type Jars = (crate::Jar,);
            fn jars(&self) -> (&Self::Jars, &salsa::Runtime) {
                self.storage.jars()
            }
            fn jars_mut(&mut self) -> (&mut Self::Jars, &mut salsa::Runtime) {
                self.storage.jars_mut()
            }
            fn create_jars(routes: &mut salsa::routes::Routes<Self>) -> Box<Self::Jars> {
                unsafe {
                    salsa::plumbing::create_jars_inplace::<
                        Database,
                    >(|jars| {
                        unsafe {
                            let place = &raw mut (*jars).0;
                            <crate::Jar as salsa::jar::Jar>::init_jar(place, routes);
                        }
                    })
                }
            }
        }
        impl salsa::storage::HasJarsDyn for Database {
            fn runtime(&self) -> &salsa::Runtime {
                self.storage.runtime()
            }
            fn runtime_mut(&mut self) -> &mut salsa::Runtime {
                self.storage.runtime_mut()
            }
            fn maybe_changed_after(
                &self,
                input: salsa::key::DependencyIndex,
                revision: salsa::Revision,
            ) -> bool {
                let ingredient = self.storage.ingredient(input.ingredient_index());
                ingredient.maybe_changed_after(self, input, revision)
            }
            fn cycle_recovery_strategy(
                &self,
                ingredient_index: salsa::IngredientIndex,
            ) -> salsa::cycle::CycleRecoveryStrategy {
                let ingredient = self.storage.ingredient(ingredient_index);
                ingredient.cycle_recovery_strategy()
            }
            fn origin(
                &self,
                index: salsa::DatabaseKeyIndex,
            ) -> Option<salsa::runtime::local_state::QueryOrigin> {
                let ingredient = self.storage.ingredient(index.ingredient_index());
                ingredient.origin(index.key_index())
            }
            fn mark_validated_output(
                &self,
                executor: salsa::DatabaseKeyIndex,
                output: salsa::key::DependencyIndex,
            ) {
                let ingredient = self.storage.ingredient(output.ingredient_index());
                ingredient.mark_validated_output(self, executor, output.key_index());
            }
            fn remove_stale_output(
                &self,
                executor: salsa::DatabaseKeyIndex,
                stale_output: salsa::key::DependencyIndex,
            ) {
                let ingredient = self
                    .storage
                    .ingredient(stale_output.ingredient_index());
                ingredient.remove_stale_output(self, executor, stale_output.key_index());
            }
            fn salsa_struct_deleted(
                &self,
                ingredient: salsa::IngredientIndex,
                id: salsa::Id,
            ) {
                let ingredient = self.storage.ingredient(ingredient);
                ingredient.salsa_struct_deleted(self, id);
            }
            fn fmt_index(
                &self,
                index: salsa::key::DependencyIndex,
                fmt: &mut std::fmt::Formatter<'_>,
            ) -> std::fmt::Result {
                let ingredient = self.storage.ingredient(index.ingredient_index());
                ingredient.fmt_index(index.key_index(), fmt)
            }
        }
        impl salsa::storage::DbWithJar<crate::Jar> for Database {
            fn as_jar_db<'db>(
                &'db self,
            ) -> &'db <crate::Jar as salsa::jar::Jar<'db>>::DynDb
            where
                'db: 'db,
            {
                self as &'db <crate::Jar as salsa::jar::Jar<'db>>::DynDb
            }
        }
        impl salsa::storage::HasJar<crate::Jar> for Database {
            fn jar(&self) -> (&crate::Jar, &salsa::Runtime) {
                let (__jars, __runtime) = self.storage.jars();
                (&__jars.0, __runtime)
            }
            fn jar_mut(&mut self) -> (&mut crate::Jar, &mut salsa::Runtime) {
                let (__jars, __runtime) = self.storage.jars_mut();
                (&mut __jars.0, __runtime)
            }
        }
        impl salsa::storage::JarFromJars<crate::Jar> for Database {
            fn jar_from_jars<'db>(jars: &Self::Jars) -> &crate::Jar {
                &jars.0
            }
            fn jar_from_jars_mut<'db>(jars: &mut Self::Jars) -> &mut crate::Jar {
                &mut jars.0
            }
        }
        #[automatically_derived]
        impl ::core::default::Default for Database {
            #[inline]
            fn default() -> Database {
                Database {
                    storage: ::core::default::Default::default(),
                    logs: ::core::default::Default::default(),
                }
            }
        }
        impl Database {}
        impl salsa::Database for Database {
            fn salsa_event(&self, event: salsa::Event) {
                {
                    ::std::io::_eprint(format_args!("Event: {0:?}\n", event));
                };
                if let Some(logs) = &self.logs {
                    if let salsa::EventKind::WillExecute { .. } = event.kind {
                        logs.lock()
                            .unwrap()
                            .push({
                                let res = ::alloc::fmt::format(
                                    format_args!("Event: {0:?}", event.debug(self)),
                                );
                                res
                            });
                    }
                }
            }
        }
        impl salsa::ParallelDatabase for Database {
            fn snapshot(&self) -> salsa::Snapshot<Self> {
                salsa::Snapshot::new(Database {
                    storage: self.storage.snapshot(),
                    logs: self.logs.clone(),
                })
            }
        }
    }
    use crate::{
        compiler::text::{self, Position, SourceMap, SourceProgram, Span},
        lexer::Location,
        parser::{
            ast::{self, Node},
            span::{self, ByteOrLineColOrCoord, Spanned},
        },
        Db,
    };
    use okstd::prelude::*;
    pub struct SyntaxTree(salsa::Id);
    #[automatically_derived]
    impl ::core::marker::Copy for SyntaxTree {}
    #[automatically_derived]
    impl ::core::clone::Clone for SyntaxTree {
        #[inline]
        fn clone(&self) -> SyntaxTree {
            let _: ::core::clone::AssertParamIsClone<salsa::Id>;
            *self
        }
    }
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for SyntaxTree {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for SyntaxTree {
        #[inline]
        fn eq(&self, other: &SyntaxTree) -> bool {
            self.0 == other.0
        }
    }
    #[automatically_derived]
    impl ::core::cmp::PartialOrd for SyntaxTree {
        #[inline]
        fn partial_cmp(
            &self,
            other: &SyntaxTree,
        ) -> ::core::option::Option<::core::cmp::Ordering> {
            ::core::cmp::PartialOrd::partial_cmp(&self.0, &other.0)
        }
    }
    #[automatically_derived]
    impl ::core::marker::StructuralEq for SyntaxTree {}
    #[automatically_derived]
    impl ::core::cmp::Eq for SyntaxTree {
        #[inline]
        #[doc(hidden)]
        #[coverage(off)]
        fn assert_receiver_is_total_eq(&self) -> () {
            let _: ::core::cmp::AssertParamIsEq<salsa::Id>;
        }
    }
    #[automatically_derived]
    impl ::core::cmp::Ord for SyntaxTree {
        #[inline]
        fn cmp(&self, other: &SyntaxTree) -> ::core::cmp::Ordering {
            ::core::cmp::Ord::cmp(&self.0, &other.0)
        }
    }
    #[automatically_derived]
    impl ::core::hash::Hash for SyntaxTree {
        #[inline]
        fn hash<__H: ::core::hash::Hasher>(&self, state: &mut __H) -> () {
            ::core::hash::Hash::hash(&self.0, state)
        }
    }
    #[automatically_derived]
    impl ::core::fmt::Debug for SyntaxTree {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            ::core::fmt::Formatter::debug_tuple_field1_finish(f, "SyntaxTree", &&self.0)
        }
    }
    #[allow(dead_code, clippy::pedantic, clippy::complexity, clippy::style)]
    impl SyntaxTree {
        pub fn new(
            __db: &<crate::Jar as salsa::jar::Jar<'_>>::DynDb,
            exprs: Vec<Spanned<ast::Node>>,
        ) -> Self {
            let (__jar, __runtime) = <_ as salsa::storage::HasJar<
                crate::Jar,
            >>::jar(__db);
            let __ingredients = <crate::Jar as salsa::storage::HasIngredientsFor<
                SyntaxTree,
            >>::ingredient(__jar);
            let __id = __ingredients.1.new_input(__runtime);
            __ingredients.0.store_new(__runtime, __id, exprs, salsa::Durability::LOW);
            __id
        }
        fn exprs<'db>(
            self,
            __db: &'db <crate::Jar as salsa::jar::Jar<'_>>::DynDb,
        ) -> Vec<Spanned<ast::Node>> {
            let (__jar, __runtime) = <_ as salsa::storage::HasJar<
                crate::Jar,
            >>::jar(__db);
            let __ingredients = <crate::Jar as salsa::storage::HasIngredientsFor<
                SyntaxTree,
            >>::ingredient(__jar);
            __ingredients.0.fetch(__runtime, self).clone()
        }
        fn set_exprs<'db>(
            self,
            __db: &'db mut <crate::Jar as salsa::jar::Jar<'_>>::DynDb,
        ) -> salsa::setter::Setter<'db, SyntaxTree, Vec<Spanned<ast::Node>>> {
            let (__jar, __runtime) = <_ as salsa::storage::HasJar<
                crate::Jar,
            >>::jar_mut(__db);
            let __ingredients = <crate::Jar as salsa::storage::HasIngredientsFor<
                SyntaxTree,
            >>::ingredient_mut(__jar);
            salsa::setter::Setter::new(__runtime, self, &mut __ingredients.0)
        }
    }
    impl salsa::storage::IngredientsFor for SyntaxTree {
        type Jar = crate::Jar;
        type Ingredients = (
            salsa::input_field::InputFieldIngredient<
                SyntaxTree,
                Vec<Spanned<ast::Node>>,
            >,
            salsa::input::InputIngredient<SyntaxTree>,
        );
        fn create_ingredients<DB>(
            routes: &mut salsa::routes::Routes<DB>,
        ) -> Self::Ingredients
        where
            DB: salsa::DbWithJar<Self::Jar> + salsa::storage::JarFromJars<Self::Jar>,
        {
            (
                {
                    let index = routes
                        .push(
                            |jars| {
                                let jar = <DB as salsa::storage::JarFromJars<
                                    Self::Jar,
                                >>::jar_from_jars(jars);
                                let ingredients = <_ as salsa::storage::HasIngredientsFor<
                                    Self,
                                >>::ingredient(jar);
                                &ingredients.0
                            },
                            |jars| {
                                let jar = <DB as salsa::storage::JarFromJars<
                                    Self::Jar,
                                >>::jar_from_jars_mut(jars);
                                let ingredients = <_ as salsa::storage::HasIngredientsFor<
                                    Self,
                                >>::ingredient_mut(jar);
                                &mut ingredients.0
                            },
                        );
                    salsa::input_field::InputFieldIngredient::new(index, "exprs")
                },
                {
                    let index = routes
                        .push(
                            |jars| {
                                let jar = <DB as salsa::storage::JarFromJars<
                                    Self::Jar,
                                >>::jar_from_jars(jars);
                                let ingredients = <_ as salsa::storage::HasIngredientsFor<
                                    Self,
                                >>::ingredient(jar);
                                &ingredients.1
                            },
                            |jars| {
                                let jar = <DB as salsa::storage::JarFromJars<
                                    Self::Jar,
                                >>::jar_from_jars_mut(jars);
                                let ingredients = <_ as salsa::storage::HasIngredientsFor<
                                    Self,
                                >>::ingredient_mut(jar);
                                &mut ingredients.1
                            },
                        );
                    salsa::input::InputIngredient::new(index, "SyntaxTree")
                },
            )
        }
    }
    impl salsa::AsId for SyntaxTree {
        fn as_id(self) -> salsa::Id {
            self.0
        }
        fn from_id(id: salsa::Id) -> Self {
            SyntaxTree(id)
        }
    }
    impl ::salsa::DebugWithDb<<crate::Jar as salsa::jar::Jar<'_>>::DynDb>
    for SyntaxTree {
        fn fmt(
            &self,
            f: &mut ::std::fmt::Formatter<'_>,
            _db: &<crate::Jar as salsa::jar::Jar<'_>>::DynDb,
        ) -> ::std::fmt::Result {
            #[allow(unused_imports)]
            use ::salsa::debug::helper::Fallback;
            let mut debug_struct = &mut f.debug_struct("SyntaxTree");
            debug_struct = debug_struct.field("[salsa id]", &self.0.as_u32());
            debug_struct = debug_struct
                .field(
                    "exprs",
                    &::salsa::debug::helper::SalsaDebug::<
                        Vec<Spanned<ast::Node>>,
                        <crate::Jar as salsa::jar::Jar<'_>>::DynDb,
                    >::salsa_debug(
                        #[allow(clippy::needless_borrow)]
                        &self.exprs(_db),
                        _db,
                    ),
                );
            debug_struct.finish()
        }
    }
    impl<DB> salsa::salsa_struct::SalsaStructInDb<DB> for SyntaxTree
    where
        DB: ?Sized + salsa::DbWithJar<crate::Jar>,
    {
        fn register_dependent_fn(_db: &DB, _index: salsa::routes::IngredientIndex) {}
    }
    impl SyntaxTree {
        fn find_span(
            self,
            db: &dyn Db,
            pos: &ByteOrLineColOrCoord,
        ) -> Option<Spanned<Node>> {
            self.exprs(db)
                .iter()
                .fold(
                    None,
                    |acc, expr| {
                        {
                            let lvl = ::log::Level::Debug;
                            if lvl <= ::log::STATIC_MAX_LEVEL
                                && lvl <= ::log::max_level()
                            {
                                ::log::__private_api::log(
                                    format_args!(
                                        "Checking if {0:#?} overlaps with {1:?}\n",
                                        expr,
                                        pos,
                                    ),
                                    lvl,
                                    &(
                                        "srclang::analyzer",
                                        "srclang::analyzer",
                                        "src/analyzer/mod.rs",
                                    ),
                                    23u32,
                                    (),
                                );
                            }
                        };
                        if expr.overlap(pos) {
                            {
                                let lvl = ::log::Level::Debug;
                                if lvl <= ::log::STATIC_MAX_LEVEL
                                    && lvl <= ::log::max_level()
                                {
                                    ::log::__private_api::log(
                                        format_args!("{0:?} overlaps with {1:#?}\n", expr, pos),
                                        lvl,
                                        &(
                                            "srclang::analyzer",
                                            "srclang::analyzer",
                                            "src/analyzer/mod.rs",
                                        ),
                                        25u32,
                                        (),
                                    );
                                }
                            };
                            match acc {
                                Some(acc) => {
                                    {
                                        let lvl = ::log::Level::Debug;
                                        if lvl <= ::log::STATIC_MAX_LEVEL
                                            && lvl <= ::log::max_level()
                                        {
                                            ::log::__private_api::log(
                                                format_args!(
                                                    "Comparing {0:#?} with {1:#?}\n",
                                                    expr.span_size(),
                                                    acc.span_size(),
                                                ),
                                                lvl,
                                                &(
                                                    "srclang::analyzer",
                                                    "srclang::analyzer",
                                                    "src/analyzer/mod.rs",
                                                ),
                                                28u32,
                                                (),
                                            );
                                        }
                                    };
                                    if expr.span_size() < acc.span_size() {
                                        Some(expr.clone())
                                    } else {
                                        Some(acc)
                                    }
                                }
                                None => Some(expr.clone()),
                            }
                        } else {
                            acc
                        }
                    },
                )
        }
    }
    #[allow(non_camel_case_types)]
    pub struct get_symbol {
        intern_map: salsa::interned::InternedIngredient<
            salsa::Id,
            (text::SourceProgram, span::ByteOrLineColOrCoordInterned),
        >,
        function: salsa::function::FunctionIngredient<Self>,
    }
    impl salsa::function::Configuration for get_symbol {
        type Jar = crate::Jar;
        type SalsaStruct = text::SourceProgram;
        type Key = salsa::id::Id;
        type Value = Option<Spanned<ast::Node>>;
        const CYCLE_STRATEGY: salsa::cycle::CycleRecoveryStrategy = salsa::cycle::CycleRecoveryStrategy::Panic;
        fn should_backdate_value(v1: &Self::Value, v2: &Self::Value) -> bool {
            salsa::function::should_backdate_value(v1, v2)
        }
        fn execute(__db: &salsa::function::DynDb<Self>, __id: Self::Key) -> Self::Value {
            pub fn __fn(
                db: &dyn Db,
                src: text::SourceProgram,
                pos: span::ByteOrLineColOrCoordInterned,
            ) -> Option<Spanned<ast::Node>> {
                None
            }
            let (__jar, __runtime) = <_ as salsa::storage::HasJar<
                crate::Jar,
            >>::jar(__db);
            let __ingredients = <_ as salsa::storage::HasIngredientsFor<
                get_symbol,
            >>::ingredient(__jar);
            let __key = __ingredients.intern_map.data(__runtime, __id).clone();
            __fn(__db, __key.0, __key.1)
        }
        fn recover_from_cycle(
            _db: &salsa::function::DynDb<Self>,
            _cycle: &salsa::Cycle,
            _key: Self::Key,
        ) -> Self::Value {
            {
                #[cold]
                #[track_caller]
                #[inline(never)]
                const fn panic_cold_explicit() -> ! {
                    ::core::panicking::panic_explicit()
                }
                panic_cold_explicit();
            }
        }
    }
    impl salsa::storage::IngredientsFor for get_symbol {
        type Ingredients = Self;
        type Jar = crate::Jar;
        fn create_ingredients<DB>(
            routes: &mut salsa::routes::Routes<DB>,
        ) -> Self::Ingredients
        where
            DB: salsa::DbWithJar<Self::Jar> + salsa::storage::JarFromJars<Self::Jar>,
        {
            Self {
                intern_map: {
                    let index = routes
                        .push(
                            |jars| {
                                let jar = <DB as salsa::storage::JarFromJars<
                                    Self::Jar,
                                >>::jar_from_jars(jars);
                                let ingredients = <_ as salsa::storage::HasIngredientsFor<
                                    Self::Ingredients,
                                >>::ingredient(jar);
                                &ingredients.intern_map
                            },
                            |jars| {
                                let jar = <DB as salsa::storage::JarFromJars<
                                    Self::Jar,
                                >>::jar_from_jars_mut(jars);
                                let ingredients = <_ as salsa::storage::HasIngredientsFor<
                                    Self::Ingredients,
                                >>::ingredient_mut(jar);
                                &mut ingredients.intern_map
                            },
                        );
                    salsa::interned::InternedIngredient::new(index, "get_symbol")
                },
                function: {
                    let index = routes
                        .push(
                            |jars| {
                                let jar = <DB as salsa::storage::JarFromJars<
                                    Self::Jar,
                                >>::jar_from_jars(jars);
                                let ingredients = <_ as salsa::storage::HasIngredientsFor<
                                    Self::Ingredients,
                                >>::ingredient(jar);
                                &ingredients.function
                            },
                            |jars| {
                                let jar = <DB as salsa::storage::JarFromJars<
                                    Self::Jar,
                                >>::jar_from_jars_mut(jars);
                                let ingredients = <_ as salsa::storage::HasIngredientsFor<
                                    Self::Ingredients,
                                >>::ingredient_mut(jar);
                                &mut ingredients.function
                            },
                        );
                    let ingredient = salsa::function::FunctionIngredient::new(
                        index,
                        "get_symbol",
                    );
                    ingredient.set_capacity(0usize);
                    ingredient
                },
            }
        }
    }
    impl get_symbol {
        #[allow(dead_code, clippy::needless_lifetimes)]
        pub fn get<'__db>(
            db: &'__db dyn Db,
            src: text::SourceProgram,
            pos: span::ByteOrLineColOrCoordInterned,
        ) -> &'__db Option<Spanned<ast::Node>> {
            let (__jar, __runtime) = <_ as salsa::storage::HasJar<crate::Jar>>::jar(db);
            let __ingredients = <_ as salsa::storage::HasIngredientsFor<
                get_symbol,
            >>::ingredient(__jar);
            let __key = __ingredients.intern_map.intern(__runtime, (src, pos));
            __ingredients.function.fetch(db, __key)
        }
        #[allow(dead_code, clippy::needless_lifetimes)]
        pub fn set(
            db: &mut dyn Db,
            src: text::SourceProgram,
            pos: span::ByteOrLineColOrCoordInterned,
            __value: Option<Spanned<ast::Node>>,
        ) {
            let (__jar, __runtime) = <_ as salsa::storage::HasJar<
                crate::Jar,
            >>::jar_mut(db);
            let __ingredients = <_ as salsa::storage::HasIngredientsFor<
                get_symbol,
            >>::ingredient_mut(__jar);
            let __key = __ingredients.intern_map.intern(__runtime, (src, pos));
            __ingredients
                .function
                .store(__runtime, __key, __value, salsa::Durability::LOW)
        }
        #[allow(dead_code, clippy::needless_lifetimes)]
        pub fn accumulated<'__db, __A: salsa::accumulator::Accumulator>(
            db: &'__db dyn Db,
            src: text::SourceProgram,
            pos: span::ByteOrLineColOrCoordInterned,
        ) -> Vec<<__A as salsa::accumulator::Accumulator>::Data>
        where
            <crate::Jar as salsa::jar::Jar<
                '__db,
            >>::DynDb: salsa::storage::HasJar<
                <__A as salsa::accumulator::Accumulator>::Jar,
            >,
        {
            let (__jar, __runtime) = <_ as salsa::storage::HasJar<crate::Jar>>::jar(db);
            let __ingredients = <_ as salsa::storage::HasIngredientsFor<
                get_symbol,
            >>::ingredient(__jar);
            let __key = __ingredients.intern_map.intern(__runtime, (src, pos));
            __ingredients.function.accumulated::<__A>(db, __key)
        }
    }
    #[allow(clippy::needless_lifetimes)]
    pub fn get_symbol(
        db: &dyn Db,
        src: text::SourceProgram,
        pos: span::ByteOrLineColOrCoordInterned,
    ) -> Option<Spanned<ast::Node>> {
        Clone::clone(get_symbol::get(db, src, pos))
    }
    pub struct Url(salsa::Id);
    #[automatically_derived]
    impl ::core::marker::Copy for Url {}
    #[automatically_derived]
    impl ::core::clone::Clone for Url {
        #[inline]
        fn clone(&self) -> Url {
            let _: ::core::clone::AssertParamIsClone<salsa::Id>;
            *self
        }
    }
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for Url {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for Url {
        #[inline]
        fn eq(&self, other: &Url) -> bool {
            self.0 == other.0
        }
    }
    #[automatically_derived]
    impl ::core::cmp::PartialOrd for Url {
        #[inline]
        fn partial_cmp(
            &self,
            other: &Url,
        ) -> ::core::option::Option<::core::cmp::Ordering> {
            ::core::cmp::PartialOrd::partial_cmp(&self.0, &other.0)
        }
    }
    #[automatically_derived]
    impl ::core::marker::StructuralEq for Url {}
    #[automatically_derived]
    impl ::core::cmp::Eq for Url {
        #[inline]
        #[doc(hidden)]
        #[coverage(off)]
        fn assert_receiver_is_total_eq(&self) -> () {
            let _: ::core::cmp::AssertParamIsEq<salsa::Id>;
        }
    }
    #[automatically_derived]
    impl ::core::cmp::Ord for Url {
        #[inline]
        fn cmp(&self, other: &Url) -> ::core::cmp::Ordering {
            ::core::cmp::Ord::cmp(&self.0, &other.0)
        }
    }
    #[automatically_derived]
    impl ::core::hash::Hash for Url {
        #[inline]
        fn hash<__H: ::core::hash::Hasher>(&self, state: &mut __H) -> () {
            ::core::hash::Hash::hash(&self.0, state)
        }
    }
    #[automatically_derived]
    impl ::core::fmt::Debug for Url {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            ::core::fmt::Formatter::debug_tuple_field1_finish(f, "Url", &&self.0)
        }
    }
    #[allow(dead_code, clippy::pedantic, clippy::complexity, clippy::style)]
    impl Url {
        pub fn new(
            __db: &<crate::Jar as salsa::jar::Jar<'_>>::DynDb,
            url: String,
        ) -> Self {
            let (__jar, __runtime) = <_ as salsa::storage::HasJar<
                crate::Jar,
            >>::jar(__db);
            let __ingredients = <crate::Jar as salsa::storage::HasIngredientsFor<
                Url,
            >>::ingredient(__jar);
            let __id = __ingredients.1.new_input(__runtime);
            __ingredients.0.store_new(__runtime, __id, url, salsa::Durability::LOW);
            __id
        }
        pub fn url<'db>(
            self,
            __db: &'db <crate::Jar as salsa::jar::Jar<'_>>::DynDb,
        ) -> String {
            let (__jar, __runtime) = <_ as salsa::storage::HasJar<
                crate::Jar,
            >>::jar(__db);
            let __ingredients = <crate::Jar as salsa::storage::HasIngredientsFor<
                Url,
            >>::ingredient(__jar);
            __ingredients.0.fetch(__runtime, self).clone()
        }
    }
    impl salsa::storage::IngredientsFor for Url {
        type Jar = crate::Jar;
        type Ingredients = (
            salsa::input_field::InputFieldIngredient<Url, String>,
            salsa::input::InputIngredient<Url>,
        );
        fn create_ingredients<DB>(
            routes: &mut salsa::routes::Routes<DB>,
        ) -> Self::Ingredients
        where
            DB: salsa::DbWithJar<Self::Jar> + salsa::storage::JarFromJars<Self::Jar>,
        {
            (
                {
                    let index = routes
                        .push(
                            |jars| {
                                let jar = <DB as salsa::storage::JarFromJars<
                                    Self::Jar,
                                >>::jar_from_jars(jars);
                                let ingredients = <_ as salsa::storage::HasIngredientsFor<
                                    Self,
                                >>::ingredient(jar);
                                &ingredients.0
                            },
                            |jars| {
                                let jar = <DB as salsa::storage::JarFromJars<
                                    Self::Jar,
                                >>::jar_from_jars_mut(jars);
                                let ingredients = <_ as salsa::storage::HasIngredientsFor<
                                    Self,
                                >>::ingredient_mut(jar);
                                &mut ingredients.0
                            },
                        );
                    salsa::input_field::InputFieldIngredient::new(index, "url")
                },
                {
                    let index = routes
                        .push(
                            |jars| {
                                let jar = <DB as salsa::storage::JarFromJars<
                                    Self::Jar,
                                >>::jar_from_jars(jars);
                                let ingredients = <_ as salsa::storage::HasIngredientsFor<
                                    Self,
                                >>::ingredient(jar);
                                &ingredients.1
                            },
                            |jars| {
                                let jar = <DB as salsa::storage::JarFromJars<
                                    Self::Jar,
                                >>::jar_from_jars_mut(jars);
                                let ingredients = <_ as salsa::storage::HasIngredientsFor<
                                    Self,
                                >>::ingredient_mut(jar);
                                &mut ingredients.1
                            },
                        );
                    salsa::input::InputIngredient::new(index, "Url")
                },
            )
        }
    }
    impl salsa::AsId for Url {
        fn as_id(self) -> salsa::Id {
            self.0
        }
        fn from_id(id: salsa::Id) -> Self {
            Url(id)
        }
    }
    impl ::salsa::DebugWithDb<<crate::Jar as salsa::jar::Jar<'_>>::DynDb> for Url {
        fn fmt(
            &self,
            f: &mut ::std::fmt::Formatter<'_>,
            _db: &<crate::Jar as salsa::jar::Jar<'_>>::DynDb,
        ) -> ::std::fmt::Result {
            #[allow(unused_imports)]
            use ::salsa::debug::helper::Fallback;
            let mut debug_struct = &mut f.debug_struct("Url");
            debug_struct = debug_struct.field("[salsa id]", &self.0.as_u32());
            debug_struct = debug_struct
                .field(
                    "url",
                    &::salsa::debug::helper::SalsaDebug::<
                        String,
                        <crate::Jar as salsa::jar::Jar<'_>>::DynDb,
                    >::salsa_debug(#[allow(clippy::needless_borrow)] &self.url(_db), _db),
                );
            debug_struct.finish()
        }
    }
    impl<DB> salsa::salsa_struct::SalsaStructInDb<DB> for Url
    where
        DB: ?Sized + salsa::DbWithJar<crate::Jar>,
    {
        fn register_dependent_fn(_db: &DB, _index: salsa::routes::IngredientIndex) {}
    }
    #[allow(non_camel_case_types)]
    pub struct add_file {
        intern_map: salsa::interned::InternedIngredient<salsa::Id, (Url, String)>,
        function: salsa::function::FunctionIngredient<Self>,
    }
    impl salsa::function::Configuration for add_file {
        type Jar = crate::Jar;
        type SalsaStruct = Url;
        type Key = salsa::id::Id;
        type Value = SourceProgram;
        const CYCLE_STRATEGY: salsa::cycle::CycleRecoveryStrategy = salsa::cycle::CycleRecoveryStrategy::Panic;
        fn should_backdate_value(v1: &Self::Value, v2: &Self::Value) -> bool {
            salsa::function::should_backdate_value(v1, v2)
        }
        fn execute(__db: &salsa::function::DynDb<Self>, __id: Self::Key) -> Self::Value {
            pub fn __fn(db: &dyn Db, url: Url, text: String) -> SourceProgram {
                SourceProgram::new(db, url.url(db), text)
            }
            let (__jar, __runtime) = <_ as salsa::storage::HasJar<
                crate::Jar,
            >>::jar(__db);
            let __ingredients = <_ as salsa::storage::HasIngredientsFor<
                add_file,
            >>::ingredient(__jar);
            let __key = __ingredients.intern_map.data(__runtime, __id).clone();
            __fn(__db, __key.0, __key.1)
        }
        fn recover_from_cycle(
            _db: &salsa::function::DynDb<Self>,
            _cycle: &salsa::Cycle,
            _key: Self::Key,
        ) -> Self::Value {
            {
                #[cold]
                #[track_caller]
                #[inline(never)]
                const fn panic_cold_explicit() -> ! {
                    ::core::panicking::panic_explicit()
                }
                panic_cold_explicit();
            }
        }
    }
    impl salsa::storage::IngredientsFor for add_file {
        type Ingredients = Self;
        type Jar = crate::Jar;
        fn create_ingredients<DB>(
            routes: &mut salsa::routes::Routes<DB>,
        ) -> Self::Ingredients
        where
            DB: salsa::DbWithJar<Self::Jar> + salsa::storage::JarFromJars<Self::Jar>,
        {
            Self {
                intern_map: {
                    let index = routes
                        .push(
                            |jars| {
                                let jar = <DB as salsa::storage::JarFromJars<
                                    Self::Jar,
                                >>::jar_from_jars(jars);
                                let ingredients = <_ as salsa::storage::HasIngredientsFor<
                                    Self::Ingredients,
                                >>::ingredient(jar);
                                &ingredients.intern_map
                            },
                            |jars| {
                                let jar = <DB as salsa::storage::JarFromJars<
                                    Self::Jar,
                                >>::jar_from_jars_mut(jars);
                                let ingredients = <_ as salsa::storage::HasIngredientsFor<
                                    Self::Ingredients,
                                >>::ingredient_mut(jar);
                                &mut ingredients.intern_map
                            },
                        );
                    salsa::interned::InternedIngredient::new(index, "add_file")
                },
                function: {
                    let index = routes
                        .push(
                            |jars| {
                                let jar = <DB as salsa::storage::JarFromJars<
                                    Self::Jar,
                                >>::jar_from_jars(jars);
                                let ingredients = <_ as salsa::storage::HasIngredientsFor<
                                    Self::Ingredients,
                                >>::ingredient(jar);
                                &ingredients.function
                            },
                            |jars| {
                                let jar = <DB as salsa::storage::JarFromJars<
                                    Self::Jar,
                                >>::jar_from_jars_mut(jars);
                                let ingredients = <_ as salsa::storage::HasIngredientsFor<
                                    Self::Ingredients,
                                >>::ingredient_mut(jar);
                                &mut ingredients.function
                            },
                        );
                    let ingredient = salsa::function::FunctionIngredient::new(
                        index,
                        "add_file",
                    );
                    ingredient.set_capacity(0usize);
                    ingredient
                },
            }
        }
    }
    impl add_file {
        #[allow(dead_code, clippy::needless_lifetimes)]
        pub fn get<'__db>(
            db: &'__db dyn Db,
            url: Url,
            text: String,
        ) -> &'__db SourceProgram {
            let (__jar, __runtime) = <_ as salsa::storage::HasJar<crate::Jar>>::jar(db);
            let __ingredients = <_ as salsa::storage::HasIngredientsFor<
                add_file,
            >>::ingredient(__jar);
            let __key = __ingredients.intern_map.intern(__runtime, (url, text));
            __ingredients.function.fetch(db, __key)
        }
        #[allow(dead_code, clippy::needless_lifetimes)]
        pub fn set(db: &mut dyn Db, url: Url, text: String, __value: SourceProgram) {
            let (__jar, __runtime) = <_ as salsa::storage::HasJar<
                crate::Jar,
            >>::jar_mut(db);
            let __ingredients = <_ as salsa::storage::HasIngredientsFor<
                add_file,
            >>::ingredient_mut(__jar);
            let __key = __ingredients.intern_map.intern(__runtime, (url, text));
            __ingredients
                .function
                .store(__runtime, __key, __value, salsa::Durability::LOW)
        }
        #[allow(dead_code, clippy::needless_lifetimes)]
        pub fn accumulated<'__db, __A: salsa::accumulator::Accumulator>(
            db: &'__db dyn Db,
            url: Url,
            text: String,
        ) -> Vec<<__A as salsa::accumulator::Accumulator>::Data>
        where
            <crate::Jar as salsa::jar::Jar<
                '__db,
            >>::DynDb: salsa::storage::HasJar<
                <__A as salsa::accumulator::Accumulator>::Jar,
            >,
        {
            let (__jar, __runtime) = <_ as salsa::storage::HasJar<crate::Jar>>::jar(db);
            let __ingredients = <_ as salsa::storage::HasIngredientsFor<
                add_file,
            >>::ingredient(__jar);
            let __key = __ingredients.intern_map.intern(__runtime, (url, text));
            __ingredients.function.accumulated::<__A>(db, __key)
        }
    }
    #[allow(clippy::needless_lifetimes)]
    pub fn add_file(db: &dyn Db, url: Url, text: String) -> SourceProgram {
        Clone::clone(add_file::get(db, url, text))
    }
    #[allow(non_camel_case_types)]
    pub struct span_text {
        intern_map: salsa::interned::IdentityInterner<text::Spanned>,
        function: salsa::function::FunctionIngredient<Self>,
    }
    impl salsa::function::Configuration for span_text {
        type Jar = crate::Jar;
        type SalsaStruct = text::Spanned;
        type Key = text::Spanned;
        type Value = String;
        const CYCLE_STRATEGY: salsa::cycle::CycleRecoveryStrategy = salsa::cycle::CycleRecoveryStrategy::Panic;
        fn should_backdate_value(v1: &Self::Value, v2: &Self::Value) -> bool {
            salsa::function::should_backdate_value(v1, v2)
        }
        fn execute(__db: &salsa::function::DynDb<Self>, __id: Self::Key) -> Self::Value {
            pub fn __fn(db: &dyn Db, span: text::Spanned) -> String {
                span.src(db).text(db)[span.span(db).span(db)].to_string()
            }
            let (__jar, __runtime) = <_ as salsa::storage::HasJar<
                crate::Jar,
            >>::jar(__db);
            let __ingredients = <_ as salsa::storage::HasIngredientsFor<
                span_text,
            >>::ingredient(__jar);
            let __key = __ingredients.intern_map.data(__runtime, __id).clone();
            __fn(__db, __key.0)
        }
        fn recover_from_cycle(
            _db: &salsa::function::DynDb<Self>,
            _cycle: &salsa::Cycle,
            _key: Self::Key,
        ) -> Self::Value {
            {
                #[cold]
                #[track_caller]
                #[inline(never)]
                const fn panic_cold_explicit() -> ! {
                    ::core::panicking::panic_explicit()
                }
                panic_cold_explicit();
            }
        }
    }
    impl salsa::storage::IngredientsFor for span_text {
        type Ingredients = Self;
        type Jar = crate::Jar;
        fn create_ingredients<DB>(
            routes: &mut salsa::routes::Routes<DB>,
        ) -> Self::Ingredients
        where
            DB: salsa::DbWithJar<Self::Jar> + salsa::storage::JarFromJars<Self::Jar>,
        {
            Self {
                intern_map: salsa::interned::IdentityInterner::new(),
                function: {
                    let index = routes
                        .push(
                            |jars| {
                                let jar = <DB as salsa::storage::JarFromJars<
                                    Self::Jar,
                                >>::jar_from_jars(jars);
                                let ingredients = <_ as salsa::storage::HasIngredientsFor<
                                    Self::Ingredients,
                                >>::ingredient(jar);
                                &ingredients.function
                            },
                            |jars| {
                                let jar = <DB as salsa::storage::JarFromJars<
                                    Self::Jar,
                                >>::jar_from_jars_mut(jars);
                                let ingredients = <_ as salsa::storage::HasIngredientsFor<
                                    Self::Ingredients,
                                >>::ingredient_mut(jar);
                                &mut ingredients.function
                            },
                        );
                    let ingredient = salsa::function::FunctionIngredient::new(
                        index,
                        "span_text",
                    );
                    ingredient.set_capacity(0usize);
                    ingredient
                },
            }
        }
    }
    impl span_text {
        #[allow(dead_code, clippy::needless_lifetimes)]
        pub fn get<'__db>(db: &'__db dyn Db, span: text::Spanned) -> &'__db String {
            let (__jar, __runtime) = <_ as salsa::storage::HasJar<crate::Jar>>::jar(db);
            let __ingredients = <_ as salsa::storage::HasIngredientsFor<
                span_text,
            >>::ingredient(__jar);
            let __key = __ingredients.intern_map.intern(__runtime, (span));
            __ingredients.function.fetch(db, __key)
        }
        #[allow(dead_code, clippy::needless_lifetimes)]
        pub fn set(db: &mut dyn Db, span: text::Spanned, __value: String) {
            let (__jar, __runtime) = <_ as salsa::storage::HasJar<
                crate::Jar,
            >>::jar_mut(db);
            let __ingredients = <_ as salsa::storage::HasIngredientsFor<
                span_text,
            >>::ingredient_mut(__jar);
            let __key = __ingredients.intern_map.intern(__runtime, (span));
            __ingredients
                .function
                .store(__runtime, __key, __value, salsa::Durability::LOW)
        }
        #[allow(dead_code, clippy::needless_lifetimes)]
        pub fn accumulated<'__db, __A: salsa::accumulator::Accumulator>(
            db: &'__db dyn Db,
            span: text::Spanned,
        ) -> Vec<<__A as salsa::accumulator::Accumulator>::Data>
        where
            <crate::Jar as salsa::jar::Jar<
                '__db,
            >>::DynDb: salsa::storage::HasJar<
                <__A as salsa::accumulator::Accumulator>::Jar,
            >,
        {
            let (__jar, __runtime) = <_ as salsa::storage::HasJar<crate::Jar>>::jar(db);
            let __ingredients = <_ as salsa::storage::HasIngredientsFor<
                span_text,
            >>::ingredient(__jar);
            let __key = __ingredients.intern_map.intern(__runtime, (span));
            __ingredients.function.accumulated::<__A>(db, __key)
        }
    }
    #[allow(clippy::needless_lifetimes)]
    pub fn span_text(db: &dyn Db, span: text::Spanned) -> String {
        Clone::clone(span_text::get(db, span))
    }
}
pub mod compiler {
    use std::collections::BTreeMap;
    use okstd::prelude::debug;
    use crate::{compiler::errors::Errors, lexer::Location, parser::ast, Db};
    use self::text::SourceProgram;
    pub mod errors {
        use std::ops::Range;
        use crate::lexer::Location;
        pub struct Errors<'a>(
            Vec<lalrpop_util::ErrorRecovery<Location, crate::lexer::Token<'a>, &'a str>>,
        );
        impl<
            'a,
        > From<
            Vec<lalrpop_util::ErrorRecovery<Location, crate::lexer::Token<'a>, &'a str>>,
        > for Errors<'a> {
            fn from(
                value: Vec<
                    lalrpop_util::ErrorRecovery<
                        Location,
                        crate::lexer::Token<'a>,
                        &'a str,
                    >,
                >,
            ) -> Self {
                Self(value)
            }
        }
        impl<'a> IntoIterator for Errors<'a> {
            type Item = Range<Location>;
            type IntoIter = <Vec<std::ops::Range<Location>> as IntoIterator>::IntoIter;
            fn into_iter(self) -> Self::IntoIter {
                self.0
                    .into_iter()
                    .map(|error| match error.error {
                        lalrpop_util::ParseError::InvalidToken { location } => {
                            location..location
                        }
                        lalrpop_util::ParseError::UnrecognizedEof {
                            location,
                            expected: _,
                        } => location..location,
                        lalrpop_util::ParseError::UnrecognizedToken {
                            token,
                            expected: _,
                        } => token.0..token.2,
                        lalrpop_util::ParseError::ExtraToken { token } => {
                            token.0..token.2
                        }
                        lalrpop_util::ParseError::User { error: _ } => {
                            ::core::panicking::panic("not yet implemented")
                        }
                    })
                    .collect::<Vec<_>>()
                    .into_iter()
            }
        }
        fn handle_errors(
            errors: Vec<
                lalrpop_util::ErrorRecovery<Location, crate::lexer::Token, &str>,
            >,
            src: &str,
        ) -> String {
            let mut pretty = String::new();
            let mut last_end = Location::default();
            for error in errors {
                match error.error {
                    lalrpop_util::ParseError::InvalidToken { location: _ } => {
                        ::core::panicking::panic("not yet implemented")
                    }
                    lalrpop_util::ParseError::UnrecognizedEof {
                        location: _,
                        expected: _,
                    } => ::core::panicking::panic("not yet implemented"),
                    lalrpop_util::ParseError::UnrecognizedToken { token, expected } => {
                        let start = token.0;
                        let end = token.2;
                        let start_line = start.line;
                        let end_line = end.line;
                        let line = &src[start_line..end_line];
                        let start_col = start.col;
                        let end_col = end.col;
                        pretty
                            .push_str(
                                &{
                                    let res = ::alloc::fmt::format(
                                        format_args!(
                                            "error: unexpected token {0:?}, expected one of {1:?}\n",
                                            token.1,
                                            expected,
                                        ),
                                    );
                                    res
                                },
                            );
                        pretty.push_str(&line);
                        pretty.push_str("\n");
                        pretty.push_str(&" ".repeat(start_col));
                        pretty.push_str(&"^".repeat(end_col - start_col));
                        last_end = end;
                    }
                    lalrpop_util::ParseError::ExtraToken { token: _ } => {
                        ::core::panicking::panic("not yet implemented")
                    }
                    lalrpop_util::ParseError::User { error: _ } => {
                        ::core::panicking::panic("not yet implemented")
                    }
                };
            }
            pretty
        }
    }
    pub mod ir {
        #![allow(clippy::needless_borrow)]
        use std::collections::BTreeMap;
        use crate::parser::ast;
        pub struct __ProgramConfig {
            _uninhabited: std::convert::Infallible,
        }
        impl salsa::tracked_struct::Configuration for __ProgramConfig {
            type Id = Program;
            type Fields = (Vec<Function>, BTreeMap<Mangled, Symbol>);
            type Revisions = [salsa::Revision; 2];
            #[allow(clippy::unused_unit)]
            fn id_fields(fields: &Self::Fields) -> impl std::hash::Hash {
                ()
            }
            fn revision(
                revisions: &Self::Revisions,
                field_index: u32,
            ) -> salsa::Revision {
                revisions[field_index as usize]
            }
            fn new_revisions(current_revision: salsa::Revision) -> Self::Revisions {
                [current_revision; 2]
            }
            fn update_revisions(
                current_revision_: salsa::Revision,
                old_value_: &Self::Fields,
                new_value_: &Self::Fields,
                revisions_: &mut Self::Revisions,
            ) {
                if old_value_.0 != new_value_.0 {
                    revisions_[0] = current_revision_;
                }
                if old_value_.1 != new_value_.1 {
                    revisions_[1] = current_revision_;
                }
            }
        }
        pub struct Program(salsa::Id);
        #[automatically_derived]
        impl ::core::marker::Copy for Program {}
        #[automatically_derived]
        impl ::core::clone::Clone for Program {
            #[inline]
            fn clone(&self) -> Program {
                let _: ::core::clone::AssertParamIsClone<salsa::Id>;
                *self
            }
        }
        #[automatically_derived]
        impl ::core::marker::StructuralPartialEq for Program {}
        #[automatically_derived]
        impl ::core::cmp::PartialEq for Program {
            #[inline]
            fn eq(&self, other: &Program) -> bool {
                self.0 == other.0
            }
        }
        #[automatically_derived]
        impl ::core::cmp::PartialOrd for Program {
            #[inline]
            fn partial_cmp(
                &self,
                other: &Program,
            ) -> ::core::option::Option<::core::cmp::Ordering> {
                ::core::cmp::PartialOrd::partial_cmp(&self.0, &other.0)
            }
        }
        #[automatically_derived]
        impl ::core::marker::StructuralEq for Program {}
        #[automatically_derived]
        impl ::core::cmp::Eq for Program {
            #[inline]
            #[doc(hidden)]
            #[coverage(off)]
            fn assert_receiver_is_total_eq(&self) -> () {
                let _: ::core::cmp::AssertParamIsEq<salsa::Id>;
            }
        }
        #[automatically_derived]
        impl ::core::cmp::Ord for Program {
            #[inline]
            fn cmp(&self, other: &Program) -> ::core::cmp::Ordering {
                ::core::cmp::Ord::cmp(&self.0, &other.0)
            }
        }
        #[automatically_derived]
        impl ::core::hash::Hash for Program {
            #[inline]
            fn hash<__H: ::core::hash::Hasher>(&self, state: &mut __H) -> () {
                ::core::hash::Hash::hash(&self.0, state)
            }
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for Program {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                ::core::fmt::Formatter::debug_tuple_field1_finish(f, "Program", &&self.0)
            }
        }
        #[allow(dead_code, clippy::pedantic, clippy::complexity, clippy::style)]
        impl Program {
            pub fn new(
                __db: &<crate::Jar as salsa::jar::Jar<'_>>::DynDb,
                modul: Vec<Function>,
                symbols: BTreeMap<Mangled, Symbol>,
            ) -> Self {
                let (__jar, __runtime) = <_ as salsa::storage::HasJar<
                    crate::Jar,
                >>::jar(__db);
                let __ingredients = <crate::Jar as salsa::storage::HasIngredientsFor<
                    Program,
                >>::ingredient(__jar);
                let __id = __ingredients.0.new_struct(__runtime, (modul, symbols));
                __id
            }
            pub fn modul<'db>(
                self,
                __db: &'db <crate::Jar as salsa::jar::Jar<'_>>::DynDb,
            ) -> &'db Vec<Function> {
                let (__jar, __runtime) = <_ as salsa::storage::HasJar<
                    crate::Jar,
                >>::jar(__db);
                let __ingredients = <crate::Jar as salsa::storage::HasIngredientsFor<
                    Program,
                >>::ingredient(__jar);
                &__ingredients.1[0].field(__runtime, self).0
            }
            pub fn symbols<'db>(
                self,
                __db: &'db <crate::Jar as salsa::jar::Jar<'_>>::DynDb,
            ) -> &'db BTreeMap<Mangled, Symbol> {
                let (__jar, __runtime) = <_ as salsa::storage::HasJar<
                    crate::Jar,
                >>::jar(__db);
                let __ingredients = <crate::Jar as salsa::storage::HasIngredientsFor<
                    Program,
                >>::ingredient(__jar);
                &__ingredients.1[1].field(__runtime, self).1
            }
        }
        impl salsa::storage::IngredientsFor for Program {
            type Jar = crate::Jar;
            type Ingredients = (
                salsa::tracked_struct::TrackedStructIngredient<__ProgramConfig>,
                [salsa::tracked_struct::TrackedFieldIngredient<__ProgramConfig>; 2],
            );
            fn create_ingredients<DB>(
                routes: &mut salsa::routes::Routes<DB>,
            ) -> Self::Ingredients
            where
                DB: salsa::DbWithJar<Self::Jar> + salsa::storage::JarFromJars<Self::Jar>,
            {
                let struct_ingredient = {
                    let index = routes
                        .push(
                            |jars| {
                                let jar = <DB as salsa::storage::JarFromJars<
                                    Self::Jar,
                                >>::jar_from_jars(jars);
                                let ingredients = <_ as salsa::storage::HasIngredientsFor<
                                    Self,
                                >>::ingredient(jar);
                                &ingredients.0
                            },
                            |jars| {
                                let jar = <DB as salsa::storage::JarFromJars<
                                    Self::Jar,
                                >>::jar_from_jars_mut(jars);
                                let ingredients = <_ as salsa::storage::HasIngredientsFor<
                                    Self,
                                >>::ingredient_mut(jar);
                                &mut ingredients.0
                            },
                        );
                    salsa::tracked_struct::TrackedStructIngredient::new(index, "Program")
                };
                let field_ingredients = [
                    {
                        let index = routes
                            .push(
                                |jars| {
                                    let jar = <DB as salsa::storage::JarFromJars<
                                        Self::Jar,
                                    >>::jar_from_jars(jars);
                                    let ingredients = <_ as salsa::storage::HasIngredientsFor<
                                        Self,
                                    >>::ingredient(jar);
                                    &ingredients.1[0]
                                },
                                |jars| {
                                    let jar = <DB as salsa::storage::JarFromJars<
                                        Self::Jar,
                                    >>::jar_from_jars_mut(jars);
                                    let ingredients = <_ as salsa::storage::HasIngredientsFor<
                                        Self,
                                    >>::ingredient_mut(jar);
                                    &mut ingredients.1[0]
                                },
                            );
                        struct_ingredient.new_field_ingredient(index, 0, "modul")
                    },
                    {
                        let index = routes
                            .push(
                                |jars| {
                                    let jar = <DB as salsa::storage::JarFromJars<
                                        Self::Jar,
                                    >>::jar_from_jars(jars);
                                    let ingredients = <_ as salsa::storage::HasIngredientsFor<
                                        Self,
                                    >>::ingredient(jar);
                                    &ingredients.1[1]
                                },
                                |jars| {
                                    let jar = <DB as salsa::storage::JarFromJars<
                                        Self::Jar,
                                    >>::jar_from_jars_mut(jars);
                                    let ingredients = <_ as salsa::storage::HasIngredientsFor<
                                        Self,
                                    >>::ingredient_mut(jar);
                                    &mut ingredients.1[1]
                                },
                            );
                        struct_ingredient.new_field_ingredient(index, 1, "symbols")
                    },
                ];
                (struct_ingredient, field_ingredients)
            }
        }
        impl<DB> salsa::salsa_struct::SalsaStructInDb<DB> for Program
        where
            DB: ?Sized + salsa::DbWithJar<crate::Jar>,
        {
            fn register_dependent_fn(db: &DB, index: salsa::routes::IngredientIndex) {
                let (jar, _) = <_ as salsa::storage::HasJar<crate::Jar>>::jar(db);
                let ingredients = <crate::Jar as salsa::storage::HasIngredientsFor<
                    Program,
                >>::ingredient(jar);
                ingredients.0.register_dependent_fn(index)
            }
        }
        impl<DB> salsa::tracked_struct::TrackedStructInDb<DB> for Program
        where
            DB: ?Sized + salsa::DbWithJar<crate::Jar>,
        {
            fn database_key_index(self, db: &DB) -> salsa::DatabaseKeyIndex {
                let (jar, _) = <_ as salsa::storage::HasJar<crate::Jar>>::jar(db);
                let ingredients = <crate::Jar as salsa::storage::HasIngredientsFor<
                    Program,
                >>::ingredient(jar);
                ingredients.0.database_key_index(self)
            }
        }
        impl salsa::AsId for Program {
            fn as_id(self) -> salsa::Id {
                self.0
            }
            fn from_id(id: salsa::Id) -> Self {
                Program(id)
            }
        }
        impl ::salsa::DebugWithDb<<crate::Jar as salsa::jar::Jar<'_>>::DynDb>
        for Program {
            fn fmt(
                &self,
                f: &mut ::std::fmt::Formatter<'_>,
                _db: &<crate::Jar as salsa::jar::Jar<'_>>::DynDb,
            ) -> ::std::fmt::Result {
                #[allow(unused_imports)]
                use ::salsa::debug::helper::Fallback;
                let mut debug_struct = &mut f.debug_struct("Program");
                debug_struct = debug_struct.field("[salsa id]", &self.0.as_u32());
                debug_struct = debug_struct
                    .field(
                        "modul",
                        &::salsa::debug::helper::SalsaDebug::<
                            Vec<Function>,
                            <crate::Jar as salsa::jar::Jar<'_>>::DynDb,
                        >::salsa_debug(
                            #[allow(clippy::needless_borrow)]
                            &self.modul(_db),
                            _db,
                        ),
                    );
                debug_struct = debug_struct
                    .field(
                        "symbols",
                        &::salsa::debug::helper::SalsaDebug::<
                            BTreeMap<Mangled, Symbol>,
                            <crate::Jar as salsa::jar::Jar<'_>>::DynDb,
                        >::salsa_debug(
                            #[allow(clippy::needless_borrow)]
                            &self.symbols(_db),
                            _db,
                        ),
                    );
                debug_struct.finish()
            }
        }
        pub struct __FunctionConfig {
            _uninhabited: std::convert::Infallible,
        }
        impl salsa::tracked_struct::Configuration for __FunctionConfig {
            type Id = Function;
            type Fields = (String, Vec<Box<Function>>, Vec<InternedEffect>);
            type Revisions = [salsa::Revision; 3];
            #[allow(clippy::unused_unit)]
            fn id_fields(fields: &Self::Fields) -> impl std::hash::Hash {
                ()
            }
            fn revision(
                revisions: &Self::Revisions,
                field_index: u32,
            ) -> salsa::Revision {
                revisions[field_index as usize]
            }
            fn new_revisions(current_revision: salsa::Revision) -> Self::Revisions {
                [current_revision; 3]
            }
            fn update_revisions(
                current_revision_: salsa::Revision,
                old_value_: &Self::Fields,
                new_value_: &Self::Fields,
                revisions_: &mut Self::Revisions,
            ) {
                if old_value_.0 != new_value_.0 {
                    revisions_[0] = current_revision_;
                }
                if old_value_.1 != new_value_.1 {
                    revisions_[1] = current_revision_;
                }
                if old_value_.2 != new_value_.2 {
                    revisions_[2] = current_revision_;
                }
            }
        }
        pub struct Function(salsa::Id);
        #[automatically_derived]
        impl ::core::marker::Copy for Function {}
        #[automatically_derived]
        impl ::core::clone::Clone for Function {
            #[inline]
            fn clone(&self) -> Function {
                let _: ::core::clone::AssertParamIsClone<salsa::Id>;
                *self
            }
        }
        #[automatically_derived]
        impl ::core::marker::StructuralPartialEq for Function {}
        #[automatically_derived]
        impl ::core::cmp::PartialEq for Function {
            #[inline]
            fn eq(&self, other: &Function) -> bool {
                self.0 == other.0
            }
        }
        #[automatically_derived]
        impl ::core::cmp::PartialOrd for Function {
            #[inline]
            fn partial_cmp(
                &self,
                other: &Function,
            ) -> ::core::option::Option<::core::cmp::Ordering> {
                ::core::cmp::PartialOrd::partial_cmp(&self.0, &other.0)
            }
        }
        #[automatically_derived]
        impl ::core::marker::StructuralEq for Function {}
        #[automatically_derived]
        impl ::core::cmp::Eq for Function {
            #[inline]
            #[doc(hidden)]
            #[coverage(off)]
            fn assert_receiver_is_total_eq(&self) -> () {
                let _: ::core::cmp::AssertParamIsEq<salsa::Id>;
            }
        }
        #[automatically_derived]
        impl ::core::cmp::Ord for Function {
            #[inline]
            fn cmp(&self, other: &Function) -> ::core::cmp::Ordering {
                ::core::cmp::Ord::cmp(&self.0, &other.0)
            }
        }
        #[automatically_derived]
        impl ::core::hash::Hash for Function {
            #[inline]
            fn hash<__H: ::core::hash::Hasher>(&self, state: &mut __H) -> () {
                ::core::hash::Hash::hash(&self.0, state)
            }
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for Function {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                ::core::fmt::Formatter::debug_tuple_field1_finish(
                    f,
                    "Function",
                    &&self.0,
                )
            }
        }
        #[allow(dead_code, clippy::pedantic, clippy::complexity, clippy::style)]
        impl Function {
            pub fn new(
                __db: &<crate::Jar as salsa::jar::Jar<'_>>::DynDb,
                name: String,
                body: Vec<Box<Function>>,
                effects: Vec<InternedEffect>,
            ) -> Self {
                let (__jar, __runtime) = <_ as salsa::storage::HasJar<
                    crate::Jar,
                >>::jar(__db);
                let __ingredients = <crate::Jar as salsa::storage::HasIngredientsFor<
                    Function,
                >>::ingredient(__jar);
                let __id = __ingredients.0.new_struct(__runtime, (name, body, effects));
                __id
            }
            pub fn name<'db>(
                self,
                __db: &'db <crate::Jar as salsa::jar::Jar<'_>>::DynDb,
            ) -> &'db String {
                let (__jar, __runtime) = <_ as salsa::storage::HasJar<
                    crate::Jar,
                >>::jar(__db);
                let __ingredients = <crate::Jar as salsa::storage::HasIngredientsFor<
                    Function,
                >>::ingredient(__jar);
                &__ingredients.1[0].field(__runtime, self).0
            }
            pub fn body<'db>(
                self,
                __db: &'db <crate::Jar as salsa::jar::Jar<'_>>::DynDb,
            ) -> &'db Vec<Box<Function>> {
                let (__jar, __runtime) = <_ as salsa::storage::HasJar<
                    crate::Jar,
                >>::jar(__db);
                let __ingredients = <crate::Jar as salsa::storage::HasIngredientsFor<
                    Function,
                >>::ingredient(__jar);
                &__ingredients.1[1].field(__runtime, self).1
            }
            pub fn effects<'db>(
                self,
                __db: &'db <crate::Jar as salsa::jar::Jar<'_>>::DynDb,
            ) -> &'db Vec<InternedEffect> {
                let (__jar, __runtime) = <_ as salsa::storage::HasJar<
                    crate::Jar,
                >>::jar(__db);
                let __ingredients = <crate::Jar as salsa::storage::HasIngredientsFor<
                    Function,
                >>::ingredient(__jar);
                &__ingredients.1[2].field(__runtime, self).2
            }
        }
        impl salsa::storage::IngredientsFor for Function {
            type Jar = crate::Jar;
            type Ingredients = (
                salsa::tracked_struct::TrackedStructIngredient<__FunctionConfig>,
                [salsa::tracked_struct::TrackedFieldIngredient<__FunctionConfig>; 3],
            );
            fn create_ingredients<DB>(
                routes: &mut salsa::routes::Routes<DB>,
            ) -> Self::Ingredients
            where
                DB: salsa::DbWithJar<Self::Jar> + salsa::storage::JarFromJars<Self::Jar>,
            {
                let struct_ingredient = {
                    let index = routes
                        .push(
                            |jars| {
                                let jar = <DB as salsa::storage::JarFromJars<
                                    Self::Jar,
                                >>::jar_from_jars(jars);
                                let ingredients = <_ as salsa::storage::HasIngredientsFor<
                                    Self,
                                >>::ingredient(jar);
                                &ingredients.0
                            },
                            |jars| {
                                let jar = <DB as salsa::storage::JarFromJars<
                                    Self::Jar,
                                >>::jar_from_jars_mut(jars);
                                let ingredients = <_ as salsa::storage::HasIngredientsFor<
                                    Self,
                                >>::ingredient_mut(jar);
                                &mut ingredients.0
                            },
                        );
                    salsa::tracked_struct::TrackedStructIngredient::new(
                        index,
                        "Function",
                    )
                };
                let field_ingredients = [
                    {
                        let index = routes
                            .push(
                                |jars| {
                                    let jar = <DB as salsa::storage::JarFromJars<
                                        Self::Jar,
                                    >>::jar_from_jars(jars);
                                    let ingredients = <_ as salsa::storage::HasIngredientsFor<
                                        Self,
                                    >>::ingredient(jar);
                                    &ingredients.1[0]
                                },
                                |jars| {
                                    let jar = <DB as salsa::storage::JarFromJars<
                                        Self::Jar,
                                    >>::jar_from_jars_mut(jars);
                                    let ingredients = <_ as salsa::storage::HasIngredientsFor<
                                        Self,
                                    >>::ingredient_mut(jar);
                                    &mut ingredients.1[0]
                                },
                            );
                        struct_ingredient.new_field_ingredient(index, 0, "name")
                    },
                    {
                        let index = routes
                            .push(
                                |jars| {
                                    let jar = <DB as salsa::storage::JarFromJars<
                                        Self::Jar,
                                    >>::jar_from_jars(jars);
                                    let ingredients = <_ as salsa::storage::HasIngredientsFor<
                                        Self,
                                    >>::ingredient(jar);
                                    &ingredients.1[1]
                                },
                                |jars| {
                                    let jar = <DB as salsa::storage::JarFromJars<
                                        Self::Jar,
                                    >>::jar_from_jars_mut(jars);
                                    let ingredients = <_ as salsa::storage::HasIngredientsFor<
                                        Self,
                                    >>::ingredient_mut(jar);
                                    &mut ingredients.1[1]
                                },
                            );
                        struct_ingredient.new_field_ingredient(index, 1, "body")
                    },
                    {
                        let index = routes
                            .push(
                                |jars| {
                                    let jar = <DB as salsa::storage::JarFromJars<
                                        Self::Jar,
                                    >>::jar_from_jars(jars);
                                    let ingredients = <_ as salsa::storage::HasIngredientsFor<
                                        Self,
                                    >>::ingredient(jar);
                                    &ingredients.1[2]
                                },
                                |jars| {
                                    let jar = <DB as salsa::storage::JarFromJars<
                                        Self::Jar,
                                    >>::jar_from_jars_mut(jars);
                                    let ingredients = <_ as salsa::storage::HasIngredientsFor<
                                        Self,
                                    >>::ingredient_mut(jar);
                                    &mut ingredients.1[2]
                                },
                            );
                        struct_ingredient.new_field_ingredient(index, 2, "effects")
                    },
                ];
                (struct_ingredient, field_ingredients)
            }
        }
        impl<DB> salsa::salsa_struct::SalsaStructInDb<DB> for Function
        where
            DB: ?Sized + salsa::DbWithJar<crate::Jar>,
        {
            fn register_dependent_fn(db: &DB, index: salsa::routes::IngredientIndex) {
                let (jar, _) = <_ as salsa::storage::HasJar<crate::Jar>>::jar(db);
                let ingredients = <crate::Jar as salsa::storage::HasIngredientsFor<
                    Function,
                >>::ingredient(jar);
                ingredients.0.register_dependent_fn(index)
            }
        }
        impl<DB> salsa::tracked_struct::TrackedStructInDb<DB> for Function
        where
            DB: ?Sized + salsa::DbWithJar<crate::Jar>,
        {
            fn database_key_index(self, db: &DB) -> salsa::DatabaseKeyIndex {
                let (jar, _) = <_ as salsa::storage::HasJar<crate::Jar>>::jar(db);
                let ingredients = <crate::Jar as salsa::storage::HasIngredientsFor<
                    Function,
                >>::ingredient(jar);
                ingredients.0.database_key_index(self)
            }
        }
        impl salsa::AsId for Function {
            fn as_id(self) -> salsa::Id {
                self.0
            }
            fn from_id(id: salsa::Id) -> Self {
                Function(id)
            }
        }
        impl ::salsa::DebugWithDb<<crate::Jar as salsa::jar::Jar<'_>>::DynDb>
        for Function {
            fn fmt(
                &self,
                f: &mut ::std::fmt::Formatter<'_>,
                _db: &<crate::Jar as salsa::jar::Jar<'_>>::DynDb,
            ) -> ::std::fmt::Result {
                #[allow(unused_imports)]
                use ::salsa::debug::helper::Fallback;
                let mut debug_struct = &mut f.debug_struct("Function");
                debug_struct = debug_struct.field("[salsa id]", &self.0.as_u32());
                debug_struct = debug_struct
                    .field(
                        "name",
                        &::salsa::debug::helper::SalsaDebug::<
                            String,
                            <crate::Jar as salsa::jar::Jar<'_>>::DynDb,
                        >::salsa_debug(
                            #[allow(clippy::needless_borrow)]
                            &self.name(_db),
                            _db,
                        ),
                    );
                debug_struct = debug_struct
                    .field(
                        "body",
                        &::salsa::debug::helper::SalsaDebug::<
                            Vec<Box<Function>>,
                            <crate::Jar as salsa::jar::Jar<'_>>::DynDb,
                        >::salsa_debug(
                            #[allow(clippy::needless_borrow)]
                            &self.body(_db),
                            _db,
                        ),
                    );
                debug_struct = debug_struct
                    .field(
                        "effects",
                        &::salsa::debug::helper::SalsaDebug::<
                            Vec<InternedEffect>,
                            <crate::Jar as salsa::jar::Jar<'_>>::DynDb,
                        >::salsa_debug(
                            #[allow(clippy::needless_borrow)]
                            &self.effects(_db),
                            _db,
                        ),
                    );
                debug_struct.finish()
            }
        }
        pub struct InternedEffect(salsa::Id);
        #[automatically_derived]
        impl ::core::marker::Copy for InternedEffect {}
        #[automatically_derived]
        impl ::core::clone::Clone for InternedEffect {
            #[inline]
            fn clone(&self) -> InternedEffect {
                let _: ::core::clone::AssertParamIsClone<salsa::Id>;
                *self
            }
        }
        #[automatically_derived]
        impl ::core::marker::StructuralPartialEq for InternedEffect {}
        #[automatically_derived]
        impl ::core::cmp::PartialEq for InternedEffect {
            #[inline]
            fn eq(&self, other: &InternedEffect) -> bool {
                self.0 == other.0
            }
        }
        #[automatically_derived]
        impl ::core::cmp::PartialOrd for InternedEffect {
            #[inline]
            fn partial_cmp(
                &self,
                other: &InternedEffect,
            ) -> ::core::option::Option<::core::cmp::Ordering> {
                ::core::cmp::PartialOrd::partial_cmp(&self.0, &other.0)
            }
        }
        #[automatically_derived]
        impl ::core::marker::StructuralEq for InternedEffect {}
        #[automatically_derived]
        impl ::core::cmp::Eq for InternedEffect {
            #[inline]
            #[doc(hidden)]
            #[coverage(off)]
            fn assert_receiver_is_total_eq(&self) -> () {
                let _: ::core::cmp::AssertParamIsEq<salsa::Id>;
            }
        }
        #[automatically_derived]
        impl ::core::cmp::Ord for InternedEffect {
            #[inline]
            fn cmp(&self, other: &InternedEffect) -> ::core::cmp::Ordering {
                ::core::cmp::Ord::cmp(&self.0, &other.0)
            }
        }
        #[automatically_derived]
        impl ::core::hash::Hash for InternedEffect {
            #[inline]
            fn hash<__H: ::core::hash::Hasher>(&self, state: &mut __H) -> () {
                ::core::hash::Hash::hash(&self.0, state)
            }
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for InternedEffect {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                ::core::fmt::Formatter::debug_tuple_field1_finish(
                    f,
                    "InternedEffect",
                    &&self.0,
                )
            }
        }
        /// Internal struct used for interned item
        pub struct __InternedEffectData {
            effect: String,
        }
        #[automatically_derived]
        impl ::core::marker::StructuralEq for __InternedEffectData {}
        #[automatically_derived]
        impl ::core::cmp::Eq for __InternedEffectData {
            #[inline]
            #[doc(hidden)]
            #[coverage(off)]
            fn assert_receiver_is_total_eq(&self) -> () {
                let _: ::core::cmp::AssertParamIsEq<String>;
            }
        }
        #[automatically_derived]
        impl ::core::marker::StructuralPartialEq for __InternedEffectData {}
        #[automatically_derived]
        impl ::core::cmp::PartialEq for __InternedEffectData {
            #[inline]
            fn eq(&self, other: &__InternedEffectData) -> bool {
                self.effect == other.effect
            }
        }
        #[automatically_derived]
        impl ::core::hash::Hash for __InternedEffectData {
            #[inline]
            fn hash<__H: ::core::hash::Hasher>(&self, state: &mut __H) -> () {
                ::core::hash::Hash::hash(&self.effect, state)
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for __InternedEffectData {
            #[inline]
            fn clone(&self) -> __InternedEffectData {
                __InternedEffectData {
                    effect: ::core::clone::Clone::clone(&self.effect),
                }
            }
        }
        impl salsa::storage::IngredientsFor for InternedEffect {
            type Jar = crate::Jar;
            type Ingredients = salsa::interned::InternedIngredient<
                InternedEffect,
                __InternedEffectData,
            >;
            fn create_ingredients<DB>(
                routes: &mut salsa::routes::Routes<DB>,
            ) -> Self::Ingredients
            where
                DB: salsa::storage::JarFromJars<Self::Jar>,
            {
                let index = routes
                    .push(
                        |jars| {
                            let jar = <DB as salsa::storage::JarFromJars<
                                Self::Jar,
                            >>::jar_from_jars(jars);
                            <_ as salsa::storage::HasIngredientsFor<
                                Self,
                            >>::ingredient(jar)
                        },
                        |jars| {
                            let jar = <DB as salsa::storage::JarFromJars<
                                Self::Jar,
                            >>::jar_from_jars_mut(jars);
                            <_ as salsa::storage::HasIngredientsFor<
                                Self,
                            >>::ingredient_mut(jar)
                        },
                    );
                salsa::interned::InternedIngredient::new(index, "InternedEffect")
            }
        }
        impl salsa::AsId for InternedEffect {
            fn as_id(self) -> salsa::Id {
                self.0
            }
            fn from_id(id: salsa::Id) -> Self {
                InternedEffect(id)
            }
        }
        #[allow(dead_code, clippy::pedantic, clippy::complexity, clippy::style)]
        impl InternedEffect {
            pub fn effect(
                self,
                db: &<crate::Jar as salsa::jar::Jar<'_>>::DynDb,
            ) -> String {
                let (jar, runtime) = <_ as salsa::storage::HasJar<crate::Jar>>::jar(db);
                let ingredients = <crate::Jar as salsa::storage::HasIngredientsFor<
                    InternedEffect,
                >>::ingredient(jar);
                std::clone::Clone::clone(&ingredients.data(runtime, self).effect)
            }
            pub fn new(
                db: &<crate::Jar as salsa::jar::Jar<'_>>::DynDb,
                effect: String,
            ) -> Self {
                let (jar, runtime) = <_ as salsa::storage::HasJar<crate::Jar>>::jar(db);
                let ingredients = <crate::Jar as salsa::storage::HasIngredientsFor<
                    InternedEffect,
                >>::ingredient(jar);
                ingredients.intern(runtime, __InternedEffectData { effect })
            }
        }
        impl<DB> salsa::salsa_struct::SalsaStructInDb<DB> for InternedEffect
        where
            DB: ?Sized + salsa::DbWithJar<crate::Jar>,
        {
            fn register_dependent_fn(_db: &DB, _index: salsa::routes::IngredientIndex) {}
        }
        impl ::salsa::DebugWithDb<<crate::Jar as salsa::jar::Jar<'_>>::DynDb>
        for InternedEffect {
            fn fmt(
                &self,
                f: &mut ::std::fmt::Formatter<'_>,
                _db: &<crate::Jar as salsa::jar::Jar<'_>>::DynDb,
            ) -> ::std::fmt::Result {
                #[allow(unused_imports)]
                use ::salsa::debug::helper::Fallback;
                let mut debug_struct = &mut f.debug_struct("InternedEffect");
                debug_struct = debug_struct.field("[salsa id]", &self.0.as_u32());
                debug_struct = debug_struct
                    .field(
                        "effect",
                        &::salsa::debug::helper::SalsaDebug::<
                            String,
                            <crate::Jar as salsa::jar::Jar<'_>>::DynDb,
                        >::salsa_debug(
                            #[allow(clippy::needless_borrow)]
                            &self.effect(_db),
                            _db,
                        ),
                    );
                debug_struct.finish()
            }
        }
        pub struct Symbol(salsa::Id);
        #[automatically_derived]
        impl ::core::marker::Copy for Symbol {}
        #[automatically_derived]
        impl ::core::clone::Clone for Symbol {
            #[inline]
            fn clone(&self) -> Symbol {
                let _: ::core::clone::AssertParamIsClone<salsa::Id>;
                *self
            }
        }
        #[automatically_derived]
        impl ::core::marker::StructuralPartialEq for Symbol {}
        #[automatically_derived]
        impl ::core::cmp::PartialEq for Symbol {
            #[inline]
            fn eq(&self, other: &Symbol) -> bool {
                self.0 == other.0
            }
        }
        #[automatically_derived]
        impl ::core::cmp::PartialOrd for Symbol {
            #[inline]
            fn partial_cmp(
                &self,
                other: &Symbol,
            ) -> ::core::option::Option<::core::cmp::Ordering> {
                ::core::cmp::PartialOrd::partial_cmp(&self.0, &other.0)
            }
        }
        #[automatically_derived]
        impl ::core::marker::StructuralEq for Symbol {}
        #[automatically_derived]
        impl ::core::cmp::Eq for Symbol {
            #[inline]
            #[doc(hidden)]
            #[coverage(off)]
            fn assert_receiver_is_total_eq(&self) -> () {
                let _: ::core::cmp::AssertParamIsEq<salsa::Id>;
            }
        }
        #[automatically_derived]
        impl ::core::cmp::Ord for Symbol {
            #[inline]
            fn cmp(&self, other: &Symbol) -> ::core::cmp::Ordering {
                ::core::cmp::Ord::cmp(&self.0, &other.0)
            }
        }
        #[automatically_derived]
        impl ::core::hash::Hash for Symbol {
            #[inline]
            fn hash<__H: ::core::hash::Hasher>(&self, state: &mut __H) -> () {
                ::core::hash::Hash::hash(&self.0, state)
            }
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for Symbol {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                ::core::fmt::Formatter::debug_tuple_field1_finish(f, "Symbol", &&self.0)
            }
        }
        /// Internal struct used for interned item
        pub struct __SymbolData {
            symbol: Mangled,
        }
        #[automatically_derived]
        impl ::core::marker::StructuralEq for __SymbolData {}
        #[automatically_derived]
        impl ::core::cmp::Eq for __SymbolData {
            #[inline]
            #[doc(hidden)]
            #[coverage(off)]
            fn assert_receiver_is_total_eq(&self) -> () {
                let _: ::core::cmp::AssertParamIsEq<Mangled>;
            }
        }
        #[automatically_derived]
        impl ::core::marker::StructuralPartialEq for __SymbolData {}
        #[automatically_derived]
        impl ::core::cmp::PartialEq for __SymbolData {
            #[inline]
            fn eq(&self, other: &__SymbolData) -> bool {
                self.symbol == other.symbol
            }
        }
        #[automatically_derived]
        impl ::core::hash::Hash for __SymbolData {
            #[inline]
            fn hash<__H: ::core::hash::Hasher>(&self, state: &mut __H) -> () {
                ::core::hash::Hash::hash(&self.symbol, state)
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for __SymbolData {
            #[inline]
            fn clone(&self) -> __SymbolData {
                __SymbolData {
                    symbol: ::core::clone::Clone::clone(&self.symbol),
                }
            }
        }
        impl salsa::storage::IngredientsFor for Symbol {
            type Jar = crate::Jar;
            type Ingredients = salsa::interned::InternedIngredient<Symbol, __SymbolData>;
            fn create_ingredients<DB>(
                routes: &mut salsa::routes::Routes<DB>,
            ) -> Self::Ingredients
            where
                DB: salsa::storage::JarFromJars<Self::Jar>,
            {
                let index = routes
                    .push(
                        |jars| {
                            let jar = <DB as salsa::storage::JarFromJars<
                                Self::Jar,
                            >>::jar_from_jars(jars);
                            <_ as salsa::storage::HasIngredientsFor<
                                Self,
                            >>::ingredient(jar)
                        },
                        |jars| {
                            let jar = <DB as salsa::storage::JarFromJars<
                                Self::Jar,
                            >>::jar_from_jars_mut(jars);
                            <_ as salsa::storage::HasIngredientsFor<
                                Self,
                            >>::ingredient_mut(jar)
                        },
                    );
                salsa::interned::InternedIngredient::new(index, "Symbol")
            }
        }
        impl salsa::AsId for Symbol {
            fn as_id(self) -> salsa::Id {
                self.0
            }
            fn from_id(id: salsa::Id) -> Self {
                Symbol(id)
            }
        }
        #[allow(dead_code, clippy::pedantic, clippy::complexity, clippy::style)]
        impl Symbol {
            pub fn symbol<'db>(
                self,
                db: &'db <crate::Jar as salsa::jar::Jar<'_>>::DynDb,
            ) -> &'db Mangled {
                let (jar, runtime) = <_ as salsa::storage::HasJar<crate::Jar>>::jar(db);
                let ingredients = <crate::Jar as salsa::storage::HasIngredientsFor<
                    Symbol,
                >>::ingredient(jar);
                &ingredients.data(runtime, self).symbol
            }
            pub fn new(
                db: &<crate::Jar as salsa::jar::Jar<'_>>::DynDb,
                symbol: Mangled,
            ) -> Self {
                let (jar, runtime) = <_ as salsa::storage::HasJar<crate::Jar>>::jar(db);
                let ingredients = <crate::Jar as salsa::storage::HasIngredientsFor<
                    Symbol,
                >>::ingredient(jar);
                ingredients.intern(runtime, __SymbolData { symbol })
            }
        }
        impl<DB> salsa::salsa_struct::SalsaStructInDb<DB> for Symbol
        where
            DB: ?Sized + salsa::DbWithJar<crate::Jar>,
        {
            fn register_dependent_fn(_db: &DB, _index: salsa::routes::IngredientIndex) {}
        }
        impl ::salsa::DebugWithDb<<crate::Jar as salsa::jar::Jar<'_>>::DynDb>
        for Symbol {
            fn fmt(
                &self,
                f: &mut ::std::fmt::Formatter<'_>,
                _db: &<crate::Jar as salsa::jar::Jar<'_>>::DynDb,
            ) -> ::std::fmt::Result {
                #[allow(unused_imports)]
                use ::salsa::debug::helper::Fallback;
                let mut debug_struct = &mut f.debug_struct("Symbol");
                debug_struct = debug_struct.field("[salsa id]", &self.0.as_u32());
                debug_struct = debug_struct
                    .field(
                        "symbol",
                        &::salsa::debug::helper::SalsaDebug::<
                            Mangled,
                            <crate::Jar as salsa::jar::Jar<'_>>::DynDb,
                        >::salsa_debug(
                            #[allow(clippy::needless_borrow)]
                            &self.symbol(_db),
                            _db,
                        ),
                    );
                debug_struct.finish()
            }
        }
        pub struct __EffectDefConfig {
            _uninhabited: std::convert::Infallible,
        }
        impl salsa::tracked_struct::Configuration for __EffectDefConfig {
            type Id = EffectDef;
            type Fields = (ast::EffectDef,);
            type Revisions = [salsa::Revision; 1];
            #[allow(clippy::unused_unit)]
            fn id_fields(fields: &Self::Fields) -> impl std::hash::Hash {
                ()
            }
            fn revision(
                revisions: &Self::Revisions,
                field_index: u32,
            ) -> salsa::Revision {
                revisions[field_index as usize]
            }
            fn new_revisions(current_revision: salsa::Revision) -> Self::Revisions {
                [current_revision; 1]
            }
            fn update_revisions(
                current_revision_: salsa::Revision,
                old_value_: &Self::Fields,
                new_value_: &Self::Fields,
                revisions_: &mut Self::Revisions,
            ) {
                if old_value_.0 != new_value_.0 {
                    revisions_[0] = current_revision_;
                }
            }
        }
        pub struct EffectDef(salsa::Id);
        #[automatically_derived]
        impl ::core::marker::Copy for EffectDef {}
        #[automatically_derived]
        impl ::core::clone::Clone for EffectDef {
            #[inline]
            fn clone(&self) -> EffectDef {
                let _: ::core::clone::AssertParamIsClone<salsa::Id>;
                *self
            }
        }
        #[automatically_derived]
        impl ::core::marker::StructuralPartialEq for EffectDef {}
        #[automatically_derived]
        impl ::core::cmp::PartialEq for EffectDef {
            #[inline]
            fn eq(&self, other: &EffectDef) -> bool {
                self.0 == other.0
            }
        }
        #[automatically_derived]
        impl ::core::cmp::PartialOrd for EffectDef {
            #[inline]
            fn partial_cmp(
                &self,
                other: &EffectDef,
            ) -> ::core::option::Option<::core::cmp::Ordering> {
                ::core::cmp::PartialOrd::partial_cmp(&self.0, &other.0)
            }
        }
        #[automatically_derived]
        impl ::core::marker::StructuralEq for EffectDef {}
        #[automatically_derived]
        impl ::core::cmp::Eq for EffectDef {
            #[inline]
            #[doc(hidden)]
            #[coverage(off)]
            fn assert_receiver_is_total_eq(&self) -> () {
                let _: ::core::cmp::AssertParamIsEq<salsa::Id>;
            }
        }
        #[automatically_derived]
        impl ::core::cmp::Ord for EffectDef {
            #[inline]
            fn cmp(&self, other: &EffectDef) -> ::core::cmp::Ordering {
                ::core::cmp::Ord::cmp(&self.0, &other.0)
            }
        }
        #[automatically_derived]
        impl ::core::hash::Hash for EffectDef {
            #[inline]
            fn hash<__H: ::core::hash::Hasher>(&self, state: &mut __H) -> () {
                ::core::hash::Hash::hash(&self.0, state)
            }
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for EffectDef {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                ::core::fmt::Formatter::debug_tuple_field1_finish(
                    f,
                    "EffectDef",
                    &&self.0,
                )
            }
        }
        #[allow(dead_code, clippy::pedantic, clippy::complexity, clippy::style)]
        impl EffectDef {
            pub fn new(
                __db: &<crate::Jar as salsa::jar::Jar<'_>>::DynDb,
                effect: ast::EffectDef,
            ) -> Self {
                let (__jar, __runtime) = <_ as salsa::storage::HasJar<
                    crate::Jar,
                >>::jar(__db);
                let __ingredients = <crate::Jar as salsa::storage::HasIngredientsFor<
                    EffectDef,
                >>::ingredient(__jar);
                let __id = __ingredients.0.new_struct(__runtime, (effect,));
                __id
            }
            pub fn effect<'db>(
                self,
                __db: &'db <crate::Jar as salsa::jar::Jar<'_>>::DynDb,
            ) -> &'db ast::EffectDef {
                let (__jar, __runtime) = <_ as salsa::storage::HasJar<
                    crate::Jar,
                >>::jar(__db);
                let __ingredients = <crate::Jar as salsa::storage::HasIngredientsFor<
                    EffectDef,
                >>::ingredient(__jar);
                &__ingredients.1[0].field(__runtime, self).0
            }
        }
        impl salsa::storage::IngredientsFor for EffectDef {
            type Jar = crate::Jar;
            type Ingredients = (
                salsa::tracked_struct::TrackedStructIngredient<__EffectDefConfig>,
                [salsa::tracked_struct::TrackedFieldIngredient<__EffectDefConfig>; 1],
            );
            fn create_ingredients<DB>(
                routes: &mut salsa::routes::Routes<DB>,
            ) -> Self::Ingredients
            where
                DB: salsa::DbWithJar<Self::Jar> + salsa::storage::JarFromJars<Self::Jar>,
            {
                let struct_ingredient = {
                    let index = routes
                        .push(
                            |jars| {
                                let jar = <DB as salsa::storage::JarFromJars<
                                    Self::Jar,
                                >>::jar_from_jars(jars);
                                let ingredients = <_ as salsa::storage::HasIngredientsFor<
                                    Self,
                                >>::ingredient(jar);
                                &ingredients.0
                            },
                            |jars| {
                                let jar = <DB as salsa::storage::JarFromJars<
                                    Self::Jar,
                                >>::jar_from_jars_mut(jars);
                                let ingredients = <_ as salsa::storage::HasIngredientsFor<
                                    Self,
                                >>::ingredient_mut(jar);
                                &mut ingredients.0
                            },
                        );
                    salsa::tracked_struct::TrackedStructIngredient::new(
                        index,
                        "EffectDef",
                    )
                };
                let field_ingredients = [
                    {
                        let index = routes
                            .push(
                                |jars| {
                                    let jar = <DB as salsa::storage::JarFromJars<
                                        Self::Jar,
                                    >>::jar_from_jars(jars);
                                    let ingredients = <_ as salsa::storage::HasIngredientsFor<
                                        Self,
                                    >>::ingredient(jar);
                                    &ingredients.1[0]
                                },
                                |jars| {
                                    let jar = <DB as salsa::storage::JarFromJars<
                                        Self::Jar,
                                    >>::jar_from_jars_mut(jars);
                                    let ingredients = <_ as salsa::storage::HasIngredientsFor<
                                        Self,
                                    >>::ingredient_mut(jar);
                                    &mut ingredients.1[0]
                                },
                            );
                        struct_ingredient.new_field_ingredient(index, 0, "effect")
                    },
                ];
                (struct_ingredient, field_ingredients)
            }
        }
        impl<DB> salsa::salsa_struct::SalsaStructInDb<DB> for EffectDef
        where
            DB: ?Sized + salsa::DbWithJar<crate::Jar>,
        {
            fn register_dependent_fn(db: &DB, index: salsa::routes::IngredientIndex) {
                let (jar, _) = <_ as salsa::storage::HasJar<crate::Jar>>::jar(db);
                let ingredients = <crate::Jar as salsa::storage::HasIngredientsFor<
                    EffectDef,
                >>::ingredient(jar);
                ingredients.0.register_dependent_fn(index)
            }
        }
        impl<DB> salsa::tracked_struct::TrackedStructInDb<DB> for EffectDef
        where
            DB: ?Sized + salsa::DbWithJar<crate::Jar>,
        {
            fn database_key_index(self, db: &DB) -> salsa::DatabaseKeyIndex {
                let (jar, _) = <_ as salsa::storage::HasJar<crate::Jar>>::jar(db);
                let ingredients = <crate::Jar as salsa::storage::HasIngredientsFor<
                    EffectDef,
                >>::ingredient(jar);
                ingredients.0.database_key_index(self)
            }
        }
        impl salsa::AsId for EffectDef {
            fn as_id(self) -> salsa::Id {
                self.0
            }
            fn from_id(id: salsa::Id) -> Self {
                EffectDef(id)
            }
        }
        impl ::salsa::DebugWithDb<<crate::Jar as salsa::jar::Jar<'_>>::DynDb>
        for EffectDef {
            fn fmt(
                &self,
                f: &mut ::std::fmt::Formatter<'_>,
                _db: &<crate::Jar as salsa::jar::Jar<'_>>::DynDb,
            ) -> ::std::fmt::Result {
                #[allow(unused_imports)]
                use ::salsa::debug::helper::Fallback;
                let mut debug_struct = &mut f.debug_struct("EffectDef");
                debug_struct = debug_struct.field("[salsa id]", &self.0.as_u32());
                debug_struct = debug_struct
                    .field(
                        "effect",
                        &::salsa::debug::helper::SalsaDebug::<
                            ast::EffectDef,
                            <crate::Jar as salsa::jar::Jar<'_>>::DynDb,
                        >::salsa_debug(
                            #[allow(clippy::needless_borrow)]
                            &self.effect(_db),
                            _db,
                        ),
                    );
                debug_struct.finish()
            }
        }
        pub struct __ImportConfig {
            _uninhabited: std::convert::Infallible,
        }
        impl salsa::tracked_struct::Configuration for __ImportConfig {
            type Id = Import;
            type Fields = (Vec<String>, String);
            type Revisions = [salsa::Revision; 2];
            #[allow(clippy::unused_unit)]
            fn id_fields(fields: &Self::Fields) -> impl std::hash::Hash {
                ()
            }
            fn revision(
                revisions: &Self::Revisions,
                field_index: u32,
            ) -> salsa::Revision {
                revisions[field_index as usize]
            }
            fn new_revisions(current_revision: salsa::Revision) -> Self::Revisions {
                [current_revision; 2]
            }
            fn update_revisions(
                current_revision_: salsa::Revision,
                old_value_: &Self::Fields,
                new_value_: &Self::Fields,
                revisions_: &mut Self::Revisions,
            ) {
                if old_value_.0 != new_value_.0 {
                    revisions_[0] = current_revision_;
                }
                if old_value_.1 != new_value_.1 {
                    revisions_[1] = current_revision_;
                }
            }
        }
        pub struct Import(salsa::Id);
        #[automatically_derived]
        impl ::core::marker::Copy for Import {}
        #[automatically_derived]
        impl ::core::clone::Clone for Import {
            #[inline]
            fn clone(&self) -> Import {
                let _: ::core::clone::AssertParamIsClone<salsa::Id>;
                *self
            }
        }
        #[automatically_derived]
        impl ::core::marker::StructuralPartialEq for Import {}
        #[automatically_derived]
        impl ::core::cmp::PartialEq for Import {
            #[inline]
            fn eq(&self, other: &Import) -> bool {
                self.0 == other.0
            }
        }
        #[automatically_derived]
        impl ::core::cmp::PartialOrd for Import {
            #[inline]
            fn partial_cmp(
                &self,
                other: &Import,
            ) -> ::core::option::Option<::core::cmp::Ordering> {
                ::core::cmp::PartialOrd::partial_cmp(&self.0, &other.0)
            }
        }
        #[automatically_derived]
        impl ::core::marker::StructuralEq for Import {}
        #[automatically_derived]
        impl ::core::cmp::Eq for Import {
            #[inline]
            #[doc(hidden)]
            #[coverage(off)]
            fn assert_receiver_is_total_eq(&self) -> () {
                let _: ::core::cmp::AssertParamIsEq<salsa::Id>;
            }
        }
        #[automatically_derived]
        impl ::core::cmp::Ord for Import {
            #[inline]
            fn cmp(&self, other: &Import) -> ::core::cmp::Ordering {
                ::core::cmp::Ord::cmp(&self.0, &other.0)
            }
        }
        #[automatically_derived]
        impl ::core::hash::Hash for Import {
            #[inline]
            fn hash<__H: ::core::hash::Hasher>(&self, state: &mut __H) -> () {
                ::core::hash::Hash::hash(&self.0, state)
            }
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for Import {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                ::core::fmt::Formatter::debug_tuple_field1_finish(f, "Import", &&self.0)
            }
        }
        #[allow(dead_code, clippy::pedantic, clippy::complexity, clippy::style)]
        impl Import {
            pub fn new(
                __db: &<crate::Jar as salsa::jar::Jar<'_>>::DynDb,
                imports: Vec<String>,
                module: String,
            ) -> Self {
                let (__jar, __runtime) = <_ as salsa::storage::HasJar<
                    crate::Jar,
                >>::jar(__db);
                let __ingredients = <crate::Jar as salsa::storage::HasIngredientsFor<
                    Import,
                >>::ingredient(__jar);
                let __id = __ingredients.0.new_struct(__runtime, (imports, module));
                __id
            }
            pub fn imports<'db>(
                self,
                __db: &'db <crate::Jar as salsa::jar::Jar<'_>>::DynDb,
            ) -> &'db Vec<String> {
                let (__jar, __runtime) = <_ as salsa::storage::HasJar<
                    crate::Jar,
                >>::jar(__db);
                let __ingredients = <crate::Jar as salsa::storage::HasIngredientsFor<
                    Import,
                >>::ingredient(__jar);
                &__ingredients.1[0].field(__runtime, self).0
            }
            pub fn module<'db>(
                self,
                __db: &'db <crate::Jar as salsa::jar::Jar<'_>>::DynDb,
            ) -> &'db String {
                let (__jar, __runtime) = <_ as salsa::storage::HasJar<
                    crate::Jar,
                >>::jar(__db);
                let __ingredients = <crate::Jar as salsa::storage::HasIngredientsFor<
                    Import,
                >>::ingredient(__jar);
                &__ingredients.1[1].field(__runtime, self).1
            }
        }
        impl salsa::storage::IngredientsFor for Import {
            type Jar = crate::Jar;
            type Ingredients = (
                salsa::tracked_struct::TrackedStructIngredient<__ImportConfig>,
                [salsa::tracked_struct::TrackedFieldIngredient<__ImportConfig>; 2],
            );
            fn create_ingredients<DB>(
                routes: &mut salsa::routes::Routes<DB>,
            ) -> Self::Ingredients
            where
                DB: salsa::DbWithJar<Self::Jar> + salsa::storage::JarFromJars<Self::Jar>,
            {
                let struct_ingredient = {
                    let index = routes
                        .push(
                            |jars| {
                                let jar = <DB as salsa::storage::JarFromJars<
                                    Self::Jar,
                                >>::jar_from_jars(jars);
                                let ingredients = <_ as salsa::storage::HasIngredientsFor<
                                    Self,
                                >>::ingredient(jar);
                                &ingredients.0
                            },
                            |jars| {
                                let jar = <DB as salsa::storage::JarFromJars<
                                    Self::Jar,
                                >>::jar_from_jars_mut(jars);
                                let ingredients = <_ as salsa::storage::HasIngredientsFor<
                                    Self,
                                >>::ingredient_mut(jar);
                                &mut ingredients.0
                            },
                        );
                    salsa::tracked_struct::TrackedStructIngredient::new(index, "Import")
                };
                let field_ingredients = [
                    {
                        let index = routes
                            .push(
                                |jars| {
                                    let jar = <DB as salsa::storage::JarFromJars<
                                        Self::Jar,
                                    >>::jar_from_jars(jars);
                                    let ingredients = <_ as salsa::storage::HasIngredientsFor<
                                        Self,
                                    >>::ingredient(jar);
                                    &ingredients.1[0]
                                },
                                |jars| {
                                    let jar = <DB as salsa::storage::JarFromJars<
                                        Self::Jar,
                                    >>::jar_from_jars_mut(jars);
                                    let ingredients = <_ as salsa::storage::HasIngredientsFor<
                                        Self,
                                    >>::ingredient_mut(jar);
                                    &mut ingredients.1[0]
                                },
                            );
                        struct_ingredient.new_field_ingredient(index, 0, "imports")
                    },
                    {
                        let index = routes
                            .push(
                                |jars| {
                                    let jar = <DB as salsa::storage::JarFromJars<
                                        Self::Jar,
                                    >>::jar_from_jars(jars);
                                    let ingredients = <_ as salsa::storage::HasIngredientsFor<
                                        Self,
                                    >>::ingredient(jar);
                                    &ingredients.1[1]
                                },
                                |jars| {
                                    let jar = <DB as salsa::storage::JarFromJars<
                                        Self::Jar,
                                    >>::jar_from_jars_mut(jars);
                                    let ingredients = <_ as salsa::storage::HasIngredientsFor<
                                        Self,
                                    >>::ingredient_mut(jar);
                                    &mut ingredients.1[1]
                                },
                            );
                        struct_ingredient.new_field_ingredient(index, 1, "module")
                    },
                ];
                (struct_ingredient, field_ingredients)
            }
        }
        impl<DB> salsa::salsa_struct::SalsaStructInDb<DB> for Import
        where
            DB: ?Sized + salsa::DbWithJar<crate::Jar>,
        {
            fn register_dependent_fn(db: &DB, index: salsa::routes::IngredientIndex) {
                let (jar, _) = <_ as salsa::storage::HasJar<crate::Jar>>::jar(db);
                let ingredients = <crate::Jar as salsa::storage::HasIngredientsFor<
                    Import,
                >>::ingredient(jar);
                ingredients.0.register_dependent_fn(index)
            }
        }
        impl<DB> salsa::tracked_struct::TrackedStructInDb<DB> for Import
        where
            DB: ?Sized + salsa::DbWithJar<crate::Jar>,
        {
            fn database_key_index(self, db: &DB) -> salsa::DatabaseKeyIndex {
                let (jar, _) = <_ as salsa::storage::HasJar<crate::Jar>>::jar(db);
                let ingredients = <crate::Jar as salsa::storage::HasIngredientsFor<
                    Import,
                >>::ingredient(jar);
                ingredients.0.database_key_index(self)
            }
        }
        impl salsa::AsId for Import {
            fn as_id(self) -> salsa::Id {
                self.0
            }
            fn from_id(id: salsa::Id) -> Self {
                Import(id)
            }
        }
        impl ::salsa::DebugWithDb<<crate::Jar as salsa::jar::Jar<'_>>::DynDb>
        for Import {
            fn fmt(
                &self,
                f: &mut ::std::fmt::Formatter<'_>,
                _db: &<crate::Jar as salsa::jar::Jar<'_>>::DynDb,
            ) -> ::std::fmt::Result {
                #[allow(unused_imports)]
                use ::salsa::debug::helper::Fallback;
                let mut debug_struct = &mut f.debug_struct("Import");
                debug_struct = debug_struct.field("[salsa id]", &self.0.as_u32());
                debug_struct = debug_struct
                    .field(
                        "imports",
                        &::salsa::debug::helper::SalsaDebug::<
                            Vec<String>,
                            <crate::Jar as salsa::jar::Jar<'_>>::DynDb,
                        >::salsa_debug(
                            #[allow(clippy::needless_borrow)]
                            &self.imports(_db),
                            _db,
                        ),
                    );
                debug_struct = debug_struct
                    .field(
                        "module",
                        &::salsa::debug::helper::SalsaDebug::<
                            String,
                            <crate::Jar as salsa::jar::Jar<'_>>::DynDb,
                        >::salsa_debug(
                            #[allow(clippy::needless_borrow)]
                            &self.module(_db),
                            _db,
                        ),
                    );
                debug_struct.finish()
            }
        }
        pub struct Mangled(salsa::Id);
        #[automatically_derived]
        impl ::core::marker::Copy for Mangled {}
        #[automatically_derived]
        impl ::core::clone::Clone for Mangled {
            #[inline]
            fn clone(&self) -> Mangled {
                let _: ::core::clone::AssertParamIsClone<salsa::Id>;
                *self
            }
        }
        #[automatically_derived]
        impl ::core::marker::StructuralPartialEq for Mangled {}
        #[automatically_derived]
        impl ::core::cmp::PartialEq for Mangled {
            #[inline]
            fn eq(&self, other: &Mangled) -> bool {
                self.0 == other.0
            }
        }
        #[automatically_derived]
        impl ::core::cmp::PartialOrd for Mangled {
            #[inline]
            fn partial_cmp(
                &self,
                other: &Mangled,
            ) -> ::core::option::Option<::core::cmp::Ordering> {
                ::core::cmp::PartialOrd::partial_cmp(&self.0, &other.0)
            }
        }
        #[automatically_derived]
        impl ::core::marker::StructuralEq for Mangled {}
        #[automatically_derived]
        impl ::core::cmp::Eq for Mangled {
            #[inline]
            #[doc(hidden)]
            #[coverage(off)]
            fn assert_receiver_is_total_eq(&self) -> () {
                let _: ::core::cmp::AssertParamIsEq<salsa::Id>;
            }
        }
        #[automatically_derived]
        impl ::core::cmp::Ord for Mangled {
            #[inline]
            fn cmp(&self, other: &Mangled) -> ::core::cmp::Ordering {
                ::core::cmp::Ord::cmp(&self.0, &other.0)
            }
        }
        #[automatically_derived]
        impl ::core::hash::Hash for Mangled {
            #[inline]
            fn hash<__H: ::core::hash::Hasher>(&self, state: &mut __H) -> () {
                ::core::hash::Hash::hash(&self.0, state)
            }
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for Mangled {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                ::core::fmt::Formatter::debug_tuple_field1_finish(f, "Mangled", &&self.0)
            }
        }
        /// Internal struct used for interned item
        pub struct __MangledData {
            mangled: String,
        }
        #[automatically_derived]
        impl ::core::marker::StructuralEq for __MangledData {}
        #[automatically_derived]
        impl ::core::cmp::Eq for __MangledData {
            #[inline]
            #[doc(hidden)]
            #[coverage(off)]
            fn assert_receiver_is_total_eq(&self) -> () {
                let _: ::core::cmp::AssertParamIsEq<String>;
            }
        }
        #[automatically_derived]
        impl ::core::marker::StructuralPartialEq for __MangledData {}
        #[automatically_derived]
        impl ::core::cmp::PartialEq for __MangledData {
            #[inline]
            fn eq(&self, other: &__MangledData) -> bool {
                self.mangled == other.mangled
            }
        }
        #[automatically_derived]
        impl ::core::hash::Hash for __MangledData {
            #[inline]
            fn hash<__H: ::core::hash::Hasher>(&self, state: &mut __H) -> () {
                ::core::hash::Hash::hash(&self.mangled, state)
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for __MangledData {
            #[inline]
            fn clone(&self) -> __MangledData {
                __MangledData {
                    mangled: ::core::clone::Clone::clone(&self.mangled),
                }
            }
        }
        impl salsa::storage::IngredientsFor for Mangled {
            type Jar = crate::Jar;
            type Ingredients = salsa::interned::InternedIngredient<
                Mangled,
                __MangledData,
            >;
            fn create_ingredients<DB>(
                routes: &mut salsa::routes::Routes<DB>,
            ) -> Self::Ingredients
            where
                DB: salsa::storage::JarFromJars<Self::Jar>,
            {
                let index = routes
                    .push(
                        |jars| {
                            let jar = <DB as salsa::storage::JarFromJars<
                                Self::Jar,
                            >>::jar_from_jars(jars);
                            <_ as salsa::storage::HasIngredientsFor<
                                Self,
                            >>::ingredient(jar)
                        },
                        |jars| {
                            let jar = <DB as salsa::storage::JarFromJars<
                                Self::Jar,
                            >>::jar_from_jars_mut(jars);
                            <_ as salsa::storage::HasIngredientsFor<
                                Self,
                            >>::ingredient_mut(jar)
                        },
                    );
                salsa::interned::InternedIngredient::new(index, "Mangled")
            }
        }
        impl salsa::AsId for Mangled {
            fn as_id(self) -> salsa::Id {
                self.0
            }
            fn from_id(id: salsa::Id) -> Self {
                Mangled(id)
            }
        }
        #[allow(dead_code, clippy::pedantic, clippy::complexity, clippy::style)]
        impl Mangled {
            pub fn mangled<'db>(
                self,
                db: &'db <crate::Jar as salsa::jar::Jar<'_>>::DynDb,
            ) -> &'db String {
                let (jar, runtime) = <_ as salsa::storage::HasJar<crate::Jar>>::jar(db);
                let ingredients = <crate::Jar as salsa::storage::HasIngredientsFor<
                    Mangled,
                >>::ingredient(jar);
                &ingredients.data(runtime, self).mangled
            }
            pub fn new(
                db: &<crate::Jar as salsa::jar::Jar<'_>>::DynDb,
                mangled: String,
            ) -> Self {
                let (jar, runtime) = <_ as salsa::storage::HasJar<crate::Jar>>::jar(db);
                let ingredients = <crate::Jar as salsa::storage::HasIngredientsFor<
                    Mangled,
                >>::ingredient(jar);
                ingredients.intern(runtime, __MangledData { mangled })
            }
        }
        impl<DB> salsa::salsa_struct::SalsaStructInDb<DB> for Mangled
        where
            DB: ?Sized + salsa::DbWithJar<crate::Jar>,
        {
            fn register_dependent_fn(_db: &DB, _index: salsa::routes::IngredientIndex) {}
        }
        impl ::salsa::DebugWithDb<<crate::Jar as salsa::jar::Jar<'_>>::DynDb>
        for Mangled {
            fn fmt(
                &self,
                f: &mut ::std::fmt::Formatter<'_>,
                _db: &<crate::Jar as salsa::jar::Jar<'_>>::DynDb,
            ) -> ::std::fmt::Result {
                #[allow(unused_imports)]
                use ::salsa::debug::helper::Fallback;
                let mut debug_struct = &mut f.debug_struct("Mangled");
                debug_struct = debug_struct.field("[salsa id]", &self.0.as_u32());
                debug_struct = debug_struct
                    .field(
                        "mangled",
                        &::salsa::debug::helper::SalsaDebug::<
                            String,
                            <crate::Jar as salsa::jar::Jar<'_>>::DynDb,
                        >::salsa_debug(
                            #[allow(clippy::needless_borrow)]
                            &self.mangled(_db),
                            _db,
                        ),
                    );
                debug_struct.finish()
            }
        }
    }
    pub mod text {
        use std::ops::Range;
        use crate::Db;
        use bitflags::bitflags;
        pub struct Document(salsa::Id);
        #[automatically_derived]
        impl ::core::marker::Copy for Document {}
        #[automatically_derived]
        impl ::core::clone::Clone for Document {
            #[inline]
            fn clone(&self) -> Document {
                let _: ::core::clone::AssertParamIsClone<salsa::Id>;
                *self
            }
        }
        #[automatically_derived]
        impl ::core::marker::StructuralPartialEq for Document {}
        #[automatically_derived]
        impl ::core::cmp::PartialEq for Document {
            #[inline]
            fn eq(&self, other: &Document) -> bool {
                self.0 == other.0
            }
        }
        #[automatically_derived]
        impl ::core::cmp::PartialOrd for Document {
            #[inline]
            fn partial_cmp(
                &self,
                other: &Document,
            ) -> ::core::option::Option<::core::cmp::Ordering> {
                ::core::cmp::PartialOrd::partial_cmp(&self.0, &other.0)
            }
        }
        #[automatically_derived]
        impl ::core::marker::StructuralEq for Document {}
        #[automatically_derived]
        impl ::core::cmp::Eq for Document {
            #[inline]
            #[doc(hidden)]
            #[coverage(off)]
            fn assert_receiver_is_total_eq(&self) -> () {
                let _: ::core::cmp::AssertParamIsEq<salsa::Id>;
            }
        }
        #[automatically_derived]
        impl ::core::cmp::Ord for Document {
            #[inline]
            fn cmp(&self, other: &Document) -> ::core::cmp::Ordering {
                ::core::cmp::Ord::cmp(&self.0, &other.0)
            }
        }
        #[automatically_derived]
        impl ::core::hash::Hash for Document {
            #[inline]
            fn hash<__H: ::core::hash::Hasher>(&self, state: &mut __H) -> () {
                ::core::hash::Hash::hash(&self.0, state)
            }
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for Document {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                ::core::fmt::Formatter::debug_tuple_field1_finish(
                    f,
                    "Document",
                    &&self.0,
                )
            }
        }
        #[allow(dead_code, clippy::pedantic, clippy::complexity, clippy::style)]
        impl Document {
            pub fn new(
                __db: &<crate::Jar as salsa::jar::Jar<'_>>::DynDb,
                url: String,
                text: ropey::Rope,
            ) -> Self {
                let (__jar, __runtime) = <_ as salsa::storage::HasJar<
                    crate::Jar,
                >>::jar(__db);
                let __ingredients = <crate::Jar as salsa::storage::HasIngredientsFor<
                    Document,
                >>::ingredient(__jar);
                let __id = __ingredients.2.new_input(__runtime);
                __ingredients.0.store_new(__runtime, __id, url, salsa::Durability::LOW);
                __ingredients.1.store_new(__runtime, __id, text, salsa::Durability::LOW);
                __id
            }
            pub fn url<'db>(
                self,
                __db: &'db <crate::Jar as salsa::jar::Jar<'_>>::DynDb,
            ) -> String {
                let (__jar, __runtime) = <_ as salsa::storage::HasJar<
                    crate::Jar,
                >>::jar(__db);
                let __ingredients = <crate::Jar as salsa::storage::HasIngredientsFor<
                    Document,
                >>::ingredient(__jar);
                __ingredients.0.fetch(__runtime, self).clone()
            }
            pub fn text<'db>(
                self,
                __db: &'db <crate::Jar as salsa::jar::Jar<'_>>::DynDb,
            ) -> ropey::Rope {
                let (__jar, __runtime) = <_ as salsa::storage::HasJar<
                    crate::Jar,
                >>::jar(__db);
                let __ingredients = <crate::Jar as salsa::storage::HasIngredientsFor<
                    Document,
                >>::ingredient(__jar);
                __ingredients.1.fetch(__runtime, self).clone()
            }
            pub fn set_text<'db>(
                self,
                __db: &'db mut <crate::Jar as salsa::jar::Jar<'_>>::DynDb,
            ) -> salsa::setter::Setter<'db, Document, ropey::Rope> {
                let (__jar, __runtime) = <_ as salsa::storage::HasJar<
                    crate::Jar,
                >>::jar_mut(__db);
                let __ingredients = <crate::Jar as salsa::storage::HasIngredientsFor<
                    Document,
                >>::ingredient_mut(__jar);
                salsa::setter::Setter::new(__runtime, self, &mut __ingredients.1)
            }
        }
        impl salsa::storage::IngredientsFor for Document {
            type Jar = crate::Jar;
            type Ingredients = (
                salsa::input_field::InputFieldIngredient<Document, String>,
                salsa::input_field::InputFieldIngredient<Document, ropey::Rope>,
                salsa::input::InputIngredient<Document>,
            );
            fn create_ingredients<DB>(
                routes: &mut salsa::routes::Routes<DB>,
            ) -> Self::Ingredients
            where
                DB: salsa::DbWithJar<Self::Jar> + salsa::storage::JarFromJars<Self::Jar>,
            {
                (
                    {
                        let index = routes
                            .push(
                                |jars| {
                                    let jar = <DB as salsa::storage::JarFromJars<
                                        Self::Jar,
                                    >>::jar_from_jars(jars);
                                    let ingredients = <_ as salsa::storage::HasIngredientsFor<
                                        Self,
                                    >>::ingredient(jar);
                                    &ingredients.0
                                },
                                |jars| {
                                    let jar = <DB as salsa::storage::JarFromJars<
                                        Self::Jar,
                                    >>::jar_from_jars_mut(jars);
                                    let ingredients = <_ as salsa::storage::HasIngredientsFor<
                                        Self,
                                    >>::ingredient_mut(jar);
                                    &mut ingredients.0
                                },
                            );
                        salsa::input_field::InputFieldIngredient::new(index, "url")
                    },
                    {
                        let index = routes
                            .push(
                                |jars| {
                                    let jar = <DB as salsa::storage::JarFromJars<
                                        Self::Jar,
                                    >>::jar_from_jars(jars);
                                    let ingredients = <_ as salsa::storage::HasIngredientsFor<
                                        Self,
                                    >>::ingredient(jar);
                                    &ingredients.1
                                },
                                |jars| {
                                    let jar = <DB as salsa::storage::JarFromJars<
                                        Self::Jar,
                                    >>::jar_from_jars_mut(jars);
                                    let ingredients = <_ as salsa::storage::HasIngredientsFor<
                                        Self,
                                    >>::ingredient_mut(jar);
                                    &mut ingredients.1
                                },
                            );
                        salsa::input_field::InputFieldIngredient::new(index, "text")
                    },
                    {
                        let index = routes
                            .push(
                                |jars| {
                                    let jar = <DB as salsa::storage::JarFromJars<
                                        Self::Jar,
                                    >>::jar_from_jars(jars);
                                    let ingredients = <_ as salsa::storage::HasIngredientsFor<
                                        Self,
                                    >>::ingredient(jar);
                                    &ingredients.2
                                },
                                |jars| {
                                    let jar = <DB as salsa::storage::JarFromJars<
                                        Self::Jar,
                                    >>::jar_from_jars_mut(jars);
                                    let ingredients = <_ as salsa::storage::HasIngredientsFor<
                                        Self,
                                    >>::ingredient_mut(jar);
                                    &mut ingredients.2
                                },
                            );
                        salsa::input::InputIngredient::new(index, "Document")
                    },
                )
            }
        }
        impl salsa::AsId for Document {
            fn as_id(self) -> salsa::Id {
                self.0
            }
            fn from_id(id: salsa::Id) -> Self {
                Document(id)
            }
        }
        impl ::salsa::DebugWithDb<<crate::Jar as salsa::jar::Jar<'_>>::DynDb>
        for Document {
            fn fmt(
                &self,
                f: &mut ::std::fmt::Formatter<'_>,
                _db: &<crate::Jar as salsa::jar::Jar<'_>>::DynDb,
            ) -> ::std::fmt::Result {
                #[allow(unused_imports)]
                use ::salsa::debug::helper::Fallback;
                let mut debug_struct = &mut f.debug_struct("Document");
                debug_struct = debug_struct.field("[salsa id]", &self.0.as_u32());
                debug_struct = debug_struct
                    .field(
                        "url",
                        &::salsa::debug::helper::SalsaDebug::<
                            String,
                            <crate::Jar as salsa::jar::Jar<'_>>::DynDb,
                        >::salsa_debug(
                            #[allow(clippy::needless_borrow)]
                            &self.url(_db),
                            _db,
                        ),
                    );
                debug_struct = debug_struct
                    .field(
                        "text",
                        &::salsa::debug::helper::SalsaDebug::<
                            ropey::Rope,
                            <crate::Jar as salsa::jar::Jar<'_>>::DynDb,
                        >::salsa_debug(
                            #[allow(clippy::needless_borrow)]
                            &self.text(_db),
                            _db,
                        ),
                    );
                debug_struct.finish()
            }
        }
        impl<DB> salsa::salsa_struct::SalsaStructInDb<DB> for Document
        where
            DB: ?Sized + salsa::DbWithJar<crate::Jar>,
        {
            fn register_dependent_fn(_db: &DB, _index: salsa::routes::IngredientIndex) {}
        }
        /// Represents the source program text.
        pub struct SourceProgram(salsa::Id);
        #[automatically_derived]
        impl ::core::marker::Copy for SourceProgram {}
        #[automatically_derived]
        impl ::core::clone::Clone for SourceProgram {
            #[inline]
            fn clone(&self) -> SourceProgram {
                let _: ::core::clone::AssertParamIsClone<salsa::Id>;
                *self
            }
        }
        #[automatically_derived]
        impl ::core::marker::StructuralPartialEq for SourceProgram {}
        #[automatically_derived]
        impl ::core::cmp::PartialEq for SourceProgram {
            #[inline]
            fn eq(&self, other: &SourceProgram) -> bool {
                self.0 == other.0
            }
        }
        #[automatically_derived]
        impl ::core::cmp::PartialOrd for SourceProgram {
            #[inline]
            fn partial_cmp(
                &self,
                other: &SourceProgram,
            ) -> ::core::option::Option<::core::cmp::Ordering> {
                ::core::cmp::PartialOrd::partial_cmp(&self.0, &other.0)
            }
        }
        #[automatically_derived]
        impl ::core::marker::StructuralEq for SourceProgram {}
        #[automatically_derived]
        impl ::core::cmp::Eq for SourceProgram {
            #[inline]
            #[doc(hidden)]
            #[coverage(off)]
            fn assert_receiver_is_total_eq(&self) -> () {
                let _: ::core::cmp::AssertParamIsEq<salsa::Id>;
            }
        }
        #[automatically_derived]
        impl ::core::cmp::Ord for SourceProgram {
            #[inline]
            fn cmp(&self, other: &SourceProgram) -> ::core::cmp::Ordering {
                ::core::cmp::Ord::cmp(&self.0, &other.0)
            }
        }
        #[automatically_derived]
        impl ::core::hash::Hash for SourceProgram {
            #[inline]
            fn hash<__H: ::core::hash::Hasher>(&self, state: &mut __H) -> () {
                ::core::hash::Hash::hash(&self.0, state)
            }
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for SourceProgram {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                ::core::fmt::Formatter::debug_tuple_field1_finish(
                    f,
                    "SourceProgram",
                    &&self.0,
                )
            }
        }
        #[allow(dead_code, clippy::pedantic, clippy::complexity, clippy::style)]
        impl SourceProgram {
            pub fn new(
                __db: &<crate::Jar as salsa::jar::Jar<'_>>::DynDb,
                url: String,
                text: String,
            ) -> Self {
                let (__jar, __runtime) = <_ as salsa::storage::HasJar<
                    crate::Jar,
                >>::jar(__db);
                let __ingredients = <crate::Jar as salsa::storage::HasIngredientsFor<
                    SourceProgram,
                >>::ingredient(__jar);
                let __id = __ingredients.2.new_input(__runtime);
                __ingredients.0.store_new(__runtime, __id, url, salsa::Durability::LOW);
                __ingredients.1.store_new(__runtime, __id, text, salsa::Durability::LOW);
                __id
            }
            pub fn url<'db>(
                self,
                __db: &'db <crate::Jar as salsa::jar::Jar<'_>>::DynDb,
            ) -> String {
                let (__jar, __runtime) = <_ as salsa::storage::HasJar<
                    crate::Jar,
                >>::jar(__db);
                let __ingredients = <crate::Jar as salsa::storage::HasIngredientsFor<
                    SourceProgram,
                >>::ingredient(__jar);
                __ingredients.0.fetch(__runtime, self).clone()
            }
            pub fn text<'db>(
                self,
                __db: &'db <crate::Jar as salsa::jar::Jar<'_>>::DynDb,
            ) -> &'db String {
                let (__jar, __runtime) = <_ as salsa::storage::HasJar<
                    crate::Jar,
                >>::jar(__db);
                let __ingredients = <crate::Jar as salsa::storage::HasIngredientsFor<
                    SourceProgram,
                >>::ingredient(__jar);
                __ingredients.1.fetch(__runtime, self)
            }
            pub fn set_text<'db>(
                self,
                __db: &'db mut <crate::Jar as salsa::jar::Jar<'_>>::DynDb,
            ) -> salsa::setter::Setter<'db, SourceProgram, String> {
                let (__jar, __runtime) = <_ as salsa::storage::HasJar<
                    crate::Jar,
                >>::jar_mut(__db);
                let __ingredients = <crate::Jar as salsa::storage::HasIngredientsFor<
                    SourceProgram,
                >>::ingredient_mut(__jar);
                salsa::setter::Setter::new(__runtime, self, &mut __ingredients.1)
            }
        }
        impl salsa::storage::IngredientsFor for SourceProgram {
            type Jar = crate::Jar;
            type Ingredients = (
                salsa::input_field::InputFieldIngredient<SourceProgram, String>,
                salsa::input_field::InputFieldIngredient<SourceProgram, String>,
                salsa::input::InputIngredient<SourceProgram>,
            );
            fn create_ingredients<DB>(
                routes: &mut salsa::routes::Routes<DB>,
            ) -> Self::Ingredients
            where
                DB: salsa::DbWithJar<Self::Jar> + salsa::storage::JarFromJars<Self::Jar>,
            {
                (
                    {
                        let index = routes
                            .push(
                                |jars| {
                                    let jar = <DB as salsa::storage::JarFromJars<
                                        Self::Jar,
                                    >>::jar_from_jars(jars);
                                    let ingredients = <_ as salsa::storage::HasIngredientsFor<
                                        Self,
                                    >>::ingredient(jar);
                                    &ingredients.0
                                },
                                |jars| {
                                    let jar = <DB as salsa::storage::JarFromJars<
                                        Self::Jar,
                                    >>::jar_from_jars_mut(jars);
                                    let ingredients = <_ as salsa::storage::HasIngredientsFor<
                                        Self,
                                    >>::ingredient_mut(jar);
                                    &mut ingredients.0
                                },
                            );
                        salsa::input_field::InputFieldIngredient::new(index, "url")
                    },
                    {
                        let index = routes
                            .push(
                                |jars| {
                                    let jar = <DB as salsa::storage::JarFromJars<
                                        Self::Jar,
                                    >>::jar_from_jars(jars);
                                    let ingredients = <_ as salsa::storage::HasIngredientsFor<
                                        Self,
                                    >>::ingredient(jar);
                                    &ingredients.1
                                },
                                |jars| {
                                    let jar = <DB as salsa::storage::JarFromJars<
                                        Self::Jar,
                                    >>::jar_from_jars_mut(jars);
                                    let ingredients = <_ as salsa::storage::HasIngredientsFor<
                                        Self,
                                    >>::ingredient_mut(jar);
                                    &mut ingredients.1
                                },
                            );
                        salsa::input_field::InputFieldIngredient::new(index, "text")
                    },
                    {
                        let index = routes
                            .push(
                                |jars| {
                                    let jar = <DB as salsa::storage::JarFromJars<
                                        Self::Jar,
                                    >>::jar_from_jars(jars);
                                    let ingredients = <_ as salsa::storage::HasIngredientsFor<
                                        Self,
                                    >>::ingredient(jar);
                                    &ingredients.2
                                },
                                |jars| {
                                    let jar = <DB as salsa::storage::JarFromJars<
                                        Self::Jar,
                                    >>::jar_from_jars_mut(jars);
                                    let ingredients = <_ as salsa::storage::HasIngredientsFor<
                                        Self,
                                    >>::ingredient_mut(jar);
                                    &mut ingredients.2
                                },
                            );
                        salsa::input::InputIngredient::new(index, "SourceProgram")
                    },
                )
            }
        }
        impl salsa::AsId for SourceProgram {
            fn as_id(self) -> salsa::Id {
                self.0
            }
            fn from_id(id: salsa::Id) -> Self {
                SourceProgram(id)
            }
        }
        impl ::salsa::DebugWithDb<<crate::Jar as salsa::jar::Jar<'_>>::DynDb>
        for SourceProgram {
            fn fmt(
                &self,
                f: &mut ::std::fmt::Formatter<'_>,
                _db: &<crate::Jar as salsa::jar::Jar<'_>>::DynDb,
            ) -> ::std::fmt::Result {
                #[allow(unused_imports)]
                use ::salsa::debug::helper::Fallback;
                let mut debug_struct = &mut f.debug_struct("SourceProgram");
                debug_struct = debug_struct.field("[salsa id]", &self.0.as_u32());
                debug_struct = debug_struct
                    .field(
                        "url",
                        &::salsa::debug::helper::SalsaDebug::<
                            String,
                            <crate::Jar as salsa::jar::Jar<'_>>::DynDb,
                        >::salsa_debug(
                            #[allow(clippy::needless_borrow)]
                            &self.url(_db),
                            _db,
                        ),
                    );
                debug_struct = debug_struct
                    .field(
                        "text",
                        &::salsa::debug::helper::SalsaDebug::<
                            String,
                            <crate::Jar as salsa::jar::Jar<'_>>::DynDb,
                        >::salsa_debug(
                            #[allow(clippy::needless_borrow)]
                            &self.text(_db),
                            _db,
                        ),
                    );
                debug_struct.finish()
            }
        }
        impl<DB> salsa::salsa_struct::SalsaStructInDb<DB> for SourceProgram
        where
            DB: ?Sized + salsa::DbWithJar<crate::Jar>,
        {
            fn register_dependent_fn(_db: &DB, _index: salsa::routes::IngredientIndex) {}
        }
        /// Represents a spanned piece of code.
        pub struct Spanned(salsa::Id);
        #[automatically_derived]
        impl ::core::marker::Copy for Spanned {}
        #[automatically_derived]
        impl ::core::clone::Clone for Spanned {
            #[inline]
            fn clone(&self) -> Spanned {
                let _: ::core::clone::AssertParamIsClone<salsa::Id>;
                *self
            }
        }
        #[automatically_derived]
        impl ::core::marker::StructuralPartialEq for Spanned {}
        #[automatically_derived]
        impl ::core::cmp::PartialEq for Spanned {
            #[inline]
            fn eq(&self, other: &Spanned) -> bool {
                self.0 == other.0
            }
        }
        #[automatically_derived]
        impl ::core::cmp::PartialOrd for Spanned {
            #[inline]
            fn partial_cmp(
                &self,
                other: &Spanned,
            ) -> ::core::option::Option<::core::cmp::Ordering> {
                ::core::cmp::PartialOrd::partial_cmp(&self.0, &other.0)
            }
        }
        #[automatically_derived]
        impl ::core::marker::StructuralEq for Spanned {}
        #[automatically_derived]
        impl ::core::cmp::Eq for Spanned {
            #[inline]
            #[doc(hidden)]
            #[coverage(off)]
            fn assert_receiver_is_total_eq(&self) -> () {
                let _: ::core::cmp::AssertParamIsEq<salsa::Id>;
            }
        }
        #[automatically_derived]
        impl ::core::cmp::Ord for Spanned {
            #[inline]
            fn cmp(&self, other: &Spanned) -> ::core::cmp::Ordering {
                ::core::cmp::Ord::cmp(&self.0, &other.0)
            }
        }
        #[automatically_derived]
        impl ::core::hash::Hash for Spanned {
            #[inline]
            fn hash<__H: ::core::hash::Hasher>(&self, state: &mut __H) -> () {
                ::core::hash::Hash::hash(&self.0, state)
            }
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for Spanned {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                ::core::fmt::Formatter::debug_tuple_field1_finish(f, "Spanned", &&self.0)
            }
        }
        /// Internal struct used for interned item
        pub struct __SpannedData {
            span: Span,
            src: SourceProgram,
            pos: Position,
        }
        #[automatically_derived]
        impl ::core::marker::StructuralEq for __SpannedData {}
        #[automatically_derived]
        impl ::core::cmp::Eq for __SpannedData {
            #[inline]
            #[doc(hidden)]
            #[coverage(off)]
            fn assert_receiver_is_total_eq(&self) -> () {
                let _: ::core::cmp::AssertParamIsEq<Span>;
                let _: ::core::cmp::AssertParamIsEq<SourceProgram>;
                let _: ::core::cmp::AssertParamIsEq<Position>;
            }
        }
        #[automatically_derived]
        impl ::core::marker::StructuralPartialEq for __SpannedData {}
        #[automatically_derived]
        impl ::core::cmp::PartialEq for __SpannedData {
            #[inline]
            fn eq(&self, other: &__SpannedData) -> bool {
                self.span == other.span && self.src == other.src && self.pos == other.pos
            }
        }
        #[automatically_derived]
        impl ::core::hash::Hash for __SpannedData {
            #[inline]
            fn hash<__H: ::core::hash::Hasher>(&self, state: &mut __H) -> () {
                ::core::hash::Hash::hash(&self.span, state);
                ::core::hash::Hash::hash(&self.src, state);
                ::core::hash::Hash::hash(&self.pos, state)
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for __SpannedData {
            #[inline]
            fn clone(&self) -> __SpannedData {
                __SpannedData {
                    span: ::core::clone::Clone::clone(&self.span),
                    src: ::core::clone::Clone::clone(&self.src),
                    pos: ::core::clone::Clone::clone(&self.pos),
                }
            }
        }
        impl salsa::storage::IngredientsFor for Spanned {
            type Jar = crate::Jar;
            type Ingredients = salsa::interned::InternedIngredient<
                Spanned,
                __SpannedData,
            >;
            fn create_ingredients<DB>(
                routes: &mut salsa::routes::Routes<DB>,
            ) -> Self::Ingredients
            where
                DB: salsa::storage::JarFromJars<Self::Jar>,
            {
                let index = routes
                    .push(
                        |jars| {
                            let jar = <DB as salsa::storage::JarFromJars<
                                Self::Jar,
                            >>::jar_from_jars(jars);
                            <_ as salsa::storage::HasIngredientsFor<
                                Self,
                            >>::ingredient(jar)
                        },
                        |jars| {
                            let jar = <DB as salsa::storage::JarFromJars<
                                Self::Jar,
                            >>::jar_from_jars_mut(jars);
                            <_ as salsa::storage::HasIngredientsFor<
                                Self,
                            >>::ingredient_mut(jar)
                        },
                    );
                salsa::interned::InternedIngredient::new(index, "Spanned")
            }
        }
        impl salsa::AsId for Spanned {
            fn as_id(self) -> salsa::Id {
                self.0
            }
            fn from_id(id: salsa::Id) -> Self {
                Spanned(id)
            }
        }
        #[allow(dead_code, clippy::pedantic, clippy::complexity, clippy::style)]
        impl Spanned {
            pub fn span<'db>(
                self,
                db: &'db <crate::Jar as salsa::jar::Jar<'_>>::DynDb,
            ) -> &'db Span {
                let (jar, runtime) = <_ as salsa::storage::HasJar<crate::Jar>>::jar(db);
                let ingredients = <crate::Jar as salsa::storage::HasIngredientsFor<
                    Spanned,
                >>::ingredient(jar);
                &ingredients.data(runtime, self).span
            }
            pub fn src<'db>(
                self,
                db: &'db <crate::Jar as salsa::jar::Jar<'_>>::DynDb,
            ) -> &'db SourceProgram {
                let (jar, runtime) = <_ as salsa::storage::HasJar<crate::Jar>>::jar(db);
                let ingredients = <crate::Jar as salsa::storage::HasIngredientsFor<
                    Spanned,
                >>::ingredient(jar);
                &ingredients.data(runtime, self).src
            }
            pub fn pos<'db>(
                self,
                db: &'db <crate::Jar as salsa::jar::Jar<'_>>::DynDb,
            ) -> &'db Position {
                let (jar, runtime) = <_ as salsa::storage::HasJar<crate::Jar>>::jar(db);
                let ingredients = <crate::Jar as salsa::storage::HasIngredientsFor<
                    Spanned,
                >>::ingredient(jar);
                &ingredients.data(runtime, self).pos
            }
            pub fn new(
                db: &<crate::Jar as salsa::jar::Jar<'_>>::DynDb,
                span: Span,
                src: SourceProgram,
                pos: Position,
            ) -> Self {
                let (jar, runtime) = <_ as salsa::storage::HasJar<crate::Jar>>::jar(db);
                let ingredients = <crate::Jar as salsa::storage::HasIngredientsFor<
                    Spanned,
                >>::ingredient(jar);
                ingredients.intern(runtime, __SpannedData { span, src, pos })
            }
        }
        impl<DB> salsa::salsa_struct::SalsaStructInDb<DB> for Spanned
        where
            DB: ?Sized + salsa::DbWithJar<crate::Jar>,
        {
            fn register_dependent_fn(_db: &DB, _index: salsa::routes::IngredientIndex) {}
        }
        impl ::salsa::DebugWithDb<<crate::Jar as salsa::jar::Jar<'_>>::DynDb>
        for Spanned {
            fn fmt(
                &self,
                f: &mut ::std::fmt::Formatter<'_>,
                _db: &<crate::Jar as salsa::jar::Jar<'_>>::DynDb,
            ) -> ::std::fmt::Result {
                #[allow(unused_imports)]
                use ::salsa::debug::helper::Fallback;
                let mut debug_struct = &mut f.debug_struct("Spanned");
                debug_struct = debug_struct.field("[salsa id]", &self.0.as_u32());
                debug_struct = debug_struct
                    .field(
                        "span",
                        &::salsa::debug::helper::SalsaDebug::<
                            Span,
                            <crate::Jar as salsa::jar::Jar<'_>>::DynDb,
                        >::salsa_debug(
                            #[allow(clippy::needless_borrow)]
                            &self.span(_db),
                            _db,
                        ),
                    );
                debug_struct = debug_struct
                    .field(
                        "src",
                        &::salsa::debug::helper::SalsaDebug::<
                            SourceProgram,
                            <crate::Jar as salsa::jar::Jar<'_>>::DynDb,
                        >::salsa_debug(
                            #[allow(clippy::needless_borrow)]
                            &self.src(_db),
                            _db,
                        ),
                    );
                debug_struct = debug_struct
                    .field(
                        "pos",
                        &::salsa::debug::helper::SalsaDebug::<
                            Position,
                            <crate::Jar as salsa::jar::Jar<'_>>::DynDb,
                        >::salsa_debug(
                            #[allow(clippy::needless_borrow)]
                            &self.pos(_db),
                            _db,
                        ),
                    );
                debug_struct.finish()
            }
        }
        /// Represents a span of text.
        pub struct Span(salsa::Id);
        #[automatically_derived]
        impl ::core::marker::Copy for Span {}
        #[automatically_derived]
        impl ::core::clone::Clone for Span {
            #[inline]
            fn clone(&self) -> Span {
                let _: ::core::clone::AssertParamIsClone<salsa::Id>;
                *self
            }
        }
        #[automatically_derived]
        impl ::core::marker::StructuralPartialEq for Span {}
        #[automatically_derived]
        impl ::core::cmp::PartialEq for Span {
            #[inline]
            fn eq(&self, other: &Span) -> bool {
                self.0 == other.0
            }
        }
        #[automatically_derived]
        impl ::core::cmp::PartialOrd for Span {
            #[inline]
            fn partial_cmp(
                &self,
                other: &Span,
            ) -> ::core::option::Option<::core::cmp::Ordering> {
                ::core::cmp::PartialOrd::partial_cmp(&self.0, &other.0)
            }
        }
        #[automatically_derived]
        impl ::core::marker::StructuralEq for Span {}
        #[automatically_derived]
        impl ::core::cmp::Eq for Span {
            #[inline]
            #[doc(hidden)]
            #[coverage(off)]
            fn assert_receiver_is_total_eq(&self) -> () {
                let _: ::core::cmp::AssertParamIsEq<salsa::Id>;
            }
        }
        #[automatically_derived]
        impl ::core::cmp::Ord for Span {
            #[inline]
            fn cmp(&self, other: &Span) -> ::core::cmp::Ordering {
                ::core::cmp::Ord::cmp(&self.0, &other.0)
            }
        }
        #[automatically_derived]
        impl ::core::hash::Hash for Span {
            #[inline]
            fn hash<__H: ::core::hash::Hasher>(&self, state: &mut __H) -> () {
                ::core::hash::Hash::hash(&self.0, state)
            }
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for Span {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                ::core::fmt::Formatter::debug_tuple_field1_finish(f, "Span", &&self.0)
            }
        }
        /// Internal struct used for interned item
        pub struct __SpanData {
            span: Range<usize>,
        }
        #[automatically_derived]
        impl ::core::marker::StructuralEq for __SpanData {}
        #[automatically_derived]
        impl ::core::cmp::Eq for __SpanData {
            #[inline]
            #[doc(hidden)]
            #[coverage(off)]
            fn assert_receiver_is_total_eq(&self) -> () {
                let _: ::core::cmp::AssertParamIsEq<Range<usize>>;
            }
        }
        #[automatically_derived]
        impl ::core::marker::StructuralPartialEq for __SpanData {}
        #[automatically_derived]
        impl ::core::cmp::PartialEq for __SpanData {
            #[inline]
            fn eq(&self, other: &__SpanData) -> bool {
                self.span == other.span
            }
        }
        #[automatically_derived]
        impl ::core::hash::Hash for __SpanData {
            #[inline]
            fn hash<__H: ::core::hash::Hasher>(&self, state: &mut __H) -> () {
                ::core::hash::Hash::hash(&self.span, state)
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for __SpanData {
            #[inline]
            fn clone(&self) -> __SpanData {
                __SpanData {
                    span: ::core::clone::Clone::clone(&self.span),
                }
            }
        }
        impl salsa::storage::IngredientsFor for Span {
            type Jar = crate::Jar;
            type Ingredients = salsa::interned::InternedIngredient<Span, __SpanData>;
            fn create_ingredients<DB>(
                routes: &mut salsa::routes::Routes<DB>,
            ) -> Self::Ingredients
            where
                DB: salsa::storage::JarFromJars<Self::Jar>,
            {
                let index = routes
                    .push(
                        |jars| {
                            let jar = <DB as salsa::storage::JarFromJars<
                                Self::Jar,
                            >>::jar_from_jars(jars);
                            <_ as salsa::storage::HasIngredientsFor<
                                Self,
                            >>::ingredient(jar)
                        },
                        |jars| {
                            let jar = <DB as salsa::storage::JarFromJars<
                                Self::Jar,
                            >>::jar_from_jars_mut(jars);
                            <_ as salsa::storage::HasIngredientsFor<
                                Self,
                            >>::ingredient_mut(jar)
                        },
                    );
                salsa::interned::InternedIngredient::new(index, "Span")
            }
        }
        impl salsa::AsId for Span {
            fn as_id(self) -> salsa::Id {
                self.0
            }
            fn from_id(id: salsa::Id) -> Self {
                Span(id)
            }
        }
        #[allow(dead_code, clippy::pedantic, clippy::complexity, clippy::style)]
        impl Span {
            pub fn span(
                self,
                db: &<crate::Jar as salsa::jar::Jar<'_>>::DynDb,
            ) -> Range<usize> {
                let (jar, runtime) = <_ as salsa::storage::HasJar<crate::Jar>>::jar(db);
                let ingredients = <crate::Jar as salsa::storage::HasIngredientsFor<
                    Span,
                >>::ingredient(jar);
                std::clone::Clone::clone(&ingredients.data(runtime, self).span)
            }
            pub fn new(
                db: &<crate::Jar as salsa::jar::Jar<'_>>::DynDb,
                span: Range<usize>,
            ) -> Self {
                let (jar, runtime) = <_ as salsa::storage::HasJar<crate::Jar>>::jar(db);
                let ingredients = <crate::Jar as salsa::storage::HasIngredientsFor<
                    Span,
                >>::ingredient(jar);
                ingredients.intern(runtime, __SpanData { span })
            }
        }
        impl<DB> salsa::salsa_struct::SalsaStructInDb<DB> for Span
        where
            DB: ?Sized + salsa::DbWithJar<crate::Jar>,
        {
            fn register_dependent_fn(_db: &DB, _index: salsa::routes::IngredientIndex) {}
        }
        impl ::salsa::DebugWithDb<<crate::Jar as salsa::jar::Jar<'_>>::DynDb> for Span {
            fn fmt(
                &self,
                f: &mut ::std::fmt::Formatter<'_>,
                _db: &<crate::Jar as salsa::jar::Jar<'_>>::DynDb,
            ) -> ::std::fmt::Result {
                #[allow(unused_imports)]
                use ::salsa::debug::helper::Fallback;
                let mut debug_struct = &mut f.debug_struct("Span");
                debug_struct = debug_struct.field("[salsa id]", &self.0.as_u32());
                debug_struct = debug_struct
                    .field(
                        "span",
                        &::salsa::debug::helper::SalsaDebug::<
                            Range<usize>,
                            <crate::Jar as salsa::jar::Jar<'_>>::DynDb,
                        >::salsa_debug(
                            #[allow(clippy::needless_borrow)]
                            &self.span(_db),
                            _db,
                        ),
                    );
                debug_struct.finish()
            }
        }
        /// Represents a position in the source code.
        pub struct Position(salsa::Id);
        #[automatically_derived]
        impl ::core::marker::Copy for Position {}
        #[automatically_derived]
        impl ::core::clone::Clone for Position {
            #[inline]
            fn clone(&self) -> Position {
                let _: ::core::clone::AssertParamIsClone<salsa::Id>;
                *self
            }
        }
        #[automatically_derived]
        impl ::core::marker::StructuralPartialEq for Position {}
        #[automatically_derived]
        impl ::core::cmp::PartialEq for Position {
            #[inline]
            fn eq(&self, other: &Position) -> bool {
                self.0 == other.0
            }
        }
        #[automatically_derived]
        impl ::core::cmp::PartialOrd for Position {
            #[inline]
            fn partial_cmp(
                &self,
                other: &Position,
            ) -> ::core::option::Option<::core::cmp::Ordering> {
                ::core::cmp::PartialOrd::partial_cmp(&self.0, &other.0)
            }
        }
        #[automatically_derived]
        impl ::core::marker::StructuralEq for Position {}
        #[automatically_derived]
        impl ::core::cmp::Eq for Position {
            #[inline]
            #[doc(hidden)]
            #[coverage(off)]
            fn assert_receiver_is_total_eq(&self) -> () {
                let _: ::core::cmp::AssertParamIsEq<salsa::Id>;
            }
        }
        #[automatically_derived]
        impl ::core::cmp::Ord for Position {
            #[inline]
            fn cmp(&self, other: &Position) -> ::core::cmp::Ordering {
                ::core::cmp::Ord::cmp(&self.0, &other.0)
            }
        }
        #[automatically_derived]
        impl ::core::hash::Hash for Position {
            #[inline]
            fn hash<__H: ::core::hash::Hasher>(&self, state: &mut __H) -> () {
                ::core::hash::Hash::hash(&self.0, state)
            }
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for Position {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                ::core::fmt::Formatter::debug_tuple_field1_finish(
                    f,
                    "Position",
                    &&self.0,
                )
            }
        }
        /// Internal struct used for interned item
        pub struct __PositionData {
            line: usize,
            column: usize,
        }
        #[automatically_derived]
        impl ::core::marker::StructuralEq for __PositionData {}
        #[automatically_derived]
        impl ::core::cmp::Eq for __PositionData {
            #[inline]
            #[doc(hidden)]
            #[coverage(off)]
            fn assert_receiver_is_total_eq(&self) -> () {
                let _: ::core::cmp::AssertParamIsEq<usize>;
            }
        }
        #[automatically_derived]
        impl ::core::marker::StructuralPartialEq for __PositionData {}
        #[automatically_derived]
        impl ::core::cmp::PartialEq for __PositionData {
            #[inline]
            fn eq(&self, other: &__PositionData) -> bool {
                self.line == other.line && self.column == other.column
            }
        }
        #[automatically_derived]
        impl ::core::hash::Hash for __PositionData {
            #[inline]
            fn hash<__H: ::core::hash::Hasher>(&self, state: &mut __H) -> () {
                ::core::hash::Hash::hash(&self.line, state);
                ::core::hash::Hash::hash(&self.column, state)
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for __PositionData {
            #[inline]
            fn clone(&self) -> __PositionData {
                __PositionData {
                    line: ::core::clone::Clone::clone(&self.line),
                    column: ::core::clone::Clone::clone(&self.column),
                }
            }
        }
        impl salsa::storage::IngredientsFor for Position {
            type Jar = crate::Jar;
            type Ingredients = salsa::interned::InternedIngredient<
                Position,
                __PositionData,
            >;
            fn create_ingredients<DB>(
                routes: &mut salsa::routes::Routes<DB>,
            ) -> Self::Ingredients
            where
                DB: salsa::storage::JarFromJars<Self::Jar>,
            {
                let index = routes
                    .push(
                        |jars| {
                            let jar = <DB as salsa::storage::JarFromJars<
                                Self::Jar,
                            >>::jar_from_jars(jars);
                            <_ as salsa::storage::HasIngredientsFor<
                                Self,
                            >>::ingredient(jar)
                        },
                        |jars| {
                            let jar = <DB as salsa::storage::JarFromJars<
                                Self::Jar,
                            >>::jar_from_jars_mut(jars);
                            <_ as salsa::storage::HasIngredientsFor<
                                Self,
                            >>::ingredient_mut(jar)
                        },
                    );
                salsa::interned::InternedIngredient::new(index, "Position")
            }
        }
        impl salsa::AsId for Position {
            fn as_id(self) -> salsa::Id {
                self.0
            }
            fn from_id(id: salsa::Id) -> Self {
                Position(id)
            }
        }
        #[allow(dead_code, clippy::pedantic, clippy::complexity, clippy::style)]
        impl Position {
            pub fn line(self, db: &<crate::Jar as salsa::jar::Jar<'_>>::DynDb) -> usize {
                let (jar, runtime) = <_ as salsa::storage::HasJar<crate::Jar>>::jar(db);
                let ingredients = <crate::Jar as salsa::storage::HasIngredientsFor<
                    Position,
                >>::ingredient(jar);
                std::clone::Clone::clone(&ingredients.data(runtime, self).line)
            }
            pub fn column(
                self,
                db: &<crate::Jar as salsa::jar::Jar<'_>>::DynDb,
            ) -> usize {
                let (jar, runtime) = <_ as salsa::storage::HasJar<crate::Jar>>::jar(db);
                let ingredients = <crate::Jar as salsa::storage::HasIngredientsFor<
                    Position,
                >>::ingredient(jar);
                std::clone::Clone::clone(&ingredients.data(runtime, self).column)
            }
            pub fn new(
                db: &<crate::Jar as salsa::jar::Jar<'_>>::DynDb,
                line: usize,
                column: usize,
            ) -> Self {
                let (jar, runtime) = <_ as salsa::storage::HasJar<crate::Jar>>::jar(db);
                let ingredients = <crate::Jar as salsa::storage::HasIngredientsFor<
                    Position,
                >>::ingredient(jar);
                ingredients.intern(runtime, __PositionData { line, column })
            }
        }
        impl<DB> salsa::salsa_struct::SalsaStructInDb<DB> for Position
        where
            DB: ?Sized + salsa::DbWithJar<crate::Jar>,
        {
            fn register_dependent_fn(_db: &DB, _index: salsa::routes::IngredientIndex) {}
        }
        impl ::salsa::DebugWithDb<<crate::Jar as salsa::jar::Jar<'_>>::DynDb>
        for Position {
            fn fmt(
                &self,
                f: &mut ::std::fmt::Formatter<'_>,
                _db: &<crate::Jar as salsa::jar::Jar<'_>>::DynDb,
            ) -> ::std::fmt::Result {
                #[allow(unused_imports)]
                use ::salsa::debug::helper::Fallback;
                let mut debug_struct = &mut f.debug_struct("Position");
                debug_struct = debug_struct.field("[salsa id]", &self.0.as_u32());
                debug_struct = debug_struct
                    .field(
                        "line",
                        &::salsa::debug::helper::SalsaDebug::<
                            usize,
                            <crate::Jar as salsa::jar::Jar<'_>>::DynDb,
                        >::salsa_debug(
                            #[allow(clippy::needless_borrow)]
                            &self.line(_db),
                            _db,
                        ),
                    );
                debug_struct = debug_struct
                    .field(
                        "column",
                        &::salsa::debug::helper::SalsaDebug::<
                            usize,
                            <crate::Jar as salsa::jar::Jar<'_>>::DynDb,
                        >::salsa_debug(
                            #[allow(clippy::needless_borrow)]
                            &self.column(_db),
                            _db,
                        ),
                    );
                debug_struct.finish()
            }
        }
        pub struct __SourceMapConfig {
            _uninhabited: std::convert::Infallible,
        }
        impl salsa::tracked_struct::Configuration for __SourceMapConfig {
            type Id = SourceMap;
            type Fields = (Vec<Spanned>,);
            type Revisions = [salsa::Revision; 1];
            #[allow(clippy::unused_unit)]
            fn id_fields(fields: &Self::Fields) -> impl std::hash::Hash {
                ()
            }
            fn revision(
                revisions: &Self::Revisions,
                field_index: u32,
            ) -> salsa::Revision {
                revisions[field_index as usize]
            }
            fn new_revisions(current_revision: salsa::Revision) -> Self::Revisions {
                [current_revision; 1]
            }
            fn update_revisions(
                current_revision_: salsa::Revision,
                old_value_: &Self::Fields,
                new_value_: &Self::Fields,
                revisions_: &mut Self::Revisions,
            ) {
                if old_value_.0 != new_value_.0 {
                    revisions_[0] = current_revision_;
                }
            }
        }
        /// Represents the source map of the program.
        pub struct SourceMap(salsa::Id);
        #[automatically_derived]
        impl ::core::marker::Copy for SourceMap {}
        #[automatically_derived]
        impl ::core::clone::Clone for SourceMap {
            #[inline]
            fn clone(&self) -> SourceMap {
                let _: ::core::clone::AssertParamIsClone<salsa::Id>;
                *self
            }
        }
        #[automatically_derived]
        impl ::core::marker::StructuralPartialEq for SourceMap {}
        #[automatically_derived]
        impl ::core::cmp::PartialEq for SourceMap {
            #[inline]
            fn eq(&self, other: &SourceMap) -> bool {
                self.0 == other.0
            }
        }
        #[automatically_derived]
        impl ::core::cmp::PartialOrd for SourceMap {
            #[inline]
            fn partial_cmp(
                &self,
                other: &SourceMap,
            ) -> ::core::option::Option<::core::cmp::Ordering> {
                ::core::cmp::PartialOrd::partial_cmp(&self.0, &other.0)
            }
        }
        #[automatically_derived]
        impl ::core::marker::StructuralEq for SourceMap {}
        #[automatically_derived]
        impl ::core::cmp::Eq for SourceMap {
            #[inline]
            #[doc(hidden)]
            #[coverage(off)]
            fn assert_receiver_is_total_eq(&self) -> () {
                let _: ::core::cmp::AssertParamIsEq<salsa::Id>;
            }
        }
        #[automatically_derived]
        impl ::core::cmp::Ord for SourceMap {
            #[inline]
            fn cmp(&self, other: &SourceMap) -> ::core::cmp::Ordering {
                ::core::cmp::Ord::cmp(&self.0, &other.0)
            }
        }
        #[automatically_derived]
        impl ::core::hash::Hash for SourceMap {
            #[inline]
            fn hash<__H: ::core::hash::Hasher>(&self, state: &mut __H) -> () {
                ::core::hash::Hash::hash(&self.0, state)
            }
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for SourceMap {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                ::core::fmt::Formatter::debug_tuple_field1_finish(
                    f,
                    "SourceMap",
                    &&self.0,
                )
            }
        }
        #[allow(dead_code, clippy::pedantic, clippy::complexity, clippy::style)]
        impl SourceMap {
            pub fn new(
                __db: &<crate::Jar as salsa::jar::Jar<'_>>::DynDb,
                tokens: Vec<Spanned>,
            ) -> Self {
                let (__jar, __runtime) = <_ as salsa::storage::HasJar<
                    crate::Jar,
                >>::jar(__db);
                let __ingredients = <crate::Jar as salsa::storage::HasIngredientsFor<
                    SourceMap,
                >>::ingredient(__jar);
                let __id = __ingredients.0.new_struct(__runtime, (tokens,));
                __id
            }
            pub fn tokens<'db>(
                self,
                __db: &'db <crate::Jar as salsa::jar::Jar<'_>>::DynDb,
            ) -> &'db Vec<Spanned> {
                let (__jar, __runtime) = <_ as salsa::storage::HasJar<
                    crate::Jar,
                >>::jar(__db);
                let __ingredients = <crate::Jar as salsa::storage::HasIngredientsFor<
                    SourceMap,
                >>::ingredient(__jar);
                &__ingredients.1[0].field(__runtime, self).0
            }
        }
        impl salsa::storage::IngredientsFor for SourceMap {
            type Jar = crate::Jar;
            type Ingredients = (
                salsa::tracked_struct::TrackedStructIngredient<__SourceMapConfig>,
                [salsa::tracked_struct::TrackedFieldIngredient<__SourceMapConfig>; 1],
            );
            fn create_ingredients<DB>(
                routes: &mut salsa::routes::Routes<DB>,
            ) -> Self::Ingredients
            where
                DB: salsa::DbWithJar<Self::Jar> + salsa::storage::JarFromJars<Self::Jar>,
            {
                let struct_ingredient = {
                    let index = routes
                        .push(
                            |jars| {
                                let jar = <DB as salsa::storage::JarFromJars<
                                    Self::Jar,
                                >>::jar_from_jars(jars);
                                let ingredients = <_ as salsa::storage::HasIngredientsFor<
                                    Self,
                                >>::ingredient(jar);
                                &ingredients.0
                            },
                            |jars| {
                                let jar = <DB as salsa::storage::JarFromJars<
                                    Self::Jar,
                                >>::jar_from_jars_mut(jars);
                                let ingredients = <_ as salsa::storage::HasIngredientsFor<
                                    Self,
                                >>::ingredient_mut(jar);
                                &mut ingredients.0
                            },
                        );
                    salsa::tracked_struct::TrackedStructIngredient::new(
                        index,
                        "SourceMap",
                    )
                };
                let field_ingredients = [
                    {
                        let index = routes
                            .push(
                                |jars| {
                                    let jar = <DB as salsa::storage::JarFromJars<
                                        Self::Jar,
                                    >>::jar_from_jars(jars);
                                    let ingredients = <_ as salsa::storage::HasIngredientsFor<
                                        Self,
                                    >>::ingredient(jar);
                                    &ingredients.1[0]
                                },
                                |jars| {
                                    let jar = <DB as salsa::storage::JarFromJars<
                                        Self::Jar,
                                    >>::jar_from_jars_mut(jars);
                                    let ingredients = <_ as salsa::storage::HasIngredientsFor<
                                        Self,
                                    >>::ingredient_mut(jar);
                                    &mut ingredients.1[0]
                                },
                            );
                        struct_ingredient.new_field_ingredient(index, 0, "tokens")
                    },
                ];
                (struct_ingredient, field_ingredients)
            }
        }
        impl<DB> salsa::salsa_struct::SalsaStructInDb<DB> for SourceMap
        where
            DB: ?Sized + salsa::DbWithJar<crate::Jar>,
        {
            fn register_dependent_fn(db: &DB, index: salsa::routes::IngredientIndex) {
                let (jar, _) = <_ as salsa::storage::HasJar<crate::Jar>>::jar(db);
                let ingredients = <crate::Jar as salsa::storage::HasIngredientsFor<
                    SourceMap,
                >>::ingredient(jar);
                ingredients.0.register_dependent_fn(index)
            }
        }
        impl<DB> salsa::tracked_struct::TrackedStructInDb<DB> for SourceMap
        where
            DB: ?Sized + salsa::DbWithJar<crate::Jar>,
        {
            fn database_key_index(self, db: &DB) -> salsa::DatabaseKeyIndex {
                let (jar, _) = <_ as salsa::storage::HasJar<crate::Jar>>::jar(db);
                let ingredients = <crate::Jar as salsa::storage::HasIngredientsFor<
                    SourceMap,
                >>::ingredient(jar);
                ingredients.0.database_key_index(self)
            }
        }
        impl salsa::AsId for SourceMap {
            fn as_id(self) -> salsa::Id {
                self.0
            }
            fn from_id(id: salsa::Id) -> Self {
                SourceMap(id)
            }
        }
        impl ::salsa::DebugWithDb<<crate::Jar as salsa::jar::Jar<'_>>::DynDb>
        for SourceMap {
            fn fmt(
                &self,
                f: &mut ::std::fmt::Formatter<'_>,
                _db: &<crate::Jar as salsa::jar::Jar<'_>>::DynDb,
            ) -> ::std::fmt::Result {
                #[allow(unused_imports)]
                use ::salsa::debug::helper::Fallback;
                let mut debug_struct = &mut f.debug_struct("SourceMap");
                debug_struct = debug_struct.field("[salsa id]", &self.0.as_u32());
                debug_struct = debug_struct
                    .field(
                        "tokens",
                        &::salsa::debug::helper::SalsaDebug::<
                            Vec<Spanned>,
                            <crate::Jar as salsa::jar::Jar<'_>>::DynDb,
                        >::salsa_debug(
                            #[allow(clippy::needless_borrow)]
                            &self.tokens(_db),
                            _db,
                        ),
                    );
                debug_struct.finish()
            }
        }
        #[allow(non_camel_case_types)]
        pub struct calculate_line_lengths {
            intern_map: salsa::interned::IdentityInterner<SourceProgram>,
            function: salsa::function::FunctionIngredient<Self>,
        }
        impl salsa::function::Configuration for calculate_line_lengths {
            type Jar = crate::Jar;
            type SalsaStruct = SourceProgram;
            type Key = SourceProgram;
            type Value = Vec<usize>;
            const CYCLE_STRATEGY: salsa::cycle::CycleRecoveryStrategy = salsa::cycle::CycleRecoveryStrategy::Panic;
            fn should_backdate_value(v1: &Self::Value, v2: &Self::Value) -> bool {
                salsa::function::should_backdate_value(v1, v2)
            }
            fn execute(
                __db: &salsa::function::DynDb<Self>,
                __id: Self::Key,
            ) -> Self::Value {
                pub fn __fn(db: &dyn Db, src: SourceProgram) -> Vec<usize> {
                    src.text(db).lines().map(|x| x.len()).collect()
                }
                let (__jar, __runtime) = <_ as salsa::storage::HasJar<
                    crate::Jar,
                >>::jar(__db);
                let __ingredients = <_ as salsa::storage::HasIngredientsFor<
                    calculate_line_lengths,
                >>::ingredient(__jar);
                let __key = __ingredients.intern_map.data(__runtime, __id).clone();
                __fn(__db, __key.0)
            }
            fn recover_from_cycle(
                _db: &salsa::function::DynDb<Self>,
                _cycle: &salsa::Cycle,
                _key: Self::Key,
            ) -> Self::Value {
                {
                    #[cold]
                    #[track_caller]
                    #[inline(never)]
                    const fn panic_cold_explicit() -> ! {
                        ::core::panicking::panic_explicit()
                    }
                    panic_cold_explicit();
                }
            }
        }
        impl salsa::storage::IngredientsFor for calculate_line_lengths {
            type Ingredients = Self;
            type Jar = crate::Jar;
            fn create_ingredients<DB>(
                routes: &mut salsa::routes::Routes<DB>,
            ) -> Self::Ingredients
            where
                DB: salsa::DbWithJar<Self::Jar> + salsa::storage::JarFromJars<Self::Jar>,
            {
                Self {
                    intern_map: salsa::interned::IdentityInterner::new(),
                    function: {
                        let index = routes
                            .push(
                                |jars| {
                                    let jar = <DB as salsa::storage::JarFromJars<
                                        Self::Jar,
                                    >>::jar_from_jars(jars);
                                    let ingredients = <_ as salsa::storage::HasIngredientsFor<
                                        Self::Ingredients,
                                    >>::ingredient(jar);
                                    &ingredients.function
                                },
                                |jars| {
                                    let jar = <DB as salsa::storage::JarFromJars<
                                        Self::Jar,
                                    >>::jar_from_jars_mut(jars);
                                    let ingredients = <_ as salsa::storage::HasIngredientsFor<
                                        Self::Ingredients,
                                    >>::ingredient_mut(jar);
                                    &mut ingredients.function
                                },
                            );
                        let ingredient = salsa::function::FunctionIngredient::new(
                            index,
                            "calculate_line_lengths",
                        );
                        ingredient.set_capacity(0usize);
                        ingredient
                    },
                }
            }
        }
        impl calculate_line_lengths {
            #[allow(dead_code, clippy::needless_lifetimes)]
            pub fn get<'__db>(
                db: &'__db dyn Db,
                src: SourceProgram,
            ) -> &'__db Vec<usize> {
                let (__jar, __runtime) = <_ as salsa::storage::HasJar<
                    crate::Jar,
                >>::jar(db);
                let __ingredients = <_ as salsa::storage::HasIngredientsFor<
                    calculate_line_lengths,
                >>::ingredient(__jar);
                let __key = __ingredients.intern_map.intern(__runtime, (src));
                __ingredients.function.fetch(db, __key)
            }
            #[allow(dead_code, clippy::needless_lifetimes)]
            pub fn set(db: &mut dyn Db, src: SourceProgram, __value: Vec<usize>) {
                let (__jar, __runtime) = <_ as salsa::storage::HasJar<
                    crate::Jar,
                >>::jar_mut(db);
                let __ingredients = <_ as salsa::storage::HasIngredientsFor<
                    calculate_line_lengths,
                >>::ingredient_mut(__jar);
                let __key = __ingredients.intern_map.intern(__runtime, (src));
                __ingredients
                    .function
                    .store(__runtime, __key, __value, salsa::Durability::LOW)
            }
            #[allow(dead_code, clippy::needless_lifetimes)]
            pub fn accumulated<'__db, __A: salsa::accumulator::Accumulator>(
                db: &'__db dyn Db,
                src: SourceProgram,
            ) -> Vec<<__A as salsa::accumulator::Accumulator>::Data>
            where
                <crate::Jar as salsa::jar::Jar<
                    '__db,
                >>::DynDb: salsa::storage::HasJar<
                    <__A as salsa::accumulator::Accumulator>::Jar,
                >,
            {
                let (__jar, __runtime) = <_ as salsa::storage::HasJar<
                    crate::Jar,
                >>::jar(db);
                let __ingredients = <_ as salsa::storage::HasIngredientsFor<
                    calculate_line_lengths,
                >>::ingredient(__jar);
                let __key = __ingredients.intern_map.intern(__runtime, (src));
                __ingredients.function.accumulated::<__A>(db, __key)
            }
        }
        #[allow(clippy::needless_lifetimes)]
        pub fn calculate_line_lengths(db: &dyn Db, src: SourceProgram) -> Vec<usize> {
            Clone::clone(calculate_line_lengths::get(db, src))
        }
        pub struct SpanOverlap(
            <SpanOverlap as ::bitflags::__private::PublicFlags>::Internal,
        );
        #[automatically_derived]
        impl ::core::fmt::Debug for SpanOverlap {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                ::core::fmt::Formatter::debug_tuple_field1_finish(
                    f,
                    "SpanOverlap",
                    &&self.0,
                )
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for SpanOverlap {
            #[inline]
            fn clone(&self) -> SpanOverlap {
                let _: ::core::clone::AssertParamIsClone<
                    <SpanOverlap as ::bitflags::__private::PublicFlags>::Internal,
                >;
                *self
            }
        }
        #[automatically_derived]
        impl ::core::marker::Copy for SpanOverlap {}
        #[automatically_derived]
        impl ::core::marker::StructuralPartialEq for SpanOverlap {}
        #[automatically_derived]
        impl ::core::cmp::PartialEq for SpanOverlap {
            #[inline]
            fn eq(&self, other: &SpanOverlap) -> bool {
                self.0 == other.0
            }
        }
        #[automatically_derived]
        impl ::core::marker::StructuralEq for SpanOverlap {}
        #[automatically_derived]
        impl ::core::cmp::Eq for SpanOverlap {
            #[inline]
            #[doc(hidden)]
            #[coverage(off)]
            fn assert_receiver_is_total_eq(&self) -> () {
                let _: ::core::cmp::AssertParamIsEq<
                    <SpanOverlap as ::bitflags::__private::PublicFlags>::Internal,
                >;
            }
        }
        #[automatically_derived]
        impl ::core::cmp::PartialOrd for SpanOverlap {
            #[inline]
            fn partial_cmp(
                &self,
                other: &SpanOverlap,
            ) -> ::core::option::Option<::core::cmp::Ordering> {
                ::core::cmp::PartialOrd::partial_cmp(&self.0, &other.0)
            }
        }
        #[automatically_derived]
        impl ::core::cmp::Ord for SpanOverlap {
            #[inline]
            fn cmp(&self, other: &SpanOverlap) -> ::core::cmp::Ordering {
                ::core::cmp::Ord::cmp(&self.0, &other.0)
            }
        }
        #[automatically_derived]
        impl ::core::hash::Hash for SpanOverlap {
            #[inline]
            fn hash<__H: ::core::hash::Hasher>(&self, state: &mut __H) -> () {
                ::core::hash::Hash::hash(&self.0, state)
            }
        }
        impl SpanOverlap {
            #[allow(deprecated, non_upper_case_globals)]
            pub const NONE: Self = Self::from_bits_retain(0b0000);
            #[allow(deprecated, non_upper_case_globals)]
            pub const START: Self = Self::from_bits_retain(0b0001);
            #[allow(deprecated, non_upper_case_globals)]
            pub const END: Self = Self::from_bits_retain(0b0010);
            #[allow(deprecated, non_upper_case_globals)]
            pub const BOTH: Self = Self::from_bits_retain(0b0011);
        }
        impl ::bitflags::Flags for SpanOverlap {
            const FLAGS: &'static [::bitflags::Flag<SpanOverlap>] = &[
                {
                    #[allow(deprecated, non_upper_case_globals)]
                    ::bitflags::Flag::new("NONE", SpanOverlap::NONE)
                },
                {
                    #[allow(deprecated, non_upper_case_globals)]
                    ::bitflags::Flag::new("START", SpanOverlap::START)
                },
                {
                    #[allow(deprecated, non_upper_case_globals)]
                    ::bitflags::Flag::new("END", SpanOverlap::END)
                },
                {
                    #[allow(deprecated, non_upper_case_globals)]
                    ::bitflags::Flag::new("BOTH", SpanOverlap::BOTH)
                },
            ];
            type Bits = u8;
            fn bits(&self) -> u8 {
                SpanOverlap::bits(self)
            }
            fn from_bits_retain(bits: u8) -> SpanOverlap {
                SpanOverlap::from_bits_retain(bits)
            }
        }
        #[allow(
            dead_code,
            deprecated,
            unused_doc_comments,
            unused_attributes,
            unused_mut,
            unused_imports,
            non_upper_case_globals,
            clippy::assign_op_pattern,
            clippy::indexing_slicing,
            clippy::same_name_method,
            clippy::iter_without_into_iter,
        )]
        const _: () = {
            #[repr(transparent)]
            pub struct InternalBitFlags(u8);
            #[automatically_derived]
            impl ::core::clone::Clone for InternalBitFlags {
                #[inline]
                fn clone(&self) -> InternalBitFlags {
                    let _: ::core::clone::AssertParamIsClone<u8>;
                    *self
                }
            }
            #[automatically_derived]
            impl ::core::marker::Copy for InternalBitFlags {}
            #[automatically_derived]
            impl ::core::marker::StructuralPartialEq for InternalBitFlags {}
            #[automatically_derived]
            impl ::core::cmp::PartialEq for InternalBitFlags {
                #[inline]
                fn eq(&self, other: &InternalBitFlags) -> bool {
                    self.0 == other.0
                }
            }
            #[automatically_derived]
            impl ::core::marker::StructuralEq for InternalBitFlags {}
            #[automatically_derived]
            impl ::core::cmp::Eq for InternalBitFlags {
                #[inline]
                #[doc(hidden)]
                #[coverage(off)]
                fn assert_receiver_is_total_eq(&self) -> () {
                    let _: ::core::cmp::AssertParamIsEq<u8>;
                }
            }
            #[automatically_derived]
            impl ::core::cmp::PartialOrd for InternalBitFlags {
                #[inline]
                fn partial_cmp(
                    &self,
                    other: &InternalBitFlags,
                ) -> ::core::option::Option<::core::cmp::Ordering> {
                    ::core::cmp::PartialOrd::partial_cmp(&self.0, &other.0)
                }
            }
            #[automatically_derived]
            impl ::core::cmp::Ord for InternalBitFlags {
                #[inline]
                fn cmp(&self, other: &InternalBitFlags) -> ::core::cmp::Ordering {
                    ::core::cmp::Ord::cmp(&self.0, &other.0)
                }
            }
            #[automatically_derived]
            impl ::core::hash::Hash for InternalBitFlags {
                #[inline]
                fn hash<__H: ::core::hash::Hasher>(&self, state: &mut __H) -> () {
                    ::core::hash::Hash::hash(&self.0, state)
                }
            }
            impl ::bitflags::__private::PublicFlags for SpanOverlap {
                type Primitive = u8;
                type Internal = InternalBitFlags;
            }
            impl ::bitflags::__private::core::default::Default for InternalBitFlags {
                #[inline]
                fn default() -> Self {
                    InternalBitFlags::empty()
                }
            }
            impl ::bitflags::__private::core::fmt::Debug for InternalBitFlags {
                fn fmt(
                    &self,
                    f: &mut ::bitflags::__private::core::fmt::Formatter<'_>,
                ) -> ::bitflags::__private::core::fmt::Result {
                    if self.is_empty() {
                        f.write_fmt(
                            format_args!("{0:#x}", <u8 as ::bitflags::Bits>::EMPTY),
                        )
                    } else {
                        ::bitflags::__private::core::fmt::Display::fmt(self, f)
                    }
                }
            }
            impl ::bitflags::__private::core::fmt::Display for InternalBitFlags {
                fn fmt(
                    &self,
                    f: &mut ::bitflags::__private::core::fmt::Formatter<'_>,
                ) -> ::bitflags::__private::core::fmt::Result {
                    ::bitflags::parser::to_writer(&SpanOverlap(*self), f)
                }
            }
            impl ::bitflags::__private::core::str::FromStr for InternalBitFlags {
                type Err = ::bitflags::parser::ParseError;
                fn from_str(
                    s: &str,
                ) -> ::bitflags::__private::core::result::Result<Self, Self::Err> {
                    ::bitflags::parser::from_str::<SpanOverlap>(s).map(|flags| flags.0)
                }
            }
            impl ::bitflags::__private::core::convert::AsRef<u8> for InternalBitFlags {
                fn as_ref(&self) -> &u8 {
                    &self.0
                }
            }
            impl ::bitflags::__private::core::convert::From<u8> for InternalBitFlags {
                fn from(bits: u8) -> Self {
                    Self::from_bits_retain(bits)
                }
            }
            #[allow(dead_code, deprecated, unused_attributes)]
            impl InternalBitFlags {
                /// Get a flags value with all bits unset.
                #[inline]
                pub const fn empty() -> Self {
                    { Self(<u8 as ::bitflags::Bits>::EMPTY) }
                }
                /// Get a flags value with all known bits set.
                #[inline]
                pub const fn all() -> Self {
                    {
                        let mut truncated = <u8 as ::bitflags::Bits>::EMPTY;
                        let mut i = 0;
                        {
                            {
                                let flag = <SpanOverlap as ::bitflags::Flags>::FLAGS[i]
                                    .value()
                                    .bits();
                                truncated = truncated | flag;
                                i += 1;
                            }
                        };
                        {
                            {
                                let flag = <SpanOverlap as ::bitflags::Flags>::FLAGS[i]
                                    .value()
                                    .bits();
                                truncated = truncated | flag;
                                i += 1;
                            }
                        };
                        {
                            {
                                let flag = <SpanOverlap as ::bitflags::Flags>::FLAGS[i]
                                    .value()
                                    .bits();
                                truncated = truncated | flag;
                                i += 1;
                            }
                        };
                        {
                            {
                                let flag = <SpanOverlap as ::bitflags::Flags>::FLAGS[i]
                                    .value()
                                    .bits();
                                truncated = truncated | flag;
                                i += 1;
                            }
                        };
                        let _ = i;
                        Self::from_bits_retain(truncated)
                    }
                }
                /// Get the underlying bits value.
                ///
                /// The returned value is exactly the bits set in this flags value.
                #[inline]
                pub const fn bits(&self) -> u8 {
                    let f = self;
                    { f.0 }
                }
                /// Convert from a bits value.
                ///
                /// This method will return `None` if any unknown bits are set.
                #[inline]
                pub const fn from_bits(
                    bits: u8,
                ) -> ::bitflags::__private::core::option::Option<Self> {
                    let bits = bits;
                    {
                        let truncated = Self::from_bits_truncate(bits).0;
                        if truncated == bits {
                            ::bitflags::__private::core::option::Option::Some(Self(bits))
                        } else {
                            ::bitflags::__private::core::option::Option::None
                        }
                    }
                }
                /// Convert from a bits value, unsetting any unknown bits.
                #[inline]
                pub const fn from_bits_truncate(bits: u8) -> Self {
                    let bits = bits;
                    { Self(bits & Self::all().bits()) }
                }
                /// Convert from a bits value exactly.
                #[inline]
                pub const fn from_bits_retain(bits: u8) -> Self {
                    let bits = bits;
                    { Self(bits) }
                }
                /// Get a flags value with the bits of a flag with the given name set.
                ///
                /// This method will return `None` if `name` is empty or doesn't
                /// correspond to any named flag.
                #[inline]
                pub fn from_name(
                    name: &str,
                ) -> ::bitflags::__private::core::option::Option<Self> {
                    let name = name;
                    {
                        {
                            if name == "NONE" {
                                return ::bitflags::__private::core::option::Option::Some(
                                    Self(SpanOverlap::NONE.bits()),
                                );
                            }
                        };
                        {
                            if name == "START" {
                                return ::bitflags::__private::core::option::Option::Some(
                                    Self(SpanOverlap::START.bits()),
                                );
                            }
                        };
                        {
                            if name == "END" {
                                return ::bitflags::__private::core::option::Option::Some(
                                    Self(SpanOverlap::END.bits()),
                                );
                            }
                        };
                        {
                            if name == "BOTH" {
                                return ::bitflags::__private::core::option::Option::Some(
                                    Self(SpanOverlap::BOTH.bits()),
                                );
                            }
                        };
                        let _ = name;
                        ::bitflags::__private::core::option::Option::None
                    }
                }
                /// Whether all bits in this flags value are unset.
                #[inline]
                pub const fn is_empty(&self) -> bool {
                    let f = self;
                    { f.bits() == <u8 as ::bitflags::Bits>::EMPTY }
                }
                /// Whether all known bits in this flags value are set.
                #[inline]
                pub const fn is_all(&self) -> bool {
                    let f = self;
                    { Self::all().bits() | f.bits() == f.bits() }
                }
                /// Whether any set bits in a source flags value are also set in a target flags value.
                #[inline]
                pub const fn intersects(&self, other: Self) -> bool {
                    let f = self;
                    let other = other;
                    { f.bits() & other.bits() != <u8 as ::bitflags::Bits>::EMPTY }
                }
                /// Whether all set bits in a source flags value are also set in a target flags value.
                #[inline]
                pub const fn contains(&self, other: Self) -> bool {
                    let f = self;
                    let other = other;
                    { f.bits() & other.bits() == other.bits() }
                }
                /// The bitwise or (`|`) of the bits in two flags values.
                #[inline]
                pub fn insert(&mut self, other: Self) {
                    let f = self;
                    let other = other;
                    {
                        *f = Self::from_bits_retain(f.bits()).union(other);
                    }
                }
                /// The intersection of a source flags value with the complement of a target flags value (`&!`).
                ///
                /// This method is not equivalent to `self & !other` when `other` has unknown bits set.
                /// `remove` won't truncate `other`, but the `!` operator will.
                #[inline]
                pub fn remove(&mut self, other: Self) {
                    let f = self;
                    let other = other;
                    {
                        *f = Self::from_bits_retain(f.bits()).difference(other);
                    }
                }
                /// The bitwise exclusive-or (`^`) of the bits in two flags values.
                #[inline]
                pub fn toggle(&mut self, other: Self) {
                    let f = self;
                    let other = other;
                    {
                        *f = Self::from_bits_retain(f.bits())
                            .symmetric_difference(other);
                    }
                }
                /// Call `insert` when `value` is `true` or `remove` when `value` is `false`.
                #[inline]
                pub fn set(&mut self, other: Self, value: bool) {
                    let f = self;
                    let other = other;
                    let value = value;
                    {
                        if value {
                            f.insert(other);
                        } else {
                            f.remove(other);
                        }
                    }
                }
                /// The bitwise and (`&`) of the bits in two flags values.
                #[inline]
                #[must_use]
                pub const fn intersection(self, other: Self) -> Self {
                    let f = self;
                    let other = other;
                    { Self::from_bits_retain(f.bits() & other.bits()) }
                }
                /// The bitwise or (`|`) of the bits in two flags values.
                #[inline]
                #[must_use]
                pub const fn union(self, other: Self) -> Self {
                    let f = self;
                    let other = other;
                    { Self::from_bits_retain(f.bits() | other.bits()) }
                }
                /// The intersection of a source flags value with the complement of a target flags value (`&!`).
                ///
                /// This method is not equivalent to `self & !other` when `other` has unknown bits set.
                /// `difference` won't truncate `other`, but the `!` operator will.
                #[inline]
                #[must_use]
                pub const fn difference(self, other: Self) -> Self {
                    let f = self;
                    let other = other;
                    { Self::from_bits_retain(f.bits() & !other.bits()) }
                }
                /// The bitwise exclusive-or (`^`) of the bits in two flags values.
                #[inline]
                #[must_use]
                pub const fn symmetric_difference(self, other: Self) -> Self {
                    let f = self;
                    let other = other;
                    { Self::from_bits_retain(f.bits() ^ other.bits()) }
                }
                /// The bitwise negation (`!`) of the bits in a flags value, truncating the result.
                #[inline]
                #[must_use]
                pub const fn complement(self) -> Self {
                    let f = self;
                    { Self::from_bits_truncate(!f.bits()) }
                }
            }
            impl ::bitflags::__private::core::fmt::Binary for InternalBitFlags {
                fn fmt(
                    &self,
                    f: &mut ::bitflags::__private::core::fmt::Formatter,
                ) -> ::bitflags::__private::core::fmt::Result {
                    let inner = self.0;
                    ::bitflags::__private::core::fmt::Binary::fmt(&inner, f)
                }
            }
            impl ::bitflags::__private::core::fmt::Octal for InternalBitFlags {
                fn fmt(
                    &self,
                    f: &mut ::bitflags::__private::core::fmt::Formatter,
                ) -> ::bitflags::__private::core::fmt::Result {
                    let inner = self.0;
                    ::bitflags::__private::core::fmt::Octal::fmt(&inner, f)
                }
            }
            impl ::bitflags::__private::core::fmt::LowerHex for InternalBitFlags {
                fn fmt(
                    &self,
                    f: &mut ::bitflags::__private::core::fmt::Formatter,
                ) -> ::bitflags::__private::core::fmt::Result {
                    let inner = self.0;
                    ::bitflags::__private::core::fmt::LowerHex::fmt(&inner, f)
                }
            }
            impl ::bitflags::__private::core::fmt::UpperHex for InternalBitFlags {
                fn fmt(
                    &self,
                    f: &mut ::bitflags::__private::core::fmt::Formatter,
                ) -> ::bitflags::__private::core::fmt::Result {
                    let inner = self.0;
                    ::bitflags::__private::core::fmt::UpperHex::fmt(&inner, f)
                }
            }
            impl ::bitflags::__private::core::ops::BitOr for InternalBitFlags {
                type Output = Self;
                /// The bitwise or (`|`) of the bits in two flags values.
                #[inline]
                fn bitor(self, other: InternalBitFlags) -> Self {
                    self.union(other)
                }
            }
            impl ::bitflags::__private::core::ops::BitOrAssign for InternalBitFlags {
                /// The bitwise or (`|`) of the bits in two flags values.
                #[inline]
                fn bitor_assign(&mut self, other: Self) {
                    self.insert(other);
                }
            }
            impl ::bitflags::__private::core::ops::BitXor for InternalBitFlags {
                type Output = Self;
                /// The bitwise exclusive-or (`^`) of the bits in two flags values.
                #[inline]
                fn bitxor(self, other: Self) -> Self {
                    self.symmetric_difference(other)
                }
            }
            impl ::bitflags::__private::core::ops::BitXorAssign for InternalBitFlags {
                /// The bitwise exclusive-or (`^`) of the bits in two flags values.
                #[inline]
                fn bitxor_assign(&mut self, other: Self) {
                    self.toggle(other);
                }
            }
            impl ::bitflags::__private::core::ops::BitAnd for InternalBitFlags {
                type Output = Self;
                /// The bitwise and (`&`) of the bits in two flags values.
                #[inline]
                fn bitand(self, other: Self) -> Self {
                    self.intersection(other)
                }
            }
            impl ::bitflags::__private::core::ops::BitAndAssign for InternalBitFlags {
                /// The bitwise and (`&`) of the bits in two flags values.
                #[inline]
                fn bitand_assign(&mut self, other: Self) {
                    *self = Self::from_bits_retain(self.bits()).intersection(other);
                }
            }
            impl ::bitflags::__private::core::ops::Sub for InternalBitFlags {
                type Output = Self;
                /// The intersection of a source flags value with the complement of a target flags value (`&!`).
                ///
                /// This method is not equivalent to `self & !other` when `other` has unknown bits set.
                /// `difference` won't truncate `other`, but the `!` operator will.
                #[inline]
                fn sub(self, other: Self) -> Self {
                    self.difference(other)
                }
            }
            impl ::bitflags::__private::core::ops::SubAssign for InternalBitFlags {
                /// The intersection of a source flags value with the complement of a target flags value (`&!`).
                ///
                /// This method is not equivalent to `self & !other` when `other` has unknown bits set.
                /// `difference` won't truncate `other`, but the `!` operator will.
                #[inline]
                fn sub_assign(&mut self, other: Self) {
                    self.remove(other);
                }
            }
            impl ::bitflags::__private::core::ops::Not for InternalBitFlags {
                type Output = Self;
                /// The bitwise negation (`!`) of the bits in a flags value, truncating the result.
                #[inline]
                fn not(self) -> Self {
                    self.complement()
                }
            }
            impl ::bitflags::__private::core::iter::Extend<InternalBitFlags>
            for InternalBitFlags {
                /// The bitwise or (`|`) of the bits in each flags value.
                fn extend<
                    T: ::bitflags::__private::core::iter::IntoIterator<Item = Self>,
                >(&mut self, iterator: T) {
                    for item in iterator {
                        self.insert(item)
                    }
                }
            }
            impl ::bitflags::__private::core::iter::FromIterator<InternalBitFlags>
            for InternalBitFlags {
                /// The bitwise or (`|`) of the bits in each flags value.
                fn from_iter<
                    T: ::bitflags::__private::core::iter::IntoIterator<Item = Self>,
                >(iterator: T) -> Self {
                    use ::bitflags::__private::core::iter::Extend;
                    let mut result = Self::empty();
                    result.extend(iterator);
                    result
                }
            }
            impl InternalBitFlags {
                /// Yield a set of contained flags values.
                ///
                /// Each yielded flags value will correspond to a defined named flag. Any unknown bits
                /// will be yielded together as a final flags value.
                #[inline]
                pub const fn iter(&self) -> ::bitflags::iter::Iter<SpanOverlap> {
                    ::bitflags::iter::Iter::__private_const_new(
                        <SpanOverlap as ::bitflags::Flags>::FLAGS,
                        SpanOverlap::from_bits_retain(self.bits()),
                        SpanOverlap::from_bits_retain(self.bits()),
                    )
                }
                /// Yield a set of contained named flags values.
                ///
                /// This method is like [`iter`](#method.iter), except only yields bits in contained named flags.
                /// Any unknown bits, or bits not corresponding to a contained flag will not be yielded.
                #[inline]
                pub const fn iter_names(
                    &self,
                ) -> ::bitflags::iter::IterNames<SpanOverlap> {
                    ::bitflags::iter::IterNames::__private_const_new(
                        <SpanOverlap as ::bitflags::Flags>::FLAGS,
                        SpanOverlap::from_bits_retain(self.bits()),
                        SpanOverlap::from_bits_retain(self.bits()),
                    )
                }
            }
            impl ::bitflags::__private::core::iter::IntoIterator for InternalBitFlags {
                type Item = SpanOverlap;
                type IntoIter = ::bitflags::iter::Iter<SpanOverlap>;
                fn into_iter(self) -> Self::IntoIter {
                    self.iter()
                }
            }
            impl InternalBitFlags {
                /// Returns a mutable reference to the raw value of the flags currently stored.
                #[inline]
                pub fn bits_mut(&mut self) -> &mut u8 {
                    &mut self.0
                }
            }
            #[allow(dead_code, deprecated, unused_attributes)]
            impl SpanOverlap {
                /// Get a flags value with all bits unset.
                #[inline]
                pub const fn empty() -> Self {
                    { Self(InternalBitFlags::empty()) }
                }
                /// Get a flags value with all known bits set.
                #[inline]
                pub const fn all() -> Self {
                    { Self(InternalBitFlags::all()) }
                }
                /// Get the underlying bits value.
                ///
                /// The returned value is exactly the bits set in this flags value.
                #[inline]
                pub const fn bits(&self) -> u8 {
                    let f = self;
                    { f.0.bits() }
                }
                /// Convert from a bits value.
                ///
                /// This method will return `None` if any unknown bits are set.
                #[inline]
                pub const fn from_bits(
                    bits: u8,
                ) -> ::bitflags::__private::core::option::Option<Self> {
                    let bits = bits;
                    {
                        match InternalBitFlags::from_bits(bits) {
                            ::bitflags::__private::core::option::Option::Some(bits) => {
                                ::bitflags::__private::core::option::Option::Some(
                                    Self(bits),
                                )
                            }
                            ::bitflags::__private::core::option::Option::None => {
                                ::bitflags::__private::core::option::Option::None
                            }
                        }
                    }
                }
                /// Convert from a bits value, unsetting any unknown bits.
                #[inline]
                pub const fn from_bits_truncate(bits: u8) -> Self {
                    let bits = bits;
                    { Self(InternalBitFlags::from_bits_truncate(bits)) }
                }
                /// Convert from a bits value exactly.
                #[inline]
                pub const fn from_bits_retain(bits: u8) -> Self {
                    let bits = bits;
                    { Self(InternalBitFlags::from_bits_retain(bits)) }
                }
                /// Get a flags value with the bits of a flag with the given name set.
                ///
                /// This method will return `None` if `name` is empty or doesn't
                /// correspond to any named flag.
                #[inline]
                pub fn from_name(
                    name: &str,
                ) -> ::bitflags::__private::core::option::Option<Self> {
                    let name = name;
                    {
                        match InternalBitFlags::from_name(name) {
                            ::bitflags::__private::core::option::Option::Some(bits) => {
                                ::bitflags::__private::core::option::Option::Some(
                                    Self(bits),
                                )
                            }
                            ::bitflags::__private::core::option::Option::None => {
                                ::bitflags::__private::core::option::Option::None
                            }
                        }
                    }
                }
                /// Whether all bits in this flags value are unset.
                #[inline]
                pub const fn is_empty(&self) -> bool {
                    let f = self;
                    { f.0.is_empty() }
                }
                /// Whether all known bits in this flags value are set.
                #[inline]
                pub const fn is_all(&self) -> bool {
                    let f = self;
                    { f.0.is_all() }
                }
                /// Whether any set bits in a source flags value are also set in a target flags value.
                #[inline]
                pub const fn intersects(&self, other: Self) -> bool {
                    let f = self;
                    let other = other;
                    { f.0.intersects(other.0) }
                }
                /// Whether all set bits in a source flags value are also set in a target flags value.
                #[inline]
                pub const fn contains(&self, other: Self) -> bool {
                    let f = self;
                    let other = other;
                    { f.0.contains(other.0) }
                }
                /// The bitwise or (`|`) of the bits in two flags values.
                #[inline]
                pub fn insert(&mut self, other: Self) {
                    let f = self;
                    let other = other;
                    { f.0.insert(other.0) }
                }
                /// The intersection of a source flags value with the complement of a target flags value (`&!`).
                ///
                /// This method is not equivalent to `self & !other` when `other` has unknown bits set.
                /// `remove` won't truncate `other`, but the `!` operator will.
                #[inline]
                pub fn remove(&mut self, other: Self) {
                    let f = self;
                    let other = other;
                    { f.0.remove(other.0) }
                }
                /// The bitwise exclusive-or (`^`) of the bits in two flags values.
                #[inline]
                pub fn toggle(&mut self, other: Self) {
                    let f = self;
                    let other = other;
                    { f.0.toggle(other.0) }
                }
                /// Call `insert` when `value` is `true` or `remove` when `value` is `false`.
                #[inline]
                pub fn set(&mut self, other: Self, value: bool) {
                    let f = self;
                    let other = other;
                    let value = value;
                    { f.0.set(other.0, value) }
                }
                /// The bitwise and (`&`) of the bits in two flags values.
                #[inline]
                #[must_use]
                pub const fn intersection(self, other: Self) -> Self {
                    let f = self;
                    let other = other;
                    { Self(f.0.intersection(other.0)) }
                }
                /// The bitwise or (`|`) of the bits in two flags values.
                #[inline]
                #[must_use]
                pub const fn union(self, other: Self) -> Self {
                    let f = self;
                    let other = other;
                    { Self(f.0.union(other.0)) }
                }
                /// The intersection of a source flags value with the complement of a target flags value (`&!`).
                ///
                /// This method is not equivalent to `self & !other` when `other` has unknown bits set.
                /// `difference` won't truncate `other`, but the `!` operator will.
                #[inline]
                #[must_use]
                pub const fn difference(self, other: Self) -> Self {
                    let f = self;
                    let other = other;
                    { Self(f.0.difference(other.0)) }
                }
                /// The bitwise exclusive-or (`^`) of the bits in two flags values.
                #[inline]
                #[must_use]
                pub const fn symmetric_difference(self, other: Self) -> Self {
                    let f = self;
                    let other = other;
                    { Self(f.0.symmetric_difference(other.0)) }
                }
                /// The bitwise negation (`!`) of the bits in a flags value, truncating the result.
                #[inline]
                #[must_use]
                pub const fn complement(self) -> Self {
                    let f = self;
                    { Self(f.0.complement()) }
                }
            }
            impl ::bitflags::__private::core::fmt::Binary for SpanOverlap {
                fn fmt(
                    &self,
                    f: &mut ::bitflags::__private::core::fmt::Formatter,
                ) -> ::bitflags::__private::core::fmt::Result {
                    let inner = self.0;
                    ::bitflags::__private::core::fmt::Binary::fmt(&inner, f)
                }
            }
            impl ::bitflags::__private::core::fmt::Octal for SpanOverlap {
                fn fmt(
                    &self,
                    f: &mut ::bitflags::__private::core::fmt::Formatter,
                ) -> ::bitflags::__private::core::fmt::Result {
                    let inner = self.0;
                    ::bitflags::__private::core::fmt::Octal::fmt(&inner, f)
                }
            }
            impl ::bitflags::__private::core::fmt::LowerHex for SpanOverlap {
                fn fmt(
                    &self,
                    f: &mut ::bitflags::__private::core::fmt::Formatter,
                ) -> ::bitflags::__private::core::fmt::Result {
                    let inner = self.0;
                    ::bitflags::__private::core::fmt::LowerHex::fmt(&inner, f)
                }
            }
            impl ::bitflags::__private::core::fmt::UpperHex for SpanOverlap {
                fn fmt(
                    &self,
                    f: &mut ::bitflags::__private::core::fmt::Formatter,
                ) -> ::bitflags::__private::core::fmt::Result {
                    let inner = self.0;
                    ::bitflags::__private::core::fmt::UpperHex::fmt(&inner, f)
                }
            }
            impl ::bitflags::__private::core::ops::BitOr for SpanOverlap {
                type Output = Self;
                /// The bitwise or (`|`) of the bits in two flags values.
                #[inline]
                fn bitor(self, other: SpanOverlap) -> Self {
                    self.union(other)
                }
            }
            impl ::bitflags::__private::core::ops::BitOrAssign for SpanOverlap {
                /// The bitwise or (`|`) of the bits in two flags values.
                #[inline]
                fn bitor_assign(&mut self, other: Self) {
                    self.insert(other);
                }
            }
            impl ::bitflags::__private::core::ops::BitXor for SpanOverlap {
                type Output = Self;
                /// The bitwise exclusive-or (`^`) of the bits in two flags values.
                #[inline]
                fn bitxor(self, other: Self) -> Self {
                    self.symmetric_difference(other)
                }
            }
            impl ::bitflags::__private::core::ops::BitXorAssign for SpanOverlap {
                /// The bitwise exclusive-or (`^`) of the bits in two flags values.
                #[inline]
                fn bitxor_assign(&mut self, other: Self) {
                    self.toggle(other);
                }
            }
            impl ::bitflags::__private::core::ops::BitAnd for SpanOverlap {
                type Output = Self;
                /// The bitwise and (`&`) of the bits in two flags values.
                #[inline]
                fn bitand(self, other: Self) -> Self {
                    self.intersection(other)
                }
            }
            impl ::bitflags::__private::core::ops::BitAndAssign for SpanOverlap {
                /// The bitwise and (`&`) of the bits in two flags values.
                #[inline]
                fn bitand_assign(&mut self, other: Self) {
                    *self = Self::from_bits_retain(self.bits()).intersection(other);
                }
            }
            impl ::bitflags::__private::core::ops::Sub for SpanOverlap {
                type Output = Self;
                /// The intersection of a source flags value with the complement of a target flags value (`&!`).
                ///
                /// This method is not equivalent to `self & !other` when `other` has unknown bits set.
                /// `difference` won't truncate `other`, but the `!` operator will.
                #[inline]
                fn sub(self, other: Self) -> Self {
                    self.difference(other)
                }
            }
            impl ::bitflags::__private::core::ops::SubAssign for SpanOverlap {
                /// The intersection of a source flags value with the complement of a target flags value (`&!`).
                ///
                /// This method is not equivalent to `self & !other` when `other` has unknown bits set.
                /// `difference` won't truncate `other`, but the `!` operator will.
                #[inline]
                fn sub_assign(&mut self, other: Self) {
                    self.remove(other);
                }
            }
            impl ::bitflags::__private::core::ops::Not for SpanOverlap {
                type Output = Self;
                /// The bitwise negation (`!`) of the bits in a flags value, truncating the result.
                #[inline]
                fn not(self) -> Self {
                    self.complement()
                }
            }
            impl ::bitflags::__private::core::iter::Extend<SpanOverlap> for SpanOverlap {
                /// The bitwise or (`|`) of the bits in each flags value.
                fn extend<
                    T: ::bitflags::__private::core::iter::IntoIterator<Item = Self>,
                >(&mut self, iterator: T) {
                    for item in iterator {
                        self.insert(item)
                    }
                }
            }
            impl ::bitflags::__private::core::iter::FromIterator<SpanOverlap>
            for SpanOverlap {
                /// The bitwise or (`|`) of the bits in each flags value.
                fn from_iter<
                    T: ::bitflags::__private::core::iter::IntoIterator<Item = Self>,
                >(iterator: T) -> Self {
                    use ::bitflags::__private::core::iter::Extend;
                    let mut result = Self::empty();
                    result.extend(iterator);
                    result
                }
            }
            impl SpanOverlap {
                /// Yield a set of contained flags values.
                ///
                /// Each yielded flags value will correspond to a defined named flag. Any unknown bits
                /// will be yielded together as a final flags value.
                #[inline]
                pub const fn iter(&self) -> ::bitflags::iter::Iter<SpanOverlap> {
                    ::bitflags::iter::Iter::__private_const_new(
                        <SpanOverlap as ::bitflags::Flags>::FLAGS,
                        SpanOverlap::from_bits_retain(self.bits()),
                        SpanOverlap::from_bits_retain(self.bits()),
                    )
                }
                /// Yield a set of contained named flags values.
                ///
                /// This method is like [`iter`](#method.iter), except only yields bits in contained named flags.
                /// Any unknown bits, or bits not corresponding to a contained flag will not be yielded.
                #[inline]
                pub const fn iter_names(
                    &self,
                ) -> ::bitflags::iter::IterNames<SpanOverlap> {
                    ::bitflags::iter::IterNames::__private_const_new(
                        <SpanOverlap as ::bitflags::Flags>::FLAGS,
                        SpanOverlap::from_bits_retain(self.bits()),
                        SpanOverlap::from_bits_retain(self.bits()),
                    )
                }
            }
            impl ::bitflags::__private::core::iter::IntoIterator for SpanOverlap {
                type Item = SpanOverlap;
                type IntoIter = ::bitflags::iter::Iter<SpanOverlap>;
                fn into_iter(self) -> Self::IntoIter {
                    self.iter()
                }
            }
        };
        #[inline]
        pub fn cmp_range<T: Ord>(a: &Range<T>, b: &Range<T>) -> SpanOverlap {
            let mut overlap = SpanOverlap::NONE;
            if a.contains(&b.start) {
                overlap |= SpanOverlap::START;
            }
            if a.contains(&b.end) {
                overlap |= SpanOverlap::END;
            }
            overlap
        }
        #[allow(non_camel_case_types)]
        pub struct to_spans {
            intern_map: salsa::interned::IdentityInterner<SourceProgram>,
            function: salsa::function::FunctionIngredient<Self>,
        }
        impl salsa::function::Configuration for to_spans {
            type Jar = crate::Jar;
            type SalsaStruct = SourceProgram;
            type Key = SourceProgram;
            type Value = SourceMap;
            const CYCLE_STRATEGY: salsa::cycle::CycleRecoveryStrategy = salsa::cycle::CycleRecoveryStrategy::Panic;
            fn should_backdate_value(v1: &Self::Value, v2: &Self::Value) -> bool {
                salsa::function::should_backdate_value(v1, v2)
            }
            fn execute(
                __db: &salsa::function::DynDb<Self>,
                __id: Self::Key,
            ) -> Self::Value {
                pub fn __fn(db: &dyn Db, src: SourceProgram) -> SourceMap {
                    let mut spans = ::alloc::vec::Vec::new();
                    let lexer = crate::lexer::Lexer::new(src.text(db), 0);
                    for token in lexer {
                        match token.node {
                            crate::lexer::Token::Eof => break,
                            crate::lexer::Token::NewLine => continue,
                            _ => {}
                        }
                        spans
                            .push(
                                Spanned::new(
                                    db,
                                    Span::new(db, token.start..token.end),
                                    src,
                                    Position::new(db, token.pos.line, token.pos.col),
                                ),
                            );
                    }
                    SourceMap::new(db, spans)
                }
                let (__jar, __runtime) = <_ as salsa::storage::HasJar<
                    crate::Jar,
                >>::jar(__db);
                let __ingredients = <_ as salsa::storage::HasIngredientsFor<
                    to_spans,
                >>::ingredient(__jar);
                let __key = __ingredients.intern_map.data(__runtime, __id).clone();
                __fn(__db, __key.0)
            }
            fn recover_from_cycle(
                _db: &salsa::function::DynDb<Self>,
                _cycle: &salsa::Cycle,
                _key: Self::Key,
            ) -> Self::Value {
                {
                    #[cold]
                    #[track_caller]
                    #[inline(never)]
                    const fn panic_cold_explicit() -> ! {
                        ::core::panicking::panic_explicit()
                    }
                    panic_cold_explicit();
                }
            }
        }
        impl salsa::storage::IngredientsFor for to_spans {
            type Ingredients = Self;
            type Jar = crate::Jar;
            fn create_ingredients<DB>(
                routes: &mut salsa::routes::Routes<DB>,
            ) -> Self::Ingredients
            where
                DB: salsa::DbWithJar<Self::Jar> + salsa::storage::JarFromJars<Self::Jar>,
            {
                Self {
                    intern_map: salsa::interned::IdentityInterner::new(),
                    function: {
                        let index = routes
                            .push(
                                |jars| {
                                    let jar = <DB as salsa::storage::JarFromJars<
                                        Self::Jar,
                                    >>::jar_from_jars(jars);
                                    let ingredients = <_ as salsa::storage::HasIngredientsFor<
                                        Self::Ingredients,
                                    >>::ingredient(jar);
                                    &ingredients.function
                                },
                                |jars| {
                                    let jar = <DB as salsa::storage::JarFromJars<
                                        Self::Jar,
                                    >>::jar_from_jars_mut(jars);
                                    let ingredients = <_ as salsa::storage::HasIngredientsFor<
                                        Self::Ingredients,
                                    >>::ingredient_mut(jar);
                                    &mut ingredients.function
                                },
                            );
                        let ingredient = salsa::function::FunctionIngredient::new(
                            index,
                            "to_spans",
                        );
                        ingredient.set_capacity(0usize);
                        ingredient
                    },
                }
            }
        }
        impl to_spans {
            #[allow(dead_code, clippy::needless_lifetimes)]
            pub fn get<'__db>(
                db: &'__db dyn Db,
                src: SourceProgram,
            ) -> &'__db SourceMap {
                let (__jar, __runtime) = <_ as salsa::storage::HasJar<
                    crate::Jar,
                >>::jar(db);
                let __ingredients = <_ as salsa::storage::HasIngredientsFor<
                    to_spans,
                >>::ingredient(__jar);
                let __key = __ingredients.intern_map.intern(__runtime, (src));
                __ingredients.function.fetch(db, __key)
            }
            #[allow(dead_code, clippy::needless_lifetimes)]
            pub fn set(db: &mut dyn Db, src: SourceProgram, __value: SourceMap) {
                let (__jar, __runtime) = <_ as salsa::storage::HasJar<
                    crate::Jar,
                >>::jar_mut(db);
                let __ingredients = <_ as salsa::storage::HasIngredientsFor<
                    to_spans,
                >>::ingredient_mut(__jar);
                let __key = __ingredients.intern_map.intern(__runtime, (src));
                __ingredients
                    .function
                    .store(__runtime, __key, __value, salsa::Durability::LOW)
            }
            #[allow(dead_code, clippy::needless_lifetimes)]
            pub fn accumulated<'__db, __A: salsa::accumulator::Accumulator>(
                db: &'__db dyn Db,
                src: SourceProgram,
            ) -> Vec<<__A as salsa::accumulator::Accumulator>::Data>
            where
                <crate::Jar as salsa::jar::Jar<
                    '__db,
                >>::DynDb: salsa::storage::HasJar<
                    <__A as salsa::accumulator::Accumulator>::Jar,
                >,
            {
                let (__jar, __runtime) = <_ as salsa::storage::HasJar<
                    crate::Jar,
                >>::jar(db);
                let __ingredients = <_ as salsa::storage::HasIngredientsFor<
                    to_spans,
                >>::ingredient(__jar);
                let __key = __ingredients.intern_map.intern(__runtime, (src));
                __ingredients.function.accumulated::<__A>(db, __key)
            }
        }
        #[allow(clippy::needless_lifetimes)]
        pub fn to_spans(db: &dyn Db, src: SourceProgram) -> SourceMap {
            Clone::clone(to_spans::get(db, src))
        }
    }
    #[allow(non_camel_case_types)]
    pub struct compile {
        intern_map: salsa::interned::IdentityInterner<SourceProgram>,
        function: salsa::function::FunctionIngredient<Self>,
    }
    impl salsa::function::Configuration for compile {
        type Jar = crate::Jar;
        type SalsaStruct = SourceProgram;
        type Key = SourceProgram;
        type Value = ir::Program;
        const CYCLE_STRATEGY: salsa::cycle::CycleRecoveryStrategy = salsa::cycle::CycleRecoveryStrategy::Panic;
        fn should_backdate_value(v1: &Self::Value, v2: &Self::Value) -> bool {
            salsa::function::should_backdate_value(v1, v2)
        }
        fn execute(__db: &salsa::function::DynDb<Self>, __id: Self::Key) -> Self::Value {
            pub fn __fn(db: &dyn Db, src: SourceProgram) -> ir::Program {
                let mut errors: Vec<
                    lalrpop_util::ErrorRecovery<Location, crate::lexer::Token<'_>, &str>,
                > = ::alloc::vec::Vec::new();
                let wrapper = crate::lexer::TripleIterator::new(src.text(db));
                let t = crate::parser::src::SourceParser::new()
                    .parse(&mut errors, db, wrapper);
                if !errors.is_empty() {
                    let spans = text::to_spans(db, src);
                    let _tokens = spans.tokens(db);
                    for _error_range in Into::<Errors>::into(errors) {}
                }
                let modul = t.unwrap();
                let mut symbol_table = BTreeMap::new();
                for toplevel in modul.0 {
                    match toplevel.1 {
                        ast::Node::Visibility(_) => {
                            ::core::panicking::panic("not yet implemented")
                        }
                        ast::Node::BinaryExpression(_) => {
                            ::core::panicking::panic("not yet implemented")
                        }
                        ast::Node::Bool(_) => {
                            ::core::panicking::panic("not yet implemented")
                        }
                        ast::Node::Integer(_) => {
                            ::core::panicking::panic("not yet implemented")
                        }
                        ast::Node::Float(_) => {
                            ::core::panicking::panic("not yet implemented")
                        }
                        ast::Node::Ident(_) => {
                            ::core::panicking::panic("not yet implemented")
                        }
                        ast::Node::Binding(_) => {
                            ::core::panicking::panic("not yet implemented")
                        }
                        ast::Node::FnCall(_) => {
                            ::core::panicking::panic("not yet implemented")
                        }
                        ast::Node::String(_) => {
                            ::core::panicking::panic("not yet implemented")
                        }
                        ast::Node::FnDef(_) => {
                            {
                                let lvl = ::log::Level::Debug;
                                if lvl <= ::log::STATIC_MAX_LEVEL
                                    && lvl <= ::log::max_level()
                                {
                                    ::log::__private_api::log(
                                        format_args!("Function definition"),
                                        lvl,
                                        &(
                                            "srclang::compiler",
                                            "srclang::compiler",
                                            "src/compiler/mod.rs",
                                        ),
                                        45u32,
                                        (),
                                    );
                                }
                            };
                        }
                        ast::Node::EffectDef(_) => {
                            ::core::panicking::panic("not yet implemented")
                        }
                        ast::Node::StructDef(_) => {
                            ::core::panicking::panic("not yet implemented")
                        }
                        ast::Node::UseDef(usedef) => {}
                        ast::Node::Keyword(_) => {
                            ::core::panicking::panic("not yet implemented")
                        }
                        ast::Node::ImplDef(_) => {
                            ::core::panicking::panic("not yet implemented")
                        }
                        ast::Node::Branch(_) => {
                            ::core::panicking::panic("not yet implemented")
                        }
                        ast::Node::Error => {
                            ::core::panicking::panic("not yet implemented")
                        }
                        ast::Node::FieldAccess(_) => {
                            ::core::panicking::panic("not yet implemented")
                        }
                    }
                }
                let program = ir::Program::new(
                    db,
                    ::alloc::vec::Vec::new(),
                    symbol_table,
                );
                program
            }
            let (__jar, __runtime) = <_ as salsa::storage::HasJar<
                crate::Jar,
            >>::jar(__db);
            let __ingredients = <_ as salsa::storage::HasIngredientsFor<
                compile,
            >>::ingredient(__jar);
            let __key = __ingredients.intern_map.data(__runtime, __id).clone();
            __fn(__db, __key.0)
        }
        fn recover_from_cycle(
            _db: &salsa::function::DynDb<Self>,
            _cycle: &salsa::Cycle,
            _key: Self::Key,
        ) -> Self::Value {
            {
                #[cold]
                #[track_caller]
                #[inline(never)]
                const fn panic_cold_explicit() -> ! {
                    ::core::panicking::panic_explicit()
                }
                panic_cold_explicit();
            }
        }
    }
    impl salsa::storage::IngredientsFor for compile {
        type Ingredients = Self;
        type Jar = crate::Jar;
        fn create_ingredients<DB>(
            routes: &mut salsa::routes::Routes<DB>,
        ) -> Self::Ingredients
        where
            DB: salsa::DbWithJar<Self::Jar> + salsa::storage::JarFromJars<Self::Jar>,
        {
            Self {
                intern_map: salsa::interned::IdentityInterner::new(),
                function: {
                    let index = routes
                        .push(
                            |jars| {
                                let jar = <DB as salsa::storage::JarFromJars<
                                    Self::Jar,
                                >>::jar_from_jars(jars);
                                let ingredients = <_ as salsa::storage::HasIngredientsFor<
                                    Self::Ingredients,
                                >>::ingredient(jar);
                                &ingredients.function
                            },
                            |jars| {
                                let jar = <DB as salsa::storage::JarFromJars<
                                    Self::Jar,
                                >>::jar_from_jars_mut(jars);
                                let ingredients = <_ as salsa::storage::HasIngredientsFor<
                                    Self::Ingredients,
                                >>::ingredient_mut(jar);
                                &mut ingredients.function
                            },
                        );
                    let ingredient = salsa::function::FunctionIngredient::new(
                        index,
                        "compile",
                    );
                    ingredient.set_capacity(0usize);
                    ingredient
                },
            }
        }
    }
    impl compile {
        #[allow(dead_code, clippy::needless_lifetimes)]
        pub fn get<'__db>(db: &'__db dyn Db, src: SourceProgram) -> &'__db ir::Program {
            let (__jar, __runtime) = <_ as salsa::storage::HasJar<crate::Jar>>::jar(db);
            let __ingredients = <_ as salsa::storage::HasIngredientsFor<
                compile,
            >>::ingredient(__jar);
            let __key = __ingredients.intern_map.intern(__runtime, (src));
            __ingredients.function.fetch(db, __key)
        }
        #[allow(dead_code, clippy::needless_lifetimes)]
        pub fn set(db: &mut dyn Db, src: SourceProgram, __value: ir::Program) {
            let (__jar, __runtime) = <_ as salsa::storage::HasJar<
                crate::Jar,
            >>::jar_mut(db);
            let __ingredients = <_ as salsa::storage::HasIngredientsFor<
                compile,
            >>::ingredient_mut(__jar);
            let __key = __ingredients.intern_map.intern(__runtime, (src));
            __ingredients
                .function
                .store(__runtime, __key, __value, salsa::Durability::LOW)
        }
        #[allow(dead_code, clippy::needless_lifetimes)]
        pub fn accumulated<'__db, __A: salsa::accumulator::Accumulator>(
            db: &'__db dyn Db,
            src: SourceProgram,
        ) -> Vec<<__A as salsa::accumulator::Accumulator>::Data>
        where
            <crate::Jar as salsa::jar::Jar<
                '__db,
            >>::DynDb: salsa::storage::HasJar<
                <__A as salsa::accumulator::Accumulator>::Jar,
            >,
        {
            let (__jar, __runtime) = <_ as salsa::storage::HasJar<crate::Jar>>::jar(db);
            let __ingredients = <_ as salsa::storage::HasIngredientsFor<
                compile,
            >>::ingredient(__jar);
            let __key = __ingredients.intern_map.intern(__runtime, (src));
            __ingredients.function.accumulated::<__A>(db, __key)
        }
    }
    #[allow(clippy::needless_lifetimes)]
    pub fn compile(db: &dyn Db, src: SourceProgram) -> ir::Program {
        Clone::clone(compile::get(db, src))
    }
    #[allow(non_camel_case_types)]
    pub struct compile_effect {
        intern_map: salsa::interned::IdentityInterner<ir::EffectDef>,
        function: salsa::function::FunctionIngredient<Self>,
    }
    impl salsa::function::Configuration for compile_effect {
        type Jar = crate::Jar;
        type SalsaStruct = ir::EffectDef;
        type Key = ir::EffectDef;
        type Value = ();
        const CYCLE_STRATEGY: salsa::cycle::CycleRecoveryStrategy = salsa::cycle::CycleRecoveryStrategy::Panic;
        fn should_backdate_value(v1: &Self::Value, v2: &Self::Value) -> bool {
            salsa::function::should_backdate_value(v1, v2)
        }
        fn execute(__db: &salsa::function::DynDb<Self>, __id: Self::Key) -> Self::Value {
            pub fn __fn(_db: &dyn Db, _effect: ir::EffectDef) {}
            let (__jar, __runtime) = <_ as salsa::storage::HasJar<
                crate::Jar,
            >>::jar(__db);
            let __ingredients = <_ as salsa::storage::HasIngredientsFor<
                compile_effect,
            >>::ingredient(__jar);
            let __key = __ingredients.intern_map.data(__runtime, __id).clone();
            __fn(__db, __key.0)
        }
        fn recover_from_cycle(
            _db: &salsa::function::DynDb<Self>,
            _cycle: &salsa::Cycle,
            _key: Self::Key,
        ) -> Self::Value {
            {
                #[cold]
                #[track_caller]
                #[inline(never)]
                const fn panic_cold_explicit() -> ! {
                    ::core::panicking::panic_explicit()
                }
                panic_cold_explicit();
            }
        }
    }
    impl salsa::storage::IngredientsFor for compile_effect {
        type Ingredients = Self;
        type Jar = crate::Jar;
        fn create_ingredients<DB>(
            routes: &mut salsa::routes::Routes<DB>,
        ) -> Self::Ingredients
        where
            DB: salsa::DbWithJar<Self::Jar> + salsa::storage::JarFromJars<Self::Jar>,
        {
            Self {
                intern_map: salsa::interned::IdentityInterner::new(),
                function: {
                    let index = routes
                        .push(
                            |jars| {
                                let jar = <DB as salsa::storage::JarFromJars<
                                    Self::Jar,
                                >>::jar_from_jars(jars);
                                let ingredients = <_ as salsa::storage::HasIngredientsFor<
                                    Self::Ingredients,
                                >>::ingredient(jar);
                                &ingredients.function
                            },
                            |jars| {
                                let jar = <DB as salsa::storage::JarFromJars<
                                    Self::Jar,
                                >>::jar_from_jars_mut(jars);
                                let ingredients = <_ as salsa::storage::HasIngredientsFor<
                                    Self::Ingredients,
                                >>::ingredient_mut(jar);
                                &mut ingredients.function
                            },
                        );
                    let ingredient = salsa::function::FunctionIngredient::new(
                        index,
                        "compile_effect",
                    );
                    ingredient.set_capacity(0usize);
                    ingredient
                },
            }
        }
    }
    impl compile_effect {
        #[allow(dead_code, clippy::needless_lifetimes)]
        pub fn get<'__db>(_db: &'__db dyn Db, _effect: ir::EffectDef) -> &'__db () {
            let (__jar, __runtime) = <_ as salsa::storage::HasJar<crate::Jar>>::jar(_db);
            let __ingredients = <_ as salsa::storage::HasIngredientsFor<
                compile_effect,
            >>::ingredient(__jar);
            let __key = __ingredients.intern_map.intern(__runtime, (_effect));
            __ingredients.function.fetch(_db, __key)
        }
        #[allow(dead_code, clippy::needless_lifetimes)]
        pub fn set(_db: &mut dyn Db, _effect: ir::EffectDef, __value: ()) {
            let (__jar, __runtime) = <_ as salsa::storage::HasJar<
                crate::Jar,
            >>::jar_mut(_db);
            let __ingredients = <_ as salsa::storage::HasIngredientsFor<
                compile_effect,
            >>::ingredient_mut(__jar);
            let __key = __ingredients.intern_map.intern(__runtime, (_effect));
            __ingredients
                .function
                .store(__runtime, __key, __value, salsa::Durability::LOW)
        }
        #[allow(dead_code, clippy::needless_lifetimes)]
        pub fn accumulated<'__db, __A: salsa::accumulator::Accumulator>(
            _db: &'__db dyn Db,
            _effect: ir::EffectDef,
        ) -> Vec<<__A as salsa::accumulator::Accumulator>::Data>
        where
            <crate::Jar as salsa::jar::Jar<
                '__db,
            >>::DynDb: salsa::storage::HasJar<
                <__A as salsa::accumulator::Accumulator>::Jar,
            >,
        {
            let (__jar, __runtime) = <_ as salsa::storage::HasJar<crate::Jar>>::jar(_db);
            let __ingredients = <_ as salsa::storage::HasIngredientsFor<
                compile_effect,
            >>::ingredient(__jar);
            let __key = __ingredients.intern_map.intern(__runtime, (_effect));
            __ingredients.function.accumulated::<__A>(_db, __key)
        }
    }
    #[allow(clippy::needless_lifetimes)]
    pub fn compile_effect(_db: &dyn Db, _effect: ir::EffectDef) {
        Clone::clone(compile_effect::get(_db, _effect))
    }
    #[allow(non_camel_case_types)]
    pub struct add_imports {
        intern_map: salsa::interned::IdentityInterner<ir::Import>,
        function: salsa::function::FunctionIngredient<Self>,
    }
    impl salsa::function::Configuration for add_imports {
        type Jar = crate::Jar;
        type SalsaStruct = ir::Import;
        type Key = ir::Import;
        type Value = Vec<ir::Mangled>;
        const CYCLE_STRATEGY: salsa::cycle::CycleRecoveryStrategy = salsa::cycle::CycleRecoveryStrategy::Panic;
        fn should_backdate_value(v1: &Self::Value, v2: &Self::Value) -> bool {
            salsa::function::should_backdate_value(v1, v2)
        }
        fn execute(__db: &salsa::function::DynDb<Self>, __id: Self::Key) -> Self::Value {
            pub fn __fn(db: &dyn Db, import: ir::Import) -> Vec<ir::Mangled> {
                let mut mangled = ::alloc::vec::Vec::new();
                for imp in import.imports(db) {
                    mangled
                        .push(
                            ir::Mangled::new(
                                db,
                                {
                                    let res = ::alloc::fmt::format(
                                        format_args!("{0}_{1}", import.module(db), imp),
                                    );
                                    res
                                },
                            ),
                        );
                }
                mangled
            }
            let (__jar, __runtime) = <_ as salsa::storage::HasJar<
                crate::Jar,
            >>::jar(__db);
            let __ingredients = <_ as salsa::storage::HasIngredientsFor<
                add_imports,
            >>::ingredient(__jar);
            let __key = __ingredients.intern_map.data(__runtime, __id).clone();
            __fn(__db, __key.0)
        }
        fn recover_from_cycle(
            _db: &salsa::function::DynDb<Self>,
            _cycle: &salsa::Cycle,
            _key: Self::Key,
        ) -> Self::Value {
            {
                #[cold]
                #[track_caller]
                #[inline(never)]
                const fn panic_cold_explicit() -> ! {
                    ::core::panicking::panic_explicit()
                }
                panic_cold_explicit();
            }
        }
    }
    impl salsa::storage::IngredientsFor for add_imports {
        type Ingredients = Self;
        type Jar = crate::Jar;
        fn create_ingredients<DB>(
            routes: &mut salsa::routes::Routes<DB>,
        ) -> Self::Ingredients
        where
            DB: salsa::DbWithJar<Self::Jar> + salsa::storage::JarFromJars<Self::Jar>,
        {
            Self {
                intern_map: salsa::interned::IdentityInterner::new(),
                function: {
                    let index = routes
                        .push(
                            |jars| {
                                let jar = <DB as salsa::storage::JarFromJars<
                                    Self::Jar,
                                >>::jar_from_jars(jars);
                                let ingredients = <_ as salsa::storage::HasIngredientsFor<
                                    Self::Ingredients,
                                >>::ingredient(jar);
                                &ingredients.function
                            },
                            |jars| {
                                let jar = <DB as salsa::storage::JarFromJars<
                                    Self::Jar,
                                >>::jar_from_jars_mut(jars);
                                let ingredients = <_ as salsa::storage::HasIngredientsFor<
                                    Self::Ingredients,
                                >>::ingredient_mut(jar);
                                &mut ingredients.function
                            },
                        );
                    let ingredient = salsa::function::FunctionIngredient::new(
                        index,
                        "add_imports",
                    );
                    ingredient.set_capacity(0usize);
                    ingredient
                },
            }
        }
    }
    impl add_imports {
        #[allow(dead_code, clippy::needless_lifetimes)]
        pub fn get<'__db>(
            db: &'__db dyn Db,
            import: ir::Import,
        ) -> &'__db Vec<ir::Mangled> {
            let (__jar, __runtime) = <_ as salsa::storage::HasJar<crate::Jar>>::jar(db);
            let __ingredients = <_ as salsa::storage::HasIngredientsFor<
                add_imports,
            >>::ingredient(__jar);
            let __key = __ingredients.intern_map.intern(__runtime, (import));
            __ingredients.function.fetch(db, __key)
        }
        #[allow(dead_code, clippy::needless_lifetimes)]
        pub fn set(db: &mut dyn Db, import: ir::Import, __value: Vec<ir::Mangled>) {
            let (__jar, __runtime) = <_ as salsa::storage::HasJar<
                crate::Jar,
            >>::jar_mut(db);
            let __ingredients = <_ as salsa::storage::HasIngredientsFor<
                add_imports,
            >>::ingredient_mut(__jar);
            let __key = __ingredients.intern_map.intern(__runtime, (import));
            __ingredients
                .function
                .store(__runtime, __key, __value, salsa::Durability::LOW)
        }
        #[allow(dead_code, clippy::needless_lifetimes)]
        pub fn accumulated<'__db, __A: salsa::accumulator::Accumulator>(
            db: &'__db dyn Db,
            import: ir::Import,
        ) -> Vec<<__A as salsa::accumulator::Accumulator>::Data>
        where
            <crate::Jar as salsa::jar::Jar<
                '__db,
            >>::DynDb: salsa::storage::HasJar<
                <__A as salsa::accumulator::Accumulator>::Jar,
            >,
        {
            let (__jar, __runtime) = <_ as salsa::storage::HasJar<crate::Jar>>::jar(db);
            let __ingredients = <_ as salsa::storage::HasIngredientsFor<
                add_imports,
            >>::ingredient(__jar);
            let __key = __ingredients.intern_map.intern(__runtime, (import));
            __ingredients.function.accumulated::<__A>(db, __key)
        }
    }
    #[allow(clippy::needless_lifetimes)]
    pub fn add_imports(db: &dyn Db, import: ir::Import) -> Vec<ir::Mangled> {
        Clone::clone(add_imports::get(db, import))
    }
}
pub mod lexer {
    use std::{fmt::Display, iter::Iterator, iter::Peekable, str::Chars};
    use okstd::prelude::*;
    pub enum Variable<'input> {
        ProcessID,
        LastBackgroundProcessID,
        LastCommandExitStatus,
        CurrentOptionFlags,
        PositionalParameters,
        PositionalParametersCount,
        ShellName,
        PositionalParameter(usize),
        Parameter(&'input str),
        ParameterDefault(&'input str, &'input str),
    }
    #[automatically_derived]
    impl<'input> ::core::fmt::Debug for Variable<'input> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            match self {
                Variable::ProcessID => ::core::fmt::Formatter::write_str(f, "ProcessID"),
                Variable::LastBackgroundProcessID => {
                    ::core::fmt::Formatter::write_str(f, "LastBackgroundProcessID")
                }
                Variable::LastCommandExitStatus => {
                    ::core::fmt::Formatter::write_str(f, "LastCommandExitStatus")
                }
                Variable::CurrentOptionFlags => {
                    ::core::fmt::Formatter::write_str(f, "CurrentOptionFlags")
                }
                Variable::PositionalParameters => {
                    ::core::fmt::Formatter::write_str(f, "PositionalParameters")
                }
                Variable::PositionalParametersCount => {
                    ::core::fmt::Formatter::write_str(f, "PositionalParametersCount")
                }
                Variable::ShellName => ::core::fmt::Formatter::write_str(f, "ShellName"),
                Variable::PositionalParameter(__self_0) => {
                    ::core::fmt::Formatter::debug_tuple_field1_finish(
                        f,
                        "PositionalParameter",
                        &__self_0,
                    )
                }
                Variable::Parameter(__self_0) => {
                    ::core::fmt::Formatter::debug_tuple_field1_finish(
                        f,
                        "Parameter",
                        &__self_0,
                    )
                }
                Variable::ParameterDefault(__self_0, __self_1) => {
                    ::core::fmt::Formatter::debug_tuple_field2_finish(
                        f,
                        "ParameterDefault",
                        __self_0,
                        &__self_1,
                    )
                }
            }
        }
    }
    #[automatically_derived]
    impl<'input> ::core::marker::StructuralPartialEq for Variable<'input> {}
    #[automatically_derived]
    impl<'input> ::core::cmp::PartialEq for Variable<'input> {
        #[inline]
        fn eq(&self, other: &Variable<'input>) -> bool {
            let __self_tag = ::core::intrinsics::discriminant_value(self);
            let __arg1_tag = ::core::intrinsics::discriminant_value(other);
            __self_tag == __arg1_tag
                && match (self, other) {
                    (
                        Variable::PositionalParameter(__self_0),
                        Variable::PositionalParameter(__arg1_0),
                    ) => *__self_0 == *__arg1_0,
                    (Variable::Parameter(__self_0), Variable::Parameter(__arg1_0)) => {
                        *__self_0 == *__arg1_0
                    }
                    (
                        Variable::ParameterDefault(__self_0, __self_1),
                        Variable::ParameterDefault(__arg1_0, __arg1_1),
                    ) => *__self_0 == *__arg1_0 && *__self_1 == *__arg1_1,
                    _ => true,
                }
        }
    }
    #[automatically_derived]
    impl<'input> ::core::clone::Clone for Variable<'input> {
        #[inline]
        fn clone(&self) -> Variable<'input> {
            let _: ::core::clone::AssertParamIsClone<usize>;
            let _: ::core::clone::AssertParamIsClone<&'input str>;
            let _: ::core::clone::AssertParamIsClone<&'input str>;
            let _: ::core::clone::AssertParamIsClone<&'input str>;
            *self
        }
    }
    #[automatically_derived]
    impl<'input> ::core::marker::Copy for Variable<'input> {}
    impl<'input> Display for Variable<'input> {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            match self {
                Variable::ProcessID => f.write_fmt(format_args!("$$")),
                Variable::LastBackgroundProcessID => f.write_fmt(format_args!("$!")),
                Variable::LastCommandExitStatus => f.write_fmt(format_args!("$?")),
                Variable::CurrentOptionFlags => f.write_fmt(format_args!("$-")),
                Variable::PositionalParameters => f.write_fmt(format_args!("$@")),
                Variable::PositionalParametersCount => f.write_fmt(format_args!("$#")),
                Variable::ShellName => f.write_fmt(format_args!("$0")),
                Variable::PositionalParameter(i) => f.write_fmt(format_args!("${0}", i)),
                Variable::Parameter(p) => f.write_fmt(format_args!("${0}", p)),
                Variable::ParameterDefault(p, w) => {
                    f.write_fmt(format_args!("${0}:{1}", p, w))
                }
            }
        }
    }
    pub enum LexicalError {
        UnexpectedCharacter(char),
        UnterminatedString,
        InvalidNumberFormat,
        InvalidVariableFormat,
        UnexpectedEndOfInput,
        InvalidStateEmission(State),
    }
    #[automatically_derived]
    impl ::core::fmt::Debug for LexicalError {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            match self {
                LexicalError::UnexpectedCharacter(__self_0) => {
                    ::core::fmt::Formatter::debug_tuple_field1_finish(
                        f,
                        "UnexpectedCharacter",
                        &__self_0,
                    )
                }
                LexicalError::UnterminatedString => {
                    ::core::fmt::Formatter::write_str(f, "UnterminatedString")
                }
                LexicalError::InvalidNumberFormat => {
                    ::core::fmt::Formatter::write_str(f, "InvalidNumberFormat")
                }
                LexicalError::InvalidVariableFormat => {
                    ::core::fmt::Formatter::write_str(f, "InvalidVariableFormat")
                }
                LexicalError::UnexpectedEndOfInput => {
                    ::core::fmt::Formatter::write_str(f, "UnexpectedEndOfInput")
                }
                LexicalError::InvalidStateEmission(__self_0) => {
                    ::core::fmt::Formatter::debug_tuple_field1_finish(
                        f,
                        "InvalidStateEmission",
                        &__self_0,
                    )
                }
            }
        }
    }
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for LexicalError {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for LexicalError {
        #[inline]
        fn eq(&self, other: &LexicalError) -> bool {
            let __self_tag = ::core::intrinsics::discriminant_value(self);
            let __arg1_tag = ::core::intrinsics::discriminant_value(other);
            __self_tag == __arg1_tag
                && match (self, other) {
                    (
                        LexicalError::UnexpectedCharacter(__self_0),
                        LexicalError::UnexpectedCharacter(__arg1_0),
                    ) => *__self_0 == *__arg1_0,
                    (
                        LexicalError::InvalidStateEmission(__self_0),
                        LexicalError::InvalidStateEmission(__arg1_0),
                    ) => *__self_0 == *__arg1_0,
                    _ => true,
                }
        }
    }
    #[automatically_derived]
    impl ::core::clone::Clone for LexicalError {
        #[inline]
        fn clone(&self) -> LexicalError {
            match self {
                LexicalError::UnexpectedCharacter(__self_0) => {
                    LexicalError::UnexpectedCharacter(
                        ::core::clone::Clone::clone(__self_0),
                    )
                }
                LexicalError::UnterminatedString => LexicalError::UnterminatedString,
                LexicalError::InvalidNumberFormat => LexicalError::InvalidNumberFormat,
                LexicalError::InvalidVariableFormat => {
                    LexicalError::InvalidVariableFormat
                }
                LexicalError::UnexpectedEndOfInput => LexicalError::UnexpectedEndOfInput,
                LexicalError::InvalidStateEmission(__self_0) => {
                    LexicalError::InvalidStateEmission(
                        ::core::clone::Clone::clone(__self_0),
                    )
                }
            }
        }
    }
    type Result<T> = std::result::Result<T, LexicalError>;
    pub struct Spanned<T, P = Position> {
        pub node: T,
        pub start: usize,
        pub end: usize,
        pub pos: P,
    }
    #[automatically_derived]
    impl<T: ::core::fmt::Debug, P: ::core::fmt::Debug> ::core::fmt::Debug
    for Spanned<T, P> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            ::core::fmt::Formatter::debug_struct_field4_finish(
                f,
                "Spanned",
                "node",
                &self.node,
                "start",
                &self.start,
                "end",
                &self.end,
                "pos",
                &&self.pos,
            )
        }
    }
    #[automatically_derived]
    impl<T, P> ::core::marker::StructuralPartialEq for Spanned<T, P> {}
    #[automatically_derived]
    impl<T: ::core::cmp::PartialEq, P: ::core::cmp::PartialEq> ::core::cmp::PartialEq
    for Spanned<T, P> {
        #[inline]
        fn eq(&self, other: &Spanned<T, P>) -> bool {
            self.node == other.node && self.start == other.start && self.end == other.end
                && self.pos == other.pos
        }
    }
    #[automatically_derived]
    impl<T: ::core::clone::Clone, P: ::core::clone::Clone> ::core::clone::Clone
    for Spanned<T, P> {
        #[inline]
        fn clone(&self) -> Spanned<T, P> {
            Spanned {
                node: ::core::clone::Clone::clone(&self.node),
                start: ::core::clone::Clone::clone(&self.start),
                end: ::core::clone::Clone::clone(&self.end),
                pos: ::core::clone::Clone::clone(&self.pos),
            }
        }
    }
    impl Display for Spanned<Token<'_>> {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            f.write_fmt(
                format_args!(
                    "{0:?}, start: {1} end: {2}",
                    self.node,
                    self.start,
                    self.end,
                ),
            )
        }
    }
    impl<T, P> Spanned<T, P> {
        pub fn new(node: T, start: usize, end: usize, pos: P) -> Self {
            Spanned { node, start, end, pos }
        }
    }
    impl Spanned<Token<'_>> {
        pub fn len(&self) -> usize {
            self.node.to_string().chars().count()
        }
    }
    pub struct Position {
        pub line: usize,
        pub col: usize,
        pub size: usize,
    }
    #[automatically_derived]
    impl ::core::fmt::Debug for Position {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            ::core::fmt::Formatter::debug_struct_field3_finish(
                f,
                "Position",
                "line",
                &self.line,
                "col",
                &self.col,
                "size",
                &&self.size,
            )
        }
    }
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for Position {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for Position {
        #[inline]
        fn eq(&self, other: &Position) -> bool {
            self.line == other.line && self.col == other.col && self.size == other.size
        }
    }
    #[automatically_derived]
    impl ::core::clone::Clone for Position {
        #[inline]
        fn clone(&self) -> Position {
            let _: ::core::clone::AssertParamIsClone<usize>;
            *self
        }
    }
    #[automatically_derived]
    impl ::core::marker::Copy for Position {}
    #[automatically_derived]
    impl ::core::default::Default for Position {
        #[inline]
        fn default() -> Position {
            Position {
                line: ::core::default::Default::default(),
                col: ::core::default::Default::default(),
                size: ::core::default::Default::default(),
            }
        }
    }
    impl Position {
        pub fn new(line: usize, col: usize, size: usize) -> Self {
            Self { line, col, size }
        }
    }
    impl std::fmt::Display for Position {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            f.write_fmt(
                format_args!(
                    "line: {0}, col: {1}, size: {2}",
                    self.line,
                    self.col,
                    self.size,
                ),
            )
        }
    }
    impl std::fmt::Display for Token<'_> {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            f.write_fmt(format_args!("{0:?}", self))
        }
    }
    pub enum Word<'input> {
        Let,
        Const,
        Fn,
        If,
        Else,
        Return,
        Match,
        For,
        While,
        Break,
        Continue,
        True,
        False,
        Null,
        Action,
        Enum,
        Impl,
        Import,
        None,
        Struct,
        Effect,
        When,
        Use,
        From,
        Where,
        Self_,
        Pub,
        Priv,
        Ident(&'input str),
        FnIdent(&'input str),
        Any(&'input str),
    }
    #[automatically_derived]
    impl<'input> ::core::fmt::Debug for Word<'input> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            match self {
                Word::Let => ::core::fmt::Formatter::write_str(f, "Let"),
                Word::Const => ::core::fmt::Formatter::write_str(f, "Const"),
                Word::Fn => ::core::fmt::Formatter::write_str(f, "Fn"),
                Word::If => ::core::fmt::Formatter::write_str(f, "If"),
                Word::Else => ::core::fmt::Formatter::write_str(f, "Else"),
                Word::Return => ::core::fmt::Formatter::write_str(f, "Return"),
                Word::Match => ::core::fmt::Formatter::write_str(f, "Match"),
                Word::For => ::core::fmt::Formatter::write_str(f, "For"),
                Word::While => ::core::fmt::Formatter::write_str(f, "While"),
                Word::Break => ::core::fmt::Formatter::write_str(f, "Break"),
                Word::Continue => ::core::fmt::Formatter::write_str(f, "Continue"),
                Word::True => ::core::fmt::Formatter::write_str(f, "True"),
                Word::False => ::core::fmt::Formatter::write_str(f, "False"),
                Word::Null => ::core::fmt::Formatter::write_str(f, "Null"),
                Word::Action => ::core::fmt::Formatter::write_str(f, "Action"),
                Word::Enum => ::core::fmt::Formatter::write_str(f, "Enum"),
                Word::Impl => ::core::fmt::Formatter::write_str(f, "Impl"),
                Word::Import => ::core::fmt::Formatter::write_str(f, "Import"),
                Word::None => ::core::fmt::Formatter::write_str(f, "None"),
                Word::Struct => ::core::fmt::Formatter::write_str(f, "Struct"),
                Word::Effect => ::core::fmt::Formatter::write_str(f, "Effect"),
                Word::When => ::core::fmt::Formatter::write_str(f, "When"),
                Word::Use => ::core::fmt::Formatter::write_str(f, "Use"),
                Word::From => ::core::fmt::Formatter::write_str(f, "From"),
                Word::Where => ::core::fmt::Formatter::write_str(f, "Where"),
                Word::Self_ => ::core::fmt::Formatter::write_str(f, "Self_"),
                Word::Pub => ::core::fmt::Formatter::write_str(f, "Pub"),
                Word::Priv => ::core::fmt::Formatter::write_str(f, "Priv"),
                Word::Ident(__self_0) => {
                    ::core::fmt::Formatter::debug_tuple_field1_finish(
                        f,
                        "Ident",
                        &__self_0,
                    )
                }
                Word::FnIdent(__self_0) => {
                    ::core::fmt::Formatter::debug_tuple_field1_finish(
                        f,
                        "FnIdent",
                        &__self_0,
                    )
                }
                Word::Any(__self_0) => {
                    ::core::fmt::Formatter::debug_tuple_field1_finish(
                        f,
                        "Any",
                        &__self_0,
                    )
                }
            }
        }
    }
    #[automatically_derived]
    impl<'input> ::core::marker::StructuralPartialEq for Word<'input> {}
    #[automatically_derived]
    impl<'input> ::core::cmp::PartialEq for Word<'input> {
        #[inline]
        fn eq(&self, other: &Word<'input>) -> bool {
            let __self_tag = ::core::intrinsics::discriminant_value(self);
            let __arg1_tag = ::core::intrinsics::discriminant_value(other);
            __self_tag == __arg1_tag
                && match (self, other) {
                    (Word::Ident(__self_0), Word::Ident(__arg1_0)) => {
                        *__self_0 == *__arg1_0
                    }
                    (Word::FnIdent(__self_0), Word::FnIdent(__arg1_0)) => {
                        *__self_0 == *__arg1_0
                    }
                    (Word::Any(__self_0), Word::Any(__arg1_0)) => *__self_0 == *__arg1_0,
                    _ => true,
                }
        }
    }
    #[automatically_derived]
    impl<'input> ::core::clone::Clone for Word<'input> {
        #[inline]
        fn clone(&self) -> Word<'input> {
            match self {
                Word::Let => Word::Let,
                Word::Const => Word::Const,
                Word::Fn => Word::Fn,
                Word::If => Word::If,
                Word::Else => Word::Else,
                Word::Return => Word::Return,
                Word::Match => Word::Match,
                Word::For => Word::For,
                Word::While => Word::While,
                Word::Break => Word::Break,
                Word::Continue => Word::Continue,
                Word::True => Word::True,
                Word::False => Word::False,
                Word::Null => Word::Null,
                Word::Action => Word::Action,
                Word::Enum => Word::Enum,
                Word::Impl => Word::Impl,
                Word::Import => Word::Import,
                Word::None => Word::None,
                Word::Struct => Word::Struct,
                Word::Effect => Word::Effect,
                Word::When => Word::When,
                Word::Use => Word::Use,
                Word::From => Word::From,
                Word::Where => Word::Where,
                Word::Self_ => Word::Self_,
                Word::Pub => Word::Pub,
                Word::Priv => Word::Priv,
                Word::Ident(__self_0) => {
                    Word::Ident(::core::clone::Clone::clone(__self_0))
                }
                Word::FnIdent(__self_0) => {
                    Word::FnIdent(::core::clone::Clone::clone(__self_0))
                }
                Word::Any(__self_0) => Word::Any(::core::clone::Clone::clone(__self_0)),
            }
        }
    }
    impl<'input> Word<'input> {
        fn chars(&self) -> Chars<'_> {
            match self {
                Word::Let => "let".chars(),
                Word::Const => "const".chars(),
                Word::Fn => "fn".chars(),
                Word::If => "if".chars(),
                Word::Else => "else".chars(),
                Word::Return => "return".chars(),
                Word::Match => "match".chars(),
                Word::For => "for".chars(),
                Word::While => "while".chars(),
                Word::Break => "break".chars(),
                Word::Continue => "continue".chars(),
                Word::True => "true".chars(),
                Word::False => "false".chars(),
                Word::Null => "null".chars(),
                Word::When => "when".chars(),
                Word::Ident(ident) => ident.chars(),
                Word::FnIdent(ident) => ident.chars(),
                Word::Any(word) => word.chars(),
                Word::Action => "action".chars(),
                Word::Enum => "enum".chars(),
                Word::Impl => "impl".chars(),
                Word::Import => "import".chars(),
                Word::None => "none".chars(),
                Word::Struct => "struct".chars(),
                Word::Effect => "effect".chars(),
                Word::Use => "use".chars(),
                Word::From => "from".chars(),
                Word::Where => "where".chars(),
                Word::Self_ => "self".chars(),
                Word::Pub => "pub".chars(),
                Word::Priv => "priv".chars(),
            }
        }
    }
    pub enum Token<'input> {
        Pipe,
        Ampersand,
        Semicolon,
        Equals,
        LessThan,
        GreaterThan,
        Variable(Variable<'input>),
        Word(Word<'input>),
        String(&'input str),
        Comment(&'input str),
        Integer(i64),
        Float(f64),
        Eof,
        NewLine,
        LeftParen,
        RightParen,
        LeftBrace,
        RightBrace,
        LeftBracket,
        RightBracket,
        Comma,
        Dot,
        Colon,
        Underscore,
        Minus,
        Plus,
        Arrow,
        FatArrow,
        Divide,
        Multiply,
        Percent,
        Dollar,
        Exclamation,
        Question,
        Tilde,
        At,
        Caret,
        Shebang,
    }
    #[automatically_derived]
    impl<'input> ::core::fmt::Debug for Token<'input> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            match self {
                Token::Pipe => ::core::fmt::Formatter::write_str(f, "Pipe"),
                Token::Ampersand => ::core::fmt::Formatter::write_str(f, "Ampersand"),
                Token::Semicolon => ::core::fmt::Formatter::write_str(f, "Semicolon"),
                Token::Equals => ::core::fmt::Formatter::write_str(f, "Equals"),
                Token::LessThan => ::core::fmt::Formatter::write_str(f, "LessThan"),
                Token::GreaterThan => ::core::fmt::Formatter::write_str(f, "GreaterThan"),
                Token::Variable(__self_0) => {
                    ::core::fmt::Formatter::debug_tuple_field1_finish(
                        f,
                        "Variable",
                        &__self_0,
                    )
                }
                Token::Word(__self_0) => {
                    ::core::fmt::Formatter::debug_tuple_field1_finish(
                        f,
                        "Word",
                        &__self_0,
                    )
                }
                Token::String(__self_0) => {
                    ::core::fmt::Formatter::debug_tuple_field1_finish(
                        f,
                        "String",
                        &__self_0,
                    )
                }
                Token::Comment(__self_0) => {
                    ::core::fmt::Formatter::debug_tuple_field1_finish(
                        f,
                        "Comment",
                        &__self_0,
                    )
                }
                Token::Integer(__self_0) => {
                    ::core::fmt::Formatter::debug_tuple_field1_finish(
                        f,
                        "Integer",
                        &__self_0,
                    )
                }
                Token::Float(__self_0) => {
                    ::core::fmt::Formatter::debug_tuple_field1_finish(
                        f,
                        "Float",
                        &__self_0,
                    )
                }
                Token::Eof => ::core::fmt::Formatter::write_str(f, "Eof"),
                Token::NewLine => ::core::fmt::Formatter::write_str(f, "NewLine"),
                Token::LeftParen => ::core::fmt::Formatter::write_str(f, "LeftParen"),
                Token::RightParen => ::core::fmt::Formatter::write_str(f, "RightParen"),
                Token::LeftBrace => ::core::fmt::Formatter::write_str(f, "LeftBrace"),
                Token::RightBrace => ::core::fmt::Formatter::write_str(f, "RightBrace"),
                Token::LeftBracket => ::core::fmt::Formatter::write_str(f, "LeftBracket"),
                Token::RightBracket => {
                    ::core::fmt::Formatter::write_str(f, "RightBracket")
                }
                Token::Comma => ::core::fmt::Formatter::write_str(f, "Comma"),
                Token::Dot => ::core::fmt::Formatter::write_str(f, "Dot"),
                Token::Colon => ::core::fmt::Formatter::write_str(f, "Colon"),
                Token::Underscore => ::core::fmt::Formatter::write_str(f, "Underscore"),
                Token::Minus => ::core::fmt::Formatter::write_str(f, "Minus"),
                Token::Plus => ::core::fmt::Formatter::write_str(f, "Plus"),
                Token::Arrow => ::core::fmt::Formatter::write_str(f, "Arrow"),
                Token::FatArrow => ::core::fmt::Formatter::write_str(f, "FatArrow"),
                Token::Divide => ::core::fmt::Formatter::write_str(f, "Divide"),
                Token::Multiply => ::core::fmt::Formatter::write_str(f, "Multiply"),
                Token::Percent => ::core::fmt::Formatter::write_str(f, "Percent"),
                Token::Dollar => ::core::fmt::Formatter::write_str(f, "Dollar"),
                Token::Exclamation => ::core::fmt::Formatter::write_str(f, "Exclamation"),
                Token::Question => ::core::fmt::Formatter::write_str(f, "Question"),
                Token::Tilde => ::core::fmt::Formatter::write_str(f, "Tilde"),
                Token::At => ::core::fmt::Formatter::write_str(f, "At"),
                Token::Caret => ::core::fmt::Formatter::write_str(f, "Caret"),
                Token::Shebang => ::core::fmt::Formatter::write_str(f, "Shebang"),
            }
        }
    }
    #[automatically_derived]
    impl<'input> ::core::marker::StructuralPartialEq for Token<'input> {}
    #[automatically_derived]
    impl<'input> ::core::cmp::PartialEq for Token<'input> {
        #[inline]
        fn eq(&self, other: &Token<'input>) -> bool {
            let __self_tag = ::core::intrinsics::discriminant_value(self);
            let __arg1_tag = ::core::intrinsics::discriminant_value(other);
            __self_tag == __arg1_tag
                && match (self, other) {
                    (Token::Variable(__self_0), Token::Variable(__arg1_0)) => {
                        *__self_0 == *__arg1_0
                    }
                    (Token::Word(__self_0), Token::Word(__arg1_0)) => {
                        *__self_0 == *__arg1_0
                    }
                    (Token::String(__self_0), Token::String(__arg1_0)) => {
                        *__self_0 == *__arg1_0
                    }
                    (Token::Comment(__self_0), Token::Comment(__arg1_0)) => {
                        *__self_0 == *__arg1_0
                    }
                    (Token::Integer(__self_0), Token::Integer(__arg1_0)) => {
                        *__self_0 == *__arg1_0
                    }
                    (Token::Float(__self_0), Token::Float(__arg1_0)) => {
                        *__self_0 == *__arg1_0
                    }
                    _ => true,
                }
        }
    }
    #[automatically_derived]
    impl<'input> ::core::clone::Clone for Token<'input> {
        #[inline]
        fn clone(&self) -> Token<'input> {
            match self {
                Token::Pipe => Token::Pipe,
                Token::Ampersand => Token::Ampersand,
                Token::Semicolon => Token::Semicolon,
                Token::Equals => Token::Equals,
                Token::LessThan => Token::LessThan,
                Token::GreaterThan => Token::GreaterThan,
                Token::Variable(__self_0) => {
                    Token::Variable(::core::clone::Clone::clone(__self_0))
                }
                Token::Word(__self_0) => {
                    Token::Word(::core::clone::Clone::clone(__self_0))
                }
                Token::String(__self_0) => {
                    Token::String(::core::clone::Clone::clone(__self_0))
                }
                Token::Comment(__self_0) => {
                    Token::Comment(::core::clone::Clone::clone(__self_0))
                }
                Token::Integer(__self_0) => {
                    Token::Integer(::core::clone::Clone::clone(__self_0))
                }
                Token::Float(__self_0) => {
                    Token::Float(::core::clone::Clone::clone(__self_0))
                }
                Token::Eof => Token::Eof,
                Token::NewLine => Token::NewLine,
                Token::LeftParen => Token::LeftParen,
                Token::RightParen => Token::RightParen,
                Token::LeftBrace => Token::LeftBrace,
                Token::RightBrace => Token::RightBrace,
                Token::LeftBracket => Token::LeftBracket,
                Token::RightBracket => Token::RightBracket,
                Token::Comma => Token::Comma,
                Token::Dot => Token::Dot,
                Token::Colon => Token::Colon,
                Token::Underscore => Token::Underscore,
                Token::Minus => Token::Minus,
                Token::Plus => Token::Plus,
                Token::Arrow => Token::Arrow,
                Token::FatArrow => Token::FatArrow,
                Token::Divide => Token::Divide,
                Token::Multiply => Token::Multiply,
                Token::Percent => Token::Percent,
                Token::Dollar => Token::Dollar,
                Token::Exclamation => Token::Exclamation,
                Token::Question => Token::Question,
                Token::Tilde => Token::Tilde,
                Token::At => Token::At,
                Token::Caret => Token::Caret,
                Token::Shebang => Token::Shebang,
            }
        }
    }
    impl<'input> Token<'input> {
        #[deprecated(note = "to_chars is deprecated, use to_string instead")]
        fn to_chars(&'input self) -> Chars<'input> {
            match self {
                Token::Pipe => "|".chars(),
                Token::Ampersand => "&".chars(),
                Token::Semicolon => ";".chars(),
                Token::Equals => "=".chars(),
                Token::LessThan => "<".chars(),
                Token::GreaterThan => ">".chars(),
                Token::Variable(_identifier) => "".chars(),
                Token::Word(word) => word.chars(),
                Token::String(string) => string.chars(),
                Token::Comment(comment) => comment.chars(),
                Token::Integer(_number) => "".chars(),
                Token::Float(_number) => "".chars(),
                Token::Eof => "".chars(),
                Token::NewLine => "\n".chars(),
                Token::LeftParen => "(".chars(),
                Token::RightParen => ")".chars(),
                Token::LeftBrace => "{".chars(),
                Token::RightBrace => "}".chars(),
                Token::LeftBracket => "[".chars(),
                Token::RightBracket => "]".chars(),
                Token::Comma => ",".chars(),
                Token::Colon => ":".chars(),
                Token::Underscore => "_".chars(),
                Token::Minus => "-".chars(),
                Token::Plus => "+".chars(),
                Token::Arrow => "->".chars(),
                Token::FatArrow => "=>".chars(),
                Token::Divide => "/".chars(),
                Token::Multiply => "*".chars(),
                Token::Percent => "%".chars(),
                Token::Dollar => "$".chars(),
                Token::Exclamation => "!".chars(),
                Token::Question => "?".chars(),
                Token::Tilde => "~".chars(),
                Token::At => "@".chars(),
                Token::Caret => "^".chars(),
                Token::Dot => ".".chars(),
                Token::Shebang => "#!".chars(),
            }
        }
        fn to_string(&'input self) -> String {
            match self {
                Token::Pipe => "|".to_string(),
                Token::Ampersand => "&".to_string(),
                Token::Semicolon => ";".to_string(),
                Token::Equals => "=".to_string(),
                Token::LessThan => "<".to_string(),
                Token::GreaterThan => ">".to_string(),
                Token::Variable(variable) => variable.to_string(),
                Token::Word(word) => word.chars().collect(),
                Token::String(string) => string.to_string(),
                Token::Comment(comment) => comment.to_string(),
                Token::Integer(number) => number.to_string(),
                Token::Float(number) => number.to_string(),
                Token::Eof => "".to_string(),
                Token::NewLine => "\n".to_string(),
                Token::LeftParen => "(".to_string(),
                Token::RightParen => ")".to_string(),
                Token::LeftBrace => "{".to_string(),
                Token::RightBrace => "}".to_string(),
                Token::LeftBracket => "[".to_string(),
                Token::RightBracket => "]".to_string(),
                Token::Comma => ",".to_string(),
                Token::Colon => ":".to_string(),
                Token::Underscore => "_".to_string(),
                Token::Minus => "-".to_string(),
                Token::Plus => "+".to_string(),
                Token::Arrow => "->".to_string(),
                Token::FatArrow => "=>".to_string(),
                Token::Divide => "/".to_string(),
                Token::Multiply => "*".to_string(),
                Token::Percent => "%".to_string(),
                Token::Dollar => "$".to_string(),
                Token::Exclamation => "!".to_string(),
                Token::Question => "?".to_string(),
                Token::Tilde => "~".to_string(),
                Token::At => "@".to_string(),
                Token::Caret => "^".to_string(),
                Token::Dot => ".".to_string(),
                Token::Shebang => "#!".to_string(),
            }
        }
    }
    impl<'input> Iterator for Token<'input> {
        type Item = char;
        fn next(&mut self) -> Option<Self::Item> {
            self.to_chars().next()
        }
    }
    pub struct Lexer<'input> {
        input: &'input str,
        pos: usize,
        line: usize,
        col: usize,
        state: State,
        buffer: String,
        peekable: Peekable<Chars<'input>>,
        last_char: Option<char>,
    }
    impl<'input> Lexer<'input> {
        pub fn new(input: &'input str, pos: usize) -> Self {
            Self {
                input,
                pos,
                line: 0,
                col: 0,
                state: State::Program,
                buffer: String::new(),
                peekable: input.chars().peekable(),
                last_char: None,
            }
        }
    }
    enum Quotation {
        Single,
        Double,
    }
    #[automatically_derived]
    impl ::core::fmt::Debug for Quotation {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            ::core::fmt::Formatter::write_str(
                f,
                match self {
                    Quotation::Single => "Single",
                    Quotation::Double => "Double",
                },
            )
        }
    }
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for Quotation {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for Quotation {
        #[inline]
        fn eq(&self, other: &Quotation) -> bool {
            let __self_tag = ::core::intrinsics::discriminant_value(self);
            let __arg1_tag = ::core::intrinsics::discriminant_value(other);
            __self_tag == __arg1_tag
        }
    }
    #[automatically_derived]
    impl ::core::clone::Clone for Quotation {
        #[inline]
        fn clone(&self) -> Quotation {
            *self
        }
    }
    #[automatically_derived]
    impl ::core::marker::Copy for Quotation {}
    enum State {
        Comment,
        Eof,
        NewLine,
        String(Quotation),
        Op,
        Variable,
        Word,
        Number,
        Program,
        Shebang,
        Any,
    }
    #[automatically_derived]
    impl ::core::fmt::Debug for State {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            match self {
                State::Comment => ::core::fmt::Formatter::write_str(f, "Comment"),
                State::Eof => ::core::fmt::Formatter::write_str(f, "Eof"),
                State::NewLine => ::core::fmt::Formatter::write_str(f, "NewLine"),
                State::String(__self_0) => {
                    ::core::fmt::Formatter::debug_tuple_field1_finish(
                        f,
                        "String",
                        &__self_0,
                    )
                }
                State::Op => ::core::fmt::Formatter::write_str(f, "Op"),
                State::Variable => ::core::fmt::Formatter::write_str(f, "Variable"),
                State::Word => ::core::fmt::Formatter::write_str(f, "Word"),
                State::Number => ::core::fmt::Formatter::write_str(f, "Number"),
                State::Program => ::core::fmt::Formatter::write_str(f, "Program"),
                State::Shebang => ::core::fmt::Formatter::write_str(f, "Shebang"),
                State::Any => ::core::fmt::Formatter::write_str(f, "Any"),
            }
        }
    }
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for State {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for State {
        #[inline]
        fn eq(&self, other: &State) -> bool {
            let __self_tag = ::core::intrinsics::discriminant_value(self);
            let __arg1_tag = ::core::intrinsics::discriminant_value(other);
            __self_tag == __arg1_tag
                && match (self, other) {
                    (State::String(__self_0), State::String(__arg1_0)) => {
                        *__self_0 == *__arg1_0
                    }
                    _ => true,
                }
        }
    }
    #[automatically_derived]
    impl ::core::clone::Clone for State {
        #[inline]
        fn clone(&self) -> State {
            let _: ::core::clone::AssertParamIsClone<Quotation>;
            *self
        }
    }
    #[automatically_derived]
    impl ::core::marker::Copy for State {}
    impl<'input> Lexer<'input> {
        pub fn input(&self) -> &'input str {
            self.input
        }
        fn push(&mut self) -> bool {
            let c = self.peekable.next().unwrap();
            self.buffer.push(c);
            let finished = (self.pos as i32) + self.buffer.len() as i32
                >= self.input.len() as i32;
            finished
        }
        fn ignore(&mut self) -> bool {
            let c = self.peekable.next().unwrap();
            self.advance(c)
        }
        fn advance(&mut self, c: char) -> bool {
            if self.pos + 1 > self.input.len() {
                return false;
            }
            self.pos += 1;
            self.last_char = Some(c);
            if c == '\n' {
                self.line += 1;
                self.col = 0;
            } else {
                self.col += 1;
            }
            let finished = self.pos >= self.input.len();
            finished
        }
        fn peek(&mut self) -> Option<char> {
            return self.peekable.peek().copied();
        }
        fn emit_buffer(&mut self) -> Result<Token<'input>> {
            let start = self.pos;
            let end = self.pos + self.buffer.len();
            match self.state {
                State::Program => Err(LexicalError::InvalidStateEmission(State::Program)),
                State::Op => {
                    Ok(
                        match self
                            .buffer
                            .chars()
                            .next()
                            .ok_or(LexicalError::UnexpectedEndOfInput)?
                        {
                            '(' => Token::LeftParen,
                            ')' => Token::RightParen,
                            '{' => Token::LeftBrace,
                            '}' => Token::RightBrace,
                            '>' => Token::GreaterThan,
                            '<' => Token::LessThan,
                            '|' => Token::Pipe,
                            '&' => Token::Ampersand,
                            ';' => Token::Semicolon,
                            ',' => Token::Comma,
                            ':' => Token::Colon,
                            '_' => Token::Underscore,
                            '+' => Token::Plus,
                            '*' => Token::Multiply,
                            '[' => Token::LeftBracket,
                            ']' => Token::RightBracket,
                            '%' => Token::Percent,
                            '@' => Token::At,
                            '/' => Token::Divide,
                            '.' => Token::Dot,
                            '-' => {
                                if self.buffer.len() == 1 {
                                    Token::Minus
                                } else if self.buffer == "->" {
                                    Token::Arrow
                                } else {
                                    return Err(
                                        LexicalError::UnexpectedCharacter(
                                            self.buffer.chars().next().unwrap(),
                                        ),
                                    );
                                }
                            }
                            '=' => Token::Equals,
                            _ => {
                                return Err(
                                    LexicalError::UnexpectedCharacter(
                                        self.buffer.chars().next().unwrap(),
                                    ),
                                );
                            }
                        },
                    )
                }
                State::Any => Err(LexicalError::InvalidStateEmission(State::Any)),
                State::Comment => {
                    let comment = self
                        .input
                        .get(start..end)
                        .ok_or(LexicalError::UnexpectedEndOfInput)?;
                    Ok(Token::Comment(comment))
                }
                State::Variable => {
                    let variable = self.buffer.clone();
                    let identifier = match variable.as_str() {
                        "$$" => Variable::ProcessID,
                        "$?" => Variable::LastCommandExitStatus,
                        "$!" => Variable::LastBackgroundProcessID,
                        "$-" => Variable::CurrentOptionFlags,
                        "$0" => Variable::ShellName,
                        "$#" => Variable::PositionalParametersCount,
                        _ => {
                            if variable.starts_with('$') && variable.len() > 1 {
                                let number = variable[1..]
                                    .parse()
                                    .map_err(|_| LexicalError::InvalidVariableFormat)?;
                                Variable::PositionalParameter(number)
                            } else {
                                let var = self
                                    .input
                                    .get(start..end)
                                    .ok_or(LexicalError::UnexpectedEndOfInput)?;
                                Variable::Parameter(var)
                            }
                        }
                    };
                    Ok(Token::Variable(identifier))
                }
                State::Word => {
                    let word = self
                        .input
                        .get(start..end)
                        .ok_or(LexicalError::UnexpectedEndOfInput)?;
                    let word = match word {
                        "let" => Word::Let,
                        "const" => Word::Const,
                        "fn" => Word::Fn,
                        "if" => Word::If,
                        "else" => Word::Else,
                        "return" => Word::Return,
                        "match" => Word::Match,
                        "for" => Word::For,
                        "while" => Word::While,
                        "break" => Word::Break,
                        "continue" => Word::Continue,
                        "true" => Word::True,
                        "false" => Word::False,
                        "null" => Word::Null,
                        "action" => Word::Action,
                        "enum" => Word::Enum,
                        "impl" => Word::Impl,
                        "import" => Word::Import,
                        "none" => Word::None,
                        "struct" => Word::Struct,
                        "effect" => Word::Effect,
                        "when" => Word::When,
                        "use" => Word::Use,
                        "from" => Word::From,
                        "where" => Word::Where,
                        "self" => Word::Self_,
                        "pub" => Word::Pub,
                        "priv" => Word::Priv,
                        _ => Word::Ident(word),
                    };
                    Ok(Token::Word(word))
                }
                State::String(quotation) => {
                    let last_char = self.buffer.chars().last();
                    let quote = if quotation == Quotation::Double {
                        Some('"')
                    } else {
                        Some('\'')
                    };
                    if last_char != quote {
                        return Err(LexicalError::UnterminatedString);
                    }
                    let string = self
                        .input
                        .get(start..end)
                        .ok_or(LexicalError::UnexpectedEndOfInput)?;
                    Ok(Token::String(string))
                }
                State::Number => {
                    let number = self.buffer.clone();
                    if number.contains('.') {
                        let float = number
                            .parse()
                            .map_err(|_| LexicalError::InvalidNumberFormat)?;
                        Ok(Token::Float(float))
                    } else if number.starts_with("0x") {
                        let integer = i64::from_str_radix(&number[2..], 16)
                            .map_err(|_| LexicalError::InvalidNumberFormat)?;
                        Ok(Token::Integer(integer))
                    } else {
                        let integer = number
                            .parse()
                            .map_err(|_| LexicalError::InvalidNumberFormat)?;
                        Ok(Token::Integer(integer))
                    }
                }
                State::NewLine => Ok(Token::NewLine),
                State::Eof => Ok(Token::Eof),
                State::Shebang => Ok(Token::Shebang),
            }
        }
        fn skip_ws(&mut self) -> Result<()> {
            while let Some(c) = self.peek() {
                match c {
                    ' ' => {
                        self.ignore();
                    }
                    '\t' => {
                        self.ignore();
                    }
                    '#' => {
                        {
                            self.state = State::Comment;
                        };
                        return Ok(());
                    }
                    '"' => {
                        {
                            self.state = State::String(Quotation::Double);
                        };
                        return Ok(());
                    }
                    '\'' => {
                        {
                            self.state = State::String(Quotation::Single);
                        };
                        return Ok(());
                    }
                    '$' => {
                        {
                            self.state = State::Variable;
                        };
                        return Ok(());
                    }
                    'a'..='z' | 'A'..='Z' | '_' => {
                        {
                            self.state = State::Word;
                        };
                        return Ok(());
                    }
                    '0'..='9' => {
                        {
                            self.state = State::Number;
                        };
                        return Ok(());
                    }
                    '\n' => {
                        {
                            self.state = State::NewLine;
                        };
                        return Ok(());
                    }
                    '(' | ')' | '{' | '}' | '>' | '<' | '|' | '&' | ';' | ',' | ':' | '+'
                    | '*' | '.' | '[' | ']' | '%' | '@' | '/' | '-' | '=' | '!' => {
                        {
                            self.state = State::Op;
                        };
                        {
                            let lvl = ::log::Level::Debug;
                            if lvl <= ::log::STATIC_MAX_LEVEL
                                && lvl <= ::log::max_level()
                            {
                                ::log::__private_api::log(
                                    format_args!("to state: {0:?}", self.state),
                                    lvl,
                                    &("srclang::lexer", "srclang::lexer", "src/lexer/mod.rs"),
                                    687u32,
                                    (),
                                );
                            }
                        };
                        return Ok(());
                    }
                    _ => {
                        return Err(LexicalError::UnexpectedCharacter(c));
                    }
                }
                if self.pos >= self.input.len() {
                    break;
                }
            }
            if self.pos >= self.input.len() {
                {
                    self.state = State::Eof;
                };
            }
            Ok(())
        }
        fn consume_op(&mut self) -> Result<Spanned<Token<'input>>> {
            if let Some(c) = self.peek() {
                {
                    let lvl = ::log::Level::Debug;
                    if lvl <= ::log::STATIC_MAX_LEVEL && lvl <= ::log::max_level() {
                        ::log::__private_api::log(
                            format_args!("consume_op: {0}", c),
                            lvl,
                            &("srclang::lexer", "srclang::lexer", "src/lexer/mod.rs"),
                            706u32,
                            (),
                        );
                    }
                };
                if self.state != State::Op {
                    return Err(LexicalError::InvalidStateEmission(self.state));
                }
                match c {
                    '(' | ')' | '{' | '}' | '>' | '<' | '|' | '&' | ';' | ',' | ':' | '_'
                    | '+' | '.' | '/' | '*' | '[' | ']' | '%' | '@' => {
                        let state = if self.push() { State::Eof } else { State::Any };
                        return {
                            let r = self.emit_buffer()?;
                            self.buffer.clear();
                            {
                                let start = self.pos;
                                for c in r.to_string().chars() {
                                    self.advance(c);
                                }
                                let end = self.pos;
                                let pos = Position::new(
                                    self.line,
                                    self.col - self.buffer.len(),
                                    end - start,
                                );
                                self.state = state;
                                let token = r;
                                let token = Spanned::new(token, start, end, pos);
                                Ok(token)
                            }
                        };
                    }
                    '=' => {
                        self.push();
                        if let Some('>') = self.peek() {
                            self.push();
                            return {
                                let r = self.emit_buffer()?;
                                self.buffer.clear();
                                {
                                    let start = self.pos;
                                    for c in r.to_string().chars() {
                                        self.advance(c);
                                    }
                                    let end = self.pos;
                                    let pos = Position::new(
                                        self.line,
                                        self.col - self.buffer.len(),
                                        end - start,
                                    );
                                    self.state = State::Any;
                                    let token = r;
                                    let token = Spanned::new(token, start, end, pos);
                                    Ok(token)
                                }
                            };
                        } else {
                            let state = if self.pos == self.input.len() {
                                State::Eof
                            } else {
                                State::Any
                            };
                            return {
                                let r = self.emit_buffer()?;
                                self.buffer.clear();
                                {
                                    let start = self.pos;
                                    for c in r.to_string().chars() {
                                        self.advance(c);
                                    }
                                    let end = self.pos;
                                    let pos = Position::new(
                                        self.line,
                                        self.col - self.buffer.len(),
                                        end - start,
                                    );
                                    self.state = state;
                                    let token = r;
                                    let token = Spanned::new(token, start, end, pos);
                                    Ok(token)
                                }
                            };
                        }
                    }
                    '-' => {
                        self.push();
                        match self.peek() {
                            Some('>') => {
                                self.push();
                                return {
                                    let r = self.emit_buffer()?;
                                    self.buffer.clear();
                                    {
                                        let start = self.pos;
                                        for c in r.to_string().chars() {
                                            self.advance(c);
                                        }
                                        let end = self.pos;
                                        let pos = Position::new(
                                            self.line,
                                            self.col - self.buffer.len(),
                                            end - start,
                                        );
                                        self.state = State::Any;
                                        let token = r;
                                        let token = Spanned::new(token, start, end, pos);
                                        Ok(token)
                                    }
                                };
                            }
                            Some('0'..='9') => {
                                {
                                    self.state = State::Number;
                                };
                                return self.consume_number();
                            }
                            _ => {
                                let state = if self.push() {
                                    State::Eof
                                } else {
                                    State::Any
                                };
                                return {
                                    let r = self.emit_buffer()?;
                                    self.buffer.clear();
                                    {
                                        let start = self.pos;
                                        for c in r.to_string().chars() {
                                            self.advance(c);
                                        }
                                        let end = self.pos;
                                        let pos = Position::new(
                                            self.line,
                                            self.col - self.buffer.len(),
                                            end - start,
                                        );
                                        self.state = state;
                                        let token = r;
                                        let token = Spanned::new(token, start, end, pos);
                                        Ok(token)
                                    }
                                };
                            }
                        }
                    }
                    '/' => {
                        let state = if self.push() { State::Eof } else { State::Any };
                        match self.peek() {
                            Some(' ') => {
                                return {
                                    let r = self.emit_buffer()?;
                                    self.buffer.clear();
                                    {
                                        let start = self.pos;
                                        for c in r.to_string().chars() {
                                            self.advance(c);
                                        }
                                        let end = self.pos;
                                        let pos = Position::new(
                                            self.line,
                                            self.col - self.buffer.len(),
                                            end - start,
                                        );
                                        self.state = state;
                                        let token = r;
                                        let token = Spanned::new(token, start, end, pos);
                                        Ok(token)
                                    }
                                };
                            }
                            _ => {
                                return {
                                    let r = self.emit_buffer()?;
                                    self.buffer.clear();
                                    {
                                        let start = self.pos;
                                        for c in r.to_string().chars() {
                                            self.advance(c);
                                        }
                                        let end = self.pos;
                                        let pos = Position::new(
                                            self.line,
                                            self.col - self.buffer.len(),
                                            end - start,
                                        );
                                        self.state = state;
                                        let token = r;
                                        let token = Spanned::new(token, start, end, pos);
                                        Ok(token)
                                    }
                                };
                            }
                        }
                    }
                    '!' => {
                        let state = if self.push() { State::Eof } else { State::Any };
                        if let Some('#') = self.peek() {
                            self.push();
                            return {
                                let r = self.emit_buffer()?;
                                self.buffer.clear();
                                {
                                    let start = self.pos;
                                    for c in r.to_string().chars() {
                                        self.advance(c);
                                    }
                                    let end = self.pos;
                                    let pos = Position::new(
                                        self.line,
                                        self.col - self.buffer.len(),
                                        end - start,
                                    );
                                    self.state = State::Any;
                                    let token = r;
                                    let token = Spanned::new(token, start, end, pos);
                                    Ok(token)
                                }
                            };
                        } else {
                            return {
                                let r = self.emit_buffer()?;
                                self.buffer.clear();
                                {
                                    let start = self.pos;
                                    for c in r.to_string().chars() {
                                        self.advance(c);
                                    }
                                    let end = self.pos;
                                    let pos = Position::new(
                                        self.line,
                                        self.col - self.buffer.len(),
                                        end - start,
                                    );
                                    self.state = state;
                                    let token = r;
                                    let token = Spanned::new(token, start, end, pos);
                                    Ok(token)
                                }
                            };
                        }
                    }
                    _ => {
                        return Err(LexicalError::UnexpectedCharacter(c));
                    }
                }
            }
            {
                let start = self.pos;
                for c in Token::Eof.to_string().chars() {
                    self.advance(c);
                }
                let end = self.pos;
                let pos = Position::new(
                    self.line,
                    self.col - self.buffer.len(),
                    end - start,
                );
                self.state = self.state;
                let token = Token::Eof;
                let token = Spanned::new(token, start, end, pos);
                Ok(token)
            }
        }
        fn consume_comment(&mut self) -> Result<Spanned<Token<'input>>> {
            loop {
                match self.peek() {
                    Some('!') => {
                        let state = if self.push() { State::Eof } else { State::Any };
                        {
                            self.state = State::Shebang;
                        };
                        return {
                            let r = self.emit_buffer()?;
                            self.buffer.clear();
                            {
                                let start = self.pos;
                                for c in r.to_string().chars() {
                                    self.advance(c);
                                }
                                let end = self.pos;
                                let pos = Position::new(
                                    self.line,
                                    self.col - self.buffer.len(),
                                    end - start,
                                );
                                self.state = state;
                                let token = r;
                                let token = Spanned::new(token, start, end, pos);
                                Ok(token)
                            }
                        };
                    }
                    Some('\n') => {
                        return {
                            let r = self.emit_buffer()?;
                            self.buffer.clear();
                            {
                                let start = self.pos;
                                for c in r.to_string().chars() {
                                    self.advance(c);
                                }
                                let end = self.pos;
                                let pos = Position::new(
                                    self.line,
                                    self.col - self.buffer.len(),
                                    end - start,
                                );
                                self.state = State::NewLine;
                                let token = r;
                                let token = Spanned::new(token, start, end, pos);
                                Ok(token)
                            }
                        };
                    }
                    None => {
                        return {
                            let r = self.emit_buffer()?;
                            self.buffer.clear();
                            {
                                let start = self.pos;
                                for c in r.to_string().chars() {
                                    self.advance(c);
                                }
                                let end = self.pos;
                                let pos = Position::new(
                                    self.line,
                                    self.col - self.buffer.len(),
                                    end - start,
                                );
                                self.state = State::Any;
                                let token = r;
                                let token = Spanned::new(token, start, end, pos);
                                Ok(token)
                            }
                        };
                    }
                    _ => {
                        if self.push() {
                            return {
                                let r = self.emit_buffer()?;
                                self.buffer.clear();
                                {
                                    let start = self.pos;
                                    for c in r.to_string().chars() {
                                        self.advance(c);
                                    }
                                    let end = self.pos;
                                    let pos = Position::new(
                                        self.line,
                                        self.col - self.buffer.len(),
                                        end - start,
                                    );
                                    self.state = State::Eof;
                                    let token = r;
                                    let token = Spanned::new(token, start, end, pos);
                                    Ok(token)
                                }
                            };
                        }
                    }
                }
            }
        }
        fn consume_word(&mut self) -> Result<Spanned<Token<'input>>> {
            while let Some(c) = self.peek() {
                match c {
                    'a'..='z' | 'A'..='Z' | '0'..='9' | '-' | '/' | '_' => {
                        if self.push() {
                            return {
                                let r = self.emit_buffer()?;
                                self.buffer.clear();
                                {
                                    let start = self.pos;
                                    for c in r.to_string().chars() {
                                        self.advance(c);
                                    }
                                    let end = self.pos;
                                    let pos = Position::new(
                                        self.line,
                                        self.col - self.buffer.len(),
                                        end - start,
                                    );
                                    self.state = State::Eof;
                                    let token = r;
                                    let token = Spanned::new(token, start, end, pos);
                                    Ok(token)
                                }
                            };
                        }
                    }
                    _ => {
                        break;
                    }
                }
            }
            return {
                let r = self.emit_buffer()?;
                self.buffer.clear();
                {
                    let start = self.pos;
                    for c in r.to_string().chars() {
                        self.advance(c);
                    }
                    let end = self.pos;
                    let pos = Position::new(
                        self.line,
                        self.col - self.buffer.len(),
                        end - start,
                    );
                    self.state = State::Any;
                    let token = r;
                    let token = Spanned::new(token, start, end, pos);
                    Ok(token)
                }
            };
        }
        fn consume_number(&mut self) -> Result<Spanned<Token<'input>>> {
            {
                let lvl = ::log::Level::Debug;
                if lvl <= ::log::STATIC_MAX_LEVEL && lvl <= ::log::max_level() {
                    ::log::__private_api::log(
                        format_args!("consume_number"),
                        lvl,
                        &("srclang::lexer", "srclang::lexer", "src/lexer/mod.rs"),
                        819u32,
                        (),
                    );
                }
            };
            while let Some(c) = self.peek() {
                match c {
                    '0'..='9' => {
                        if self.push() {
                            {
                                let lvl = ::log::Level::Debug;
                                if lvl <= ::log::STATIC_MAX_LEVEL
                                    && lvl <= ::log::max_level()
                                {
                                    ::log::__private_api::log(
                                        format_args!("finished"),
                                        lvl,
                                        &("srclang::lexer", "srclang::lexer", "src/lexer/mod.rs"),
                                        824u32,
                                        (),
                                    );
                                }
                            };
                            return {
                                let r = self.emit_buffer()?;
                                self.buffer.clear();
                                {
                                    let start = self.pos;
                                    for c in r.to_string().chars() {
                                        self.advance(c);
                                    }
                                    let end = self.pos;
                                    let pos = Position::new(
                                        self.line,
                                        self.col - self.buffer.len(),
                                        end - start,
                                    );
                                    self.state = State::Eof;
                                    let token = r;
                                    let token = Spanned::new(token, start, end, pos);
                                    Ok(token)
                                }
                            };
                        }
                    }
                    '.' => {
                        if self.buffer.contains('.') {
                            break;
                        } else if self.push() {
                            return Err(LexicalError::InvalidNumberFormat);
                        }
                    }
                    'x' => {
                        if self.buffer.starts_with('0') {
                            if self.push() {
                                {
                                    let lvl = ::log::Level::Debug;
                                    if lvl <= ::log::STATIC_MAX_LEVEL
                                        && lvl <= ::log::max_level()
                                    {
                                        ::log::__private_api::log(
                                            format_args!("buffer: {0}", self.buffer),
                                            lvl,
                                            &("srclang::lexer", "srclang::lexer", "src/lexer/mod.rs"),
                                            842u32,
                                            (),
                                        );
                                    }
                                };
                                return {
                                    let r = self.emit_buffer()?;
                                    self.buffer.clear();
                                    {
                                        let start = self.pos;
                                        for c in r.to_string().chars() {
                                            self.advance(c);
                                        }
                                        let end = self.pos;
                                        let pos = Position::new(
                                            self.line,
                                            self.col - self.buffer.len(),
                                            end - start,
                                        );
                                        self.state = State::Number;
                                        let token = r;
                                        let token = Spanned::new(token, start, end, pos);
                                        Ok(token)
                                    }
                                };
                            }
                        } else {
                            break;
                        }
                    }
                    'a'..='f' | 'A'..='F' => {
                        if self.buffer.starts_with("0x") {
                            if self.push() {
                                {
                                    let lvl = ::log::Level::Debug;
                                    if lvl <= ::log::STATIC_MAX_LEVEL
                                        && lvl <= ::log::max_level()
                                    {
                                        ::log::__private_api::log(
                                            format_args!("buffer: {0}", self.buffer),
                                            lvl,
                                            &("srclang::lexer", "srclang::lexer", "src/lexer/mod.rs"),
                                            853u32,
                                            (),
                                        );
                                    }
                                };
                                return {
                                    let r = self.emit_buffer()?;
                                    self.buffer.clear();
                                    {
                                        let start = self.pos;
                                        for c in r.to_string().chars() {
                                            self.advance(c);
                                        }
                                        let end = self.pos;
                                        let pos = Position::new(
                                            self.line,
                                            self.col - self.buffer.len(),
                                            end - start,
                                        );
                                        self.state = State::Number;
                                        let token = r;
                                        let token = Spanned::new(token, start, end, pos);
                                        Ok(token)
                                    }
                                };
                            }
                        } else if self.buffer.contains(".") && c == 'e' {
                            if self.push() {
                                {
                                    let lvl = ::log::Level::Debug;
                                    if lvl <= ::log::STATIC_MAX_LEVEL
                                        && lvl <= ::log::max_level()
                                    {
                                        ::log::__private_api::log(
                                            format_args!("buffer: {0}", self.buffer),
                                            lvl,
                                            &("srclang::lexer", "srclang::lexer", "src/lexer/mod.rs"),
                                            860u32,
                                            (),
                                        );
                                    }
                                };
                                return {
                                    let r = self.emit_buffer()?;
                                    self.buffer.clear();
                                    {
                                        let start = self.pos;
                                        for c in r.to_string().chars() {
                                            self.advance(c);
                                        }
                                        let end = self.pos;
                                        let pos = Position::new(
                                            self.line,
                                            self.col - self.buffer.len(),
                                            end - start,
                                        );
                                        self.state = State::Number;
                                        let token = r;
                                        let token = Spanned::new(token, start, end, pos);
                                        Ok(token)
                                    }
                                };
                            }
                        } else {
                            break;
                        }
                    }
                    _ => {
                        {
                            let lvl = ::log::Level::Debug;
                            if lvl <= ::log::STATIC_MAX_LEVEL
                                && lvl <= ::log::max_level()
                            {
                                ::log::__private_api::log(
                                    format_args!("breaking"),
                                    lvl,
                                    &("srclang::lexer", "srclang::lexer", "src/lexer/mod.rs"),
                                    868u32,
                                    (),
                                );
                            }
                        };
                        return {
                            let r = self.emit_buffer()?;
                            self.buffer.clear();
                            {
                                let start = self.pos;
                                for c in r.to_string().chars() {
                                    self.advance(c);
                                }
                                let end = self.pos;
                                let pos = Position::new(
                                    self.line,
                                    self.col - self.buffer.len(),
                                    end - start,
                                );
                                self.state = State::Any;
                                let token = r;
                                let token = Spanned::new(token, start, end, pos);
                                Ok(token)
                            }
                        };
                    }
                }
            }
            return {
                let r = self.emit_buffer()?;
                self.buffer.clear();
                {
                    let start = self.pos;
                    for c in r.to_string().chars() {
                        self.advance(c);
                    }
                    let end = self.pos;
                    let pos = Position::new(
                        self.line,
                        self.col - self.buffer.len(),
                        end - start,
                    );
                    self.state = State::Eof;
                    let token = r;
                    let token = Spanned::new(token, start, end, pos);
                    Ok(token)
                }
            };
        }
        fn consume_newline(&mut self) -> Result<Spanned<Token<'input>>> {
            match self.peek() {
                Some('\n') => {
                    let state = if self.push() { State::Eof } else { State::Any };
                    return {
                        let r = self.emit_buffer()?;
                        self.buffer.clear();
                        {
                            let start = self.pos;
                            for c in r.to_string().chars() {
                                self.advance(c);
                            }
                            let end = self.pos;
                            let pos = Position::new(
                                self.line,
                                self.col - self.buffer.len(),
                                end - start,
                            );
                            self.state = state;
                            let token = r;
                            let token = Spanned::new(token, start, end, pos);
                            Ok(token)
                        }
                    };
                }
                _ => {
                    return {
                        let start = self.pos;
                        for c in Token::NewLine.to_string().chars() {
                            self.advance(c);
                        }
                        let end = self.pos;
                        let pos = Position::new(
                            self.line,
                            self.col - self.buffer.len(),
                            end - start,
                        );
                        self.state = State::Any;
                        let token = Token::NewLine;
                        let token = Spanned::new(token, start, end, pos);
                        Ok(token)
                    };
                }
            }
        }
        fn consume_string_literal(
            &mut self,
            quotation: Quotation,
        ) -> Result<Spanned<Token<'input>>> {
            self.push();
            while let Some(c) = self.peek() {
                match c {
                    '"' => {
                        if quotation == Quotation::Double {
                            let state = if self.push() {
                                State::Eof
                            } else {
                                State::Any
                            };
                            return {
                                let r = self.emit_buffer()?;
                                self.buffer.clear();
                                {
                                    let start = self.pos;
                                    for c in r.to_string().chars() {
                                        self.advance(c);
                                    }
                                    let end = self.pos;
                                    let pos = Position::new(
                                        self.line,
                                        self.col - self.buffer.len(),
                                        end - start,
                                    );
                                    self.state = state;
                                    let token = r;
                                    let token = Spanned::new(token, start, end, pos);
                                    Ok(token)
                                }
                            };
                        }
                    }
                    '\'' => {
                        if quotation == Quotation::Single {
                            let state = if self.push() {
                                State::Eof
                            } else {
                                State::Any
                            };
                            return {
                                let r = self.emit_buffer()?;
                                self.buffer.clear();
                                {
                                    let start = self.pos;
                                    for c in r.to_string().chars() {
                                        self.advance(c);
                                    }
                                    let end = self.pos;
                                    let pos = Position::new(
                                        self.line,
                                        self.col - self.buffer.len(),
                                        end - start,
                                    );
                                    self.state = state;
                                    let token = r;
                                    let token = Spanned::new(token, start, end, pos);
                                    Ok(token)
                                }
                            };
                        }
                    }
                    _ => {
                        if self.push() {
                            self.state = State::Eof;
                            break;
                        }
                    }
                }
            }
            return Err(LexicalError::UnexpectedEndOfInput);
        }
        fn consume_variable(&mut self) -> Result<Spanned<Token<'input>>> {
            self.ignore();
            while let Some(c) = self.peek() {
                match c {
                    'a'..='z' | 'A'..='Z' | '0'..='9' | '-' | '.' => {
                        if self.push() {
                            return {
                                let r = self.emit_buffer()?;
                                self.buffer.clear();
                                {
                                    let start = self.pos;
                                    for c in r.to_string().chars() {
                                        self.advance(c);
                                    }
                                    let end = self.pos;
                                    let pos = Position::new(
                                        self.line,
                                        self.col - self.buffer.len(),
                                        end - start,
                                    );
                                    self.state = State::Any;
                                    let token = r;
                                    let token = Spanned::new(token, start, end, pos);
                                    Ok(token)
                                }
                            };
                        }
                    }
                    _ => {
                        break;
                    }
                }
            }
            return {
                let r = self.emit_buffer()?;
                self.buffer.clear();
                {
                    let start = self.pos;
                    for c in r.to_string().chars() {
                        self.advance(c);
                    }
                    let end = self.pos;
                    let pos = Position::new(
                        self.line,
                        self.col - self.buffer.len(),
                        end - start,
                    );
                    self.state = State::Op;
                    let token = r;
                    let token = Spanned::new(token, start, end, pos);
                    Ok(token)
                }
            };
        }
    }
    impl<'input> Iterator for Lexer<'input> {
        type Item = Spanned<Token<'input>>;
        fn next(&mut self) -> Option<Self::Item> {
            if self.pos >= self.input.len() && self.state != State::Eof {
                self.state = State::Eof;
                return None;
            } else if self.pos >= self.input.len() {
                return None;
            }
            if self.state == State::Program || self.state == State::Any {
                self.skip_ws().unwrap();
            }
            let res = match self.state {
                State::Op => self.consume_op(),
                State::Comment => self.consume_comment(),
                State::Eof => {
                    return None;
                }
                State::NewLine => self.consume_newline(),
                State::String(quotation) => self.consume_string_literal(quotation),
                State::Variable => self.consume_variable(),
                State::Word => self.consume_word(),
                State::Number => self.consume_number(),
                State::Any | State::Program => {
                    return None;
                }
                State::Shebang => ::core::panicking::panic("not yet implemented"),
            };
            {
                let lvl = ::log::Level::Debug;
                if lvl <= ::log::STATIC_MAX_LEVEL && lvl <= ::log::max_level() {
                    ::log::__private_api::log(
                        format_args!(
                            ">>> state: {0:?}, res: {1:?}, pos: {2}, line: {3}, col: {4}",
                            self.state,
                            res,
                            self.pos,
                            self.line,
                            self.col,
                        ),
                        lvl,
                        &("srclang::lexer", "srclang::lexer", "src/lexer/mod.rs"),
                        968u32,
                        (),
                    );
                }
            };
            self.buffer.clear();
            match res {
                Ok(token) => {
                    match token.node {
                        Token::Eof => {
                            return None;
                        }
                        _ => {}
                    }
                    return Some(token);
                }
                _ => {
                    return None;
                }
            }
        }
    }
    struct TokenStreamDisplay<'input>(Vec<Spanned<Token<'input>>>);
    impl Display for TokenStreamDisplay<'_> {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            for token in &self.0 {
                f.write_fmt(
                    format_args!(
                        "- {0}, {1}:{2}\n",
                        token.node,
                        token.pos.line,
                        token.pos.col,
                    ),
                )?;
            }
            Ok(())
        }
    }
    impl<'input> From<Vec<Spanned<Token<'input>>>> for TokenStreamDisplay<'input> {
        fn from(tokens: Vec<Spanned<Token<'input>>>) -> Self {
            TokenStreamDisplay(tokens)
        }
    }
    pub struct TripleIterator<'input>(Lexer<'input>);
    pub struct Location {
        pub offset: usize,
        pub line: usize,
        pub col: usize,
    }
    #[automatically_derived]
    impl ::core::fmt::Debug for Location {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            ::core::fmt::Formatter::debug_struct_field3_finish(
                f,
                "Location",
                "offset",
                &self.offset,
                "line",
                &self.line,
                "col",
                &&self.col,
            )
        }
    }
    #[automatically_derived]
    impl ::core::clone::Clone for Location {
        #[inline]
        fn clone(&self) -> Location {
            let _: ::core::clone::AssertParamIsClone<usize>;
            *self
        }
    }
    #[automatically_derived]
    impl ::core::default::Default for Location {
        #[inline]
        fn default() -> Location {
            Location {
                offset: ::core::default::Default::default(),
                line: ::core::default::Default::default(),
                col: ::core::default::Default::default(),
            }
        }
    }
    #[automatically_derived]
    impl ::core::marker::Copy for Location {}
    #[automatically_derived]
    impl ::core::hash::Hash for Location {
        #[inline]
        fn hash<__H: ::core::hash::Hasher>(&self, state: &mut __H) -> () {
            ::core::hash::Hash::hash(&self.offset, state);
            ::core::hash::Hash::hash(&self.line, state);
            ::core::hash::Hash::hash(&self.col, state)
        }
    }
    impl Eq for Location {}
    impl PartialOrd for Location {
        fn partial_cmp(&self, other: &Self) -> Option<std::cmp::Ordering> {
            Some(self.offset.cmp(&other.offset))
        }
    }
    impl PartialEq for Location {
        fn eq(&self, other: &Self) -> bool {
            self.offset == other.offset
        }
    }
    impl<'input> TripleIterator<'input> {
        pub fn new(input: &'input str) -> Self {
            TripleIterator(Lexer::new(input, 0))
        }
    }
    impl From<(usize, usize, usize)> for Location {
        fn from((offset, line, col): (usize, usize, usize)) -> Self {
            Self { offset, line, col }
        }
    }
    impl<'input> Iterator for TripleIterator<'input> {
        type Item = (Location, Token<'input>, Location);
        fn next(&mut self) -> Option<Self::Item> {
            let token = self.0.next()?;
            {
                let lvl = ::log::Level::Debug;
                if lvl <= ::log::STATIC_MAX_LEVEL && lvl <= ::log::max_level() {
                    ::log::__private_api::log(
                        format_args!("token: {0:?}", token),
                        lvl,
                        &("srclang::lexer", "srclang::lexer", "src/lexer/mod.rs"),
                        1057u32,
                        (),
                    );
                }
            };
            let start_pos: Location = (
                token.start,
                token.pos.line,
                token.pos.col.wrapping_sub(token.len()),
            )
                .into();
            let end_pos = (token.end, self.0.line, self.0.col).into();
            Some((start_pos, token.node, end_pos))
        }
    }
}
pub mod parser {
    use crate::lexer::Location;
    pub mod ast {
        use std::{fmt::Display, ops::Range};
        pub const ANON_FN_NAME: &str = "anonymous";
        use super::span;
        use super::span::*;
        use src_derive::node;
        use super::span::*;
        pub struct Ident(pub String, pub Option<Vec<Spanned<Ident>>>);
        #[automatically_derived]
        impl ::core::marker::StructuralPartialEq for Ident {}
        #[automatically_derived]
        impl ::core::cmp::PartialEq for Ident {
            #[inline]
            fn eq(&self, other: &Ident) -> bool {
                self.0 == other.0 && self.1 == other.1
            }
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for Ident {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                ::core::fmt::Formatter::debug_tuple_field2_finish(
                    f,
                    "Ident",
                    &self.0,
                    &&self.1,
                )
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for Ident {
            #[inline]
            fn clone(&self) -> Ident {
                Ident(
                    ::core::clone::Clone::clone(&self.0),
                    ::core::clone::Clone::clone(&self.1),
                )
            }
        }
        impl Display for Ident {
            fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
                f.write_fmt(format_args!("{0}", self.0))
            }
        }
        pub enum Visibility {
            #[default]
            Private,
            Public,
        }
        #[automatically_derived]
        impl ::core::marker::StructuralPartialEq for Visibility {}
        #[automatically_derived]
        impl ::core::cmp::PartialEq for Visibility {
            #[inline]
            fn eq(&self, other: &Visibility) -> bool {
                let __self_tag = ::core::intrinsics::discriminant_value(self);
                let __arg1_tag = ::core::intrinsics::discriminant_value(other);
                __self_tag == __arg1_tag
            }
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for Visibility {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                ::core::fmt::Formatter::write_str(
                    f,
                    match self {
                        Visibility::Private => "Private",
                        Visibility::Public => "Public",
                    },
                )
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for Visibility {
            #[inline]
            fn clone(&self) -> Visibility {
                match self {
                    Visibility::Private => Visibility::Private,
                    Visibility::Public => Visibility::Public,
                }
            }
        }
        #[automatically_derived]
        impl ::core::default::Default for Visibility {
            #[inline]
            fn default() -> Visibility {
                Self::Private
            }
        }
        impl Display for Visibility {
            fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
                match self {
                    Visibility::Public => f.write_fmt(format_args!("pub")),
                    Visibility::Private => f.write_fmt(format_args!("priv")),
                }
            }
        }
        pub struct StringLit(pub String);
        #[automatically_derived]
        impl ::core::marker::StructuralPartialEq for StringLit {}
        #[automatically_derived]
        impl ::core::cmp::PartialEq for StringLit {
            #[inline]
            fn eq(&self, other: &StringLit) -> bool {
                self.0 == other.0
            }
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for StringLit {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                ::core::fmt::Formatter::debug_tuple_field1_finish(
                    f,
                    "StringLit",
                    &&self.0,
                )
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for StringLit {
            #[inline]
            fn clone(&self) -> StringLit {
                StringLit(::core::clone::Clone::clone(&self.0))
            }
        }
        pub struct Binding(pub Spanned<Ident>, pub Box<Spanned<Node>>);
        #[automatically_derived]
        impl ::core::marker::StructuralPartialEq for Binding {}
        #[automatically_derived]
        impl ::core::cmp::PartialEq for Binding {
            #[inline]
            fn eq(&self, other: &Binding) -> bool {
                self.0 == other.0 && self.1 == other.1
            }
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for Binding {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                ::core::fmt::Formatter::debug_tuple_field2_finish(
                    f,
                    "Binding",
                    &self.0,
                    &&self.1,
                )
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for Binding {
            #[inline]
            fn clone(&self) -> Binding {
                Binding(
                    ::core::clone::Clone::clone(&self.0),
                    ::core::clone::Clone::clone(&self.1),
                )
            }
        }
        pub enum Literal {
            Bool(bool),
            Float(f64),
            Integer(i64),
            String(String),
        }
        #[automatically_derived]
        impl ::core::marker::StructuralPartialEq for Literal {}
        #[automatically_derived]
        impl ::core::cmp::PartialEq for Literal {
            #[inline]
            fn eq(&self, other: &Literal) -> bool {
                let __self_tag = ::core::intrinsics::discriminant_value(self);
                let __arg1_tag = ::core::intrinsics::discriminant_value(other);
                __self_tag == __arg1_tag
                    && match (self, other) {
                        (Literal::Bool(__self_0), Literal::Bool(__arg1_0)) => {
                            *__self_0 == *__arg1_0
                        }
                        (Literal::Float(__self_0), Literal::Float(__arg1_0)) => {
                            *__self_0 == *__arg1_0
                        }
                        (Literal::Integer(__self_0), Literal::Integer(__arg1_0)) => {
                            *__self_0 == *__arg1_0
                        }
                        (Literal::String(__self_0), Literal::String(__arg1_0)) => {
                            *__self_0 == *__arg1_0
                        }
                        _ => unsafe { ::core::intrinsics::unreachable() }
                    }
            }
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for Literal {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                match self {
                    Literal::Bool(__self_0) => {
                        ::core::fmt::Formatter::debug_tuple_field1_finish(
                            f,
                            "Bool",
                            &__self_0,
                        )
                    }
                    Literal::Float(__self_0) => {
                        ::core::fmt::Formatter::debug_tuple_field1_finish(
                            f,
                            "Float",
                            &__self_0,
                        )
                    }
                    Literal::Integer(__self_0) => {
                        ::core::fmt::Formatter::debug_tuple_field1_finish(
                            f,
                            "Integer",
                            &__self_0,
                        )
                    }
                    Literal::String(__self_0) => {
                        ::core::fmt::Formatter::debug_tuple_field1_finish(
                            f,
                            "String",
                            &__self_0,
                        )
                    }
                }
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for Literal {
            #[inline]
            fn clone(&self) -> Literal {
                match self {
                    Literal::Bool(__self_0) => {
                        Literal::Bool(::core::clone::Clone::clone(__self_0))
                    }
                    Literal::Float(__self_0) => {
                        Literal::Float(::core::clone::Clone::clone(__self_0))
                    }
                    Literal::Integer(__self_0) => {
                        Literal::Integer(::core::clone::Clone::clone(__self_0))
                    }
                    Literal::String(__self_0) => {
                        Literal::String(::core::clone::Clone::clone(__self_0))
                    }
                }
            }
        }
        pub enum Keyword {
            None,
            Some,
            Let,
            Public,
            Private,
            Fn,
            If,
            Else,
            Match,
            Arrow,
            Struct,
            SelfValue,
            When,
            Effect,
            Impl,
            Use,
            From,
            Where,
            Self_,
        }
        #[automatically_derived]
        impl ::core::marker::StructuralPartialEq for Keyword {}
        #[automatically_derived]
        impl ::core::cmp::PartialEq for Keyword {
            #[inline]
            fn eq(&self, other: &Keyword) -> bool {
                let __self_tag = ::core::intrinsics::discriminant_value(self);
                let __arg1_tag = ::core::intrinsics::discriminant_value(other);
                __self_tag == __arg1_tag
            }
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for Keyword {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                ::core::fmt::Formatter::write_str(
                    f,
                    match self {
                        Keyword::None => "None",
                        Keyword::Some => "Some",
                        Keyword::Let => "Let",
                        Keyword::Public => "Public",
                        Keyword::Private => "Private",
                        Keyword::Fn => "Fn",
                        Keyword::If => "If",
                        Keyword::Else => "Else",
                        Keyword::Match => "Match",
                        Keyword::Arrow => "Arrow",
                        Keyword::Struct => "Struct",
                        Keyword::SelfValue => "SelfValue",
                        Keyword::When => "When",
                        Keyword::Effect => "Effect",
                        Keyword::Impl => "Impl",
                        Keyword::Use => "Use",
                        Keyword::From => "From",
                        Keyword::Where => "Where",
                        Keyword::Self_ => "Self_",
                    },
                )
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for Keyword {
            #[inline]
            fn clone(&self) -> Keyword {
                match self {
                    Keyword::None => Keyword::None,
                    Keyword::Some => Keyword::Some,
                    Keyword::Let => Keyword::Let,
                    Keyword::Public => Keyword::Public,
                    Keyword::Private => Keyword::Private,
                    Keyword::Fn => Keyword::Fn,
                    Keyword::If => Keyword::If,
                    Keyword::Else => Keyword::Else,
                    Keyword::Match => Keyword::Match,
                    Keyword::Arrow => Keyword::Arrow,
                    Keyword::Struct => Keyword::Struct,
                    Keyword::SelfValue => Keyword::SelfValue,
                    Keyword::When => Keyword::When,
                    Keyword::Effect => Keyword::Effect,
                    Keyword::Impl => Keyword::Impl,
                    Keyword::Use => Keyword::Use,
                    Keyword::From => Keyword::From,
                    Keyword::Where => Keyword::Where,
                    Keyword::Self_ => Keyword::Self_,
                }
            }
        }
        trait KeywordVisitor {}
        impl Display for Keyword {
            fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
                let kw = match self {
                    Keyword::None => "none",
                    Keyword::Some => "some",
                    Keyword::Let => "let",
                    Keyword::Fn => "fn",
                    Keyword::If => "if",
                    Keyword::Else => "else",
                    Keyword::Match => "match",
                    Keyword::Arrow => "=>",
                    Keyword::Struct => "struct",
                    Keyword::SelfValue => "self",
                    Keyword::When => "when",
                    Keyword::Effect => "effect",
                    Keyword::Impl => "impl",
                    Keyword::Use => "use",
                    Keyword::From => "from",
                    Keyword::Where => "where",
                    Keyword::Self_ => "Self",
                    Keyword::Public => "pub",
                    Keyword::Private => "priv",
                };
                f.write_fmt(format_args!("{0}", kw))
            }
        }
        pub enum Value {
            Literal(Literal),
            Ident(Ident),
        }
        #[automatically_derived]
        impl ::core::marker::StructuralPartialEq for Value {}
        #[automatically_derived]
        impl ::core::cmp::PartialEq for Value {
            #[inline]
            fn eq(&self, other: &Value) -> bool {
                let __self_tag = ::core::intrinsics::discriminant_value(self);
                let __arg1_tag = ::core::intrinsics::discriminant_value(other);
                __self_tag == __arg1_tag
                    && match (self, other) {
                        (Value::Literal(__self_0), Value::Literal(__arg1_0)) => {
                            *__self_0 == *__arg1_0
                        }
                        (Value::Ident(__self_0), Value::Ident(__arg1_0)) => {
                            *__self_0 == *__arg1_0
                        }
                        _ => unsafe { ::core::intrinsics::unreachable() }
                    }
            }
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for Value {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                match self {
                    Value::Literal(__self_0) => {
                        ::core::fmt::Formatter::debug_tuple_field1_finish(
                            f,
                            "Literal",
                            &__self_0,
                        )
                    }
                    Value::Ident(__self_0) => {
                        ::core::fmt::Formatter::debug_tuple_field1_finish(
                            f,
                            "Ident",
                            &__self_0,
                        )
                    }
                }
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for Value {
            #[inline]
            fn clone(&self) -> Value {
                match self {
                    Value::Literal(__self_0) => {
                        Value::Literal(::core::clone::Clone::clone(__self_0))
                    }
                    Value::Ident(__self_0) => {
                        Value::Ident(::core::clone::Clone::clone(__self_0))
                    }
                }
            }
        }
        pub struct Block<T>(pub Vec<T>);
        #[automatically_derived]
        impl<T> ::core::marker::StructuralPartialEq for Block<T> {}
        #[automatically_derived]
        impl<T: ::core::cmp::PartialEq> ::core::cmp::PartialEq for Block<T> {
            #[inline]
            fn eq(&self, other: &Block<T>) -> bool {
                self.0 == other.0
            }
        }
        #[automatically_derived]
        impl<T: ::core::fmt::Debug> ::core::fmt::Debug for Block<T> {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                ::core::fmt::Formatter::debug_tuple_field1_finish(f, "Block", &&self.0)
            }
        }
        #[automatically_derived]
        impl<T: ::core::clone::Clone> ::core::clone::Clone for Block<T> {
            #[inline]
            fn clone(&self) -> Block<T> {
                Block(::core::clone::Clone::clone(&self.0))
            }
        }
        pub struct Tuple<T>(pub Vec<T>);
        #[automatically_derived]
        impl<T> ::core::marker::StructuralPartialEq for Tuple<T> {}
        #[automatically_derived]
        impl<T: ::core::cmp::PartialEq> ::core::cmp::PartialEq for Tuple<T> {
            #[inline]
            fn eq(&self, other: &Tuple<T>) -> bool {
                self.0 == other.0
            }
        }
        #[automatically_derived]
        impl<T: ::core::fmt::Debug> ::core::fmt::Debug for Tuple<T> {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                ::core::fmt::Formatter::debug_tuple_field1_finish(f, "Tuple", &&self.0)
            }
        }
        #[automatically_derived]
        impl<T: ::core::clone::Clone> ::core::clone::Clone for Tuple<T> {
            #[inline]
            fn clone(&self) -> Tuple<T> {
                Tuple(::core::clone::Clone::clone(&self.0))
            }
        }
        pub struct Array<T>(pub Vec<T>);
        #[automatically_derived]
        impl<T> ::core::marker::StructuralPartialEq for Array<T> {}
        #[automatically_derived]
        impl<T: ::core::cmp::PartialEq> ::core::cmp::PartialEq for Array<T> {
            #[inline]
            fn eq(&self, other: &Array<T>) -> bool {
                self.0 == other.0
            }
        }
        #[automatically_derived]
        impl<T: ::core::fmt::Debug> ::core::fmt::Debug for Array<T> {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                ::core::fmt::Formatter::debug_tuple_field1_finish(f, "Array", &&self.0)
            }
        }
        #[automatically_derived]
        impl<T: ::core::clone::Clone> ::core::clone::Clone for Array<T> {
            #[inline]
            fn clone(&self) -> Array<T> {
                Array(::core::clone::Clone::clone(&self.0))
            }
        }
        pub struct BinaryOperation {
            pub lhs: Box<Spanned<Node>>,
            pub op: Operator,
            pub rhs: Box<Spanned<Node>>,
        }
        #[automatically_derived]
        impl ::core::marker::StructuralPartialEq for BinaryOperation {}
        #[automatically_derived]
        impl ::core::cmp::PartialEq for BinaryOperation {
            #[inline]
            fn eq(&self, other: &BinaryOperation) -> bool {
                self.lhs == other.lhs && self.op == other.op && self.rhs == other.rhs
            }
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for BinaryOperation {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                ::core::fmt::Formatter::debug_struct_field3_finish(
                    f,
                    "BinaryOperation",
                    "lhs",
                    &self.lhs,
                    "op",
                    &self.op,
                    "rhs",
                    &&self.rhs,
                )
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for BinaryOperation {
            #[inline]
            fn clone(&self) -> BinaryOperation {
                BinaryOperation {
                    lhs: ::core::clone::Clone::clone(&self.lhs),
                    op: ::core::clone::Clone::clone(&self.op),
                    rhs: ::core::clone::Clone::clone(&self.rhs),
                }
            }
        }
        pub struct FnCall(pub Spanned<Ident>, pub Vec<Spanned<Node>>);
        #[automatically_derived]
        impl ::core::marker::StructuralPartialEq for FnCall {}
        #[automatically_derived]
        impl ::core::cmp::PartialEq for FnCall {
            #[inline]
            fn eq(&self, other: &FnCall) -> bool {
                self.0 == other.0 && self.1 == other.1
            }
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for FnCall {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                ::core::fmt::Formatter::debug_tuple_field2_finish(
                    f,
                    "FnCall",
                    &self.0,
                    &&self.1,
                )
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for FnCall {
            #[inline]
            fn clone(&self) -> FnCall {
                FnCall(
                    ::core::clone::Clone::clone(&self.0),
                    ::core::clone::Clone::clone(&self.1),
                )
            }
        }
        pub enum Node {
            BinaryExpression(BinaryOperation),
            Bool(bool),
            Integer(i64),
            Float(f64),
            Ident(Spanned<Ident>),
            Binding(Binding),
            FnCall(FnCall),
            String(String),
            FnDef(FnDef),
            EffectDef(EffectDef),
            StructDef(StructDef),
            UseDef(UseDef),
            Keyword(Keyword),
            ImplDef(ImplDef),
            Branch(BranchDef),
            FieldAccess(FieldAccess),
            Visibility(Visibility),
            Error,
        }
        #[automatically_derived]
        impl ::core::marker::StructuralPartialEq for Node {}
        #[automatically_derived]
        impl ::core::cmp::PartialEq for Node {
            #[inline]
            fn eq(&self, other: &Node) -> bool {
                let __self_tag = ::core::intrinsics::discriminant_value(self);
                let __arg1_tag = ::core::intrinsics::discriminant_value(other);
                __self_tag == __arg1_tag
                    && match (self, other) {
                        (
                            Node::BinaryExpression(__self_0),
                            Node::BinaryExpression(__arg1_0),
                        ) => *__self_0 == *__arg1_0,
                        (Node::Bool(__self_0), Node::Bool(__arg1_0)) => {
                            *__self_0 == *__arg1_0
                        }
                        (Node::Integer(__self_0), Node::Integer(__arg1_0)) => {
                            *__self_0 == *__arg1_0
                        }
                        (Node::Float(__self_0), Node::Float(__arg1_0)) => {
                            *__self_0 == *__arg1_0
                        }
                        (Node::Ident(__self_0), Node::Ident(__arg1_0)) => {
                            *__self_0 == *__arg1_0
                        }
                        (Node::Binding(__self_0), Node::Binding(__arg1_0)) => {
                            *__self_0 == *__arg1_0
                        }
                        (Node::FnCall(__self_0), Node::FnCall(__arg1_0)) => {
                            *__self_0 == *__arg1_0
                        }
                        (Node::String(__self_0), Node::String(__arg1_0)) => {
                            *__self_0 == *__arg1_0
                        }
                        (Node::FnDef(__self_0), Node::FnDef(__arg1_0)) => {
                            *__self_0 == *__arg1_0
                        }
                        (Node::EffectDef(__self_0), Node::EffectDef(__arg1_0)) => {
                            *__self_0 == *__arg1_0
                        }
                        (Node::StructDef(__self_0), Node::StructDef(__arg1_0)) => {
                            *__self_0 == *__arg1_0
                        }
                        (Node::UseDef(__self_0), Node::UseDef(__arg1_0)) => {
                            *__self_0 == *__arg1_0
                        }
                        (Node::Keyword(__self_0), Node::Keyword(__arg1_0)) => {
                            *__self_0 == *__arg1_0
                        }
                        (Node::ImplDef(__self_0), Node::ImplDef(__arg1_0)) => {
                            *__self_0 == *__arg1_0
                        }
                        (Node::Branch(__self_0), Node::Branch(__arg1_0)) => {
                            *__self_0 == *__arg1_0
                        }
                        (Node::FieldAccess(__self_0), Node::FieldAccess(__arg1_0)) => {
                            *__self_0 == *__arg1_0
                        }
                        (Node::Visibility(__self_0), Node::Visibility(__arg1_0)) => {
                            *__self_0 == *__arg1_0
                        }
                        _ => true,
                    }
            }
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for Node {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                match self {
                    Node::BinaryExpression(__self_0) => {
                        ::core::fmt::Formatter::debug_tuple_field1_finish(
                            f,
                            "BinaryExpression",
                            &__self_0,
                        )
                    }
                    Node::Bool(__self_0) => {
                        ::core::fmt::Formatter::debug_tuple_field1_finish(
                            f,
                            "Bool",
                            &__self_0,
                        )
                    }
                    Node::Integer(__self_0) => {
                        ::core::fmt::Formatter::debug_tuple_field1_finish(
                            f,
                            "Integer",
                            &__self_0,
                        )
                    }
                    Node::Float(__self_0) => {
                        ::core::fmt::Formatter::debug_tuple_field1_finish(
                            f,
                            "Float",
                            &__self_0,
                        )
                    }
                    Node::Ident(__self_0) => {
                        ::core::fmt::Formatter::debug_tuple_field1_finish(
                            f,
                            "Ident",
                            &__self_0,
                        )
                    }
                    Node::Binding(__self_0) => {
                        ::core::fmt::Formatter::debug_tuple_field1_finish(
                            f,
                            "Binding",
                            &__self_0,
                        )
                    }
                    Node::FnCall(__self_0) => {
                        ::core::fmt::Formatter::debug_tuple_field1_finish(
                            f,
                            "FnCall",
                            &__self_0,
                        )
                    }
                    Node::String(__self_0) => {
                        ::core::fmt::Formatter::debug_tuple_field1_finish(
                            f,
                            "String",
                            &__self_0,
                        )
                    }
                    Node::FnDef(__self_0) => {
                        ::core::fmt::Formatter::debug_tuple_field1_finish(
                            f,
                            "FnDef",
                            &__self_0,
                        )
                    }
                    Node::EffectDef(__self_0) => {
                        ::core::fmt::Formatter::debug_tuple_field1_finish(
                            f,
                            "EffectDef",
                            &__self_0,
                        )
                    }
                    Node::StructDef(__self_0) => {
                        ::core::fmt::Formatter::debug_tuple_field1_finish(
                            f,
                            "StructDef",
                            &__self_0,
                        )
                    }
                    Node::UseDef(__self_0) => {
                        ::core::fmt::Formatter::debug_tuple_field1_finish(
                            f,
                            "UseDef",
                            &__self_0,
                        )
                    }
                    Node::Keyword(__self_0) => {
                        ::core::fmt::Formatter::debug_tuple_field1_finish(
                            f,
                            "Keyword",
                            &__self_0,
                        )
                    }
                    Node::ImplDef(__self_0) => {
                        ::core::fmt::Formatter::debug_tuple_field1_finish(
                            f,
                            "ImplDef",
                            &__self_0,
                        )
                    }
                    Node::Branch(__self_0) => {
                        ::core::fmt::Formatter::debug_tuple_field1_finish(
                            f,
                            "Branch",
                            &__self_0,
                        )
                    }
                    Node::FieldAccess(__self_0) => {
                        ::core::fmt::Formatter::debug_tuple_field1_finish(
                            f,
                            "FieldAccess",
                            &__self_0,
                        )
                    }
                    Node::Visibility(__self_0) => {
                        ::core::fmt::Formatter::debug_tuple_field1_finish(
                            f,
                            "Visibility",
                            &__self_0,
                        )
                    }
                    Node::Error => ::core::fmt::Formatter::write_str(f, "Error"),
                }
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for Node {
            #[inline]
            fn clone(&self) -> Node {
                match self {
                    Node::BinaryExpression(__self_0) => {
                        Node::BinaryExpression(::core::clone::Clone::clone(__self_0))
                    }
                    Node::Bool(__self_0) => {
                        Node::Bool(::core::clone::Clone::clone(__self_0))
                    }
                    Node::Integer(__self_0) => {
                        Node::Integer(::core::clone::Clone::clone(__self_0))
                    }
                    Node::Float(__self_0) => {
                        Node::Float(::core::clone::Clone::clone(__self_0))
                    }
                    Node::Ident(__self_0) => {
                        Node::Ident(::core::clone::Clone::clone(__self_0))
                    }
                    Node::Binding(__self_0) => {
                        Node::Binding(::core::clone::Clone::clone(__self_0))
                    }
                    Node::FnCall(__self_0) => {
                        Node::FnCall(::core::clone::Clone::clone(__self_0))
                    }
                    Node::String(__self_0) => {
                        Node::String(::core::clone::Clone::clone(__self_0))
                    }
                    Node::FnDef(__self_0) => {
                        Node::FnDef(::core::clone::Clone::clone(__self_0))
                    }
                    Node::EffectDef(__self_0) => {
                        Node::EffectDef(::core::clone::Clone::clone(__self_0))
                    }
                    Node::StructDef(__self_0) => {
                        Node::StructDef(::core::clone::Clone::clone(__self_0))
                    }
                    Node::UseDef(__self_0) => {
                        Node::UseDef(::core::clone::Clone::clone(__self_0))
                    }
                    Node::Keyword(__self_0) => {
                        Node::Keyword(::core::clone::Clone::clone(__self_0))
                    }
                    Node::ImplDef(__self_0) => {
                        Node::ImplDef(::core::clone::Clone::clone(__self_0))
                    }
                    Node::Branch(__self_0) => {
                        Node::Branch(::core::clone::Clone::clone(__self_0))
                    }
                    Node::FieldAccess(__self_0) => {
                        Node::FieldAccess(::core::clone::Clone::clone(__self_0))
                    }
                    Node::Visibility(__self_0) => {
                        Node::Visibility(::core::clone::Clone::clone(__self_0))
                    }
                    Node::Error => Node::Error,
                }
            }
        }
        impl Display for Node {
            fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
                match self {
                    Node::BinaryExpression(bin) => {
                        f.write_fmt(
                            format_args!("{0} {1} {2}", bin.lhs, bin.op, bin.rhs),
                        )
                    }
                    Node::Bool(b) => f.write_fmt(format_args!("{0}", b)),
                    Node::Integer(i) => f.write_fmt(format_args!("{0}", i)),
                    Node::Float(fl) => f.write_fmt(format_args!("{0}", fl)),
                    Node::Ident(ident) => f.write_fmt(format_args!("{0}", ident.1)),
                    Node::Binding(bind) => {
                        f.write_fmt(format_args!("{0} = {1}", bind.0, bind.1))
                    }
                    Node::FnCall(call) => {
                        f.write_fmt(
                            format_args!(
                                "{0}({1})",
                                call.0,
                                call
                                    .1
                                    .iter()
                                    .map(|e| e.1.to_string())
                                    .collect::<Vec<String>>()
                                    .join(", "),
                            ),
                        )
                    }
                    Node::String(s) => f.write_fmt(format_args!("{0}", s)),
                    Node::FnDef(def) => f.write_fmt(format_args!("{0}", def.0)),
                    Node::EffectDef(def) => f.write_fmt(format_args!("{0}", def.0)),
                    Node::StructDef(def) => f.write_fmt(format_args!("{0}", def.0)),
                    Node::UseDef(def) => f.write_fmt(format_args!("{0:#?}", def.0)),
                    Node::Keyword(kw) => f.write_fmt(format_args!("{0}", kw)),
                    Node::ImplDef(def) => f.write_fmt(format_args!("{0}", def.0)),
                    Node::Branch(branch) => f.write_fmt(format_args!("{0}", branch.0)),
                    Node::FieldAccess(access) => {
                        f.write_fmt(format_args!("{0}.{1}", access.0, access.1))
                    }
                    Node::Visibility(vis) => f.write_fmt(format_args!("{0}", vis)),
                    Node::Error => f.write_fmt(format_args!("Error")),
                }
            }
        }
        pub enum FnArg {
            Reciever,
            Field(Spanned<FieldDef>),
        }
        #[automatically_derived]
        impl ::core::marker::StructuralPartialEq for FnArg {}
        #[automatically_derived]
        impl ::core::cmp::PartialEq for FnArg {
            #[inline]
            fn eq(&self, other: &FnArg) -> bool {
                let __self_tag = ::core::intrinsics::discriminant_value(self);
                let __arg1_tag = ::core::intrinsics::discriminant_value(other);
                __self_tag == __arg1_tag
                    && match (self, other) {
                        (FnArg::Field(__self_0), FnArg::Field(__arg1_0)) => {
                            *__self_0 == *__arg1_0
                        }
                        _ => true,
                    }
            }
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for FnArg {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                match self {
                    FnArg::Reciever => ::core::fmt::Formatter::write_str(f, "Reciever"),
                    FnArg::Field(__self_0) => {
                        ::core::fmt::Formatter::debug_tuple_field1_finish(
                            f,
                            "Field",
                            &__self_0,
                        )
                    }
                }
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for FnArg {
            #[inline]
            fn clone(&self) -> FnArg {
                match self {
                    FnArg::Reciever => FnArg::Reciever,
                    FnArg::Field(__self_0) => {
                        FnArg::Field(::core::clone::Clone::clone(__self_0))
                    }
                }
            }
        }
        impl Display for FnArg {
            fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
                match self {
                    FnArg::Reciever => f.write_fmt(format_args!("self")),
                    FnArg::Field(field) => f.write_fmt(format_args!("{0}", field.1)),
                }
            }
        }
        pub struct Prototype {
            pub name: Spanned<Ident>,
            pub args: Vec<Spanned<FnArg>>,
            pub ret: Option<Spanned<Ident>>,
            pub effects: Vec<Spanned<Ident>>,
        }
        #[automatically_derived]
        impl ::core::marker::StructuralPartialEq for Prototype {}
        #[automatically_derived]
        impl ::core::cmp::PartialEq for Prototype {
            #[inline]
            fn eq(&self, other: &Prototype) -> bool {
                self.name == other.name && self.args == other.args
                    && self.ret == other.ret && self.effects == other.effects
            }
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for Prototype {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                ::core::fmt::Formatter::debug_struct_field4_finish(
                    f,
                    "Prototype",
                    "name",
                    &self.name,
                    "args",
                    &self.args,
                    "ret",
                    &self.ret,
                    "effects",
                    &&self.effects,
                )
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for Prototype {
            #[inline]
            fn clone(&self) -> Prototype {
                Prototype {
                    name: ::core::clone::Clone::clone(&self.name),
                    args: ::core::clone::Clone::clone(&self.args),
                    ret: ::core::clone::Clone::clone(&self.ret),
                    effects: ::core::clone::Clone::clone(&self.effects),
                }
            }
        }
        impl Display for Prototype {
            fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
                f.write_fmt(format_args!("{0}(", self.name))?;
                for arg in self.args.iter() {
                    f.write_fmt(format_args!("{0}", arg))?;
                }
                f.write_fmt(format_args!(")"))?;
                if let Some(ret) = &self.ret {
                    f.write_fmt(format_args!(" -> {0}", ret))?;
                }
                Ok(())
            }
        }
        pub enum Whitespace {
            Space,
            Tab,
            Newline,
        }
        #[automatically_derived]
        impl ::core::marker::StructuralPartialEq for Whitespace {}
        #[automatically_derived]
        impl ::core::cmp::PartialEq for Whitespace {
            #[inline]
            fn eq(&self, other: &Whitespace) -> bool {
                let __self_tag = ::core::intrinsics::discriminant_value(self);
                let __arg1_tag = ::core::intrinsics::discriminant_value(other);
                __self_tag == __arg1_tag
            }
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for Whitespace {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                ::core::fmt::Formatter::write_str(
                    f,
                    match self {
                        Whitespace::Space => "Space",
                        Whitespace::Tab => "Tab",
                        Whitespace::Newline => "Newline",
                    },
                )
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for Whitespace {
            #[inline]
            fn clone(&self) -> Whitespace {
                match self {
                    Whitespace::Space => Whitespace::Space,
                    Whitespace::Tab => Whitespace::Tab,
                    Whitespace::Newline => Whitespace::Newline,
                }
            }
        }
        pub enum Operator {
            Add,
            Sub,
            Mul,
            Div,
            Modulo,
            Increment,
            Decrement,
            Maybe,
            Not,
            Neg,
            Dot,
            Arrow,
            FatArrow,
            DoubleColon,
        }
        #[automatically_derived]
        impl ::core::marker::StructuralPartialEq for Operator {}
        #[automatically_derived]
        impl ::core::cmp::PartialEq for Operator {
            #[inline]
            fn eq(&self, other: &Operator) -> bool {
                let __self_tag = ::core::intrinsics::discriminant_value(self);
                let __arg1_tag = ::core::intrinsics::discriminant_value(other);
                __self_tag == __arg1_tag
            }
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for Operator {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                ::core::fmt::Formatter::write_str(
                    f,
                    match self {
                        Operator::Add => "Add",
                        Operator::Sub => "Sub",
                        Operator::Mul => "Mul",
                        Operator::Div => "Div",
                        Operator::Modulo => "Modulo",
                        Operator::Increment => "Increment",
                        Operator::Decrement => "Decrement",
                        Operator::Maybe => "Maybe",
                        Operator::Not => "Not",
                        Operator::Neg => "Neg",
                        Operator::Dot => "Dot",
                        Operator::Arrow => "Arrow",
                        Operator::FatArrow => "FatArrow",
                        Operator::DoubleColon => "DoubleColon",
                    },
                )
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for Operator {
            #[inline]
            fn clone(&self) -> Operator {
                match self {
                    Operator::Add => Operator::Add,
                    Operator::Sub => Operator::Sub,
                    Operator::Mul => Operator::Mul,
                    Operator::Div => Operator::Div,
                    Operator::Modulo => Operator::Modulo,
                    Operator::Increment => Operator::Increment,
                    Operator::Decrement => Operator::Decrement,
                    Operator::Maybe => Operator::Maybe,
                    Operator::Not => Operator::Not,
                    Operator::Neg => Operator::Neg,
                    Operator::Dot => Operator::Dot,
                    Operator::Arrow => Operator::Arrow,
                    Operator::FatArrow => Operator::FatArrow,
                    Operator::DoubleColon => Operator::DoubleColon,
                }
            }
        }
        impl Display for Operator {
            fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
                let op = match self {
                    Operator::Add => "+",
                    Operator::Sub => "-",
                    Operator::Mul => "*",
                    Operator::Div => "/",
                    Operator::Modulo => "%",
                    Operator::Increment => "++",
                    Operator::Decrement => "--",
                    Operator::Maybe => "?",
                    Operator::Not => "!",
                    Operator::Neg => "-",
                    Operator::Dot => ".",
                    Operator::Arrow => "->",
                    Operator::FatArrow => "=>",
                    Operator::DoubleColon => "::",
                };
                f.write_fmt(format_args!("{0}", op))
            }
        }
        pub struct FieldAccess(pub Box<Spanned<Node>>, pub Box<Spanned<Node>>);
        #[automatically_derived]
        impl ::core::marker::StructuralPartialEq for FieldAccess {}
        #[automatically_derived]
        impl ::core::cmp::PartialEq for FieldAccess {
            #[inline]
            fn eq(&self, other: &FieldAccess) -> bool {
                self.0 == other.0 && self.1 == other.1
            }
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for FieldAccess {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                ::core::fmt::Formatter::debug_tuple_field2_finish(
                    f,
                    "FieldAccess",
                    &self.0,
                    &&self.1,
                )
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for FieldAccess {
            #[inline]
            fn clone(&self) -> FieldAccess {
                FieldAccess(
                    ::core::clone::Clone::clone(&self.0),
                    ::core::clone::Clone::clone(&self.1),
                )
            }
        }
        pub struct Module(pub Vec<Spanned<Node>>);
        #[automatically_derived]
        impl ::core::marker::StructuralPartialEq for Module {}
        #[automatically_derived]
        impl ::core::cmp::PartialEq for Module {
            #[inline]
            fn eq(&self, other: &Module) -> bool {
                self.0 == other.0
            }
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for Module {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                ::core::fmt::Formatter::debug_tuple_field1_finish(f, "Module", &&self.0)
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for Module {
            #[inline]
            fn clone(&self) -> Module {
                Module(::core::clone::Clone::clone(&self.0))
            }
        }
        pub struct FieldDef(
            pub Spanned<Visibility>,
            pub Spanned<Ident>,
            pub Spanned<Ident>,
        );
        #[automatically_derived]
        impl ::core::marker::StructuralPartialEq for FieldDef {}
        #[automatically_derived]
        impl ::core::cmp::PartialEq for FieldDef {
            #[inline]
            fn eq(&self, other: &FieldDef) -> bool {
                self.0 == other.0 && self.1 == other.1 && self.2 == other.2
            }
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for FieldDef {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                ::core::fmt::Formatter::debug_tuple_field3_finish(
                    f,
                    "FieldDef",
                    &self.0,
                    &self.1,
                    &&self.2,
                )
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for FieldDef {
            #[inline]
            fn clone(&self) -> FieldDef {
                FieldDef(
                    ::core::clone::Clone::clone(&self.0),
                    ::core::clone::Clone::clone(&self.1),
                    ::core::clone::Clone::clone(&self.2),
                )
            }
        }
        impl Display for FieldDef {
            fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
                f.write_fmt(format_args!("{0}: {1}", self.0, self.1))
            }
        }
        pub struct StructDef(
            pub Spanned<KeywordAndVisibility>,
            pub Spanned<Ident>,
            pub Block<Spanned<FieldDef>>,
        );
        #[automatically_derived]
        impl ::core::marker::StructuralPartialEq for StructDef {}
        #[automatically_derived]
        impl ::core::cmp::PartialEq for StructDef {
            #[inline]
            fn eq(&self, other: &StructDef) -> bool {
                self.0 == other.0 && self.1 == other.1 && self.2 == other.2
            }
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for StructDef {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                ::core::fmt::Formatter::debug_tuple_field3_finish(
                    f,
                    "StructDef",
                    &self.0,
                    &self.1,
                    &&self.2,
                )
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for StructDef {
            #[inline]
            fn clone(&self) -> StructDef {
                StructDef(
                    ::core::clone::Clone::clone(&self.0),
                    ::core::clone::Clone::clone(&self.1),
                    ::core::clone::Clone::clone(&self.2),
                )
            }
        }
        pub struct FnIdent(pub Ident);
        #[automatically_derived]
        impl ::core::marker::StructuralPartialEq for FnIdent {}
        #[automatically_derived]
        impl ::core::cmp::PartialEq for FnIdent {
            #[inline]
            fn eq(&self, other: &FnIdent) -> bool {
                self.0 == other.0
            }
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for FnIdent {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                ::core::fmt::Formatter::debug_tuple_field1_finish(f, "FnIdent", &&self.0)
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for FnIdent {
            #[inline]
            fn clone(&self) -> FnIdent {
                FnIdent(::core::clone::Clone::clone(&self.0))
            }
        }
        pub struct EffectDef(
            pub Spanned<KeywordAndVisibility>,
            pub Spanned<Ident>,
            pub Vec<Spanned<Ident>>,
            pub Block<Spanned<Prototype>>,
        );
        #[automatically_derived]
        impl ::core::marker::StructuralPartialEq for EffectDef {}
        #[automatically_derived]
        impl ::core::cmp::PartialEq for EffectDef {
            #[inline]
            fn eq(&self, other: &EffectDef) -> bool {
                self.0 == other.0 && self.1 == other.1 && self.2 == other.2
                    && self.3 == other.3
            }
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for EffectDef {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                ::core::fmt::Formatter::debug_tuple_field4_finish(
                    f,
                    "EffectDef",
                    &self.0,
                    &self.1,
                    &self.2,
                    &&self.3,
                )
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for EffectDef {
            #[inline]
            fn clone(&self) -> EffectDef {
                EffectDef(
                    ::core::clone::Clone::clone(&self.0),
                    ::core::clone::Clone::clone(&self.1),
                    ::core::clone::Clone::clone(&self.2),
                    ::core::clone::Clone::clone(&self.3),
                )
            }
        }
        pub struct UseDef(
            pub Spanned<KeywordAndVisibility>,
            pub Vec<Spanned<Ident>>,
            pub Spanned<Ident>,
        );
        #[automatically_derived]
        impl ::core::marker::StructuralPartialEq for UseDef {}
        #[automatically_derived]
        impl ::core::cmp::PartialEq for UseDef {
            #[inline]
            fn eq(&self, other: &UseDef) -> bool {
                self.0 == other.0 && self.1 == other.1 && self.2 == other.2
            }
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for UseDef {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                ::core::fmt::Formatter::debug_tuple_field3_finish(
                    f,
                    "UseDef",
                    &self.0,
                    &self.1,
                    &&self.2,
                )
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for UseDef {
            #[inline]
            fn clone(&self) -> UseDef {
                UseDef(
                    ::core::clone::Clone::clone(&self.0),
                    ::core::clone::Clone::clone(&self.1),
                    ::core::clone::Clone::clone(&self.2),
                )
            }
        }
        impl Display for UseDef {
            fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
                f.write_fmt(format_args!("{0} {1:?} from {2}", self.0, self.1, self.2))
            }
        }
        pub struct KeywordAndVisibility(pub Spanned<Keyword>, pub Spanned<Visibility>);
        #[automatically_derived]
        impl ::core::marker::StructuralPartialEq for KeywordAndVisibility {}
        #[automatically_derived]
        impl ::core::cmp::PartialEq for KeywordAndVisibility {
            #[inline]
            fn eq(&self, other: &KeywordAndVisibility) -> bool {
                self.0 == other.0 && self.1 == other.1
            }
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for KeywordAndVisibility {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                ::core::fmt::Formatter::debug_tuple_field2_finish(
                    f,
                    "KeywordAndVisibility",
                    &self.0,
                    &&self.1,
                )
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for KeywordAndVisibility {
            #[inline]
            fn clone(&self) -> KeywordAndVisibility {
                KeywordAndVisibility(
                    ::core::clone::Clone::clone(&self.0),
                    ::core::clone::Clone::clone(&self.1),
                )
            }
        }
        impl Display for KeywordAndVisibility {
            fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
                f.write_fmt(format_args!("{0} {1}", self.1, self.0))
            }
        }
        pub struct ImplDef(
            pub Spanned<KeywordAndVisibility>,
            pub Spanned<Ident>,
            pub Option<Spanned<Ident>>,
            pub Block<Spanned<Node>>,
        );
        #[automatically_derived]
        impl ::core::marker::StructuralPartialEq for ImplDef {}
        #[automatically_derived]
        impl ::core::cmp::PartialEq for ImplDef {
            #[inline]
            fn eq(&self, other: &ImplDef) -> bool {
                self.0 == other.0 && self.1 == other.1 && self.2 == other.2
                    && self.3 == other.3
            }
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for ImplDef {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                ::core::fmt::Formatter::debug_tuple_field4_finish(
                    f,
                    "ImplDef",
                    &self.0,
                    &self.1,
                    &self.2,
                    &&self.3,
                )
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for ImplDef {
            #[inline]
            fn clone(&self) -> ImplDef {
                ImplDef(
                    ::core::clone::Clone::clone(&self.0),
                    ::core::clone::Clone::clone(&self.1),
                    ::core::clone::Clone::clone(&self.2),
                    ::core::clone::Clone::clone(&self.3),
                )
            }
        }
        pub struct BranchDef(
            pub Box<Spanned<Node>>,
            pub Vec<(Spanned<Node>, Block<Spanned<Node>>)>,
        );
        #[automatically_derived]
        impl ::core::marker::StructuralPartialEq for BranchDef {}
        #[automatically_derived]
        impl ::core::cmp::PartialEq for BranchDef {
            #[inline]
            fn eq(&self, other: &BranchDef) -> bool {
                self.0 == other.0 && self.1 == other.1
            }
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for BranchDef {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                ::core::fmt::Formatter::debug_tuple_field2_finish(
                    f,
                    "BranchDef",
                    &self.0,
                    &&self.1,
                )
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for BranchDef {
            #[inline]
            fn clone(&self) -> BranchDef {
                BranchDef(
                    ::core::clone::Clone::clone(&self.0),
                    ::core::clone::Clone::clone(&self.1),
                )
            }
        }
        pub struct FnDef(
            pub Spanned<KeywordAndVisibility>,
            pub Spanned<Prototype>,
            pub Block<Spanned<Node>>,
        );
        #[automatically_derived]
        impl ::core::marker::StructuralPartialEq for FnDef {}
        #[automatically_derived]
        impl ::core::cmp::PartialEq for FnDef {
            #[inline]
            fn eq(&self, other: &FnDef) -> bool {
                self.0 == other.0 && self.1 == other.1 && self.2 == other.2
            }
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for FnDef {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                ::core::fmt::Formatter::debug_tuple_field3_finish(
                    f,
                    "FnDef",
                    &self.0,
                    &self.1,
                    &&self.2,
                )
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for FnDef {
            #[inline]
            fn clone(&self) -> FnDef {
                FnDef(
                    ::core::clone::Clone::clone(&self.0),
                    ::core::clone::Clone::clone(&self.1),
                    ::core::clone::Clone::clone(&self.2),
                )
            }
        }
        impl Display for FnDef {
            fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
                f.write_fmt(format_args!("{0} {1} {{", self.0, self.1))?;
                for expr in self.2.0.iter() {
                    f.write_fmt(format_args!("{0}", expr))?;
                }
                f.write_fmt(format_args!("}}"))
            }
        }
        impl Eq for Node {}
    }
    mod errors {
        use crate::lexer::Location;
        pub fn pretty_errors<'input>(
            src: &'input str,
            errors: Vec<
                lalrpop_util::ErrorRecovery<Location, crate::lexer::Token<'_>, &str>,
            >,
        ) -> String {
            let mut pretty = String::new();
            for error in errors {
                match error.error {
                    lalrpop_util::ParseError::InvalidToken { location: _ } => {
                        ::core::panicking::panic("not yet implemented")
                    }
                    lalrpop_util::ParseError::UnrecognizedEof { location, expected } => {
                        let start = location;
                        let end = location;
                        let start_line = start.line;
                        let end_line = end.line;
                        let line = &src[start_line..end_line];
                        let start_col = start.col;
                        let end_col = end.col;
                        pretty
                            .push_str(
                                &{
                                    let res = ::alloc::fmt::format(
                                        format_args!(
                                            "error: unexpected end of file, expected one of {0:?}\n",
                                            expected,
                                        ),
                                    );
                                    res
                                },
                            );
                        pretty.push_str(&line);
                        pretty.push_str("\n");
                        pretty.push_str(&" ".repeat(start_col));
                        pretty.push_str(&"^".repeat(end_col - start_col));
                    }
                    lalrpop_util::ParseError::UnrecognizedToken { token, expected } => {
                        let start = token.0;
                        let end = token.2;
                        let start_line = start.line;
                        let end_line = end.line;
                        let line = &src[start_line..end_line];
                        let start_col = start.col;
                        let end_col = end.col;
                        let expected: Vec<&str> = expected
                            .iter()
                            .map(|x| &x[1..x.len() - 1])
                            .collect();
                        pretty
                            .push_str(
                                &{
                                    let res = ::alloc::fmt::format(
                                        format_args!(
                                            "error: unexpected token {0:?}, expected one of {1:?}\n",
                                            token.1,
                                            expected,
                                        ),
                                    );
                                    res
                                },
                            );
                        pretty.push_str(&line);
                        pretty.push_str("\n");
                        pretty.push_str(&" ".repeat(start_col));
                        pretty.push_str(&"^".repeat(end_col - start_col));
                    }
                    lalrpop_util::ParseError::ExtraToken { token: _ } => {
                        ::core::panicking::panic("not yet implemented")
                    }
                    lalrpop_util::ParseError::User { error: _ } => {
                        ::core::panicking::panic("not yet implemented")
                    }
                };
            }
            pretty
        }
    }
    mod string {
        use syn::spanned::Spanned as _;
        pub enum ParseError {
            UnexpectedChar(char),
            UnterminatedString,
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for ParseError {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                match self {
                    ParseError::UnexpectedChar(__self_0) => {
                        ::core::fmt::Formatter::debug_tuple_field1_finish(
                            f,
                            "UnexpectedChar",
                            &__self_0,
                        )
                    }
                    ParseError::UnterminatedString => {
                        ::core::fmt::Formatter::write_str(f, "UnterminatedString")
                    }
                }
            }
        }
        #[automatically_derived]
        impl ::core::marker::StructuralPartialEq for ParseError {}
        #[automatically_derived]
        impl ::core::cmp::PartialEq for ParseError {
            #[inline]
            fn eq(&self, other: &ParseError) -> bool {
                let __self_tag = ::core::intrinsics::discriminant_value(self);
                let __arg1_tag = ::core::intrinsics::discriminant_value(other);
                __self_tag == __arg1_tag
                    && match (self, other) {
                        (
                            ParseError::UnexpectedChar(__self_0),
                            ParseError::UnexpectedChar(__arg1_0),
                        ) => *__self_0 == *__arg1_0,
                        _ => true,
                    }
            }
        }
        impl std::fmt::Display for ParseError {
            fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
                match self {
                    ParseError::UnexpectedChar(c) => {
                        f.write_fmt(format_args!("unexpected character: \'{0}\'", c))
                    }
                    ParseError::UnterminatedString => {
                        f.write_fmt(format_args!("unterminated string"))
                    }
                }
            }
        }
        impl std::error::Error for ParseError {}
        pub fn apply_string_escapes(content: &str) -> std::borrow::Cow<str> {
            let s = syn::LitStr::new(content, content.span());
            s.token().to_string().into()
        }
    }
    pub mod span {
        pub use crate::{lexer::Location, Db};
        use hashbrown::HashMap;
        use okstd::prelude::*;
        use std::{fmt::Display, ops::Range};
        use super::ast::{self, BinaryOperation, Node};
        pub struct Spanned<T>(pub Location, pub T, pub Location);
        #[automatically_derived]
        impl<T> ::core::marker::StructuralPartialEq for Spanned<T> {}
        #[automatically_derived]
        impl<T: ::core::cmp::PartialEq> ::core::cmp::PartialEq for Spanned<T> {
            #[inline]
            fn eq(&self, other: &Spanned<T>) -> bool {
                self.0 == other.0 && self.1 == other.1 && self.2 == other.2
            }
        }
        #[automatically_derived]
        impl<T: ::core::fmt::Debug> ::core::fmt::Debug for Spanned<T> {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                ::core::fmt::Formatter::debug_tuple_field3_finish(
                    f,
                    "Spanned",
                    &self.0,
                    &self.1,
                    &&self.2,
                )
            }
        }
        #[automatically_derived]
        impl<T: ::core::clone::Clone> ::core::clone::Clone for Spanned<T> {
            #[inline]
            fn clone(&self) -> Spanned<T> {
                Spanned(
                    ::core::clone::Clone::clone(&self.0),
                    ::core::clone::Clone::clone(&self.1),
                    ::core::clone::Clone::clone(&self.2),
                )
            }
        }
        #[automatically_derived]
        impl<T> ::core::marker::StructuralEq for Spanned<T> {}
        #[automatically_derived]
        impl<T: ::core::cmp::Eq> ::core::cmp::Eq for Spanned<T> {
            #[inline]
            #[doc(hidden)]
            #[coverage(off)]
            fn assert_receiver_is_total_eq(&self) -> () {
                let _: ::core::cmp::AssertParamIsEq<Location>;
                let _: ::core::cmp::AssertParamIsEq<T>;
            }
        }
        #[automatically_derived]
        impl<T: ::core::cmp::PartialOrd> ::core::cmp::PartialOrd for Spanned<T> {
            #[inline]
            fn partial_cmp(
                &self,
                other: &Spanned<T>,
            ) -> ::core::option::Option<::core::cmp::Ordering> {
                match ::core::cmp::PartialOrd::partial_cmp(&self.0, &other.0) {
                    ::core::option::Option::Some(::core::cmp::Ordering::Equal) => {
                        match ::core::cmp::PartialOrd::partial_cmp(&self.1, &other.1) {
                            ::core::option::Option::Some(
                                ::core::cmp::Ordering::Equal,
                            ) => ::core::cmp::PartialOrd::partial_cmp(&self.2, &other.2),
                            cmp => cmp,
                        }
                    }
                    cmp => cmp,
                }
            }
        }
        impl<T> Spanned<T> {
            pub fn span(&self) -> Range<Location> {
                self.0..self.2
            }
            pub fn span_size(&self) -> usize {
                self.span().end.offset - self.span().start.offset
            }
        }
        trait GetSelf<T> {
            fn into(self) -> T;
        }
        impl<T> GetSelf<T> for Spanned<T> {
            fn into(self) -> T {
                self.1
            }
        }
        impl<T: Display> Display for Spanned<T> {
            fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
                f.write_fmt(format_args!("{0}", self.1))
            }
        }
        impl<T> Spanned<T> {
            pub fn overlap(&self, other: &ByteOrLineColOrCoord) -> bool {
                match other {
                    ByteOrLineColOrCoord::Byte(byte) => {
                        self.0.offset <= *byte && *byte <= self.2.offset
                    }
                    ByteOrLineColOrCoord::LineCol(line, col) => {
                        {
                            let lvl = ::log::Level::Debug;
                            if lvl <= ::log::STATIC_MAX_LEVEL
                                && lvl <= ::log::max_level()
                            {
                                ::log::__private_api::log(
                                    format_args!("line: {0}, col: {1}", line, col),
                                    lvl,
                                    &(
                                        "srclang::parser::span",
                                        "srclang::parser::span",
                                        "src/parser/span.rs",
                                    ),
                                    42u32,
                                    (),
                                );
                            }
                        };
                        (*line == self.0.line || *line == self.2.line)
                            && {
                                if self.0.line == self.2.line {
                                    self.0.col <= *col && *col <= self.2.col
                                } else {
                                    if self.0.line <= *line && *line <= self.2.line {
                                        return self.0.col <= *col && *col <= self.2.col;
                                    }
                                    false
                                }
                            }
                    }
                    ByteOrLineColOrCoord::Coord(coord) => {
                        self.0.offset <= coord.offset && coord.offset <= self.2.offset
                    }
                }
            }
        }
        pub struct ByteOrLineColOrCoordInterned(salsa::Id);
        #[automatically_derived]
        impl ::core::marker::Copy for ByteOrLineColOrCoordInterned {}
        #[automatically_derived]
        impl ::core::clone::Clone for ByteOrLineColOrCoordInterned {
            #[inline]
            fn clone(&self) -> ByteOrLineColOrCoordInterned {
                let _: ::core::clone::AssertParamIsClone<salsa::Id>;
                *self
            }
        }
        #[automatically_derived]
        impl ::core::marker::StructuralPartialEq for ByteOrLineColOrCoordInterned {}
        #[automatically_derived]
        impl ::core::cmp::PartialEq for ByteOrLineColOrCoordInterned {
            #[inline]
            fn eq(&self, other: &ByteOrLineColOrCoordInterned) -> bool {
                self.0 == other.0
            }
        }
        #[automatically_derived]
        impl ::core::cmp::PartialOrd for ByteOrLineColOrCoordInterned {
            #[inline]
            fn partial_cmp(
                &self,
                other: &ByteOrLineColOrCoordInterned,
            ) -> ::core::option::Option<::core::cmp::Ordering> {
                ::core::cmp::PartialOrd::partial_cmp(&self.0, &other.0)
            }
        }
        #[automatically_derived]
        impl ::core::marker::StructuralEq for ByteOrLineColOrCoordInterned {}
        #[automatically_derived]
        impl ::core::cmp::Eq for ByteOrLineColOrCoordInterned {
            #[inline]
            #[doc(hidden)]
            #[coverage(off)]
            fn assert_receiver_is_total_eq(&self) -> () {
                let _: ::core::cmp::AssertParamIsEq<salsa::Id>;
            }
        }
        #[automatically_derived]
        impl ::core::cmp::Ord for ByteOrLineColOrCoordInterned {
            #[inline]
            fn cmp(
                &self,
                other: &ByteOrLineColOrCoordInterned,
            ) -> ::core::cmp::Ordering {
                ::core::cmp::Ord::cmp(&self.0, &other.0)
            }
        }
        #[automatically_derived]
        impl ::core::hash::Hash for ByteOrLineColOrCoordInterned {
            #[inline]
            fn hash<__H: ::core::hash::Hasher>(&self, state: &mut __H) -> () {
                ::core::hash::Hash::hash(&self.0, state)
            }
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for ByteOrLineColOrCoordInterned {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                ::core::fmt::Formatter::debug_tuple_field1_finish(
                    f,
                    "ByteOrLineColOrCoordInterned",
                    &&self.0,
                )
            }
        }
        #[allow(dead_code, clippy::pedantic, clippy::complexity, clippy::style)]
        impl ByteOrLineColOrCoordInterned {
            pub fn new(
                __db: &<crate::Jar as salsa::jar::Jar<'_>>::DynDb,
                pos: ByteOrLineColOrCoord,
            ) -> Self {
                let (__jar, __runtime) = <_ as salsa::storage::HasJar<
                    crate::Jar,
                >>::jar(__db);
                let __ingredients = <crate::Jar as salsa::storage::HasIngredientsFor<
                    ByteOrLineColOrCoordInterned,
                >>::ingredient(__jar);
                let __id = __ingredients.1.new_input(__runtime);
                __ingredients.0.store_new(__runtime, __id, pos, salsa::Durability::LOW);
                __id
            }
            pub fn pos<'db>(
                self,
                __db: &'db <crate::Jar as salsa::jar::Jar<'_>>::DynDb,
            ) -> &'db ByteOrLineColOrCoord {
                let (__jar, __runtime) = <_ as salsa::storage::HasJar<
                    crate::Jar,
                >>::jar(__db);
                let __ingredients = <crate::Jar as salsa::storage::HasIngredientsFor<
                    ByteOrLineColOrCoordInterned,
                >>::ingredient(__jar);
                __ingredients.0.fetch(__runtime, self)
            }
            pub fn set_pos<'db>(
                self,
                __db: &'db mut <crate::Jar as salsa::jar::Jar<'_>>::DynDb,
            ) -> salsa::setter::Setter<
                'db,
                ByteOrLineColOrCoordInterned,
                ByteOrLineColOrCoord,
            > {
                let (__jar, __runtime) = <_ as salsa::storage::HasJar<
                    crate::Jar,
                >>::jar_mut(__db);
                let __ingredients = <crate::Jar as salsa::storage::HasIngredientsFor<
                    ByteOrLineColOrCoordInterned,
                >>::ingredient_mut(__jar);
                salsa::setter::Setter::new(__runtime, self, &mut __ingredients.0)
            }
        }
        impl salsa::storage::IngredientsFor for ByteOrLineColOrCoordInterned {
            type Jar = crate::Jar;
            type Ingredients = (
                salsa::input_field::InputFieldIngredient<
                    ByteOrLineColOrCoordInterned,
                    ByteOrLineColOrCoord,
                >,
                salsa::input::InputIngredient<ByteOrLineColOrCoordInterned>,
            );
            fn create_ingredients<DB>(
                routes: &mut salsa::routes::Routes<DB>,
            ) -> Self::Ingredients
            where
                DB: salsa::DbWithJar<Self::Jar> + salsa::storage::JarFromJars<Self::Jar>,
            {
                (
                    {
                        let index = routes
                            .push(
                                |jars| {
                                    let jar = <DB as salsa::storage::JarFromJars<
                                        Self::Jar,
                                    >>::jar_from_jars(jars);
                                    let ingredients = <_ as salsa::storage::HasIngredientsFor<
                                        Self,
                                    >>::ingredient(jar);
                                    &ingredients.0
                                },
                                |jars| {
                                    let jar = <DB as salsa::storage::JarFromJars<
                                        Self::Jar,
                                    >>::jar_from_jars_mut(jars);
                                    let ingredients = <_ as salsa::storage::HasIngredientsFor<
                                        Self,
                                    >>::ingredient_mut(jar);
                                    &mut ingredients.0
                                },
                            );
                        salsa::input_field::InputFieldIngredient::new(index, "pos")
                    },
                    {
                        let index = routes
                            .push(
                                |jars| {
                                    let jar = <DB as salsa::storage::JarFromJars<
                                        Self::Jar,
                                    >>::jar_from_jars(jars);
                                    let ingredients = <_ as salsa::storage::HasIngredientsFor<
                                        Self,
                                    >>::ingredient(jar);
                                    &ingredients.1
                                },
                                |jars| {
                                    let jar = <DB as salsa::storage::JarFromJars<
                                        Self::Jar,
                                    >>::jar_from_jars_mut(jars);
                                    let ingredients = <_ as salsa::storage::HasIngredientsFor<
                                        Self,
                                    >>::ingredient_mut(jar);
                                    &mut ingredients.1
                                },
                            );
                        salsa::input::InputIngredient::new(
                            index,
                            "ByteOrLineColOrCoordInterned",
                        )
                    },
                )
            }
        }
        impl salsa::AsId for ByteOrLineColOrCoordInterned {
            fn as_id(self) -> salsa::Id {
                self.0
            }
            fn from_id(id: salsa::Id) -> Self {
                ByteOrLineColOrCoordInterned(id)
            }
        }
        impl ::salsa::DebugWithDb<<crate::Jar as salsa::jar::Jar<'_>>::DynDb>
        for ByteOrLineColOrCoordInterned {
            fn fmt(
                &self,
                f: &mut ::std::fmt::Formatter<'_>,
                _db: &<crate::Jar as salsa::jar::Jar<'_>>::DynDb,
            ) -> ::std::fmt::Result {
                #[allow(unused_imports)]
                use ::salsa::debug::helper::Fallback;
                let mut debug_struct = &mut f
                    .debug_struct("ByteOrLineColOrCoordInterned");
                debug_struct = debug_struct.field("[salsa id]", &self.0.as_u32());
                debug_struct = debug_struct
                    .field(
                        "pos",
                        &::salsa::debug::helper::SalsaDebug::<
                            ByteOrLineColOrCoord,
                            <crate::Jar as salsa::jar::Jar<'_>>::DynDb,
                        >::salsa_debug(
                            #[allow(clippy::needless_borrow)]
                            &self.pos(_db),
                            _db,
                        ),
                    );
                debug_struct.finish()
            }
        }
        impl<DB> salsa::salsa_struct::SalsaStructInDb<DB>
        for ByteOrLineColOrCoordInterned
        where
            DB: ?Sized + salsa::DbWithJar<crate::Jar>,
        {
            fn register_dependent_fn(_db: &DB, _index: salsa::routes::IngredientIndex) {}
        }
        pub enum ByteOrLineColOrCoord {
            Byte(usize),
            LineCol(usize, usize),
            Coord(Location),
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for ByteOrLineColOrCoord {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                match self {
                    ByteOrLineColOrCoord::Byte(__self_0) => {
                        ::core::fmt::Formatter::debug_tuple_field1_finish(
                            f,
                            "Byte",
                            &__self_0,
                        )
                    }
                    ByteOrLineColOrCoord::LineCol(__self_0, __self_1) => {
                        ::core::fmt::Formatter::debug_tuple_field2_finish(
                            f,
                            "LineCol",
                            __self_0,
                            &__self_1,
                        )
                    }
                    ByteOrLineColOrCoord::Coord(__self_0) => {
                        ::core::fmt::Formatter::debug_tuple_field1_finish(
                            f,
                            "Coord",
                            &__self_0,
                        )
                    }
                }
            }
        }
        #[automatically_derived]
        impl ::core::marker::StructuralPartialEq for ByteOrLineColOrCoord {}
        #[automatically_derived]
        impl ::core::cmp::PartialEq for ByteOrLineColOrCoord {
            #[inline]
            fn eq(&self, other: &ByteOrLineColOrCoord) -> bool {
                let __self_tag = ::core::intrinsics::discriminant_value(self);
                let __arg1_tag = ::core::intrinsics::discriminant_value(other);
                __self_tag == __arg1_tag
                    && match (self, other) {
                        (
                            ByteOrLineColOrCoord::Byte(__self_0),
                            ByteOrLineColOrCoord::Byte(__arg1_0),
                        ) => *__self_0 == *__arg1_0,
                        (
                            ByteOrLineColOrCoord::LineCol(__self_0, __self_1),
                            ByteOrLineColOrCoord::LineCol(__arg1_0, __arg1_1),
                        ) => *__self_0 == *__arg1_0 && *__self_1 == *__arg1_1,
                        (
                            ByteOrLineColOrCoord::Coord(__self_0),
                            ByteOrLineColOrCoord::Coord(__arg1_0),
                        ) => *__self_0 == *__arg1_0,
                        _ => unsafe { ::core::intrinsics::unreachable() }
                    }
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for ByteOrLineColOrCoord {
            #[inline]
            fn clone(&self) -> ByteOrLineColOrCoord {
                match self {
                    ByteOrLineColOrCoord::Byte(__self_0) => {
                        ByteOrLineColOrCoord::Byte(::core::clone::Clone::clone(__self_0))
                    }
                    ByteOrLineColOrCoord::LineCol(__self_0, __self_1) => {
                        ByteOrLineColOrCoord::LineCol(
                            ::core::clone::Clone::clone(__self_0),
                            ::core::clone::Clone::clone(__self_1),
                        )
                    }
                    ByteOrLineColOrCoord::Coord(__self_0) => {
                        ByteOrLineColOrCoord::Coord(
                            ::core::clone::Clone::clone(__self_0),
                        )
                    }
                }
            }
        }
        pub trait HasChildSpans
        where
            Self: Send + Sync + Sized + Spanning,
        {
            fn children(&self) -> impl IntoIterator<Item = Self>;
        }
        pub trait Spanning: Send + Sync + Sized {
            fn span(&self) -> Range<Location>;
            fn byte_range(&self) -> Range<usize> {
                self.span().start.offset..self.span().end.offset
            }
            fn line_col_range(&self) -> Range<(usize, usize)> {
                (
                    self.span().start.line,
                    self.span().start.col,
                )..(self.span().end.line, self.span().end.col)
            }
            fn overlap(&self, other: &ByteOrLineColOrCoord) -> bool {
                match other {
                    ByteOrLineColOrCoord::Byte(offset) => {
                        self.byte_range().contains(offset)
                    }
                    ByteOrLineColOrCoord::LineCol(line, col) => {
                        self.line_col_range().contains(&(*line, *col))
                    }
                    ByteOrLineColOrCoord::Coord(coord) => self.span().contains(coord),
                }
            }
        }
        impl<T: Sized + Send + Sync> Spanning for Spanned<T> {
            fn span(&self) -> Range<Location> {
                self.0..self.2
            }
        }
        impl Spanning for &Range<Location> {
            fn span(&self) -> Range<Location> {
                self.clone().clone()
            }
        }
        pub struct __SourceMapConfig {
            _uninhabited: std::convert::Infallible,
        }
        impl salsa::tracked_struct::Configuration for __SourceMapConfig {
            type Id = SourceMap;
            type Fields = (HashMap<Range<Location>, Node>,);
            type Revisions = [salsa::Revision; 1];
            #[allow(clippy::unused_unit)]
            fn id_fields(fields: &Self::Fields) -> impl std::hash::Hash {
                ()
            }
            fn revision(
                revisions: &Self::Revisions,
                field_index: u32,
            ) -> salsa::Revision {
                revisions[field_index as usize]
            }
            fn new_revisions(current_revision: salsa::Revision) -> Self::Revisions {
                [current_revision; 1]
            }
            fn update_revisions(
                current_revision_: salsa::Revision,
                old_value_: &Self::Fields,
                new_value_: &Self::Fields,
                revisions_: &mut Self::Revisions,
            ) {
                if old_value_.0 != new_value_.0 {
                    revisions_[0] = current_revision_;
                }
            }
        }
        pub struct SourceMap(salsa::Id);
        #[automatically_derived]
        impl ::core::marker::Copy for SourceMap {}
        #[automatically_derived]
        impl ::core::clone::Clone for SourceMap {
            #[inline]
            fn clone(&self) -> SourceMap {
                let _: ::core::clone::AssertParamIsClone<salsa::Id>;
                *self
            }
        }
        #[automatically_derived]
        impl ::core::marker::StructuralPartialEq for SourceMap {}
        #[automatically_derived]
        impl ::core::cmp::PartialEq for SourceMap {
            #[inline]
            fn eq(&self, other: &SourceMap) -> bool {
                self.0 == other.0
            }
        }
        #[automatically_derived]
        impl ::core::cmp::PartialOrd for SourceMap {
            #[inline]
            fn partial_cmp(
                &self,
                other: &SourceMap,
            ) -> ::core::option::Option<::core::cmp::Ordering> {
                ::core::cmp::PartialOrd::partial_cmp(&self.0, &other.0)
            }
        }
        #[automatically_derived]
        impl ::core::marker::StructuralEq for SourceMap {}
        #[automatically_derived]
        impl ::core::cmp::Eq for SourceMap {
            #[inline]
            #[doc(hidden)]
            #[coverage(off)]
            fn assert_receiver_is_total_eq(&self) -> () {
                let _: ::core::cmp::AssertParamIsEq<salsa::Id>;
            }
        }
        #[automatically_derived]
        impl ::core::cmp::Ord for SourceMap {
            #[inline]
            fn cmp(&self, other: &SourceMap) -> ::core::cmp::Ordering {
                ::core::cmp::Ord::cmp(&self.0, &other.0)
            }
        }
        #[automatically_derived]
        impl ::core::hash::Hash for SourceMap {
            #[inline]
            fn hash<__H: ::core::hash::Hasher>(&self, state: &mut __H) -> () {
                ::core::hash::Hash::hash(&self.0, state)
            }
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for SourceMap {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                ::core::fmt::Formatter::debug_tuple_field1_finish(
                    f,
                    "SourceMap",
                    &&self.0,
                )
            }
        }
        #[allow(dead_code, clippy::pedantic, clippy::complexity, clippy::style)]
        impl SourceMap {
            pub fn new(
                __db: &<crate::Jar as salsa::jar::Jar<'_>>::DynDb,
                tokens: HashMap<Range<Location>, Node>,
            ) -> Self {
                let (__jar, __runtime) = <_ as salsa::storage::HasJar<
                    crate::Jar,
                >>::jar(__db);
                let __ingredients = <crate::Jar as salsa::storage::HasIngredientsFor<
                    SourceMap,
                >>::ingredient(__jar);
                let __id = __ingredients.0.new_struct(__runtime, (tokens,));
                __id
            }
            fn tokens<'db>(
                self,
                __db: &'db <crate::Jar as salsa::jar::Jar<'_>>::DynDb,
            ) -> &'db HashMap<Range<Location>, Node> {
                let (__jar, __runtime) = <_ as salsa::storage::HasJar<
                    crate::Jar,
                >>::jar(__db);
                let __ingredients = <crate::Jar as salsa::storage::HasIngredientsFor<
                    SourceMap,
                >>::ingredient(__jar);
                &__ingredients.1[0].field(__runtime, self).0
            }
        }
        impl salsa::storage::IngredientsFor for SourceMap {
            type Jar = crate::Jar;
            type Ingredients = (
                salsa::tracked_struct::TrackedStructIngredient<__SourceMapConfig>,
                [salsa::tracked_struct::TrackedFieldIngredient<__SourceMapConfig>; 1],
            );
            fn create_ingredients<DB>(
                routes: &mut salsa::routes::Routes<DB>,
            ) -> Self::Ingredients
            where
                DB: salsa::DbWithJar<Self::Jar> + salsa::storage::JarFromJars<Self::Jar>,
            {
                let struct_ingredient = {
                    let index = routes
                        .push(
                            |jars| {
                                let jar = <DB as salsa::storage::JarFromJars<
                                    Self::Jar,
                                >>::jar_from_jars(jars);
                                let ingredients = <_ as salsa::storage::HasIngredientsFor<
                                    Self,
                                >>::ingredient(jar);
                                &ingredients.0
                            },
                            |jars| {
                                let jar = <DB as salsa::storage::JarFromJars<
                                    Self::Jar,
                                >>::jar_from_jars_mut(jars);
                                let ingredients = <_ as salsa::storage::HasIngredientsFor<
                                    Self,
                                >>::ingredient_mut(jar);
                                &mut ingredients.0
                            },
                        );
                    salsa::tracked_struct::TrackedStructIngredient::new(
                        index,
                        "SourceMap",
                    )
                };
                let field_ingredients = [
                    {
                        let index = routes
                            .push(
                                |jars| {
                                    let jar = <DB as salsa::storage::JarFromJars<
                                        Self::Jar,
                                    >>::jar_from_jars(jars);
                                    let ingredients = <_ as salsa::storage::HasIngredientsFor<
                                        Self,
                                    >>::ingredient(jar);
                                    &ingredients.1[0]
                                },
                                |jars| {
                                    let jar = <DB as salsa::storage::JarFromJars<
                                        Self::Jar,
                                    >>::jar_from_jars_mut(jars);
                                    let ingredients = <_ as salsa::storage::HasIngredientsFor<
                                        Self,
                                    >>::ingredient_mut(jar);
                                    &mut ingredients.1[0]
                                },
                            );
                        struct_ingredient.new_field_ingredient(index, 0, "tokens")
                    },
                ];
                (struct_ingredient, field_ingredients)
            }
        }
        impl<DB> salsa::salsa_struct::SalsaStructInDb<DB> for SourceMap
        where
            DB: ?Sized + salsa::DbWithJar<crate::Jar>,
        {
            fn register_dependent_fn(db: &DB, index: salsa::routes::IngredientIndex) {
                let (jar, _) = <_ as salsa::storage::HasJar<crate::Jar>>::jar(db);
                let ingredients = <crate::Jar as salsa::storage::HasIngredientsFor<
                    SourceMap,
                >>::ingredient(jar);
                ingredients.0.register_dependent_fn(index)
            }
        }
        impl<DB> salsa::tracked_struct::TrackedStructInDb<DB> for SourceMap
        where
            DB: ?Sized + salsa::DbWithJar<crate::Jar>,
        {
            fn database_key_index(self, db: &DB) -> salsa::DatabaseKeyIndex {
                let (jar, _) = <_ as salsa::storage::HasJar<crate::Jar>>::jar(db);
                let ingredients = <crate::Jar as salsa::storage::HasIngredientsFor<
                    SourceMap,
                >>::ingredient(jar);
                ingredients.0.database_key_index(self)
            }
        }
        impl salsa::AsId for SourceMap {
            fn as_id(self) -> salsa::Id {
                self.0
            }
            fn from_id(id: salsa::Id) -> Self {
                SourceMap(id)
            }
        }
        impl ::salsa::DebugWithDb<<crate::Jar as salsa::jar::Jar<'_>>::DynDb>
        for SourceMap {
            fn fmt(
                &self,
                f: &mut ::std::fmt::Formatter<'_>,
                _db: &<crate::Jar as salsa::jar::Jar<'_>>::DynDb,
            ) -> ::std::fmt::Result {
                #[allow(unused_imports)]
                use ::salsa::debug::helper::Fallback;
                let mut debug_struct = &mut f.debug_struct("SourceMap");
                debug_struct = debug_struct.field("[salsa id]", &self.0.as_u32());
                debug_struct = debug_struct
                    .field(
                        "tokens",
                        &::salsa::debug::helper::SalsaDebug::<
                            HashMap<Range<Location>, Node>,
                            <crate::Jar as salsa::jar::Jar<'_>>::DynDb,
                        >::salsa_debug(
                            #[allow(clippy::needless_borrow)]
                            &self.tokens(_db),
                            _db,
                        ),
                    );
                debug_struct.finish()
            }
        }
    }
    pub mod src {
        use super::ast::*;
        use lalrpop_util::ErrorRecovery;
        use crate::lexer::{Token, Location};
        use crate::lexer::Word;
        use crate::Db;
        use super::span::Spanned;
        use crate::span;
        #[allow(unused_extern_crates)]
        extern crate lalrpop_util as __lalrpop_util;
        #[allow(unused_imports)]
        use self::__lalrpop_util::state_machine as __state_machine;
        extern crate core;
        extern crate alloc;
        #[rustfmt::skip]
        #[allow(
            non_snake_case,
            non_camel_case_types,
            unused_mut,
            unused_variables,
            unused_imports,
            unused_parens,
            clippy::needless_lifetimes,
            clippy::type_complexity,
            clippy::needless_return,
            clippy::too_many_arguments,
            clippy::never_loop,
            clippy::match_single_binding,
            clippy::needless_raw_string_hashes
        )]
        mod __parse__Source {
            use super::super::ast::*;
            use lalrpop_util::ErrorRecovery;
            use crate::lexer::{Token, Location};
            use crate::lexer::Word;
            use crate::Db;
            use super::super::span::Spanned;
            use crate::span;
            #[allow(unused_extern_crates)]
            extern crate lalrpop_util as __lalrpop_util;
            #[allow(unused_imports)]
            use self::__lalrpop_util::state_machine as __state_machine;
            extern crate core;
            extern crate alloc;
            use super::__ToTriple;
            #[allow(dead_code)]
            pub(crate) enum __Symbol<'input> {
                Variant0(Token<'input>),
                Variant1(&'input str),
                Variant2(f64),
                Variant3(i64),
                Variant4(
                    __lalrpop_util::ErrorRecovery<Location, Token<'input>, &'static str>,
                ),
                Variant5(alloc::vec::Vec<Token<'input>>),
                Variant6(core::option::Option<Token<'input>>),
                Variant7((Token<'input>, Spanned<Ident>)),
                Variant8(core::option::Option<(Token<'input>, Spanned<Ident>)>),
                Variant9((alloc::vec::Vec<Token<'input>>, Spanned<Node>)),
                Variant10(
                    alloc::vec::Vec<(alloc::vec::Vec<Token<'input>>, Spanned<Node>)>,
                ),
                Variant11(()),
                Variant12(Spanned<Node>),
                Variant13(alloc::vec::Vec<Spanned<Node>>),
                Variant14(Spanned<FieldDef>),
                Variant15(alloc::vec::Vec<Spanned<FieldDef>>),
                Variant16(Spanned<FnArg>),
                Variant17(alloc::vec::Vec<Spanned<FnArg>>),
                Variant18(Spanned<Ident>),
                Variant19(alloc::vec::Vec<Spanned<Ident>>),
                Variant20(Spanned<Prototype>),
                Variant21(alloc::vec::Vec<Spanned<Prototype>>),
                Variant22(Location),
                Variant23(Spanned<Value>),
                Variant24(Block<Spanned<FieldDef>>),
                Variant25(Block<Spanned<Node>>),
                Variant26(Block<Spanned<Prototype>>),
                Variant27(Vec<Spanned<Node>>),
                Variant28(Vec<Spanned<FnArg>>),
                Variant29(Vec<Spanned<Ident>>),
                Variant30(Spanned<Keyword>),
                Variant31(core::option::Option<Spanned<Node>>),
                Variant32(Node),
                Variant33(core::option::Option<Spanned<FieldDef>>),
                Variant34(core::option::Option<Spanned<FnArg>>),
                Variant35(core::option::Option<Spanned<Ident>>),
                Variant36(Spanned<KeywordAndVisibility>),
                Variant37(Vec<Spanned<FieldDef>>),
                Variant38(Vec<Spanned<Prototype>>),
                Variant39(core::option::Option<Spanned<Prototype>>),
                Variant40(Module),
                Variant41(Spanned<Token<'input>>),
                Variant42(Spanned<Spanned<FieldDef>>),
                Variant43(Spanned<Spanned<Node>>),
                Variant44(Spanned<Vec<Spanned<Ident>>>),
                Variant45(Spanned<Visibility>),
                Variant46((Spanned<Ident>, Block<Spanned<Node>>)),
            }
            const __ACTION: &[i16] = &[
                149,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -392,
                0,
                0,
                0,
                0,
                0,
                -392,
                0,
                0,
                0,
                0,
                -392,
                0,
                0,
                0,
                0,
                0,
                0,
                150,
                151,
                0,
                0,
                -392,
                0,
                -392,
                0,
                0,
                0,
                0,
                0,
                0,
                152,
                154,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -392,
                0,
                0,
                0,
                0,
                0,
                -392,
                0,
                0,
                0,
                0,
                -392,
                0,
                0,
                0,
                0,
                0,
                0,
                150,
                151,
                0,
                0,
                -392,
                0,
                -392,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                149,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -392,
                0,
                0,
                0,
                0,
                0,
                -392,
                0,
                0,
                0,
                0,
                -392,
                0,
                0,
                0,
                0,
                0,
                0,
                150,
                151,
                0,
                0,
                -392,
                0,
                -392,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                157,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                162,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                163,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                157,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                157,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                171,
                0,
                0,
                0,
                0,
                0,
                172,
                0,
                0,
                0,
                0,
                173,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                174,
                0,
                175,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                154,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -392,
                0,
                0,
                0,
                0,
                0,
                -392,
                0,
                0,
                0,
                0,
                -392,
                0,
                0,
                0,
                0,
                0,
                0,
                150,
                151,
                0,
                0,
                -392,
                0,
                -392,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                157,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                19,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                157,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                21,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                181,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -392,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                150,
                151,
                182,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                27,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                162,
                189,
                0,
                0,
                0,
                190,
                0,
                0,
                0,
                0,
                0,
                163,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                191,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                193,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                157,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                157,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                31,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -392,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                150,
                151,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                196,
                0,
                0,
                33,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -392,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                150,
                151,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                198,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                157,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                34,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                201,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                157,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                37,
                0,
                0,
                0,
                0,
                40,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                162,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                163,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                205,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                207,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -392,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                150,
                151,
                182,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                157,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                162,
                189,
                0,
                0,
                0,
                190,
                0,
                0,
                0,
                0,
                0,
                163,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                212,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                162,
                189,
                0,
                0,
                0,
                190,
                0,
                0,
                0,
                0,
                0,
                163,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                157,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                162,
                189,
                0,
                0,
                0,
                190,
                0,
                0,
                0,
                0,
                0,
                163,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                218,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                220,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                157,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -392,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                150,
                151,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                223,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                172,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -392,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                150,
                151,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                227,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -392,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                150,
                151,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                229,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -392,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                150,
                151,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                233,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                201,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                201,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                157,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                53,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                162,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                163,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                238,
                0,
                0,
                55,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                162,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                163,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                240,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                162,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                163,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                242,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                162,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                163,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                246,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                250,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                157,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                162,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                163,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                62,
                264,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                265,
                0,
                0,
                0,
                0,
                162,
                0,
                0,
                0,
                266,
                0,
                0,
                0,
                0,
                0,
                0,
                163,
                267,
                0,
                268,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                162,
                189,
                0,
                0,
                0,
                190,
                0,
                0,
                0,
                0,
                0,
                163,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                270,
                0,
                0,
                66,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -392,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                150,
                151,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                274,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -392,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                150,
                151,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                278,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -392,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                150,
                151,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                283,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                201,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                157,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                157,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                69,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                162,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                163,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                288,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                162,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                163,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                290,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                162,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                163,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                293,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                162,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                163,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                295,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                162,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                163,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                298,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                162,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                163,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                302,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                305,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                157,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                307,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                157,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                162,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                163,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                310,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                157,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                62,
                313,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                265,
                0,
                0,
                0,
                0,
                162,
                0,
                0,
                0,
                266,
                0,
                0,
                0,
                0,
                0,
                0,
                163,
                267,
                0,
                268,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                62,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                265,
                0,
                0,
                0,
                0,
                162,
                0,
                0,
                0,
                266,
                0,
                0,
                0,
                0,
                0,
                0,
                163,
                267,
                0,
                268,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                81,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                162,
                189,
                0,
                0,
                0,
                190,
                0,
                0,
                0,
                0,
                0,
                163,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                82,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                62,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                265,
                0,
                0,
                0,
                0,
                162,
                0,
                0,
                0,
                266,
                0,
                0,
                0,
                0,
                0,
                0,
                163,
                267,
                0,
                268,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -392,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                150,
                151,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                321,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -392,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                150,
                151,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                324,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                157,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                162,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                163,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                329,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                162,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                163,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                332,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                162,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                163,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                335,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                162,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                163,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                339,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                343,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                157,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                345,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                157,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                348,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                157,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                157,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                62,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                265,
                0,
                0,
                0,
                0,
                162,
                0,
                0,
                0,
                266,
                0,
                0,
                0,
                0,
                0,
                0,
                163,
                267,
                0,
                268,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                62,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                265,
                0,
                0,
                0,
                0,
                162,
                0,
                0,
                0,
                266,
                0,
                0,
                0,
                0,
                0,
                0,
                163,
                267,
                0,
                268,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                62,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                265,
                0,
                0,
                0,
                0,
                162,
                0,
                0,
                0,
                266,
                0,
                0,
                0,
                0,
                0,
                0,
                163,
                267,
                0,
                268,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                62,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                265,
                0,
                0,
                0,
                0,
                162,
                0,
                0,
                0,
                266,
                0,
                0,
                0,
                0,
                0,
                0,
                163,
                267,
                0,
                268,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                162,
                189,
                0,
                0,
                0,
                190,
                0,
                0,
                0,
                0,
                0,
                163,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                90,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                162,
                189,
                0,
                0,
                0,
                190,
                0,
                0,
                0,
                0,
                0,
                163,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                93,
                0,
                0,
                -202,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                362,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -202,
                0,
                -202,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -392,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                150,
                151,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                365,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                162,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                163,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                369,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                374,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                157,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                157,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                157,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                157,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                157,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -204,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                362,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -204,
                0,
                -204,
                0,
                0,
                -201,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                362,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -201,
                0,
                -201,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                162,
                189,
                0,
                0,
                0,
                190,
                0,
                0,
                0,
                0,
                0,
                163,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                101,
                0,
                0,
                -198,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                362,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -198,
                0,
                -198,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                157,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                157,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                157,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                157,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                157,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                157,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -203,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                362,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -203,
                0,
                -203,
                0,
                0,
                -200,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                362,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -200,
                0,
                -200,
                0,
                0,
                -197,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                362,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -197,
                0,
                -197,
                0,
                0,
                113,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                162,
                189,
                0,
                0,
                0,
                190,
                0,
                0,
                0,
                0,
                0,
                163,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                399,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                157,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                157,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                157,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                157,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                117,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                162,
                189,
                0,
                0,
                0,
                190,
                0,
                0,
                0,
                0,
                0,
                163,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                405,
                0,
                0,
                119,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                162,
                189,
                0,
                0,
                0,
                190,
                0,
                0,
                0,
                0,
                0,
                163,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                407,
                0,
                0,
                -199,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                362,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -199,
                0,
                -199,
                0,
                0,
                123,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                162,
                189,
                0,
                0,
                0,
                190,
                0,
                0,
                0,
                0,
                0,
                163,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                410,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                162,
                189,
                0,
                0,
                0,
                190,
                0,
                0,
                0,
                0,
                0,
                163,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                412,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                162,
                189,
                0,
                0,
                0,
                190,
                0,
                0,
                0,
                0,
                0,
                163,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                415,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                157,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                126,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                162,
                189,
                0,
                0,
                0,
                190,
                0,
                0,
                0,
                0,
                0,
                163,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                418,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                162,
                189,
                0,
                0,
                0,
                190,
                0,
                0,
                0,
                0,
                0,
                163,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                420,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                162,
                189,
                0,
                0,
                0,
                190,
                0,
                0,
                0,
                0,
                0,
                163,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                423,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                162,
                189,
                0,
                0,
                0,
                190,
                0,
                0,
                0,
                0,
                0,
                163,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                425,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                162,
                189,
                0,
                0,
                0,
                190,
                0,
                0,
                0,
                0,
                0,
                163,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                428,
                0,
                0,
                131,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                162,
                189,
                0,
                0,
                0,
                190,
                0,
                0,
                0,
                0,
                0,
                163,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                430,
                0,
                0,
                133,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                162,
                189,
                0,
                0,
                0,
                190,
                0,
                0,
                0,
                0,
                0,
                163,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                432,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                162,
                189,
                0,
                0,
                0,
                190,
                0,
                0,
                0,
                0,
                0,
                163,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                434,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                162,
                189,
                0,
                0,
                0,
                190,
                0,
                0,
                0,
                0,
                0,
                163,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                437,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                162,
                189,
                0,
                0,
                0,
                190,
                0,
                0,
                0,
                0,
                0,
                163,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                440,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                162,
                189,
                0,
                0,
                0,
                190,
                0,
                0,
                0,
                0,
                0,
                163,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                443,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                162,
                189,
                0,
                0,
                0,
                190,
                0,
                0,
                0,
                0,
                0,
                163,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                446,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                162,
                189,
                0,
                0,
                0,
                190,
                0,
                0,
                0,
                0,
                0,
                163,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                449,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                162,
                189,
                0,
                0,
                0,
                190,
                0,
                0,
                0,
                0,
                0,
                163,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                453,
                0,
                0,
                137,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                162,
                189,
                0,
                0,
                0,
                190,
                0,
                0,
                0,
                0,
                0,
                163,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                456,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                162,
                189,
                0,
                0,
                0,
                190,
                0,
                0,
                0,
                0,
                0,
                163,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                458,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                162,
                189,
                0,
                0,
                0,
                190,
                0,
                0,
                0,
                0,
                0,
                163,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                461,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                162,
                189,
                0,
                0,
                0,
                190,
                0,
                0,
                0,
                0,
                0,
                163,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                463,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                162,
                189,
                0,
                0,
                0,
                190,
                0,
                0,
                0,
                0,
                0,
                163,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                466,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                162,
                189,
                0,
                0,
                0,
                190,
                0,
                0,
                0,
                0,
                0,
                163,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                469,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                162,
                189,
                0,
                0,
                0,
                190,
                0,
                0,
                0,
                0,
                0,
                163,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                474,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                162,
                189,
                0,
                0,
                0,
                190,
                0,
                0,
                0,
                0,
                0,
                163,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                479,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                162,
                189,
                0,
                0,
                0,
                190,
                0,
                0,
                0,
                0,
                0,
                163,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                482,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                162,
                189,
                0,
                0,
                0,
                190,
                0,
                0,
                0,
                0,
                0,
                163,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                485,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                162,
                189,
                0,
                0,
                0,
                190,
                0,
                0,
                0,
                0,
                0,
                163,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                489,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                162,
                189,
                0,
                0,
                0,
                190,
                0,
                0,
                0,
                0,
                0,
                163,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                495,
                0,
                0,
                -376,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -376,
                0,
                0,
                0,
                0,
                0,
                -376,
                0,
                0,
                0,
                0,
                -376,
                0,
                0,
                0,
                0,
                0,
                0,
                -376,
                -376,
                0,
                0,
                -376,
                0,
                -376,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -375,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -375,
                0,
                0,
                0,
                0,
                0,
                -375,
                0,
                0,
                0,
                0,
                -375,
                0,
                0,
                0,
                0,
                0,
                0,
                -375,
                -375,
                0,
                0,
                -375,
                0,
                -375,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -379,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -379,
                0,
                0,
                0,
                0,
                0,
                -379,
                0,
                0,
                0,
                0,
                -379,
                0,
                0,
                0,
                0,
                0,
                0,
                -379,
                -379,
                0,
                0,
                -379,
                0,
                -379,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                10,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -377,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -377,
                0,
                0,
                0,
                0,
                0,
                -377,
                0,
                0,
                0,
                0,
                -377,
                0,
                0,
                0,
                0,
                0,
                0,
                -377,
                -377,
                0,
                0,
                -377,
                0,
                -377,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -14,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -14,
                0,
                0,
                0,
                0,
                0,
                -14,
                0,
                0,
                0,
                0,
                -14,
                0,
                0,
                0,
                0,
                0,
                0,
                -14,
                -14,
                0,
                0,
                -14,
                0,
                -14,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -378,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -378,
                0,
                0,
                0,
                0,
                0,
                -378,
                0,
                0,
                0,
                0,
                -378,
                0,
                0,
                0,
                0,
                0,
                0,
                -378,
                -378,
                0,
                0,
                -378,
                0,
                -378,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -3,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -3,
                0,
                0,
                0,
                0,
                0,
                -3,
                0,
                0,
                0,
                0,
                -3,
                0,
                0,
                0,
                0,
                0,
                0,
                -3,
                -3,
                0,
                0,
                -3,
                0,
                -3,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -391,
                0,
                0,
                0,
                0,
                0,
                -391,
                0,
                0,
                -391,
                0,
                -391,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -391,
                0,
                -391,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -390,
                0,
                0,
                0,
                0,
                0,
                -390,
                0,
                0,
                -390,
                0,
                -390,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -390,
                0,
                -390,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -15,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -15,
                0,
                0,
                0,
                0,
                0,
                -15,
                0,
                0,
                0,
                0,
                -15,
                0,
                0,
                0,
                0,
                0,
                0,
                -15,
                -15,
                0,
                0,
                -15,
                0,
                -15,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -4,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -4,
                0,
                0,
                0,
                0,
                0,
                -4,
                0,
                0,
                0,
                0,
                -4,
                0,
                0,
                0,
                0,
                0,
                0,
                -4,
                -4,
                0,
                0,
                -4,
                0,
                -4,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -16,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -16,
                0,
                0,
                0,
                0,
                0,
                -16,
                0,
                0,
                0,
                0,
                -16,
                0,
                0,
                0,
                0,
                0,
                0,
                -16,
                -16,
                0,
                0,
                -16,
                0,
                -16,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                11,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -184,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -184,
                -184,
                0,
                0,
                0,
                0,
                -184,
                0,
                0,
                -184,
                0,
                -184,
                0,
                0,
                0,
                -184,
                0,
                0,
                0,
                -184,
                0,
                0,
                0,
                0,
                0,
                -184,
                -184,
                0,
                0,
                0,
                -184,
                0,
                0,
                0,
                0,
                0,
                0,
                -184,
                -184,
                0,
                0,
                -184,
                0,
                -184,
                0,
                0,
                -184,
                0,
                -184,
                0,
                0,
                -187,
                0,
                0,
                0,
                0,
                0,
                -187,
                -187,
                0,
                0,
                -187,
                0,
                0,
                -187,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -187,
                0,
                -187,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                12,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -188,
                0,
                0,
                0,
                0,
                0,
                -188,
                -188,
                0,
                0,
                -188,
                0,
                0,
                -188,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -188,
                0,
                -188,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                13,
                0,
                0,
                0,
                0,
                -184,
                0,
                0,
                0,
                0,
                0,
                -184,
                -184,
                -184,
                -184,
                -184,
                -184,
                0,
                -184,
                -184,
                0,
                0,
                14,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -184,
                0,
                -184,
                0,
                0,
                -189,
                0,
                0,
                0,
                0,
                0,
                -189,
                -189,
                0,
                0,
                -189,
                0,
                0,
                -189,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -189,
                0,
                -189,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                15,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                16,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                17,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -286,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -287,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -287,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -288,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -289,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -290,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -115,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -164,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -164,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -269,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -359,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -385,
                0,
                0,
                0,
                0,
                -17,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -17,
                0,
                0,
                0,
                0,
                0,
                -17,
                0,
                0,
                0,
                0,
                -17,
                0,
                0,
                0,
                0,
                0,
                0,
                -17,
                -17,
                0,
                0,
                -17,
                0,
                -17,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                200,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                35,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                203,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                38,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -166,
                0,
                0,
                -166,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                208,
                0,
                0,
                209,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                41,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -165,
                0,
                0,
                -165,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -355,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                42,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -355,
                0,
                -355,
                0,
                0,
                -191,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -191,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -191,
                0,
                -191,
                0,
                0,
                -190,
                0,
                0,
                0,
                0,
                0,
                43,
                0,
                0,
                0,
                0,
                0,
                0,
                -190,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -190,
                0,
                -190,
                0,
                0,
                -163,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -163,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -163,
                0,
                -163,
                0,
                0,
                -354,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -354,
                0,
                -354,
                0,
                0,
                215,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                216,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -196,
                -196,
                0,
                0,
                0,
                -196,
                0,
                0,
                0,
                0,
                0,
                -196,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -291,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -178,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -178,
                0,
                0,
                0,
                0,
                0,
                -178,
                0,
                0,
                0,
                0,
                -178,
                0,
                0,
                0,
                0,
                0,
                0,
                -178,
                -178,
                0,
                0,
                -178,
                0,
                -178,
                0,
                0,
                0,
                0,
                -178,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                200,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                221,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -193,
                0,
                0,
                0,
                0,
                0,
                -193,
                -193,
                0,
                0,
                -193,
                0,
                0,
                -193,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -193,
                0,
                -193,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                45,
                0,
                0,
                0,
                0,
                224,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                225,
                0,
                0,
                -283,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -283,
                0,
                0,
                0,
                0,
                0,
                -283,
                0,
                0,
                0,
                0,
                -283,
                0,
                0,
                0,
                0,
                0,
                0,
                -283,
                -283,
                0,
                0,
                -283,
                0,
                -283,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                230,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                231,
                0,
                0,
                -365,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -365,
                0,
                0,
                0,
                0,
                0,
                -365,
                0,
                0,
                0,
                0,
                -365,
                0,
                0,
                0,
                0,
                0,
                0,
                -365,
                -365,
                0,
                0,
                -365,
                0,
                -365,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                234,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                48,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -52,
                0,
                0,
                0,
                -52,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -52,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -52,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -183,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                236,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                51,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -47,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -47,
                0,
                0,
                0,
                0,
                243,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                244,
                0,
                0,
                -137,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -137,
                0,
                0,
                0,
                0,
                0,
                -137,
                0,
                0,
                0,
                0,
                -137,
                0,
                0,
                0,
                0,
                0,
                0,
                -137,
                -137,
                0,
                0,
                -137,
                0,
                -137,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                247,
                0,
                0,
                248,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                57,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                58,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -37,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -37,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -37,
                -37,
                -37,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                59,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                251,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                252,
                0,
                0,
                -180,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -180,
                0,
                0,
                0,
                0,
                0,
                -180,
                0,
                0,
                0,
                0,
                -180,
                0,
                0,
                0,
                0,
                0,
                0,
                -180,
                -180,
                0,
                0,
                -180,
                0,
                -180,
                0,
                0,
                0,
                0,
                -180,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                63,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                64,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -62,
                -62,
                0,
                0,
                0,
                -62,
                0,
                0,
                0,
                0,
                0,
                -62,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -62,
                0,
                0,
                -177,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -177,
                0,
                0,
                0,
                0,
                0,
                -177,
                0,
                0,
                0,
                0,
                -177,
                0,
                0,
                0,
                0,
                0,
                0,
                -177,
                -177,
                0,
                0,
                -177,
                0,
                -177,
                0,
                0,
                0,
                0,
                -177,
                0,
                0,
                215,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                271,
                0,
                0,
                -174,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -174,
                0,
                0,
                0,
                0,
                0,
                -174,
                0,
                0,
                0,
                0,
                -174,
                0,
                0,
                0,
                0,
                0,
                0,
                -174,
                -174,
                0,
                0,
                -174,
                0,
                -174,
                0,
                0,
                0,
                0,
                -174,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                234,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                272,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -195,
                0,
                0,
                0,
                0,
                0,
                -195,
                -195,
                0,
                0,
                -195,
                0,
                0,
                -195,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -195,
                0,
                -195,
                0,
                0,
                -192,
                0,
                0,
                0,
                0,
                0,
                -192,
                -192,
                0,
                0,
                -192,
                0,
                0,
                -192,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -192,
                0,
                -192,
                0,
                0,
                275,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                276,
                0,
                0,
                -285,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -285,
                0,
                0,
                0,
                0,
                0,
                -285,
                0,
                0,
                0,
                0,
                -285,
                0,
                0,
                0,
                0,
                0,
                0,
                -285,
                -285,
                0,
                0,
                -285,
                0,
                -285,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -42,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -42,
                -42,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -42,
                0,
                0,
                -282,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -282,
                0,
                0,
                0,
                0,
                0,
                -282,
                0,
                0,
                0,
                0,
                -282,
                0,
                0,
                0,
                0,
                0,
                0,
                -282,
                -282,
                0,
                0,
                -282,
                0,
                -282,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                224,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                279,
                0,
                0,
                -279,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -279,
                0,
                0,
                0,
                0,
                0,
                -279,
                0,
                0,
                0,
                0,
                -279,
                0,
                0,
                0,
                0,
                0,
                0,
                -279,
                -279,
                0,
                0,
                -279,
                0,
                -279,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                280,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                281,
                0,
                0,
                -367,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -367,
                0,
                0,
                0,
                0,
                0,
                -367,
                0,
                0,
                0,
                0,
                -367,
                0,
                0,
                0,
                0,
                0,
                0,
                -367,
                -367,
                0,
                0,
                -367,
                0,
                -367,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -32,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -32,
                -32,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -32,
                0,
                0,
                -364,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -364,
                0,
                0,
                0,
                0,
                0,
                -364,
                0,
                0,
                0,
                0,
                -364,
                0,
                0,
                0,
                0,
                0,
                0,
                -364,
                -364,
                0,
                0,
                -364,
                0,
                -364,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                230,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                284,
                0,
                0,
                -361,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -361,
                0,
                0,
                0,
                0,
                0,
                -361,
                0,
                0,
                0,
                0,
                -361,
                0,
                0,
                0,
                0,
                0,
                0,
                -361,
                -361,
                0,
                0,
                -361,
                0,
                -361,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -53,
                0,
                0,
                0,
                -53,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -53,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -53,
                0,
                0,
                -387,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -387,
                0,
                0,
                0,
                0,
                0,
                -387,
                0,
                0,
                0,
                0,
                -387,
                0,
                0,
                0,
                0,
                0,
                0,
                -387,
                -387,
                0,
                0,
                -387,
                0,
                -387,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -48,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -48,
                0,
                0,
                0,
                0,
                243,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                291,
                0,
                0,
                -139,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -139,
                0,
                0,
                0,
                0,
                0,
                -139,
                0,
                0,
                0,
                0,
                -139,
                0,
                0,
                0,
                0,
                0,
                0,
                -139,
                -139,
                0,
                0,
                -139,
                0,
                -139,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                243,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                296,
                0,
                0,
                -136,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -136,
                0,
                0,
                0,
                0,
                0,
                -136,
                0,
                0,
                0,
                0,
                -136,
                0,
                0,
                0,
                0,
                0,
                0,
                -136,
                -136,
                0,
                0,
                -136,
                0,
                -136,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                299,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                300,
                0,
                0,
                -145,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -145,
                0,
                0,
                0,
                0,
                0,
                -145,
                0,
                0,
                0,
                0,
                -145,
                0,
                0,
                0,
                0,
                0,
                0,
                -145,
                -145,
                0,
                0,
                -145,
                0,
                -145,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -57,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -57,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -57,
                0,
                0,
                -133,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -133,
                0,
                0,
                0,
                0,
                0,
                -133,
                0,
                0,
                0,
                0,
                -133,
                0,
                0,
                0,
                0,
                0,
                0,
                -133,
                -133,
                0,
                0,
                -133,
                0,
                -133,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                243,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                303,
                0,
                0,
                -121,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -121,
                0,
                0,
                0,
                0,
                0,
                -121,
                0,
                0,
                0,
                0,
                -121,
                0,
                0,
                0,
                0,
                0,
                0,
                -121,
                -121,
                0,
                0,
                -121,
                0,
                -121,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                72,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -38,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -38,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -38,
                -38,
                -38,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                200,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                311,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -334,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                75,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -334,
                0,
                -334,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -63,
                -63,
                0,
                0,
                0,
                -63,
                0,
                0,
                0,
                0,
                0,
                -63,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -63,
                0,
                0,
                -179,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -179,
                0,
                0,
                0,
                0,
                0,
                -179,
                0,
                0,
                0,
                0,
                -179,
                0,
                0,
                0,
                0,
                0,
                0,
                -179,
                -179,
                0,
                0,
                -179,
                0,
                -179,
                0,
                0,
                0,
                0,
                -179,
                0,
                0,
                -162,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -162,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -162,
                0,
                -162,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                314,
                0,
                76,
                315,
                77,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -155,
                0,
                0,
                0,
                0,
                0,
                0,
                -155,
                -155,
                -155,
                -155,
                -155,
                0,
                0,
                -155,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -155,
                0,
                -155,
                0,
                0,
                -151,
                0,
                0,
                0,
                0,
                0,
                0,
                -151,
                78,
                -151,
                -151,
                -151,
                0,
                0,
                79,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -151,
                0,
                -151,
                0,
                0,
                -373,
                0,
                0,
                0,
                0,
                0,
                0,
                -373,
                -373,
                -373,
                -373,
                -373,
                0,
                0,
                -373,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -373,
                0,
                -373,
                0,
                0,
                -371,
                0,
                0,
                0,
                0,
                0,
                0,
                -371,
                -371,
                -371,
                -371,
                -371,
                0,
                0,
                -371,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -371,
                0,
                -371,
                0,
                0,
                -370,
                0,
                0,
                0,
                0,
                0,
                -187,
                -370,
                -370,
                -370,
                -370,
                -370,
                0,
                0,
                -370,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -370,
                0,
                -370,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                43,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -368,
                0,
                0,
                0,
                0,
                0,
                0,
                -368,
                -368,
                -368,
                -368,
                -368,
                0,
                0,
                -368,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -368,
                0,
                -368,
                0,
                0,
                -152,
                0,
                0,
                0,
                0,
                0,
                0,
                -152,
                -152,
                -152,
                -152,
                -152,
                0,
                0,
                -152,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -152,
                0,
                -152,
                0,
                0,
                -372,
                0,
                0,
                0,
                0,
                0,
                0,
                -372,
                -372,
                -372,
                -372,
                -372,
                0,
                0,
                -372,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -372,
                0,
                -372,
                0,
                0,
                -170,
                0,
                0,
                0,
                0,
                0,
                0,
                -170,
                -170,
                -170,
                -170,
                -170,
                0,
                -170,
                -170,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -170,
                0,
                -170,
                0,
                0,
                -158,
                0,
                0,
                0,
                0,
                0,
                0,
                -158,
                -158,
                -158,
                -158,
                -158,
                0,
                0,
                -158,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -158,
                0,
                -158,
                0,
                0,
                -369,
                0,
                0,
                0,
                0,
                0,
                0,
                -369,
                -369,
                -369,
                -369,
                -369,
                0,
                0,
                -369,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -369,
                0,
                -369,
                0,
                0,
                -358,
                0,
                0,
                0,
                0,
                0,
                0,
                -358,
                -358,
                -358,
                -358,
                -358,
                0,
                0,
                -358,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -358,
                0,
                -358,
                0,
                0,
                -380,
                0,
                0,
                0,
                0,
                0,
                0,
                -380,
                -380,
                -380,
                -380,
                -380,
                0,
                0,
                -380,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -380,
                0,
                -380,
                0,
                0,
                251,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                319,
                0,
                0,
                -176,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -176,
                0,
                0,
                0,
                0,
                0,
                -176,
                0,
                0,
                0,
                0,
                -176,
                0,
                0,
                0,
                0,
                0,
                0,
                -176,
                -176,
                0,
                0,
                -176,
                0,
                -176,
                0,
                0,
                0,
                0,
                -176,
                0,
                0,
                -173,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -173,
                0,
                0,
                0,
                0,
                0,
                -173,
                0,
                0,
                0,
                0,
                -173,
                0,
                0,
                0,
                0,
                0,
                0,
                -173,
                -173,
                0,
                0,
                -173,
                0,
                -173,
                0,
                0,
                0,
                0,
                -173,
                0,
                0,
                -194,
                0,
                0,
                0,
                0,
                0,
                -194,
                -194,
                0,
                0,
                -194,
                0,
                0,
                -194,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -194,
                0,
                -194,
                0,
                0,
                224,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                322,
                0,
                0,
                -275,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -275,
                0,
                0,
                0,
                0,
                0,
                -275,
                0,
                0,
                0,
                0,
                -275,
                0,
                0,
                0,
                0,
                0,
                0,
                -275,
                -275,
                0,
                0,
                -275,
                0,
                -275,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -43,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -43,
                -43,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -43,
                0,
                0,
                -284,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -284,
                0,
                0,
                0,
                0,
                0,
                -284,
                0,
                0,
                0,
                0,
                -284,
                0,
                0,
                0,
                0,
                0,
                0,
                -284,
                -284,
                0,
                0,
                -284,
                0,
                -284,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                275,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                325,
                0,
                0,
                -281,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -281,
                0,
                0,
                0,
                0,
                0,
                -281,
                0,
                0,
                0,
                0,
                -281,
                0,
                0,
                0,
                0,
                0,
                0,
                -281,
                -281,
                0,
                0,
                -281,
                0,
                -281,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -278,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -278,
                0,
                0,
                0,
                0,
                0,
                -278,
                0,
                0,
                0,
                0,
                -278,
                0,
                0,
                0,
                0,
                0,
                0,
                -278,
                -278,
                0,
                0,
                -278,
                0,
                -278,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -33,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -33,
                -33,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -33,
                0,
                0,
                -366,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -366,
                0,
                0,
                0,
                0,
                0,
                -366,
                0,
                0,
                0,
                0,
                -366,
                0,
                0,
                0,
                0,
                0,
                0,
                -366,
                -366,
                0,
                0,
                -366,
                0,
                -366,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                280,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                326,
                0,
                0,
                -363,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -363,
                0,
                0,
                0,
                0,
                0,
                -363,
                0,
                0,
                0,
                0,
                -363,
                0,
                0,
                0,
                0,
                0,
                0,
                -363,
                -363,
                0,
                0,
                -363,
                0,
                -363,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -360,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -360,
                0,
                0,
                0,
                0,
                0,
                -360,
                0,
                0,
                0,
                0,
                -360,
                0,
                0,
                0,
                0,
                0,
                0,
                -360,
                -360,
                0,
                0,
                -360,
                0,
                -360,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -389,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -389,
                0,
                0,
                0,
                0,
                0,
                -389,
                0,
                0,
                0,
                0,
                -389,
                0,
                0,
                0,
                0,
                0,
                0,
                -389,
                -389,
                0,
                0,
                -389,
                0,
                -389,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -386,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -386,
                0,
                0,
                0,
                0,
                0,
                -386,
                0,
                0,
                0,
                0,
                -386,
                0,
                0,
                0,
                0,
                0,
                0,
                -386,
                -386,
                0,
                0,
                -386,
                0,
                -386,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                243,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                330,
                0,
                0,
                -138,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -138,
                0,
                0,
                0,
                0,
                0,
                -138,
                0,
                0,
                0,
                0,
                -138,
                0,
                0,
                0,
                0,
                0,
                0,
                -138,
                -138,
                0,
                0,
                -138,
                0,
                -138,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                299,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                333,
                0,
                0,
                -147,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -147,
                0,
                0,
                0,
                0,
                0,
                -147,
                0,
                0,
                0,
                0,
                -147,
                0,
                0,
                0,
                0,
                0,
                0,
                -147,
                -147,
                0,
                0,
                -147,
                0,
                -147,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -135,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -135,
                0,
                0,
                0,
                0,
                0,
                -135,
                0,
                0,
                0,
                0,
                -135,
                0,
                0,
                0,
                0,
                0,
                0,
                -135,
                -135,
                0,
                0,
                -135,
                0,
                -135,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                243,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                336,
                0,
                0,
                -123,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -123,
                0,
                0,
                0,
                0,
                0,
                -123,
                0,
                0,
                0,
                0,
                -123,
                0,
                0,
                0,
                0,
                0,
                0,
                -123,
                -123,
                0,
                0,
                -123,
                0,
                -123,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                299,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                337,
                0,
                0,
                -144,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -144,
                0,
                0,
                0,
                0,
                0,
                -144,
                0,
                0,
                0,
                0,
                -144,
                0,
                0,
                0,
                0,
                0,
                0,
                -144,
                -144,
                0,
                0,
                -144,
                0,
                -144,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -132,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -132,
                0,
                0,
                0,
                0,
                0,
                -132,
                0,
                0,
                0,
                0,
                -132,
                0,
                0,
                0,
                0,
                0,
                0,
                -132,
                -132,
                0,
                0,
                -132,
                0,
                -132,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                243,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                340,
                0,
                0,
                -120,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -120,
                0,
                0,
                0,
                0,
                0,
                -120,
                0,
                0,
                0,
                0,
                -120,
                0,
                0,
                0,
                0,
                0,
                0,
                -120,
                -120,
                0,
                0,
                -120,
                0,
                -120,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -58,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -58,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -58,
                0,
                0,
                -141,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -141,
                0,
                0,
                0,
                0,
                0,
                -141,
                0,
                0,
                0,
                0,
                -141,
                0,
                0,
                0,
                0,
                0,
                0,
                -141,
                -141,
                0,
                0,
                -141,
                0,
                -141,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                299,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                341,
                0,
                0,
                -129,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -129,
                0,
                0,
                0,
                0,
                0,
                -129,
                0,
                0,
                0,
                0,
                -129,
                0,
                0,
                0,
                0,
                0,
                0,
                -129,
                -129,
                0,
                0,
                -129,
                0,
                -129,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -117,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -117,
                0,
                0,
                0,
                0,
                0,
                -117,
                0,
                0,
                0,
                0,
                -117,
                0,
                0,
                0,
                0,
                0,
                0,
                -117,
                -117,
                0,
                0,
                -117,
                0,
                -117,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                200,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                346,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -342,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                86,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -342,
                0,
                -342,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                200,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                349,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -330,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                87,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -330,
                0,
                -330,
                0,
                0,
                -159,
                0,
                0,
                0,
                0,
                0,
                0,
                -159,
                0,
                0,
                -159,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -159,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                234,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                350,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -336,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                88,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -336,
                0,
                -336,
                0,
                0,
                -333,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                89,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -333,
                0,
                -333,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                352,
                0,
                76,
                353,
                77,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -172,
                0,
                0,
                0,
                0,
                0,
                0,
                -172,
                -172,
                -172,
                -172,
                -172,
                0,
                -172,
                -172,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -172,
                0,
                -172,
                0,
                0,
                -169,
                0,
                0,
                0,
                0,
                0,
                0,
                -169,
                -169,
                -169,
                -169,
                -169,
                0,
                -169,
                -169,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -169,
                0,
                -169,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -27,
                -27,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -27,
                0,
                0,
                0,
                0,
                -27,
                0,
                0,
                0,
                -27,
                0,
                0,
                0,
                0,
                0,
                0,
                -27,
                -27,
                0,
                -27,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                358,
                0,
                76,
                0,
                77,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                215,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                91,
                0,
                0,
                -353,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                76,
                0,
                77,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -353,
                0,
                -353,
                0,
                0,
                -175,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -175,
                0,
                0,
                0,
                0,
                0,
                -175,
                0,
                0,
                0,
                0,
                -175,
                0,
                0,
                0,
                0,
                0,
                0,
                -175,
                -175,
                0,
                0,
                -175,
                0,
                -175,
                0,
                0,
                0,
                0,
                -175,
                0,
                0,
                275,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                363,
                0,
                0,
                -277,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -277,
                0,
                0,
                0,
                0,
                0,
                -277,
                0,
                0,
                0,
                0,
                -277,
                0,
                0,
                0,
                0,
                0,
                0,
                -277,
                -277,
                0,
                0,
                -277,
                0,
                -277,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -274,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -274,
                0,
                0,
                0,
                0,
                0,
                -274,
                0,
                0,
                0,
                0,
                -274,
                0,
                0,
                0,
                0,
                0,
                0,
                -274,
                -274,
                0,
                0,
                -274,
                0,
                -274,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                224,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                366,
                0,
                0,
                -271,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -271,
                0,
                0,
                0,
                0,
                0,
                -271,
                0,
                0,
                0,
                0,
                -271,
                0,
                0,
                0,
                0,
                0,
                0,
                -271,
                -271,
                0,
                0,
                -271,
                0,
                -271,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -280,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -280,
                0,
                0,
                0,
                0,
                0,
                -280,
                0,
                0,
                0,
                0,
                -280,
                0,
                0,
                0,
                0,
                0,
                0,
                -280,
                -280,
                0,
                0,
                -280,
                0,
                -280,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -362,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -362,
                0,
                0,
                0,
                0,
                0,
                -362,
                0,
                0,
                0,
                0,
                -362,
                0,
                0,
                0,
                0,
                0,
                0,
                -362,
                -362,
                0,
                0,
                -362,
                0,
                -362,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -388,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -388,
                0,
                0,
                0,
                0,
                0,
                -388,
                0,
                0,
                0,
                0,
                -388,
                0,
                0,
                0,
                0,
                0,
                0,
                -388,
                -388,
                0,
                0,
                -388,
                0,
                -388,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                299,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                367,
                0,
                0,
                -146,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -146,
                0,
                0,
                0,
                0,
                0,
                -146,
                0,
                0,
                0,
                0,
                -146,
                0,
                0,
                0,
                0,
                0,
                0,
                -146,
                -146,
                0,
                0,
                -146,
                0,
                -146,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -134,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -134,
                0,
                0,
                0,
                0,
                0,
                -134,
                0,
                0,
                0,
                0,
                -134,
                0,
                0,
                0,
                0,
                0,
                0,
                -134,
                -134,
                0,
                0,
                -134,
                0,
                -134,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                243,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                370,
                0,
                0,
                -122,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -122,
                0,
                0,
                0,
                0,
                0,
                -122,
                0,
                0,
                0,
                0,
                -122,
                0,
                0,
                0,
                0,
                0,
                0,
                -122,
                -122,
                0,
                0,
                -122,
                0,
                -122,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -143,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -143,
                0,
                0,
                0,
                0,
                0,
                -143,
                0,
                0,
                0,
                0,
                -143,
                0,
                0,
                0,
                0,
                0,
                0,
                -143,
                -143,
                0,
                0,
                -143,
                0,
                -143,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                299,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                371,
                0,
                0,
                -131,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -131,
                0,
                0,
                0,
                0,
                0,
                -131,
                0,
                0,
                0,
                0,
                -131,
                0,
                0,
                0,
                0,
                0,
                0,
                -131,
                -131,
                0,
                0,
                -131,
                0,
                -131,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -119,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -119,
                0,
                0,
                0,
                0,
                0,
                -119,
                0,
                0,
                0,
                0,
                -119,
                0,
                0,
                0,
                0,
                0,
                0,
                -119,
                -119,
                0,
                0,
                -119,
                0,
                -119,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -140,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -140,
                0,
                0,
                0,
                0,
                0,
                -140,
                0,
                0,
                0,
                0,
                -140,
                0,
                0,
                0,
                0,
                0,
                0,
                -140,
                -140,
                0,
                0,
                -140,
                0,
                -140,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                299,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                372,
                0,
                0,
                -128,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -128,
                0,
                0,
                0,
                0,
                0,
                -128,
                0,
                0,
                0,
                0,
                -128,
                0,
                0,
                0,
                0,
                0,
                0,
                -128,
                -128,
                0,
                0,
                -128,
                0,
                -128,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -116,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -116,
                0,
                0,
                0,
                0,
                0,
                -116,
                0,
                0,
                0,
                0,
                -116,
                0,
                0,
                0,
                0,
                0,
                0,
                -116,
                -116,
                0,
                0,
                -116,
                0,
                -116,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -125,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -125,
                0,
                0,
                0,
                0,
                0,
                -125,
                0,
                0,
                0,
                0,
                -125,
                0,
                0,
                0,
                0,
                0,
                0,
                -125,
                -125,
                0,
                0,
                -125,
                0,
                -125,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                200,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                375,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -338,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                94,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -338,
                0,
                -338,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                234,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                376,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -344,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                95,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -344,
                0,
                -344,
                0,
                0,
                -341,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                96,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -341,
                0,
                -341,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                234,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                378,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -332,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                97,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -332,
                0,
                -332,
                0,
                0,
                -329,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                98,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -329,
                0,
                -329,
                0,
                0,
                -335,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                99,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -335,
                0,
                -335,
                0,
                0,
                -318,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -318,
                0,
                -318,
                0,
                0,
                -171,
                0,
                0,
                0,
                0,
                0,
                0,
                -171,
                -171,
                -171,
                -171,
                -171,
                0,
                -171,
                -171,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -171,
                0,
                -171,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -28,
                -28,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -28,
                0,
                0,
                0,
                0,
                -28,
                0,
                0,
                0,
                -28,
                0,
                0,
                0,
                0,
                0,
                0,
                -28,
                -28,
                0,
                -28,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -149,
                0,
                0,
                0,
                0,
                0,
                0,
                -149,
                78,
                -149,
                -149,
                -149,
                0,
                0,
                79,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -149,
                0,
                -149,
                0,
                0,
                -150,
                0,
                0,
                0,
                0,
                0,
                0,
                -150,
                78,
                -150,
                -150,
                -150,
                0,
                0,
                79,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -150,
                0,
                -150,
                0,
                0,
                -153,
                0,
                0,
                0,
                0,
                0,
                0,
                -153,
                -153,
                -153,
                -153,
                -153,
                0,
                0,
                -153,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -153,
                0,
                -153,
                0,
                0,
                -154,
                0,
                0,
                0,
                0,
                0,
                0,
                -154,
                -154,
                -154,
                -154,
                -154,
                0,
                0,
                -154,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -154,
                0,
                -154,
                0,
                0,
                -374,
                0,
                0,
                0,
                0,
                0,
                0,
                -374,
                -374,
                -374,
                -374,
                -374,
                0,
                0,
                -374,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -374,
                0,
                -374,
                0,
                0,
                251,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                100,
                0,
                0,
                215,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                102,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                103,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -148,
                0,
                0,
                0,
                0,
                -276,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -276,
                0,
                0,
                0,
                0,
                0,
                -276,
                0,
                0,
                0,
                0,
                -276,
                0,
                0,
                0,
                0,
                0,
                0,
                -276,
                -276,
                0,
                0,
                -276,
                0,
                -276,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                275,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                386,
                0,
                0,
                -273,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -273,
                0,
                0,
                0,
                0,
                0,
                -273,
                0,
                0,
                0,
                0,
                -273,
                0,
                0,
                0,
                0,
                0,
                0,
                -273,
                -273,
                0,
                0,
                -273,
                0,
                -273,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -270,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -270,
                0,
                0,
                0,
                0,
                0,
                -270,
                0,
                0,
                0,
                0,
                -270,
                0,
                0,
                0,
                0,
                0,
                0,
                -270,
                -270,
                0,
                0,
                -270,
                0,
                -270,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -142,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -142,
                0,
                0,
                0,
                0,
                0,
                -142,
                0,
                0,
                0,
                0,
                -142,
                0,
                0,
                0,
                0,
                0,
                0,
                -142,
                -142,
                0,
                0,
                -142,
                0,
                -142,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                299,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                387,
                0,
                0,
                -130,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -130,
                0,
                0,
                0,
                0,
                0,
                -130,
                0,
                0,
                0,
                0,
                -130,
                0,
                0,
                0,
                0,
                0,
                0,
                -130,
                -130,
                0,
                0,
                -130,
                0,
                -130,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -118,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -118,
                0,
                0,
                0,
                0,
                0,
                -118,
                0,
                0,
                0,
                0,
                -118,
                0,
                0,
                0,
                0,
                0,
                0,
                -118,
                -118,
                0,
                0,
                -118,
                0,
                -118,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -127,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -127,
                0,
                0,
                0,
                0,
                0,
                -127,
                0,
                0,
                0,
                0,
                -127,
                0,
                0,
                0,
                0,
                0,
                0,
                -127,
                -127,
                0,
                0,
                -127,
                0,
                -127,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -124,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -124,
                0,
                0,
                0,
                0,
                0,
                -124,
                0,
                0,
                0,
                0,
                -124,
                0,
                0,
                0,
                0,
                0,
                0,
                -124,
                -124,
                0,
                0,
                -124,
                0,
                -124,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                234,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                388,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -340,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                104,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -340,
                0,
                -340,
                0,
                0,
                -337,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                105,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -337,
                0,
                -337,
                0,
                0,
                -343,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                106,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -343,
                0,
                -343,
                0,
                0,
                -326,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -326,
                0,
                -326,
                0,
                0,
                -331,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                107,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -331,
                0,
                -331,
                0,
                0,
                -314,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -314,
                0,
                -314,
                0,
                0,
                -320,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -320,
                0,
                -320,
                0,
                0,
                -317,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -317,
                0,
                -317,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                108,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                109,
                0,
                0,
                0,
                0,
                251,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                110,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                111,
                0,
                0,
                0,
                0,
                -272,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -272,
                0,
                0,
                0,
                0,
                0,
                -272,
                0,
                0,
                0,
                0,
                -272,
                0,
                0,
                0,
                0,
                0,
                0,
                -272,
                -272,
                0,
                0,
                -272,
                0,
                -272,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -126,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -126,
                0,
                0,
                0,
                0,
                0,
                -126,
                0,
                0,
                0,
                0,
                -126,
                0,
                0,
                0,
                0,
                0,
                0,
                -126,
                -126,
                0,
                0,
                -126,
                0,
                -126,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -339,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                114,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -339,
                0,
                -339,
                0,
                0,
                -322,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -322,
                0,
                -322,
                0,
                0,
                -328,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -328,
                0,
                -328,
                0,
                0,
                -325,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -325,
                0,
                -325,
                0,
                0,
                -316,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -316,
                0,
                -316,
                0,
                0,
                -313,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -313,
                0,
                -313,
                0,
                0,
                -319,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -319,
                0,
                -319,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                115,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                120,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                121,
                0,
                0,
                0,
                0,
                215,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                413,
                0,
                0,
                -250,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -250,
                0,
                -250,
                0,
                0,
                -324,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -324,
                0,
                -324,
                0,
                0,
                -321,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -321,
                0,
                -321,
                0,
                0,
                -327,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -327,
                0,
                -327,
                0,
                0,
                -315,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -315,
                0,
                -315,
                0,
                0,
                215,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                421,
                0,
                0,
                -266,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -266,
                0,
                -266,
                0,
                0,
                215,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                426,
                0,
                0,
                -242,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -242,
                0,
                -242,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                129,
                0,
                0,
                0,
                0,
                215,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                435,
                0,
                0,
                -218,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -218,
                0,
                -218,
                0,
                0,
                251,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                438,
                0,
                0,
                -252,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -252,
                0,
                -252,
                0,
                0,
                -249,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -249,
                0,
                -249,
                0,
                0,
                215,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                441,
                0,
                0,
                -246,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -246,
                0,
                -246,
                0,
                0,
                -323,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -323,
                0,
                -323,
                0,
                0,
                215,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                444,
                0,
                0,
                -258,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -258,
                0,
                -258,
                0,
                0,
                251,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                447,
                0,
                0,
                -268,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -268,
                0,
                -268,
                0,
                0,
                -265,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -265,
                0,
                -265,
                0,
                0,
                215,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                450,
                0,
                0,
                -262,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -262,
                0,
                -262,
                0,
                0,
                251,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                451,
                0,
                0,
                -244,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -244,
                0,
                -244,
                0,
                0,
                -241,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -241,
                0,
                -241,
                0,
                0,
                215,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                454,
                0,
                0,
                -238,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -238,
                0,
                -238,
                0,
                0,
                215,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                459,
                0,
                0,
                -234,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -234,
                0,
                -234,
                0,
                0,
                215,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                464,
                0,
                0,
                -210,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -210,
                0,
                -210,
                0,
                0,
                251,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                467,
                0,
                0,
                -220,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -220,
                0,
                -220,
                0,
                0,
                -217,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -217,
                0,
                -217,
                0,
                0,
                215,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                470,
                0,
                0,
                -214,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -214,
                0,
                -214,
                0,
                0,
                -251,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -251,
                0,
                -251,
                0,
                0,
                251,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                471,
                0,
                0,
                -248,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -248,
                0,
                -248,
                0,
                0,
                -245,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -245,
                0,
                -245,
                0,
                0,
                251,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                472,
                0,
                0,
                -260,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -260,
                0,
                -260,
                0,
                0,
                -257,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -257,
                0,
                -257,
                0,
                0,
                215,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                475,
                0,
                0,
                -254,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -254,
                0,
                -254,
                0,
                0,
                -267,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -267,
                0,
                -267,
                0,
                0,
                251,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                476,
                0,
                0,
                -264,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -264,
                0,
                -264,
                0,
                0,
                -261,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -261,
                0,
                -261,
                0,
                0,
                -243,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -243,
                0,
                -243,
                0,
                0,
                251,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                477,
                0,
                0,
                -240,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -240,
                0,
                -240,
                0,
                0,
                -237,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -237,
                0,
                -237,
                0,
                0,
                215,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                480,
                0,
                0,
                -226,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -226,
                0,
                -226,
                0,
                0,
                251,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                483,
                0,
                0,
                -236,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -236,
                0,
                -236,
                0,
                0,
                -233,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -233,
                0,
                -233,
                0,
                0,
                215,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                486,
                0,
                0,
                -230,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -230,
                0,
                -230,
                0,
                0,
                251,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                487,
                0,
                0,
                -212,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -212,
                0,
                -212,
                0,
                0,
                -209,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -209,
                0,
                -209,
                0,
                0,
                215,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                490,
                0,
                0,
                -206,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -206,
                0,
                -206,
                0,
                0,
                -219,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -219,
                0,
                -219,
                0,
                0,
                251,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                491,
                0,
                0,
                -216,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -216,
                0,
                -216,
                0,
                0,
                -213,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -213,
                0,
                -213,
                0,
                0,
                -247,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -247,
                0,
                -247,
                0,
                0,
                -259,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -259,
                0,
                -259,
                0,
                0,
                251,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                492,
                0,
                0,
                -256,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -256,
                0,
                -256,
                0,
                0,
                -253,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -253,
                0,
                -253,
                0,
                0,
                -263,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -263,
                0,
                -263,
                0,
                0,
                -239,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -239,
                0,
                -239,
                0,
                0,
                251,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                493,
                0,
                0,
                -228,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -228,
                0,
                -228,
                0,
                0,
                -225,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -225,
                0,
                -225,
                0,
                0,
                215,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                496,
                0,
                0,
                -222,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -222,
                0,
                -222,
                0,
                0,
                -235,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -235,
                0,
                -235,
                0,
                0,
                251,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                497,
                0,
                0,
                -232,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -232,
                0,
                -232,
                0,
                0,
                -229,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -229,
                0,
                -229,
                0,
                0,
                -211,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -211,
                0,
                -211,
                0,
                0,
                251,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                498,
                0,
                0,
                -208,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -208,
                0,
                -208,
                0,
                0,
                -205,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -205,
                0,
                -205,
                0,
                0,
                -215,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -215,
                0,
                -215,
                0,
                0,
                -255,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -255,
                0,
                -255,
                0,
                0,
                -227,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -227,
                0,
                -227,
                0,
                0,
                251,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                499,
                0,
                0,
                -224,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -224,
                0,
                -224,
                0,
                0,
                -221,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -221,
                0,
                -221,
                0,
                0,
                -231,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -231,
                0,
                -231,
                0,
                0,
                -207,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -207,
                0,
                -207,
                0,
                0,
                -223,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -223,
                0,
                -223,
                0,
                0,
            ];
            fn __action(state: i16, integer: usize) -> i16 {
                __ACTION[(state as usize) * 60 + integer]
            }
            const __EOF_ACTION: &[i16] = &[
                -347,
                0,
                -348,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -376,
                -375,
                -379,
                0,
                -402,
                -377,
                -14,
                -378,
                0,
                0,
                0,
                -349,
                -15,
                0,
                -16,
                0,
                -184,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -17,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -178,
                0,
                0,
                0,
                0,
                -283,
                0,
                -365,
                0,
                0,
                0,
                0,
                0,
                0,
                -137,
                0,
                0,
                0,
                0,
                0,
                0,
                -180,
                0,
                0,
                0,
                -177,
                0,
                -174,
                0,
                0,
                0,
                0,
                -285,
                0,
                -282,
                0,
                -279,
                0,
                -367,
                0,
                -364,
                0,
                -361,
                0,
                -387,
                0,
                0,
                -139,
                0,
                -136,
                0,
                -145,
                0,
                -133,
                0,
                -121,
                0,
                0,
                0,
                0,
                0,
                -179,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -176,
                -173,
                0,
                0,
                -275,
                0,
                -284,
                0,
                -281,
                -278,
                0,
                -366,
                0,
                -363,
                -360,
                -389,
                -386,
                0,
                -138,
                0,
                -147,
                -135,
                0,
                -123,
                0,
                -144,
                -132,
                0,
                -120,
                0,
                -141,
                0,
                -129,
                -117,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -175,
                0,
                -277,
                -274,
                0,
                -271,
                -280,
                -362,
                -388,
                0,
                -146,
                -134,
                0,
                -122,
                -143,
                0,
                -131,
                -119,
                -140,
                0,
                -128,
                -116,
                -125,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -276,
                0,
                -273,
                -270,
                -142,
                0,
                -130,
                -118,
                -127,
                -124,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                -272,
                -126,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
            ];
            fn __goto(state: i16, nt: usize) -> i16 {
                match nt {
                    1 => {
                        match state {
                            2 => 8,
                            _ => 1,
                        }
                    }
                    7 => 2,
                    14 => 60,
                    17 => {
                        match state {
                            32 => 46,
                            _ => 31,
                        }
                    }
                    20 => 21,
                    23 => {
                        match state {
                            30 => 45,
                            44 => 64,
                            65 => 82,
                            _ => 28,
                        }
                    }
                    26 => 19,
                    29 => {
                        match state {
                            13 => 27,
                            40 => 59,
                            56 => 72,
                            57 => 73,
                            71 => 84,
                            _ => 17,
                        }
                    }
                    32 => {
                        match state {
                            36 => 51,
                            37 => 53,
                            39 => 55,
                            50 => 67,
                            52 => 69,
                            54 => 70,
                            68 => 83,
                            _ => 38,
                        }
                    }
                    35 => {
                        match state {
                            26 => 43,
                            62 => 79,
                            80 => 91,
                            102 => 111,
                            107 => 115,
                            108 => 117,
                            110 => 121,
                            112 => 123,
                            114 => 124,
                            116 => 126,
                            118 => 127,
                            119 => 129,
                            120 => 131,
                            122 => 133,
                            125 => 134,
                            128 => 135,
                            130 => 137,
                            132 => 138,
                            136 => 139,
                            _ => 23,
                        }
                    }
                    47 => 165,
                    48 => 140,
                    49 => {
                        match state {
                            89 => 381,
                            90 => 382,
                            92 => 384,
                            99 => 394,
                            100 => 395,
                            101 => 396,
                            109 => 407,
                            _ => 360,
                        }
                    }
                    50 => {
                        match state {
                            60 => 311,
                            61 => 315,
                            63 => 317,
                            _ => 253,
                        }
                    }
                    51 => {
                        match state {
                            77 => 355,
                            78 => 356,
                            _ => 254,
                        }
                    }
                    52 => {
                        match state {
                            75 => 353,
                            76 => 354,
                            _ => 255,
                        }
                    }
                    54 => 256,
                    55 => {
                        match state {
                            16 => 196,
                            31 => 227,
                            32 => 231,
                            46 => 281,
                            _ => 178,
                        }
                    }
                    57 => 182,
                    58 => 166,
                    59 => {
                        match state {
                            21 => 205,
                            _ => 179,
                        }
                    }
                    61 => {
                        match state {
                            42 | 60..=61 | 63 | 75..=78 => 257,
                            _ => 183,
                        }
                    }
                    62 => {
                        match state {
                            15 => 194,
                            28 => 221,
                            30 => 225,
                            44 => 272,
                            45 => 276,
                            64 => 319,
                            65 => 322,
                            82 => 363,
                            _ => 141,
                        }
                    }
                    64 => {
                        match state {
                            33 => 48,
                            34 => 49,
                            47 => 66,
                            _ => 35,
                        }
                    }
                    65 => {
                        match state {
                            3 => 155,
                            5 => 163,
                            6 => 164,
                            9 => 176,
                            10 => 177,
                            13 => 191,
                            14 => 193,
                            17 => 198,
                            19 => 201,
                            22 => 209,
                            25 => 213,
                            27 => 218,
                            35 => 234,
                            40 => 248,
                            42 | 60..=61 | 63 | 75..=78 => 258,
                            48 => 284,
                            49 => 285,
                            56 => 303,
                            57 => 305,
                            59 => 308,
                            66 => 326,
                            71 => 341,
                            72 => 343,
                            73 => 346,
                            74 => 350,
                            84 => 372,
                            85 => 376,
                            86 => 378,
                            87 => 379,
                            88 => 380,
                            93 => 388,
                            94 => 389,
                            95 => 390,
                            96 => 391,
                            97 => 392,
                            98 => 393,
                            103 => 399,
                            104 => 400,
                            105 => 401,
                            106 => 402,
                            113 => 415,
                            _ => 157,
                        }
                    }
                    67 => {
                        match state {
                            4 | 20 | 36..=39 | 50..=55 | 67..=70 | 83 => 158,
                            42 | 60..=61 | 63 | 75..=78 => 259,
                            58 => 307,
                            _ => 184,
                        }
                    }
                    68 => {
                        match state {
                            41 => 252,
                            _ => 185,
                        }
                    }
                    69 => 159,
                    70 => 24,
                    71 => 186,
                    72 => 167,
                    73 => 142,
                    74 => 3,
                    75 => 4,
                    76 => 5,
                    77 => 6,
                    78 => 143,
                    79 => 25,
                    86 => {
                        match state {
                            20 => 203,
                            36 => 236,
                            37 => 238,
                            38 => 240,
                            39 => 244,
                            50 => 286,
                            51 => 288,
                            52 => 291,
                            53 => 293,
                            54 => 296,
                            55 => 300,
                            67 => 327,
                            68 => 330,
                            69 => 333,
                            70 => 337,
                            83 => 367,
                            _ => 160,
                        }
                    }
                    88 => 144,
                    92 => {
                        match state {
                            23 => 210,
                            24 => 212,
                            26 => 216,
                            43 => 268,
                            62 => 316,
                            79 => 358,
                            80 => 359,
                            91 => 383,
                            102 => 397,
                            107 => 403,
                            108 => 405,
                            110 => 408,
                            111 => 410,
                            112 => 413,
                            114 => 416,
                            115 => 418,
                            116 => 421,
                            117 => 423,
                            118 => 426,
                            119 => 428,
                            120 => 430,
                            121 => 432,
                            122 => 435,
                            123 => 438,
                            124 => 441,
                            125 => 444,
                            126 => 447,
                            127 => 451,
                            128 => 454,
                            129 => 456,
                            130 => 459,
                            131 => 461,
                            132 => 464,
                            133 => 467,
                            134 => 472,
                            135 => 477,
                            136 => 480,
                            137 => 483,
                            138 => 487,
                            139 => 493,
                            _ => 187,
                        }
                    }
                    94 => 260,
                    95 => 168,
                    96 => 145,
                    97 => 261,
                    98 => {
                        match state {
                            1 => 152,
                            2 => 154,
                            8 => 175,
                            _ => 146,
                        }
                    }
                    99 => 262,
                    101 => 169,
                    102 => 147,
                    103 => {
                        match state {
                            0..=2 | 8 => 7,
                            11 | 16 | 21 | 31..=32 | 46 => 22,
                            _ => 29,
                        }
                    }
                    _ => 0,
                }
            }
            const __TERMINAL: &[&str] = &[
                r###""\n""###,
                r###""!""###,
                r###""#!""###,
                r###""$""###,
                r###""%""###,
                r###""&""###,
                r###""(""###,
                r###"")""###,
                r###""*""###,
                r###""+""###,
                r###"",""###,
                r###""-""###,
                r###""->""###,
                r###"".""###,
                r###""/""###,
                r###"":""###,
                r###"";""###,
                r###""<""###,
                r###""=""###,
                r###""=>""###,
                r###"">""###,
                r###""?""###,
                r###""@""###,
                r###""[""###,
                r###""]""###,
                r###""^""###,
                r###""action""###,
                r###""comment""###,
                r###""effect""###,
                r###""else""###,
                r###""enum""###,
                r###""eof""###,
                r###""false""###,
                r###""float""###,
                r###""fn""###,
                r###""for""###,
                r###""from""###,
                r###""ident""###,
                r###""if""###,
                r###""impl""###,
                r###""import""###,
                r###""int""###,
                r###""let""###,
                r###""match""###,
                r###""none""###,
                r###""null""###,
                r###""priv""###,
                r###""pub""###,
                r###""self""###,
                r###""string""###,
                r###""struct""###,
                r###""true""###,
                r###""use""###,
                r###""when""###,
                r###""where""###,
                r###""{""###,
                r###""|""###,
                r###""}""###,
                r###""~""###,
            ];
            fn __expected_tokens(
                __state: i16,
            ) -> alloc::vec::Vec<alloc::string::String> {
                __TERMINAL
                    .iter()
                    .enumerate()
                    .filter_map(|(index, terminal)| {
                        let next_state = __action(__state, index);
                        if next_state == 0 {
                            None
                        } else {
                            Some(alloc::string::ToString::to_string(terminal))
                        }
                    })
                    .collect()
            }
            fn __expected_tokens_from_states<'input, 'err, '__2>(
                __states: &[i16],
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> alloc::vec::Vec<alloc::string::String>
            where
                'input: 'err,
                'static: 'err,
            {
                __TERMINAL
                    .iter()
                    .enumerate()
                    .filter_map(|(index, terminal)| {
                        if __accepts(
                            None,
                            __states,
                            Some(index),
                            core::marker::PhantomData::<(&(), &())>,
                        ) {
                            Some(alloc::string::ToString::to_string(terminal))
                        } else {
                            None
                        }
                    })
                    .collect()
            }
            struct __StateMachine<'input, 'err, '__2>
            where
                'input: 'err,
                'static: 'err,
            {
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &'__2 dyn Db,
                __phantom: core::marker::PhantomData<(&'input (), &'err ())>,
            }
            impl<'input, 'err, '__2> __state_machine::ParserDefinition
            for __StateMachine<'input, 'err, '__2>
            where
                'input: 'err,
                'static: 'err,
            {
                type Location = Location;
                type Error = &'static str;
                type Token = Token<'input>;
                type TokenIndex = usize;
                type Symbol = __Symbol<'input>;
                type Success = Module;
                type StateIndex = i16;
                type Action = i16;
                type ReduceIndex = i16;
                type NonterminalIndex = usize;
                #[inline]
                fn start_location(&self) -> Self::Location {
                    Default::default()
                }
                #[inline]
                fn start_state(&self) -> Self::StateIndex {
                    0
                }
                #[inline]
                fn token_to_index(&self, token: &Self::Token) -> Option<usize> {
                    __token_to_integer(token, core::marker::PhantomData::<(&(), &())>)
                }
                #[inline]
                fn action(&self, state: i16, integer: usize) -> i16 {
                    __action(state, integer)
                }
                #[inline]
                fn error_action(&self, state: i16) -> i16 {
                    __action(state, 60 - 1)
                }
                #[inline]
                fn eof_action(&self, state: i16) -> i16 {
                    __EOF_ACTION[state as usize]
                }
                #[inline]
                fn goto(&self, state: i16, nt: usize) -> i16 {
                    __goto(state, nt)
                }
                fn token_to_symbol(
                    &self,
                    token_index: usize,
                    token: Self::Token,
                ) -> Self::Symbol {
                    __token_to_symbol(
                        token_index,
                        token,
                        core::marker::PhantomData::<(&(), &())>,
                    )
                }
                fn expected_tokens(
                    &self,
                    state: i16,
                ) -> alloc::vec::Vec<alloc::string::String> {
                    __expected_tokens(state)
                }
                fn expected_tokens_from_states(
                    &self,
                    states: &[i16],
                ) -> alloc::vec::Vec<alloc::string::String> {
                    __expected_tokens_from_states(
                        states,
                        core::marker::PhantomData::<(&(), &())>,
                    )
                }
                #[inline]
                fn uses_error_recovery(&self) -> bool {
                    true
                }
                #[inline]
                fn error_recovery_symbol(
                    &self,
                    recovery: __state_machine::ErrorRecovery<Self>,
                ) -> Self::Symbol {
                    __Symbol::Variant4(recovery)
                }
                fn reduce(
                    &mut self,
                    action: i16,
                    start_location: Option<&Self::Location>,
                    states: &mut alloc::vec::Vec<i16>,
                    symbols: &mut alloc::vec::Vec<__state_machine::SymbolTriple<Self>>,
                ) -> Option<__state_machine::ParseResult<Self>> {
                    __reduce(
                        self.errors,
                        self.db,
                        action,
                        start_location,
                        states,
                        symbols,
                        core::marker::PhantomData::<(&(), &())>,
                    )
                }
                fn simulate_reduce(
                    &self,
                    action: i16,
                ) -> __state_machine::SimulatedReduce<Self> {
                    __simulate_reduce(action, core::marker::PhantomData::<(&(), &())>)
                }
            }
            fn __token_to_integer<'input, 'err>(
                __token: &Token<'input>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> Option<usize> {
                match *__token {
                    Token::NewLine if true => Some(0),
                    Token::Exclamation if true => Some(1),
                    Token::Shebang if true => Some(2),
                    Token::Dollar if true => Some(3),
                    Token::Percent if true => Some(4),
                    Token::Ampersand if true => Some(5),
                    Token::LeftParen if true => Some(6),
                    Token::RightParen if true => Some(7),
                    Token::Multiply if true => Some(8),
                    Token::Plus if true => Some(9),
                    Token::Comma if true => Some(10),
                    Token::Minus if true => Some(11),
                    Token::Arrow if true => Some(12),
                    Token::Dot if true => Some(13),
                    Token::Divide if true => Some(14),
                    Token::Colon if true => Some(15),
                    Token::Semicolon if true => Some(16),
                    Token::LessThan if true => Some(17),
                    Token::Equals if true => Some(18),
                    Token::FatArrow if true => Some(19),
                    Token::GreaterThan if true => Some(20),
                    Token::Question if true => Some(21),
                    Token::At if true => Some(22),
                    Token::LeftBracket if true => Some(23),
                    Token::RightBracket if true => Some(24),
                    Token::Caret if true => Some(25),
                    Token::Word(Word::Action) if true => Some(26),
                    Token::Comment(_) if true => Some(27),
                    Token::Word(Word::Effect) if true => Some(28),
                    Token::Word(Word::Else) if true => Some(29),
                    Token::Word(Word::Enum) if true => Some(30),
                    Token::Eof if true => Some(31),
                    Token::Word(Word::False) if true => Some(32),
                    Token::Float(_) if true => Some(33),
                    Token::Word(Word::Fn) if true => Some(34),
                    Token::Word(Word::For) if true => Some(35),
                    Token::Word(Word::From) if true => Some(36),
                    Token::Word(Word::Ident(_)) if true => Some(37),
                    Token::Word(Word::If) if true => Some(38),
                    Token::Word(Word::Impl) if true => Some(39),
                    Token::Word(Word::Import) if true => Some(40),
                    Token::Integer(_) if true => Some(41),
                    Token::Word(Word::Let) if true => Some(42),
                    Token::Word(Word::Match) if true => Some(43),
                    Token::Word(Word::None) if true => Some(44),
                    Token::Word(Word::Null) if true => Some(45),
                    Token::Word(Word::Priv) if true => Some(46),
                    Token::Word(Word::Pub) if true => Some(47),
                    Token::Word(Word::Self_) if true => Some(48),
                    Token::String(_) if true => Some(49),
                    Token::Word(Word::Struct) if true => Some(50),
                    Token::Word(Word::True) if true => Some(51),
                    Token::Word(Word::Use) if true => Some(52),
                    Token::Word(Word::When) if true => Some(53),
                    Token::Word(Word::Where) if true => Some(54),
                    Token::LeftBrace if true => Some(55),
                    Token::Pipe if true => Some(56),
                    Token::RightBrace if true => Some(57),
                    Token::Tilde if true => Some(58),
                    _ => None,
                }
            }
            fn __token_to_symbol<'input, 'err>(
                __token_index: usize,
                __token: Token<'input>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> __Symbol<'input> {
                #[allow(clippy::manual_range_patterns)]
                match __token_index {
                    0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15
                    | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 28 | 29 | 30
                    | 31 | 32 | 34 | 35 | 36 | 38 | 39 | 40 | 42 | 43 | 44 | 45 | 46 | 47
                    | 48 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 | 58 => {
                        __Symbol::Variant0(__token)
                    }
                    27 | 37 | 49 => {
                        match __token {
                            Token::Comment(__tok0)
                            | Token::Word(Word::Ident(__tok0))
                            | Token::String(__tok0) if true => __Symbol::Variant1(__tok0),
                            _ => {
                                ::core::panicking::panic(
                                    "internal error: entered unreachable code",
                                )
                            }
                        }
                    }
                    33 => {
                        match __token {
                            Token::Float(__tok0) if true => __Symbol::Variant2(__tok0),
                            _ => {
                                ::core::panicking::panic(
                                    "internal error: entered unreachable code",
                                )
                            }
                        }
                    }
                    41 => {
                        match __token {
                            Token::Integer(__tok0) if true => __Symbol::Variant3(__tok0),
                            _ => {
                                ::core::panicking::panic(
                                    "internal error: entered unreachable code",
                                )
                            }
                        }
                    }
                    _ => {
                        ::core::panicking::panic(
                            "internal error: entered unreachable code",
                        )
                    }
                }
            }
            fn __simulate_reduce<'input, 'err, '__2>(
                __reduce_index: i16,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> __state_machine::SimulatedReduce<__StateMachine<'input, 'err, '__2>>
            where
                'input: 'err,
                'static: 'err,
            {
                match __reduce_index {
                    0 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 0,
                            nonterminal_produced: 0,
                        }
                    }
                    1 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 1,
                            nonterminal_produced: 0,
                        }
                    }
                    2 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 1,
                            nonterminal_produced: 1,
                        }
                    }
                    3 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 2,
                            nonterminal_produced: 1,
                        }
                    }
                    4 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 1,
                            nonterminal_produced: 2,
                        }
                    }
                    5 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 0,
                            nonterminal_produced: 2,
                        }
                    }
                    6 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 2,
                            nonterminal_produced: 3,
                        }
                    }
                    7 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 2,
                            nonterminal_produced: 4,
                        }
                    }
                    8 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 0,
                            nonterminal_produced: 4,
                        }
                    }
                    9 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 1,
                            nonterminal_produced: 5,
                        }
                    }
                    10 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 2,
                            nonterminal_produced: 5,
                        }
                    }
                    11 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 0,
                            nonterminal_produced: 6,
                        }
                    }
                    12 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 1,
                            nonterminal_produced: 6,
                        }
                    }
                    13 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 1,
                            nonterminal_produced: 7,
                        }
                    }
                    14 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 2,
                            nonterminal_produced: 7,
                        }
                    }
                    15 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 2,
                            nonterminal_produced: 7,
                        }
                    }
                    16 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 3,
                            nonterminal_produced: 7,
                        }
                    }
                    17 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 1,
                            nonterminal_produced: 8,
                        }
                    }
                    18 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 0,
                            nonterminal_produced: 8,
                        }
                    }
                    19 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 2,
                            nonterminal_produced: 9,
                        }
                    }
                    20 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 2,
                            nonterminal_produced: 10,
                        }
                    }
                    21 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 0,
                            nonterminal_produced: 10,
                        }
                    }
                    22 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 0,
                            nonterminal_produced: 11,
                        }
                    }
                    23 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 2,
                            nonterminal_produced: 12,
                        }
                    }
                    24 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 0,
                            nonterminal_produced: 13,
                        }
                    }
                    25 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 1,
                            nonterminal_produced: 13,
                        }
                    }
                    26 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 2,
                            nonterminal_produced: 14,
                        }
                    }
                    27 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 3,
                            nonterminal_produced: 14,
                        }
                    }
                    28 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 2,
                            nonterminal_produced: 15,
                        }
                    }
                    29 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 0,
                            nonterminal_produced: 16,
                        }
                    }
                    30 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 1,
                            nonterminal_produced: 16,
                        }
                    }
                    31 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 2,
                            nonterminal_produced: 17,
                        }
                    }
                    32 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 3,
                            nonterminal_produced: 17,
                        }
                    }
                    33 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 2,
                            nonterminal_produced: 18,
                        }
                    }
                    34 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 0,
                            nonterminal_produced: 19,
                        }
                    }
                    35 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 1,
                            nonterminal_produced: 19,
                        }
                    }
                    36 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 2,
                            nonterminal_produced: 20,
                        }
                    }
                    37 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 3,
                            nonterminal_produced: 20,
                        }
                    }
                    38 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 2,
                            nonterminal_produced: 21,
                        }
                    }
                    39 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 0,
                            nonterminal_produced: 22,
                        }
                    }
                    40 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 1,
                            nonterminal_produced: 22,
                        }
                    }
                    41 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 2,
                            nonterminal_produced: 23,
                        }
                    }
                    42 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 3,
                            nonterminal_produced: 23,
                        }
                    }
                    43 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 2,
                            nonterminal_produced: 24,
                        }
                    }
                    44 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 0,
                            nonterminal_produced: 25,
                        }
                    }
                    45 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 1,
                            nonterminal_produced: 25,
                        }
                    }
                    46 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 2,
                            nonterminal_produced: 26,
                        }
                    }
                    47 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 3,
                            nonterminal_produced: 26,
                        }
                    }
                    48 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 2,
                            nonterminal_produced: 27,
                        }
                    }
                    49 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 0,
                            nonterminal_produced: 28,
                        }
                    }
                    50 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 1,
                            nonterminal_produced: 28,
                        }
                    }
                    51 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 2,
                            nonterminal_produced: 29,
                        }
                    }
                    52 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 3,
                            nonterminal_produced: 29,
                        }
                    }
                    53 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 2,
                            nonterminal_produced: 30,
                        }
                    }
                    54 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 0,
                            nonterminal_produced: 31,
                        }
                    }
                    55 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 1,
                            nonterminal_produced: 31,
                        }
                    }
                    56 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 2,
                            nonterminal_produced: 32,
                        }
                    }
                    57 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 3,
                            nonterminal_produced: 32,
                        }
                    }
                    58 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 2,
                            nonterminal_produced: 33,
                        }
                    }
                    59 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 0,
                            nonterminal_produced: 34,
                        }
                    }
                    60 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 1,
                            nonterminal_produced: 34,
                        }
                    }
                    61 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 2,
                            nonterminal_produced: 35,
                        }
                    }
                    62 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 3,
                            nonterminal_produced: 35,
                        }
                    }
                    63 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 0,
                            nonterminal_produced: 36,
                        }
                    }
                    64 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 0,
                            nonterminal_produced: 37,
                        }
                    }
                    65 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 1,
                            nonterminal_produced: 38,
                        }
                    }
                    66 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 1,
                            nonterminal_produced: 38,
                        }
                    }
                    67 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 1,
                            nonterminal_produced: 39,
                        }
                    }
                    68 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 1,
                            nonterminal_produced: 39,
                        }
                    }
                    69 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 1,
                            nonterminal_produced: 39,
                        }
                    }
                    70 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 4,
                            nonterminal_produced: 40,
                        }
                    }
                    71 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 3,
                            nonterminal_produced: 40,
                        }
                    }
                    72 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 5,
                            nonterminal_produced: 40,
                        }
                    }
                    73 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 4,
                            nonterminal_produced: 40,
                        }
                    }
                    74 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 3,
                            nonterminal_produced: 40,
                        }
                    }
                    75 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 2,
                            nonterminal_produced: 40,
                        }
                    }
                    76 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 4,
                            nonterminal_produced: 40,
                        }
                    }
                    77 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 3,
                            nonterminal_produced: 40,
                        }
                    }
                    78 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 4,
                            nonterminal_produced: 41,
                        }
                    }
                    79 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 3,
                            nonterminal_produced: 41,
                        }
                    }
                    80 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 5,
                            nonterminal_produced: 41,
                        }
                    }
                    81 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 4,
                            nonterminal_produced: 41,
                        }
                    }
                    82 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 3,
                            nonterminal_produced: 41,
                        }
                    }
                    83 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 2,
                            nonterminal_produced: 41,
                        }
                    }
                    84 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 4,
                            nonterminal_produced: 41,
                        }
                    }
                    85 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 3,
                            nonterminal_produced: 41,
                        }
                    }
                    86 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 4,
                            nonterminal_produced: 42,
                        }
                    }
                    87 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 3,
                            nonterminal_produced: 42,
                        }
                    }
                    88 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 5,
                            nonterminal_produced: 42,
                        }
                    }
                    89 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 4,
                            nonterminal_produced: 42,
                        }
                    }
                    90 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 3,
                            nonterminal_produced: 42,
                        }
                    }
                    91 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 2,
                            nonterminal_produced: 42,
                        }
                    }
                    92 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 4,
                            nonterminal_produced: 42,
                        }
                    }
                    93 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 3,
                            nonterminal_produced: 42,
                        }
                    }
                    94 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 4,
                            nonterminal_produced: 43,
                        }
                    }
                    95 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 3,
                            nonterminal_produced: 43,
                        }
                    }
                    96 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 5,
                            nonterminal_produced: 43,
                        }
                    }
                    97 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 4,
                            nonterminal_produced: 43,
                        }
                    }
                    98 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 3,
                            nonterminal_produced: 43,
                        }
                    }
                    99 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 2,
                            nonterminal_produced: 43,
                        }
                    }
                    100 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 4,
                            nonterminal_produced: 43,
                        }
                    }
                    101 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 3,
                            nonterminal_produced: 43,
                        }
                    }
                    102 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 1,
                            nonterminal_produced: 44,
                        }
                    }
                    103 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 0,
                            nonterminal_produced: 44,
                        }
                    }
                    104 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 2,
                            nonterminal_produced: 44,
                        }
                    }
                    105 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 1,
                            nonterminal_produced: 44,
                        }
                    }
                    106 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 1,
                            nonterminal_produced: 45,
                        }
                    }
                    107 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 0,
                            nonterminal_produced: 45,
                        }
                    }
                    108 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 2,
                            nonterminal_produced: 45,
                        }
                    }
                    109 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 1,
                            nonterminal_produced: 45,
                        }
                    }
                    110 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 1,
                            nonterminal_produced: 46,
                        }
                    }
                    111 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 0,
                            nonterminal_produced: 46,
                        }
                    }
                    112 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 2,
                            nonterminal_produced: 46,
                        }
                    }
                    113 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 1,
                            nonterminal_produced: 46,
                        }
                    }
                    114 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 1,
                            nonterminal_produced: 47,
                        }
                    }
                    115 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 8,
                            nonterminal_produced: 48,
                        }
                    }
                    116 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 7,
                            nonterminal_produced: 48,
                        }
                    }
                    117 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 9,
                            nonterminal_produced: 48,
                        }
                    }
                    118 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 8,
                            nonterminal_produced: 48,
                        }
                    }
                    119 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 7,
                            nonterminal_produced: 48,
                        }
                    }
                    120 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 6,
                            nonterminal_produced: 48,
                        }
                    }
                    121 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 8,
                            nonterminal_produced: 48,
                        }
                    }
                    122 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 7,
                            nonterminal_produced: 48,
                        }
                    }
                    123 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 9,
                            nonterminal_produced: 48,
                        }
                    }
                    124 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 8,
                            nonterminal_produced: 48,
                        }
                    }
                    125 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 10,
                            nonterminal_produced: 48,
                        }
                    }
                    126 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 9,
                            nonterminal_produced: 48,
                        }
                    }
                    127 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 8,
                            nonterminal_produced: 48,
                        }
                    }
                    128 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 7,
                            nonterminal_produced: 48,
                        }
                    }
                    129 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 9,
                            nonterminal_produced: 48,
                        }
                    }
                    130 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 8,
                            nonterminal_produced: 48,
                        }
                    }
                    131 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 7,
                            nonterminal_produced: 48,
                        }
                    }
                    132 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 6,
                            nonterminal_produced: 48,
                        }
                    }
                    133 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 8,
                            nonterminal_produced: 48,
                        }
                    }
                    134 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 7,
                            nonterminal_produced: 48,
                        }
                    }
                    135 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 6,
                            nonterminal_produced: 48,
                        }
                    }
                    136 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 5,
                            nonterminal_produced: 48,
                        }
                    }
                    137 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 7,
                            nonterminal_produced: 48,
                        }
                    }
                    138 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 6,
                            nonterminal_produced: 48,
                        }
                    }
                    139 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 8,
                            nonterminal_produced: 48,
                        }
                    }
                    140 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 7,
                            nonterminal_produced: 48,
                        }
                    }
                    141 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 9,
                            nonterminal_produced: 48,
                        }
                    }
                    142 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 8,
                            nonterminal_produced: 48,
                        }
                    }
                    143 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 7,
                            nonterminal_produced: 48,
                        }
                    }
                    144 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 6,
                            nonterminal_produced: 48,
                        }
                    }
                    145 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 8,
                            nonterminal_produced: 48,
                        }
                    }
                    146 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 7,
                            nonterminal_produced: 48,
                        }
                    }
                    147 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 1,
                            nonterminal_produced: 49,
                        }
                    }
                    148 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 3,
                            nonterminal_produced: 50,
                        }
                    }
                    149 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 3,
                            nonterminal_produced: 50,
                        }
                    }
                    150 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 1,
                            nonterminal_produced: 50,
                        }
                    }
                    151 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 1,
                            nonterminal_produced: 51,
                        }
                    }
                    152 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 3,
                            nonterminal_produced: 52,
                        }
                    }
                    153 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 3,
                            nonterminal_produced: 52,
                        }
                    }
                    154 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 1,
                            nonterminal_produced: 52,
                        }
                    }
                    155 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 1,
                            nonterminal_produced: 53,
                        }
                    }
                    156 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 0,
                            nonterminal_produced: 53,
                        }
                    }
                    157 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 1,
                            nonterminal_produced: 54,
                        }
                    }
                    158 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 4,
                            nonterminal_produced: 55,
                        }
                    }
                    159 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 1,
                            nonterminal_produced: 56,
                        }
                    }
                    160 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 0,
                            nonterminal_produced: 56,
                        }
                    }
                    161 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 3,
                            nonterminal_produced: 57,
                        }
                    }
                    162 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 1,
                            nonterminal_produced: 57,
                        }
                    }
                    163 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 1,
                            nonterminal_produced: 58,
                        }
                    }
                    164 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 1,
                            nonterminal_produced: 59,
                        }
                    }
                    165 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 1,
                            nonterminal_produced: 59,
                        }
                    }
                    166 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 1,
                            nonterminal_produced: 60,
                        }
                    }
                    167 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 0,
                            nonterminal_produced: 60,
                        }
                    }
                    168 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 4,
                            nonterminal_produced: 61,
                        }
                    }
                    169 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 3,
                            nonterminal_produced: 61,
                        }
                    }
                    170 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 5,
                            nonterminal_produced: 61,
                        }
                    }
                    171 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 4,
                            nonterminal_produced: 61,
                        }
                    }
                    172 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 6,
                            nonterminal_produced: 62,
                        }
                    }
                    173 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 5,
                            nonterminal_produced: 62,
                        }
                    }
                    174 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 7,
                            nonterminal_produced: 62,
                        }
                    }
                    175 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 6,
                            nonterminal_produced: 62,
                        }
                    }
                    176 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 5,
                            nonterminal_produced: 62,
                        }
                    }
                    177 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 4,
                            nonterminal_produced: 62,
                        }
                    }
                    178 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 6,
                            nonterminal_produced: 62,
                        }
                    }
                    179 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 5,
                            nonterminal_produced: 62,
                        }
                    }
                    180 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 1,
                            nonterminal_produced: 63,
                        }
                    }
                    181 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 0,
                            nonterminal_produced: 63,
                        }
                    }
                    182 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 1,
                            nonterminal_produced: 64,
                        }
                    }
                    183 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 1,
                            nonterminal_produced: 65,
                        }
                    }
                    184 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 1,
                            nonterminal_produced: 66,
                        }
                    }
                    185 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 0,
                            nonterminal_produced: 66,
                        }
                    }
                    186 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 1,
                            nonterminal_produced: 67,
                        }
                    }
                    187 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 1,
                            nonterminal_produced: 67,
                        }
                    }
                    188 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 1,
                            nonterminal_produced: 67,
                        }
                    }
                    189 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 1,
                            nonterminal_produced: 68,
                        }
                    }
                    190 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 1,
                            nonterminal_produced: 68,
                        }
                    }
                    191 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 4,
                            nonterminal_produced: 69,
                        }
                    }
                    192 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 3,
                            nonterminal_produced: 69,
                        }
                    }
                    193 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 5,
                            nonterminal_produced: 69,
                        }
                    }
                    194 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 4,
                            nonterminal_produced: 69,
                        }
                    }
                    195 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 1,
                            nonterminal_produced: 70,
                        }
                    }
                    196 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 6,
                            nonterminal_produced: 71,
                        }
                    }
                    197 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 5,
                            nonterminal_produced: 71,
                        }
                    }
                    198 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 7,
                            nonterminal_produced: 71,
                        }
                    }
                    199 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 6,
                            nonterminal_produced: 71,
                        }
                    }
                    200 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 5,
                            nonterminal_produced: 71,
                        }
                    }
                    201 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 4,
                            nonterminal_produced: 71,
                        }
                    }
                    202 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 6,
                            nonterminal_produced: 71,
                        }
                    }
                    203 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 5,
                            nonterminal_produced: 71,
                        }
                    }
                    204 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 11,
                            nonterminal_produced: 71,
                        }
                    }
                    205 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 10,
                            nonterminal_produced: 71,
                        }
                    }
                    206 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 12,
                            nonterminal_produced: 71,
                        }
                    }
                    207 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 11,
                            nonterminal_produced: 71,
                        }
                    }
                    208 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 10,
                            nonterminal_produced: 71,
                        }
                    }
                    209 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 9,
                            nonterminal_produced: 71,
                        }
                    }
                    210 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 11,
                            nonterminal_produced: 71,
                        }
                    }
                    211 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 10,
                            nonterminal_produced: 71,
                        }
                    }
                    212 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 10,
                            nonterminal_produced: 71,
                        }
                    }
                    213 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 9,
                            nonterminal_produced: 71,
                        }
                    }
                    214 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 11,
                            nonterminal_produced: 71,
                        }
                    }
                    215 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 10,
                            nonterminal_produced: 71,
                        }
                    }
                    216 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 9,
                            nonterminal_produced: 71,
                        }
                    }
                    217 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 8,
                            nonterminal_produced: 71,
                        }
                    }
                    218 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 10,
                            nonterminal_produced: 71,
                        }
                    }
                    219 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 9,
                            nonterminal_produced: 71,
                        }
                    }
                    220 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 12,
                            nonterminal_produced: 71,
                        }
                    }
                    221 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 11,
                            nonterminal_produced: 71,
                        }
                    }
                    222 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 13,
                            nonterminal_produced: 71,
                        }
                    }
                    223 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 12,
                            nonterminal_produced: 71,
                        }
                    }
                    224 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 11,
                            nonterminal_produced: 71,
                        }
                    }
                    225 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 10,
                            nonterminal_produced: 71,
                        }
                    }
                    226 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 12,
                            nonterminal_produced: 71,
                        }
                    }
                    227 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 11,
                            nonterminal_produced: 71,
                        }
                    }
                    228 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 11,
                            nonterminal_produced: 71,
                        }
                    }
                    229 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 10,
                            nonterminal_produced: 71,
                        }
                    }
                    230 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 12,
                            nonterminal_produced: 71,
                        }
                    }
                    231 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 11,
                            nonterminal_produced: 71,
                        }
                    }
                    232 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 10,
                            nonterminal_produced: 71,
                        }
                    }
                    233 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 9,
                            nonterminal_produced: 71,
                        }
                    }
                    234 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 11,
                            nonterminal_produced: 71,
                        }
                    }
                    235 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 10,
                            nonterminal_produced: 71,
                        }
                    }
                    236 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 10,
                            nonterminal_produced: 71,
                        }
                    }
                    237 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 9,
                            nonterminal_produced: 71,
                        }
                    }
                    238 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 11,
                            nonterminal_produced: 71,
                        }
                    }
                    239 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 10,
                            nonterminal_produced: 71,
                        }
                    }
                    240 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 9,
                            nonterminal_produced: 71,
                        }
                    }
                    241 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 8,
                            nonterminal_produced: 71,
                        }
                    }
                    242 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 10,
                            nonterminal_produced: 71,
                        }
                    }
                    243 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 9,
                            nonterminal_produced: 71,
                        }
                    }
                    244 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 9,
                            nonterminal_produced: 71,
                        }
                    }
                    245 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 8,
                            nonterminal_produced: 71,
                        }
                    }
                    246 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 10,
                            nonterminal_produced: 71,
                        }
                    }
                    247 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 9,
                            nonterminal_produced: 71,
                        }
                    }
                    248 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 8,
                            nonterminal_produced: 71,
                        }
                    }
                    249 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 7,
                            nonterminal_produced: 71,
                        }
                    }
                    250 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 9,
                            nonterminal_produced: 71,
                        }
                    }
                    251 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 8,
                            nonterminal_produced: 71,
                        }
                    }
                    252 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 11,
                            nonterminal_produced: 71,
                        }
                    }
                    253 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 10,
                            nonterminal_produced: 71,
                        }
                    }
                    254 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 12,
                            nonterminal_produced: 71,
                        }
                    }
                    255 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 11,
                            nonterminal_produced: 71,
                        }
                    }
                    256 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 10,
                            nonterminal_produced: 71,
                        }
                    }
                    257 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 9,
                            nonterminal_produced: 71,
                        }
                    }
                    258 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 11,
                            nonterminal_produced: 71,
                        }
                    }
                    259 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 10,
                            nonterminal_produced: 71,
                        }
                    }
                    260 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 10,
                            nonterminal_produced: 71,
                        }
                    }
                    261 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 9,
                            nonterminal_produced: 71,
                        }
                    }
                    262 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 11,
                            nonterminal_produced: 71,
                        }
                    }
                    263 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 10,
                            nonterminal_produced: 71,
                        }
                    }
                    264 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 9,
                            nonterminal_produced: 71,
                        }
                    }
                    265 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 8,
                            nonterminal_produced: 71,
                        }
                    }
                    266 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 10,
                            nonterminal_produced: 71,
                        }
                    }
                    267 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 9,
                            nonterminal_produced: 71,
                        }
                    }
                    268 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 1,
                            nonterminal_produced: 72,
                        }
                    }
                    269 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 8,
                            nonterminal_produced: 73,
                        }
                    }
                    270 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 7,
                            nonterminal_produced: 73,
                        }
                    }
                    271 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 9,
                            nonterminal_produced: 73,
                        }
                    }
                    272 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 8,
                            nonterminal_produced: 73,
                        }
                    }
                    273 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 7,
                            nonterminal_produced: 73,
                        }
                    }
                    274 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 6,
                            nonterminal_produced: 73,
                        }
                    }
                    275 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 8,
                            nonterminal_produced: 73,
                        }
                    }
                    276 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 7,
                            nonterminal_produced: 73,
                        }
                    }
                    277 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 6,
                            nonterminal_produced: 73,
                        }
                    }
                    278 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 5,
                            nonterminal_produced: 73,
                        }
                    }
                    279 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 7,
                            nonterminal_produced: 73,
                        }
                    }
                    280 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 6,
                            nonterminal_produced: 73,
                        }
                    }
                    281 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 5,
                            nonterminal_produced: 73,
                        }
                    }
                    282 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 4,
                            nonterminal_produced: 73,
                        }
                    }
                    283 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 6,
                            nonterminal_produced: 73,
                        }
                    }
                    284 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 5,
                            nonterminal_produced: 73,
                        }
                    }
                    285 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 2,
                            nonterminal_produced: 74,
                        }
                    }
                    286 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 2,
                            nonterminal_produced: 75,
                        }
                    }
                    287 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 2,
                            nonterminal_produced: 76,
                        }
                    }
                    288 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 2,
                            nonterminal_produced: 77,
                        }
                    }
                    289 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 2,
                            nonterminal_produced: 78,
                        }
                    }
                    290 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 1,
                            nonterminal_produced: 79,
                        }
                    }
                    291 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 1,
                            nonterminal_produced: 80,
                        }
                    }
                    292 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 0,
                            nonterminal_produced: 80,
                        }
                    }
                    293 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 2,
                            nonterminal_produced: 80,
                        }
                    }
                    294 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 1,
                            nonterminal_produced: 80,
                        }
                    }
                    295 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 1,
                            nonterminal_produced: 81,
                        }
                    }
                    296 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 0,
                            nonterminal_produced: 81,
                        }
                    }
                    297 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 2,
                            nonterminal_produced: 81,
                        }
                    }
                    298 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 1,
                            nonterminal_produced: 81,
                        }
                    }
                    299 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 1,
                            nonterminal_produced: 82,
                        }
                    }
                    300 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 0,
                            nonterminal_produced: 82,
                        }
                    }
                    301 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 2,
                            nonterminal_produced: 82,
                        }
                    }
                    302 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 1,
                            nonterminal_produced: 82,
                        }
                    }
                    303 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 1,
                            nonterminal_produced: 83,
                        }
                    }
                    304 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 0,
                            nonterminal_produced: 83,
                        }
                    }
                    305 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 2,
                            nonterminal_produced: 83,
                        }
                    }
                    306 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 1,
                            nonterminal_produced: 83,
                        }
                    }
                    307 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 1,
                            nonterminal_produced: 84,
                        }
                    }
                    308 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 1,
                            nonterminal_produced: 85,
                        }
                    }
                    309 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 0,
                            nonterminal_produced: 85,
                        }
                    }
                    310 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 2,
                            nonterminal_produced: 85,
                        }
                    }
                    311 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 1,
                            nonterminal_produced: 85,
                        }
                    }
                    312 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 9,
                            nonterminal_produced: 86,
                        }
                    }
                    313 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 8,
                            nonterminal_produced: 86,
                        }
                    }
                    314 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 10,
                            nonterminal_produced: 86,
                        }
                    }
                    315 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 9,
                            nonterminal_produced: 86,
                        }
                    }
                    316 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 8,
                            nonterminal_produced: 86,
                        }
                    }
                    317 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 7,
                            nonterminal_produced: 86,
                        }
                    }
                    318 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 9,
                            nonterminal_produced: 86,
                        }
                    }
                    319 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 8,
                            nonterminal_produced: 86,
                        }
                    }
                    320 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 10,
                            nonterminal_produced: 86,
                        }
                    }
                    321 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 9,
                            nonterminal_produced: 86,
                        }
                    }
                    322 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 11,
                            nonterminal_produced: 86,
                        }
                    }
                    323 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 10,
                            nonterminal_produced: 86,
                        }
                    }
                    324 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 9,
                            nonterminal_produced: 86,
                        }
                    }
                    325 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 8,
                            nonterminal_produced: 86,
                        }
                    }
                    326 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 10,
                            nonterminal_produced: 86,
                        }
                    }
                    327 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 9,
                            nonterminal_produced: 86,
                        }
                    }
                    328 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 7,
                            nonterminal_produced: 86,
                        }
                    }
                    329 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 6,
                            nonterminal_produced: 86,
                        }
                    }
                    330 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 8,
                            nonterminal_produced: 86,
                        }
                    }
                    331 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 7,
                            nonterminal_produced: 86,
                        }
                    }
                    332 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 6,
                            nonterminal_produced: 86,
                        }
                    }
                    333 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 5,
                            nonterminal_produced: 86,
                        }
                    }
                    334 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 7,
                            nonterminal_produced: 86,
                        }
                    }
                    335 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 6,
                            nonterminal_produced: 86,
                        }
                    }
                    336 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 8,
                            nonterminal_produced: 86,
                        }
                    }
                    337 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 7,
                            nonterminal_produced: 86,
                        }
                    }
                    338 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 9,
                            nonterminal_produced: 86,
                        }
                    }
                    339 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 8,
                            nonterminal_produced: 86,
                        }
                    }
                    340 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 7,
                            nonterminal_produced: 86,
                        }
                    }
                    341 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 6,
                            nonterminal_produced: 86,
                        }
                    }
                    342 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 8,
                            nonterminal_produced: 86,
                        }
                    }
                    343 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 7,
                            nonterminal_produced: 86,
                        }
                    }
                    344 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 1,
                            nonterminal_produced: 87,
                        }
                    }
                    345 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 0,
                            nonterminal_produced: 87,
                        }
                    }
                    346 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 0,
                            nonterminal_produced: 88,
                        }
                    }
                    347 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 1,
                            nonterminal_produced: 88,
                        }
                    }
                    348 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 1,
                            nonterminal_produced: 88,
                        }
                    }
                    349 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 1,
                            nonterminal_produced: 89,
                        }
                    }
                    350 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 1,
                            nonterminal_produced: 90,
                        }
                    }
                    351 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 1,
                            nonterminal_produced: 91,
                        }
                    }
                    352 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 4,
                            nonterminal_produced: 92,
                        }
                    }
                    353 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 1,
                            nonterminal_produced: 92,
                        }
                    }
                    354 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 1,
                            nonterminal_produced: 92,
                        }
                    }
                    355 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 1,
                            nonterminal_produced: 93,
                        }
                    }
                    356 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 0,
                            nonterminal_produced: 93,
                        }
                    }
                    357 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 1,
                            nonterminal_produced: 94,
                        }
                    }
                    358 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 1,
                            nonterminal_produced: 95,
                        }
                    }
                    359 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 6,
                            nonterminal_produced: 96,
                        }
                    }
                    360 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 5,
                            nonterminal_produced: 96,
                        }
                    }
                    361 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 7,
                            nonterminal_produced: 96,
                        }
                    }
                    362 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 6,
                            nonterminal_produced: 96,
                        }
                    }
                    363 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 5,
                            nonterminal_produced: 96,
                        }
                    }
                    364 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 4,
                            nonterminal_produced: 96,
                        }
                    }
                    365 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 6,
                            nonterminal_produced: 96,
                        }
                    }
                    366 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 5,
                            nonterminal_produced: 96,
                        }
                    }
                    367 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 1,
                            nonterminal_produced: 97,
                        }
                    }
                    368 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 1,
                            nonterminal_produced: 97,
                        }
                    }
                    369 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 1,
                            nonterminal_produced: 97,
                        }
                    }
                    370 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 1,
                            nonterminal_produced: 97,
                        }
                    }
                    371 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 1,
                            nonterminal_produced: 97,
                        }
                    }
                    372 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 1,
                            nonterminal_produced: 97,
                        }
                    }
                    373 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 3,
                            nonterminal_produced: 97,
                        }
                    }
                    374 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 1,
                            nonterminal_produced: 98,
                        }
                    }
                    375 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 1,
                            nonterminal_produced: 98,
                        }
                    }
                    376 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 1,
                            nonterminal_produced: 98,
                        }
                    }
                    377 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 1,
                            nonterminal_produced: 98,
                        }
                    }
                    378 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 1,
                            nonterminal_produced: 98,
                        }
                    }
                    379 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 1,
                            nonterminal_produced: 99,
                        }
                    }
                    380 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 3,
                            nonterminal_produced: 100,
                        }
                    }
                    381 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 2,
                            nonterminal_produced: 100,
                        }
                    }
                    382 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 4,
                            nonterminal_produced: 100,
                        }
                    }
                    383 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 3,
                            nonterminal_produced: 100,
                        }
                    }
                    384 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 1,
                            nonterminal_produced: 101,
                        }
                    }
                    385 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 6,
                            nonterminal_produced: 102,
                        }
                    }
                    386 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 5,
                            nonterminal_produced: 102,
                        }
                    }
                    387 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 7,
                            nonterminal_produced: 102,
                        }
                    }
                    388 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 6,
                            nonterminal_produced: 102,
                        }
                    }
                    389 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 1,
                            nonterminal_produced: 103,
                        }
                    }
                    390 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 1,
                            nonterminal_produced: 103,
                        }
                    }
                    391 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 0,
                            nonterminal_produced: 103,
                        }
                    }
                    392 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 1,
                            nonterminal_produced: 104,
                        }
                    }
                    393 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 6,
                            nonterminal_produced: 105,
                        }
                    }
                    394 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 5,
                            nonterminal_produced: 105,
                        }
                    }
                    395 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 7,
                            nonterminal_produced: 105,
                        }
                    }
                    396 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 6,
                            nonterminal_produced: 105,
                        }
                    }
                    397 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 5,
                            nonterminal_produced: 105,
                        }
                    }
                    398 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 4,
                            nonterminal_produced: 105,
                        }
                    }
                    399 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 6,
                            nonterminal_produced: 105,
                        }
                    }
                    400 => {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop: 5,
                            nonterminal_produced: 105,
                        }
                    }
                    401 => __state_machine::SimulatedReduce::Accept,
                    _ => {
                        ::core::panicking::panic_fmt(
                            format_args!("invalid reduction index {0}", __reduce_index),
                        );
                    }
                }
            }
            pub struct SourceParser {
                _priv: (),
            }
            impl Default for SourceParser {
                fn default() -> Self {
                    Self::new()
                }
            }
            impl SourceParser {
                pub fn new() -> SourceParser {
                    SourceParser { _priv: () }
                }
                #[allow(dead_code)]
                pub fn parse<
                    'input,
                    'err,
                    __TOKEN: __ToTriple<'input, 'err>,
                    __TOKENS: IntoIterator<Item = __TOKEN>,
                >(
                    &self,
                    errors: &'err mut Vec<
                        ErrorRecovery<Location, Token<'input>, &'static str>,
                    >,
                    db: &dyn Db,
                    __tokens0: __TOKENS,
                ) -> Result<
                    Module,
                    __lalrpop_util::ParseError<Location, Token<'input>, &'static str>,
                > {
                    let __tokens = __tokens0.into_iter();
                    let mut __tokens = __tokens.map(|t| __ToTriple::to_triple(t));
                    __state_machine::Parser::drive(
                        __StateMachine {
                            errors,
                            db,
                            __phantom: core::marker::PhantomData::<(&(), &())>,
                        },
                        __tokens,
                    )
                }
            }
            fn __accepts<'input, 'err, '__2>(
                __error_state: Option<i16>,
                __states: &[i16],
                __opt_integer: Option<usize>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> bool
            where
                'input: 'err,
                'static: 'err,
            {
                let mut __states = __states.to_vec();
                __states.extend(__error_state);
                loop {
                    let mut __states_len = __states.len();
                    let __top = __states[__states_len - 1];
                    let __action = match __opt_integer {
                        None => __EOF_ACTION[__top as usize],
                        Some(__integer) => __action(__top, __integer),
                    };
                    if __action == 0 {
                        return false;
                    }
                    if __action > 0 {
                        return true;
                    }
                    let (__to_pop, __nt) = match __simulate_reduce(
                        -(__action + 1),
                        core::marker::PhantomData::<(&(), &())>,
                    ) {
                        __state_machine::SimulatedReduce::Reduce {
                            states_to_pop,
                            nonterminal_produced,
                        } => (states_to_pop, nonterminal_produced),
                        __state_machine::SimulatedReduce::Accept => return true,
                    };
                    __states_len -= __to_pop;
                    __states.truncate(__states_len);
                    let __top = __states[__states_len - 1];
                    let __next_state = __goto(__top, __nt);
                    __states.push(__next_state);
                }
            }
            fn __reduce<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __action: i16,
                __lookahead_start: Option<&Location>,
                __states: &mut alloc::vec::Vec<i16>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> Option<
                Result<
                    Module,
                    __lalrpop_util::ParseError<Location, Token<'input>, &'static str>,
                >,
            > {
                let (__pop_states, __nonterminal) = match __action {
                    0 => {
                        __reduce0(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    1 => {
                        __reduce1(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    2 => {
                        __reduce2(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    3 => {
                        __reduce3(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    4 => {
                        __reduce4(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    5 => {
                        __reduce5(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    6 => {
                        __reduce6(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    7 => {
                        __reduce7(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    8 => {
                        __reduce8(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    9 => {
                        __reduce9(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    10 => {
                        __reduce10(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    11 => {
                        __reduce11(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    12 => {
                        __reduce12(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    13 => {
                        __reduce13(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    14 => {
                        __reduce14(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    15 => {
                        __reduce15(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    16 => {
                        __reduce16(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    17 => {
                        __reduce17(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    18 => {
                        __reduce18(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    19 => {
                        __reduce19(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    20 => {
                        __reduce20(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    21 => {
                        __reduce21(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    22 => {
                        __reduce22(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    23 => {
                        __reduce23(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    24 => {
                        __reduce24(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    25 => {
                        __reduce25(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    26 => {
                        __reduce26(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    27 => {
                        __reduce27(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    28 => {
                        __reduce28(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    29 => {
                        __reduce29(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    30 => {
                        __reduce30(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    31 => {
                        __reduce31(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    32 => {
                        __reduce32(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    33 => {
                        __reduce33(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    34 => {
                        __reduce34(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    35 => {
                        __reduce35(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    36 => {
                        __reduce36(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    37 => {
                        __reduce37(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    38 => {
                        __reduce38(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    39 => {
                        __reduce39(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    40 => {
                        __reduce40(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    41 => {
                        __reduce41(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    42 => {
                        __reduce42(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    43 => {
                        __reduce43(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    44 => {
                        __reduce44(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    45 => {
                        __reduce45(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    46 => {
                        __reduce46(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    47 => {
                        __reduce47(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    48 => {
                        __reduce48(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    49 => {
                        __reduce49(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    50 => {
                        __reduce50(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    51 => {
                        __reduce51(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    52 => {
                        __reduce52(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    53 => {
                        __reduce53(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    54 => {
                        __reduce54(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    55 => {
                        __reduce55(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    56 => {
                        __reduce56(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    57 => {
                        __reduce57(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    58 => {
                        __reduce58(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    59 => {
                        __reduce59(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    60 => {
                        __reduce60(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    61 => {
                        __reduce61(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    62 => {
                        __reduce62(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    63 => {
                        __reduce63(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    64 => {
                        __reduce64(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    65 => {
                        __reduce65(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    66 => {
                        __reduce66(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    67 => {
                        __reduce67(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    68 => {
                        __reduce68(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    69 => {
                        __reduce69(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    70 => {
                        __reduce70(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    71 => {
                        __reduce71(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    72 => {
                        __reduce72(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    73 => {
                        __reduce73(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    74 => {
                        __reduce74(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    75 => {
                        __reduce75(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    76 => {
                        __reduce76(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    77 => {
                        __reduce77(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    78 => {
                        __reduce78(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    79 => {
                        __reduce79(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    80 => {
                        __reduce80(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    81 => {
                        __reduce81(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    82 => {
                        __reduce82(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    83 => {
                        __reduce83(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    84 => {
                        __reduce84(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    85 => {
                        __reduce85(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    86 => {
                        __reduce86(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    87 => {
                        __reduce87(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    88 => {
                        __reduce88(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    89 => {
                        __reduce89(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    90 => {
                        __reduce90(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    91 => {
                        __reduce91(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    92 => {
                        __reduce92(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    93 => {
                        __reduce93(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    94 => {
                        __reduce94(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    95 => {
                        __reduce95(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    96 => {
                        __reduce96(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    97 => {
                        __reduce97(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    98 => {
                        __reduce98(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    99 => {
                        __reduce99(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    100 => {
                        __reduce100(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    101 => {
                        __reduce101(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    102 => {
                        __reduce102(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    103 => {
                        __reduce103(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    104 => {
                        __reduce104(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    105 => {
                        __reduce105(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    106 => {
                        __reduce106(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    107 => {
                        __reduce107(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    108 => {
                        __reduce108(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    109 => {
                        __reduce109(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    110 => {
                        __reduce110(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    111 => {
                        __reduce111(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    112 => {
                        __reduce112(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    113 => {
                        __reduce113(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    114 => {
                        __reduce114(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    115 => {
                        __reduce115(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    116 => {
                        __reduce116(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    117 => {
                        __reduce117(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    118 => {
                        __reduce118(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    119 => {
                        __reduce119(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    120 => {
                        __reduce120(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    121 => {
                        __reduce121(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    122 => {
                        __reduce122(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    123 => {
                        __reduce123(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    124 => {
                        __reduce124(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    125 => {
                        __reduce125(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    126 => {
                        __reduce126(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    127 => {
                        __reduce127(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    128 => {
                        __reduce128(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    129 => {
                        __reduce129(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    130 => {
                        __reduce130(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    131 => {
                        __reduce131(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    132 => {
                        __reduce132(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    133 => {
                        __reduce133(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    134 => {
                        __reduce134(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    135 => {
                        __reduce135(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    136 => {
                        __reduce136(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    137 => {
                        __reduce137(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    138 => {
                        __reduce138(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    139 => {
                        __reduce139(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    140 => {
                        __reduce140(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    141 => {
                        __reduce141(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    142 => {
                        __reduce142(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    143 => {
                        __reduce143(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    144 => {
                        __reduce144(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    145 => {
                        __reduce145(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    146 => {
                        __reduce146(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    147 => {
                        __reduce147(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    148 => {
                        __reduce148(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    149 => {
                        __reduce149(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    150 => {
                        __reduce150(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    151 => {
                        __reduce151(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    152 => {
                        __reduce152(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    153 => {
                        __reduce153(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    154 => {
                        __reduce154(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    155 => {
                        __reduce155(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    156 => {
                        __reduce156(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    157 => {
                        __reduce157(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    158 => {
                        __reduce158(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    159 => {
                        __reduce159(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    160 => {
                        __reduce160(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    161 => {
                        __reduce161(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    162 => {
                        __reduce162(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    163 => {
                        __reduce163(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    164 => {
                        __reduce164(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    165 => {
                        __reduce165(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    166 => {
                        __reduce166(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    167 => {
                        __reduce167(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    168 => {
                        __reduce168(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    169 => {
                        __reduce169(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    170 => {
                        __reduce170(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    171 => {
                        __reduce171(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    172 => {
                        __reduce172(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    173 => {
                        __reduce173(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    174 => {
                        __reduce174(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    175 => {
                        __reduce175(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    176 => {
                        __reduce176(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    177 => {
                        __reduce177(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    178 => {
                        __reduce178(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    179 => {
                        __reduce179(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    180 => {
                        __reduce180(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    181 => {
                        __reduce181(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    182 => {
                        __reduce182(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    183 => {
                        __reduce183(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    184 => {
                        __reduce184(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    185 => {
                        __reduce185(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    186 => {
                        __reduce186(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    187 => {
                        __reduce187(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    188 => {
                        __reduce188(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    189 => {
                        __reduce189(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    190 => {
                        __reduce190(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    191 => {
                        __reduce191(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    192 => {
                        __reduce192(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    193 => {
                        __reduce193(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    194 => {
                        __reduce194(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    195 => {
                        __reduce195(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    196 => {
                        __reduce196(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    197 => {
                        __reduce197(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    198 => {
                        __reduce198(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    199 => {
                        __reduce199(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    200 => {
                        __reduce200(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    201 => {
                        __reduce201(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    202 => {
                        __reduce202(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    203 => {
                        __reduce203(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    204 => {
                        __reduce204(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    205 => {
                        __reduce205(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    206 => {
                        __reduce206(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    207 => {
                        __reduce207(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    208 => {
                        __reduce208(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    209 => {
                        __reduce209(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    210 => {
                        __reduce210(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    211 => {
                        __reduce211(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    212 => {
                        __reduce212(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    213 => {
                        __reduce213(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    214 => {
                        __reduce214(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    215 => {
                        __reduce215(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    216 => {
                        __reduce216(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    217 => {
                        __reduce217(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    218 => {
                        __reduce218(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    219 => {
                        __reduce219(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    220 => {
                        __reduce220(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    221 => {
                        __reduce221(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    222 => {
                        __reduce222(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    223 => {
                        __reduce223(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    224 => {
                        __reduce224(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    225 => {
                        __reduce225(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    226 => {
                        __reduce226(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    227 => {
                        __reduce227(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    228 => {
                        __reduce228(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    229 => {
                        __reduce229(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    230 => {
                        __reduce230(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    231 => {
                        __reduce231(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    232 => {
                        __reduce232(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    233 => {
                        __reduce233(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    234 => {
                        __reduce234(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    235 => {
                        __reduce235(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    236 => {
                        __reduce236(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    237 => {
                        __reduce237(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    238 => {
                        __reduce238(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    239 => {
                        __reduce239(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    240 => {
                        __reduce240(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    241 => {
                        __reduce241(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    242 => {
                        __reduce242(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    243 => {
                        __reduce243(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    244 => {
                        __reduce244(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    245 => {
                        __reduce245(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    246 => {
                        __reduce246(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    247 => {
                        __reduce247(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    248 => {
                        __reduce248(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    249 => {
                        __reduce249(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    250 => {
                        __reduce250(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    251 => {
                        __reduce251(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    252 => {
                        __reduce252(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    253 => {
                        __reduce253(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    254 => {
                        __reduce254(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    255 => {
                        __reduce255(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    256 => {
                        __reduce256(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    257 => {
                        __reduce257(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    258 => {
                        __reduce258(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    259 => {
                        __reduce259(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    260 => {
                        __reduce260(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    261 => {
                        __reduce261(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    262 => {
                        __reduce262(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    263 => {
                        __reduce263(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    264 => {
                        __reduce264(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    265 => {
                        __reduce265(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    266 => {
                        __reduce266(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    267 => {
                        __reduce267(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    268 => {
                        __reduce268(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    269 => {
                        __reduce269(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    270 => {
                        __reduce270(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    271 => {
                        __reduce271(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    272 => {
                        __reduce272(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    273 => {
                        __reduce273(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    274 => {
                        __reduce274(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    275 => {
                        __reduce275(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    276 => {
                        __reduce276(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    277 => {
                        __reduce277(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    278 => {
                        __reduce278(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    279 => {
                        __reduce279(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    280 => {
                        __reduce280(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    281 => {
                        __reduce281(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    282 => {
                        __reduce282(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    283 => {
                        __reduce283(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    284 => {
                        __reduce284(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    285 => {
                        __reduce285(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    286 => {
                        __reduce286(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    287 => {
                        __reduce287(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    288 => {
                        __reduce288(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    289 => {
                        __reduce289(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    290 => {
                        __reduce290(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    291 => {
                        __reduce291(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    292 => {
                        __reduce292(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    293 => {
                        __reduce293(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    294 => {
                        __reduce294(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    295 => {
                        __reduce295(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    296 => {
                        __reduce296(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    297 => {
                        __reduce297(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    298 => {
                        __reduce298(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    299 => {
                        __reduce299(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    300 => {
                        __reduce300(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    301 => {
                        __reduce301(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    302 => {
                        __reduce302(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    303 => {
                        __reduce303(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    304 => {
                        __reduce304(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    305 => {
                        __reduce305(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    306 => {
                        __reduce306(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    307 => {
                        __reduce307(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    308 => {
                        __reduce308(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    309 => {
                        __reduce309(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    310 => {
                        __reduce310(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    311 => {
                        __reduce311(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    312 => {
                        __reduce312(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    313 => {
                        __reduce313(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    314 => {
                        __reduce314(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    315 => {
                        __reduce315(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    316 => {
                        __reduce316(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    317 => {
                        __reduce317(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    318 => {
                        __reduce318(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    319 => {
                        __reduce319(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    320 => {
                        __reduce320(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    321 => {
                        __reduce321(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    322 => {
                        __reduce322(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    323 => {
                        __reduce323(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    324 => {
                        __reduce324(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    325 => {
                        __reduce325(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    326 => {
                        __reduce326(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    327 => {
                        __reduce327(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    328 => {
                        __reduce328(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    329 => {
                        __reduce329(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    330 => {
                        __reduce330(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    331 => {
                        __reduce331(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    332 => {
                        __reduce332(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    333 => {
                        __reduce333(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    334 => {
                        __reduce334(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    335 => {
                        __reduce335(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    336 => {
                        __reduce336(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    337 => {
                        __reduce337(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    338 => {
                        __reduce338(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    339 => {
                        __reduce339(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    340 => {
                        __reduce340(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    341 => {
                        __reduce341(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    342 => {
                        __reduce342(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    343 => {
                        __reduce343(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    344 => {
                        __reduce344(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    345 => {
                        __reduce345(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    346 => {
                        __reduce346(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    347 => {
                        __reduce347(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    348 => {
                        __reduce348(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    349 => {
                        __reduce349(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    350 => {
                        __reduce350(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    351 => {
                        __reduce351(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    352 => {
                        __reduce352(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    353 => {
                        __reduce353(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    354 => {
                        __reduce354(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    355 => {
                        __reduce355(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    356 => {
                        __reduce356(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    357 => {
                        __reduce357(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    358 => {
                        __reduce358(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    359 => {
                        __reduce359(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    360 => {
                        __reduce360(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    361 => {
                        __reduce361(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    362 => {
                        __reduce362(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    363 => {
                        __reduce363(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    364 => {
                        __reduce364(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    365 => {
                        __reduce365(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    366 => {
                        __reduce366(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    367 => {
                        __reduce367(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    368 => {
                        __reduce368(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    369 => {
                        __reduce369(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    370 => {
                        __reduce370(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    371 => {
                        __reduce371(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    372 => {
                        __reduce372(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    373 => {
                        __reduce373(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    374 => {
                        __reduce374(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    375 => {
                        __reduce375(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    376 => {
                        __reduce376(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    377 => {
                        __reduce377(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    378 => {
                        __reduce378(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    379 => {
                        __reduce379(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    380 => {
                        __reduce380(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    381 => {
                        __reduce381(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    382 => {
                        __reduce382(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    383 => {
                        __reduce383(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    384 => {
                        __reduce384(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    385 => {
                        __reduce385(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    386 => {
                        __reduce386(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    387 => {
                        __reduce387(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    388 => {
                        __reduce388(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    389 => {
                        __reduce389(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    390 => {
                        __reduce390(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    391 => {
                        __reduce391(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    392 => {
                        __reduce392(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    393 => {
                        __reduce393(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    394 => {
                        __reduce394(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    395 => {
                        __reduce395(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    396 => {
                        __reduce396(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    397 => {
                        __reduce397(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    398 => {
                        __reduce398(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    399 => {
                        __reduce399(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    400 => {
                        __reduce400(
                            errors,
                            db,
                            __lookahead_start,
                            __symbols,
                            core::marker::PhantomData::<(&(), &())>,
                        )
                    }
                    401 => {
                        let __sym0 = __pop_Variant40(__symbols);
                        let __start = __sym0.0;
                        let __end = __sym0.2;
                        let __nt = super::__action0(errors, db, __sym0);
                        return Some(Ok(__nt));
                    }
                    _ => {
                        ::core::panicking::panic_fmt(
                            format_args!("invalid action code {0}", __action),
                        );
                    }
                };
                let __states_len = __states.len();
                __states.truncate(__states_len - __pop_states);
                let __state = *__states.last().unwrap();
                let __next_state = __goto(__state, __nonterminal);
                __states.push(__next_state);
                None
            }
            #[inline(never)]
            fn __symbol_type_mismatch() -> ! {
                {
                    ::core::panicking::panic_fmt(format_args!("symbol type mismatch"));
                }
            }
            fn __pop_Variant11<'input>(
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
            ) -> (Location, (), Location) {
                match __symbols.pop() {
                    Some((__l, __Symbol::Variant11(__v), __r)) => (__l, __v, __r),
                    _ => __symbol_type_mismatch(),
                }
            }
            fn __pop_Variant46<'input>(
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
            ) -> (Location, (Spanned<Ident>, Block<Spanned<Node>>), Location) {
                match __symbols.pop() {
                    Some((__l, __Symbol::Variant46(__v), __r)) => (__l, __v, __r),
                    _ => __symbol_type_mismatch(),
                }
            }
            fn __pop_Variant7<'input>(
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
            ) -> (Location, (Token<'input>, Spanned<Ident>), Location) {
                match __symbols.pop() {
                    Some((__l, __Symbol::Variant7(__v), __r)) => (__l, __v, __r),
                    _ => __symbol_type_mismatch(),
                }
            }
            fn __pop_Variant9<'input>(
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
            ) -> (Location, (alloc::vec::Vec<Token<'input>>, Spanned<Node>), Location) {
                match __symbols.pop() {
                    Some((__l, __Symbol::Variant9(__v), __r)) => (__l, __v, __r),
                    _ => __symbol_type_mismatch(),
                }
            }
            fn __pop_Variant24<'input>(
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
            ) -> (Location, Block<Spanned<FieldDef>>, Location) {
                match __symbols.pop() {
                    Some((__l, __Symbol::Variant24(__v), __r)) => (__l, __v, __r),
                    _ => __symbol_type_mismatch(),
                }
            }
            fn __pop_Variant25<'input>(
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
            ) -> (Location, Block<Spanned<Node>>, Location) {
                match __symbols.pop() {
                    Some((__l, __Symbol::Variant25(__v), __r)) => (__l, __v, __r),
                    _ => __symbol_type_mismatch(),
                }
            }
            fn __pop_Variant26<'input>(
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
            ) -> (Location, Block<Spanned<Prototype>>, Location) {
                match __symbols.pop() {
                    Some((__l, __Symbol::Variant26(__v), __r)) => (__l, __v, __r),
                    _ => __symbol_type_mismatch(),
                }
            }
            fn __pop_Variant22<'input>(
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
            ) -> (Location, Location, Location) {
                match __symbols.pop() {
                    Some((__l, __Symbol::Variant22(__v), __r)) => (__l, __v, __r),
                    _ => __symbol_type_mismatch(),
                }
            }
            fn __pop_Variant40<'input>(
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
            ) -> (Location, Module, Location) {
                match __symbols.pop() {
                    Some((__l, __Symbol::Variant40(__v), __r)) => (__l, __v, __r),
                    _ => __symbol_type_mismatch(),
                }
            }
            fn __pop_Variant32<'input>(
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
            ) -> (Location, Node, Location) {
                match __symbols.pop() {
                    Some((__l, __Symbol::Variant32(__v), __r)) => (__l, __v, __r),
                    _ => __symbol_type_mismatch(),
                }
            }
            fn __pop_Variant14<'input>(
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
            ) -> (Location, Spanned<FieldDef>, Location) {
                match __symbols.pop() {
                    Some((__l, __Symbol::Variant14(__v), __r)) => (__l, __v, __r),
                    _ => __symbol_type_mismatch(),
                }
            }
            fn __pop_Variant16<'input>(
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
            ) -> (Location, Spanned<FnArg>, Location) {
                match __symbols.pop() {
                    Some((__l, __Symbol::Variant16(__v), __r)) => (__l, __v, __r),
                    _ => __symbol_type_mismatch(),
                }
            }
            fn __pop_Variant18<'input>(
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
            ) -> (Location, Spanned<Ident>, Location) {
                match __symbols.pop() {
                    Some((__l, __Symbol::Variant18(__v), __r)) => (__l, __v, __r),
                    _ => __symbol_type_mismatch(),
                }
            }
            fn __pop_Variant30<'input>(
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
            ) -> (Location, Spanned<Keyword>, Location) {
                match __symbols.pop() {
                    Some((__l, __Symbol::Variant30(__v), __r)) => (__l, __v, __r),
                    _ => __symbol_type_mismatch(),
                }
            }
            fn __pop_Variant36<'input>(
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
            ) -> (Location, Spanned<KeywordAndVisibility>, Location) {
                match __symbols.pop() {
                    Some((__l, __Symbol::Variant36(__v), __r)) => (__l, __v, __r),
                    _ => __symbol_type_mismatch(),
                }
            }
            fn __pop_Variant12<'input>(
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
            ) -> (Location, Spanned<Node>, Location) {
                match __symbols.pop() {
                    Some((__l, __Symbol::Variant12(__v), __r)) => (__l, __v, __r),
                    _ => __symbol_type_mismatch(),
                }
            }
            fn __pop_Variant20<'input>(
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
            ) -> (Location, Spanned<Prototype>, Location) {
                match __symbols.pop() {
                    Some((__l, __Symbol::Variant20(__v), __r)) => (__l, __v, __r),
                    _ => __symbol_type_mismatch(),
                }
            }
            fn __pop_Variant42<'input>(
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
            ) -> (Location, Spanned<Spanned<FieldDef>>, Location) {
                match __symbols.pop() {
                    Some((__l, __Symbol::Variant42(__v), __r)) => (__l, __v, __r),
                    _ => __symbol_type_mismatch(),
                }
            }
            fn __pop_Variant43<'input>(
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
            ) -> (Location, Spanned<Spanned<Node>>, Location) {
                match __symbols.pop() {
                    Some((__l, __Symbol::Variant43(__v), __r)) => (__l, __v, __r),
                    _ => __symbol_type_mismatch(),
                }
            }
            fn __pop_Variant41<'input>(
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
            ) -> (Location, Spanned<Token<'input>>, Location) {
                match __symbols.pop() {
                    Some((__l, __Symbol::Variant41(__v), __r)) => (__l, __v, __r),
                    _ => __symbol_type_mismatch(),
                }
            }
            fn __pop_Variant23<'input>(
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
            ) -> (Location, Spanned<Value>, Location) {
                match __symbols.pop() {
                    Some((__l, __Symbol::Variant23(__v), __r)) => (__l, __v, __r),
                    _ => __symbol_type_mismatch(),
                }
            }
            fn __pop_Variant44<'input>(
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
            ) -> (Location, Spanned<Vec<Spanned<Ident>>>, Location) {
                match __symbols.pop() {
                    Some((__l, __Symbol::Variant44(__v), __r)) => (__l, __v, __r),
                    _ => __symbol_type_mismatch(),
                }
            }
            fn __pop_Variant45<'input>(
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
            ) -> (Location, Spanned<Visibility>, Location) {
                match __symbols.pop() {
                    Some((__l, __Symbol::Variant45(__v), __r)) => (__l, __v, __r),
                    _ => __symbol_type_mismatch(),
                }
            }
            fn __pop_Variant0<'input>(
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
            ) -> (Location, Token<'input>, Location) {
                match __symbols.pop() {
                    Some((__l, __Symbol::Variant0(__v), __r)) => (__l, __v, __r),
                    _ => __symbol_type_mismatch(),
                }
            }
            fn __pop_Variant37<'input>(
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
            ) -> (Location, Vec<Spanned<FieldDef>>, Location) {
                match __symbols.pop() {
                    Some((__l, __Symbol::Variant37(__v), __r)) => (__l, __v, __r),
                    _ => __symbol_type_mismatch(),
                }
            }
            fn __pop_Variant28<'input>(
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
            ) -> (Location, Vec<Spanned<FnArg>>, Location) {
                match __symbols.pop() {
                    Some((__l, __Symbol::Variant28(__v), __r)) => (__l, __v, __r),
                    _ => __symbol_type_mismatch(),
                }
            }
            fn __pop_Variant29<'input>(
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
            ) -> (Location, Vec<Spanned<Ident>>, Location) {
                match __symbols.pop() {
                    Some((__l, __Symbol::Variant29(__v), __r)) => (__l, __v, __r),
                    _ => __symbol_type_mismatch(),
                }
            }
            fn __pop_Variant27<'input>(
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
            ) -> (Location, Vec<Spanned<Node>>, Location) {
                match __symbols.pop() {
                    Some((__l, __Symbol::Variant27(__v), __r)) => (__l, __v, __r),
                    _ => __symbol_type_mismatch(),
                }
            }
            fn __pop_Variant38<'input>(
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
            ) -> (Location, Vec<Spanned<Prototype>>, Location) {
                match __symbols.pop() {
                    Some((__l, __Symbol::Variant38(__v), __r)) => (__l, __v, __r),
                    _ => __symbol_type_mismatch(),
                }
            }
            fn __pop_Variant4<'input>(
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
            ) -> (
                Location,
                __lalrpop_util::ErrorRecovery<Location, Token<'input>, &'static str>,
                Location,
            ) {
                match __symbols.pop() {
                    Some((__l, __Symbol::Variant4(__v), __r)) => (__l, __v, __r),
                    _ => __symbol_type_mismatch(),
                }
            }
            fn __pop_Variant10<'input>(
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
            ) -> (
                Location,
                alloc::vec::Vec<(alloc::vec::Vec<Token<'input>>, Spanned<Node>)>,
                Location,
            ) {
                match __symbols.pop() {
                    Some((__l, __Symbol::Variant10(__v), __r)) => (__l, __v, __r),
                    _ => __symbol_type_mismatch(),
                }
            }
            fn __pop_Variant15<'input>(
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
            ) -> (Location, alloc::vec::Vec<Spanned<FieldDef>>, Location) {
                match __symbols.pop() {
                    Some((__l, __Symbol::Variant15(__v), __r)) => (__l, __v, __r),
                    _ => __symbol_type_mismatch(),
                }
            }
            fn __pop_Variant17<'input>(
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
            ) -> (Location, alloc::vec::Vec<Spanned<FnArg>>, Location) {
                match __symbols.pop() {
                    Some((__l, __Symbol::Variant17(__v), __r)) => (__l, __v, __r),
                    _ => __symbol_type_mismatch(),
                }
            }
            fn __pop_Variant19<'input>(
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
            ) -> (Location, alloc::vec::Vec<Spanned<Ident>>, Location) {
                match __symbols.pop() {
                    Some((__l, __Symbol::Variant19(__v), __r)) => (__l, __v, __r),
                    _ => __symbol_type_mismatch(),
                }
            }
            fn __pop_Variant13<'input>(
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
            ) -> (Location, alloc::vec::Vec<Spanned<Node>>, Location) {
                match __symbols.pop() {
                    Some((__l, __Symbol::Variant13(__v), __r)) => (__l, __v, __r),
                    _ => __symbol_type_mismatch(),
                }
            }
            fn __pop_Variant21<'input>(
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
            ) -> (Location, alloc::vec::Vec<Spanned<Prototype>>, Location) {
                match __symbols.pop() {
                    Some((__l, __Symbol::Variant21(__v), __r)) => (__l, __v, __r),
                    _ => __symbol_type_mismatch(),
                }
            }
            fn __pop_Variant5<'input>(
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
            ) -> (Location, alloc::vec::Vec<Token<'input>>, Location) {
                match __symbols.pop() {
                    Some((__l, __Symbol::Variant5(__v), __r)) => (__l, __v, __r),
                    _ => __symbol_type_mismatch(),
                }
            }
            fn __pop_Variant8<'input>(
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
            ) -> (
                Location,
                core::option::Option<(Token<'input>, Spanned<Ident>)>,
                Location,
            ) {
                match __symbols.pop() {
                    Some((__l, __Symbol::Variant8(__v), __r)) => (__l, __v, __r),
                    _ => __symbol_type_mismatch(),
                }
            }
            fn __pop_Variant33<'input>(
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
            ) -> (Location, core::option::Option<Spanned<FieldDef>>, Location) {
                match __symbols.pop() {
                    Some((__l, __Symbol::Variant33(__v), __r)) => (__l, __v, __r),
                    _ => __symbol_type_mismatch(),
                }
            }
            fn __pop_Variant34<'input>(
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
            ) -> (Location, core::option::Option<Spanned<FnArg>>, Location) {
                match __symbols.pop() {
                    Some((__l, __Symbol::Variant34(__v), __r)) => (__l, __v, __r),
                    _ => __symbol_type_mismatch(),
                }
            }
            fn __pop_Variant35<'input>(
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
            ) -> (Location, core::option::Option<Spanned<Ident>>, Location) {
                match __symbols.pop() {
                    Some((__l, __Symbol::Variant35(__v), __r)) => (__l, __v, __r),
                    _ => __symbol_type_mismatch(),
                }
            }
            fn __pop_Variant31<'input>(
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
            ) -> (Location, core::option::Option<Spanned<Node>>, Location) {
                match __symbols.pop() {
                    Some((__l, __Symbol::Variant31(__v), __r)) => (__l, __v, __r),
                    _ => __symbol_type_mismatch(),
                }
            }
            fn __pop_Variant39<'input>(
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
            ) -> (Location, core::option::Option<Spanned<Prototype>>, Location) {
                match __symbols.pop() {
                    Some((__l, __Symbol::Variant39(__v), __r)) => (__l, __v, __r),
                    _ => __symbol_type_mismatch(),
                }
            }
            fn __pop_Variant6<'input>(
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
            ) -> (Location, core::option::Option<Token<'input>>, Location) {
                match __symbols.pop() {
                    Some((__l, __Symbol::Variant6(__v), __r)) => (__l, __v, __r),
                    _ => __symbol_type_mismatch(),
                }
            }
            fn __pop_Variant2<'input>(
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
            ) -> (Location, f64, Location) {
                match __symbols.pop() {
                    Some((__l, __Symbol::Variant2(__v), __r)) => (__l, __v, __r),
                    _ => __symbol_type_mismatch(),
                }
            }
            fn __pop_Variant3<'input>(
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
            ) -> (Location, i64, Location) {
                match __symbols.pop() {
                    Some((__l, __Symbol::Variant3(__v), __r)) => (__l, __v, __r),
                    _ => __symbol_type_mismatch(),
                }
            }
            fn __pop_Variant1<'input>(
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
            ) -> (Location, &'input str, Location) {
                match __symbols.pop() {
                    Some((__l, __Symbol::Variant1(__v), __r)) => (__l, __v, __r),
                    _ => __symbol_type_mismatch(),
                }
            }
            fn __reduce0<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __start = __lookahead_start
                    .cloned()
                    .or_else(|| __symbols.last().map(|s| s.2))
                    .unwrap_or_default();
                let __end = __start;
                let __nt = super::__action73(errors, db, &__start, &__end);
                __symbols.push((__start, __Symbol::Variant5(__nt), __end));
                (0, 0)
            }
            fn __reduce1<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __sym0 = __pop_Variant5(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action74(errors, db, __sym0);
                __symbols.push((__start, __Symbol::Variant5(__nt), __end));
                (1, 0)
            }
            fn __reduce2<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action125(errors, db, __sym0);
                __symbols.push((__start, __Symbol::Variant5(__nt), __end));
                (1, 1)
            }
            fn __reduce3<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 2) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 2")
                }
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant5(__symbols);
                let __start = __sym0.0;
                let __end = __sym1.2;
                let __nt = super::__action126(errors, db, __sym0, __sym1);
                __symbols.push((__start, __Symbol::Variant5(__nt), __end));
                (2, 1)
            }
            fn __reduce4<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action123(errors, db, __sym0);
                __symbols.push((__start, __Symbol::Variant6(__nt), __end));
                (1, 2)
            }
            fn __reduce5<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __start = __lookahead_start
                    .cloned()
                    .or_else(|| __symbols.last().map(|s| s.2))
                    .unwrap_or_default();
                let __end = __start;
                let __nt = super::__action124(errors, db, &__start, &__end);
                __symbols.push((__start, __Symbol::Variant6(__nt), __end));
                (0, 2)
            }
            fn __reduce6<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 2) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 2")
                }
                let __sym1 = __pop_Variant18(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym1.2;
                let __nt = super::__action91(errors, db, __sym0, __sym1);
                __symbols.push((__start, __Symbol::Variant7(__nt), __end));
                (2, 3)
            }
            fn __reduce7<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 2) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 2")
                }
                let __sym1 = __pop_Variant18(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym1.2;
                let __nt = super::__action169(errors, db, __sym0, __sym1);
                __symbols.push((__start, __Symbol::Variant8(__nt), __end));
                (2, 4)
            }
            fn __reduce8<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __start = __lookahead_start
                    .cloned()
                    .or_else(|| __symbols.last().map(|s| s.2))
                    .unwrap_or_default();
                let __end = __start;
                let __nt = super::__action90(errors, db, &__start, &__end);
                __symbols.push((__start, __Symbol::Variant8(__nt), __end));
                (0, 4)
            }
            fn __reduce9<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __sym0 = __pop_Variant12(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action165(errors, db, __sym0);
                __symbols.push((__start, __Symbol::Variant9(__nt), __end));
                (1, 5)
            }
            fn __reduce10<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 2) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 2")
                }
                let __sym1 = __pop_Variant12(__symbols);
                let __sym0 = __pop_Variant5(__symbols);
                let __start = __sym0.0;
                let __end = __sym1.2;
                let __nt = super::__action166(errors, db, __sym0, __sym1);
                __symbols.push((__start, __Symbol::Variant9(__nt), __end));
                (2, 5)
            }
            fn __reduce11<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __start = __lookahead_start
                    .cloned()
                    .or_else(|| __symbols.last().map(|s| s.2))
                    .unwrap_or_default();
                let __end = __start;
                let __nt = super::__action70(errors, db, &__start, &__end);
                __symbols.push((__start, __Symbol::Variant10(__nt), __end));
                (0, 6)
            }
            fn __reduce12<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __sym0 = __pop_Variant10(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action71(errors, db, __sym0);
                __symbols.push((__start, __Symbol::Variant10(__nt), __end));
                (1, 6)
            }
            fn __reduce13<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __sym0 = __pop_Variant12(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action172(errors, db, __sym0);
                __symbols.push((__start, __Symbol::Variant10(__nt), __end));
                (1, 7)
            }
            fn __reduce14<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 2) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 2")
                }
                let __sym1 = __pop_Variant12(__symbols);
                let __sym0 = __pop_Variant5(__symbols);
                let __start = __sym0.0;
                let __end = __sym1.2;
                let __nt = super::__action173(errors, db, __sym0, __sym1);
                __symbols.push((__start, __Symbol::Variant10(__nt), __end));
                (2, 7)
            }
            fn __reduce15<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 2) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 2")
                }
                let __sym1 = __pop_Variant12(__symbols);
                let __sym0 = __pop_Variant10(__symbols);
                let __start = __sym0.0;
                let __end = __sym1.2;
                let __nt = super::__action174(errors, db, __sym0, __sym1);
                __symbols.push((__start, __Symbol::Variant10(__nt), __end));
                (2, 7)
            }
            fn __reduce16<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 3) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 3")
                }
                let __sym2 = __pop_Variant12(__symbols);
                let __sym1 = __pop_Variant5(__symbols);
                let __sym0 = __pop_Variant10(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = super::__action175(errors, db, __sym0, __sym1, __sym2);
                __symbols.push((__start, __Symbol::Variant10(__nt), __end));
                (3, 7)
            }
            fn __reduce17<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action167(errors, db, __sym0);
                __symbols.push((__start, __Symbol::Variant6(__nt), __end));
                (1, 8)
            }
            fn __reduce18<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __start = __lookahead_start
                    .cloned()
                    .or_else(|| __symbols.last().map(|s| s.2))
                    .unwrap_or_default();
                let __end = __start;
                let __nt = super::__action168(errors, db, &__start, &__end);
                __symbols.push((__start, __Symbol::Variant6(__nt), __end));
                (0, 8)
            }
            fn __reduce19<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 2) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 2")
                }
                let __sym1 = __pop_Variant18(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym1.2;
                let __nt = super::__action78(errors, db, __sym0, __sym1);
                __symbols.push((__start, __Symbol::Variant7(__nt), __end));
                (2, 9)
            }
            fn __reduce20<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 2) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 2")
                }
                let __sym1 = __pop_Variant18(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym1.2;
                let __nt = super::__action186(errors, db, __sym0, __sym1);
                __symbols.push((__start, __Symbol::Variant8(__nt), __end));
                (2, 10)
            }
            fn __reduce21<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __start = __lookahead_start
                    .cloned()
                    .or_else(|| __symbols.last().map(|s| s.2))
                    .unwrap_or_default();
                let __end = __start;
                let __nt = super::__action77(errors, db, &__start, &__end);
                __symbols.push((__start, __Symbol::Variant8(__nt), __end));
                (0, 10)
            }
            fn __reduce22<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __start = __lookahead_start
                    .cloned()
                    .or_else(|| __symbols.last().map(|s| s.2))
                    .unwrap_or_default();
                let __end = __start;
                let __nt = super::__action88(errors, db, &__start, &__end);
                __symbols.push((__start, __Symbol::Variant11(__nt), __end));
                (0, 11)
            }
            fn __reduce23<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 2) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 2")
                }
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant12(__symbols);
                let __start = __sym0.0;
                let __end = __sym1.2;
                let __nt = super::__action107(errors, db, __sym0, __sym1);
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (2, 12)
            }
            fn __reduce24<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __start = __lookahead_start
                    .cloned()
                    .or_else(|| __symbols.last().map(|s| s.2))
                    .unwrap_or_default();
                let __end = __start;
                let __nt = super::__action105(errors, db, &__start, &__end);
                __symbols.push((__start, __Symbol::Variant13(__nt), __end));
                (0, 13)
            }
            fn __reduce25<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __sym0 = __pop_Variant13(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action106(errors, db, __sym0);
                __symbols.push((__start, __Symbol::Variant13(__nt), __end));
                (1, 13)
            }
            fn __reduce26<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 2) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 2")
                }
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant12(__symbols);
                let __start = __sym0.0;
                let __end = __sym1.2;
                let __nt = super::__action190(errors, db, __sym0, __sym1);
                __symbols.push((__start, __Symbol::Variant13(__nt), __end));
                (2, 14)
            }
            fn __reduce27<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 3) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 3")
                }
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant12(__symbols);
                let __sym0 = __pop_Variant13(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = super::__action191(errors, db, __sym0, __sym1, __sym2);
                __symbols.push((__start, __Symbol::Variant13(__nt), __end));
                (3, 14)
            }
            fn __reduce28<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 2) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 2")
                }
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant14(__symbols);
                let __start = __sym0.0;
                let __end = __sym1.2;
                let __nt = super::__action138(errors, db, __sym0, __sym1);
                __symbols.push((__start, __Symbol::Variant14(__nt), __end));
                (2, 15)
            }
            fn __reduce29<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __start = __lookahead_start
                    .cloned()
                    .or_else(|| __symbols.last().map(|s| s.2))
                    .unwrap_or_default();
                let __end = __start;
                let __nt = super::__action136(errors, db, &__start, &__end);
                __symbols.push((__start, __Symbol::Variant15(__nt), __end));
                (0, 16)
            }
            fn __reduce30<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __sym0 = __pop_Variant15(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action137(errors, db, __sym0);
                __symbols.push((__start, __Symbol::Variant15(__nt), __end));
                (1, 16)
            }
            fn __reduce31<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 2) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 2")
                }
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant14(__symbols);
                let __start = __sym0.0;
                let __end = __sym1.2;
                let __nt = super::__action194(errors, db, __sym0, __sym1);
                __symbols.push((__start, __Symbol::Variant15(__nt), __end));
                (2, 17)
            }
            fn __reduce32<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 3) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 3")
                }
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant14(__symbols);
                let __sym0 = __pop_Variant15(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = super::__action195(errors, db, __sym0, __sym1, __sym2);
                __symbols.push((__start, __Symbol::Variant15(__nt), __end));
                (3, 17)
            }
            fn __reduce33<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 2) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 2")
                }
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant16(__symbols);
                let __start = __sym0.0;
                let __end = __sym1.2;
                let __nt = super::__action112(errors, db, __sym0, __sym1);
                __symbols.push((__start, __Symbol::Variant16(__nt), __end));
                (2, 18)
            }
            fn __reduce34<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __start = __lookahead_start
                    .cloned()
                    .or_else(|| __symbols.last().map(|s| s.2))
                    .unwrap_or_default();
                let __end = __start;
                let __nt = super::__action110(errors, db, &__start, &__end);
                __symbols.push((__start, __Symbol::Variant17(__nt), __end));
                (0, 19)
            }
            fn __reduce35<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __sym0 = __pop_Variant17(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action111(errors, db, __sym0);
                __symbols.push((__start, __Symbol::Variant17(__nt), __end));
                (1, 19)
            }
            fn __reduce36<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 2) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 2")
                }
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant16(__symbols);
                let __start = __sym0.0;
                let __end = __sym1.2;
                let __nt = super::__action198(errors, db, __sym0, __sym1);
                __symbols.push((__start, __Symbol::Variant17(__nt), __end));
                (2, 20)
            }
            fn __reduce37<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 3) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 3")
                }
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant16(__symbols);
                let __sym0 = __pop_Variant17(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = super::__action199(errors, db, __sym0, __sym1, __sym2);
                __symbols.push((__start, __Symbol::Variant17(__nt), __end));
                (3, 20)
            }
            fn __reduce38<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 2) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 2")
                }
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant12(__symbols);
                let __start = __sym0.0;
                let __end = __sym1.2;
                let __nt = super::__action133(errors, db, __sym0, __sym1);
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (2, 21)
            }
            fn __reduce39<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __start = __lookahead_start
                    .cloned()
                    .or_else(|| __symbols.last().map(|s| s.2))
                    .unwrap_or_default();
                let __end = __start;
                let __nt = super::__action131(errors, db, &__start, &__end);
                __symbols.push((__start, __Symbol::Variant13(__nt), __end));
                (0, 22)
            }
            fn __reduce40<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __sym0 = __pop_Variant13(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action132(errors, db, __sym0);
                __symbols.push((__start, __Symbol::Variant13(__nt), __end));
                (1, 22)
            }
            fn __reduce41<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 2) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 2")
                }
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant12(__symbols);
                let __start = __sym0.0;
                let __end = __sym1.2;
                let __nt = super::__action202(errors, db, __sym0, __sym1);
                __symbols.push((__start, __Symbol::Variant13(__nt), __end));
                (2, 23)
            }
            fn __reduce42<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 3) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 3")
                }
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant12(__symbols);
                let __sym0 = __pop_Variant13(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = super::__action203(errors, db, __sym0, __sym1, __sym2);
                __symbols.push((__start, __Symbol::Variant13(__nt), __end));
                (3, 23)
            }
            fn __reduce43<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 2) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 2")
                }
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant18(__symbols);
                let __start = __sym0.0;
                let __end = __sym1.2;
                let __nt = super::__action118(errors, db, __sym0, __sym1);
                __symbols.push((__start, __Symbol::Variant18(__nt), __end));
                (2, 24)
            }
            fn __reduce44<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __start = __lookahead_start
                    .cloned()
                    .or_else(|| __symbols.last().map(|s| s.2))
                    .unwrap_or_default();
                let __end = __start;
                let __nt = super::__action116(errors, db, &__start, &__end);
                __symbols.push((__start, __Symbol::Variant19(__nt), __end));
                (0, 25)
            }
            fn __reduce45<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __sym0 = __pop_Variant19(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action117(errors, db, __sym0);
                __symbols.push((__start, __Symbol::Variant19(__nt), __end));
                (1, 25)
            }
            fn __reduce46<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 2) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 2")
                }
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant18(__symbols);
                let __start = __sym0.0;
                let __end = __sym1.2;
                let __nt = super::__action206(errors, db, __sym0, __sym1);
                __symbols.push((__start, __Symbol::Variant19(__nt), __end));
                (2, 26)
            }
            fn __reduce47<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 3) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 3")
                }
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant18(__symbols);
                let __sym0 = __pop_Variant19(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = super::__action207(errors, db, __sym0, __sym1, __sym2);
                __symbols.push((__start, __Symbol::Variant19(__nt), __end));
                (3, 26)
            }
            fn __reduce48<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 2) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 2")
                }
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant18(__symbols);
                let __start = __sym0.0;
                let __end = __sym1.2;
                let __nt = super::__action102(errors, db, __sym0, __sym1);
                __symbols.push((__start, __Symbol::Variant18(__nt), __end));
                (2, 27)
            }
            fn __reduce49<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __start = __lookahead_start
                    .cloned()
                    .or_else(|| __symbols.last().map(|s| s.2))
                    .unwrap_or_default();
                let __end = __start;
                let __nt = super::__action100(errors, db, &__start, &__end);
                __symbols.push((__start, __Symbol::Variant19(__nt), __end));
                (0, 28)
            }
            fn __reduce50<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __sym0 = __pop_Variant19(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action101(errors, db, __sym0);
                __symbols.push((__start, __Symbol::Variant19(__nt), __end));
                (1, 28)
            }
            fn __reduce51<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 2) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 2")
                }
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant18(__symbols);
                let __start = __sym0.0;
                let __end = __sym1.2;
                let __nt = super::__action210(errors, db, __sym0, __sym1);
                __symbols.push((__start, __Symbol::Variant19(__nt), __end));
                (2, 29)
            }
            fn __reduce52<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 3) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 3")
                }
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant18(__symbols);
                let __sym0 = __pop_Variant19(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = super::__action211(errors, db, __sym0, __sym1, __sym2);
                __symbols.push((__start, __Symbol::Variant19(__nt), __end));
                (3, 29)
            }
            fn __reduce53<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 2) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 2")
                }
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant20(__symbols);
                let __start = __sym0.0;
                let __end = __sym1.2;
                let __nt = super::__action143(errors, db, __sym0, __sym1);
                __symbols.push((__start, __Symbol::Variant20(__nt), __end));
                (2, 30)
            }
            fn __reduce54<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __start = __lookahead_start
                    .cloned()
                    .or_else(|| __symbols.last().map(|s| s.2))
                    .unwrap_or_default();
                let __end = __start;
                let __nt = super::__action141(errors, db, &__start, &__end);
                __symbols.push((__start, __Symbol::Variant21(__nt), __end));
                (0, 31)
            }
            fn __reduce55<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __sym0 = __pop_Variant21(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action142(errors, db, __sym0);
                __symbols.push((__start, __Symbol::Variant21(__nt), __end));
                (1, 31)
            }
            fn __reduce56<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 2) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 2")
                }
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant20(__symbols);
                let __start = __sym0.0;
                let __end = __sym1.2;
                let __nt = super::__action214(errors, db, __sym0, __sym1);
                __symbols.push((__start, __Symbol::Variant21(__nt), __end));
                (2, 32)
            }
            fn __reduce57<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 3) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 3")
                }
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant20(__symbols);
                let __sym0 = __pop_Variant21(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = super::__action215(errors, db, __sym0, __sym1, __sym2);
                __symbols.push((__start, __Symbol::Variant21(__nt), __end));
                (3, 32)
            }
            fn __reduce58<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 2) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 2")
                }
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant12(__symbols);
                let __start = __sym0.0;
                let __end = __sym1.2;
                let __nt = super::__action150(errors, db, __sym0, __sym1);
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (2, 33)
            }
            fn __reduce59<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __start = __lookahead_start
                    .cloned()
                    .or_else(|| __symbols.last().map(|s| s.2))
                    .unwrap_or_default();
                let __end = __start;
                let __nt = super::__action148(errors, db, &__start, &__end);
                __symbols.push((__start, __Symbol::Variant13(__nt), __end));
                (0, 34)
            }
            fn __reduce60<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __sym0 = __pop_Variant13(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action149(errors, db, __sym0);
                __symbols.push((__start, __Symbol::Variant13(__nt), __end));
                (1, 34)
            }
            fn __reduce61<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 2) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 2")
                }
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant12(__symbols);
                let __start = __sym0.0;
                let __end = __sym1.2;
                let __nt = super::__action218(errors, db, __sym0, __sym1);
                __symbols.push((__start, __Symbol::Variant13(__nt), __end));
                (2, 35)
            }
            fn __reduce62<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 3) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 3")
                }
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant12(__symbols);
                let __sym0 = __pop_Variant13(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = super::__action219(errors, db, __sym0, __sym1, __sym2);
                __symbols.push((__start, __Symbol::Variant13(__nt), __end));
                (3, 35)
            }
            fn __reduce63<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __start = __lookahead_start
                    .cloned()
                    .or_else(|| __symbols.last().map(|s| s.2))
                    .unwrap_or_default();
                let __end = __start;
                let __nt = super::__action99(errors, db, &__start, &__end);
                __symbols.push((__start, __Symbol::Variant22(__nt), __end));
                (0, 36)
            }
            fn __reduce64<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __start = __lookahead_start
                    .cloned()
                    .or_else(|| __symbols.last().map(|s| s.2))
                    .unwrap_or_default();
                let __end = __start;
                let __nt = super::__action98(errors, db, &__start, &__end);
                __symbols.push((__start, __Symbol::Variant22(__nt), __end));
                (0, 37)
            }
            fn __reduce65<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __sym0 = __pop_Variant18(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action22(errors, db, __sym0);
                __symbols.push((__start, __Symbol::Variant23(__nt), __end));
                (1, 38)
            }
            fn __reduce66<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __sym0 = __pop_Variant23(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action23(errors, db, __sym0);
                __symbols.push((__start, __Symbol::Variant23(__nt), __end));
                (1, 38)
            }
            fn __reduce67<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __sym0 = __pop_Variant3(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action268(errors, db, __sym0);
                __symbols.push((__start, __Symbol::Variant23(__nt), __end));
                (1, 39)
            }
            fn __reduce68<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __sym0 = __pop_Variant2(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action269(errors, db, __sym0);
                __symbols.push((__start, __Symbol::Variant23(__nt), __end));
                (1, 39)
            }
            fn __reduce69<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __sym0 = __pop_Variant1(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action270(errors, db, __sym0);
                __symbols.push((__start, __Symbol::Variant23(__nt), __end));
                (1, 39)
            }
            fn __reduce70<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 4) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 4")
                }
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant14(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym3.2;
                let __nt = super::__action319(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                );
                __symbols.push((__start, __Symbol::Variant24(__nt), __end));
                (4, 40)
            }
            fn __reduce71<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 3) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 3")
                }
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = super::__action320(errors, db, __sym0, __sym1, __sym2);
                __symbols.push((__start, __Symbol::Variant24(__nt), __end));
                (3, 40)
            }
            fn __reduce72<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 5) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 5")
                }
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant14(__symbols);
                let __sym2 = __pop_Variant15(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym4.2;
                let __nt = super::__action321(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                );
                __symbols.push((__start, __Symbol::Variant24(__nt), __end));
                (5, 40)
            }
            fn __reduce73<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 4) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 4")
                }
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant15(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym3.2;
                let __nt = super::__action322(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                );
                __symbols.push((__start, __Symbol::Variant24(__nt), __end));
                (4, 40)
            }
            fn __reduce74<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 3) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 3")
                }
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant14(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = super::__action323(errors, db, __sym0, __sym1, __sym2);
                __symbols.push((__start, __Symbol::Variant24(__nt), __end));
                (3, 40)
            }
            fn __reduce75<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 2) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 2")
                }
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym1.2;
                let __nt = super::__action324(errors, db, __sym0, __sym1);
                __symbols.push((__start, __Symbol::Variant24(__nt), __end));
                (2, 40)
            }
            fn __reduce76<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 4) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 4")
                }
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant14(__symbols);
                let __sym1 = __pop_Variant15(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym3.2;
                let __nt = super::__action325(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                );
                __symbols.push((__start, __Symbol::Variant24(__nt), __end));
                (4, 40)
            }
            fn __reduce77<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 3) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 3")
                }
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant15(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = super::__action326(errors, db, __sym0, __sym1, __sym2);
                __symbols.push((__start, __Symbol::Variant24(__nt), __end));
                (3, 40)
            }
            fn __reduce78<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 4) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 4")
                }
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant12(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym3.2;
                let __nt = super::__action339(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                );
                __symbols.push((__start, __Symbol::Variant25(__nt), __end));
                (4, 41)
            }
            fn __reduce79<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 3) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 3")
                }
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = super::__action340(errors, db, __sym0, __sym1, __sym2);
                __symbols.push((__start, __Symbol::Variant25(__nt), __end));
                (3, 41)
            }
            fn __reduce80<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 5) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 5")
                }
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant12(__symbols);
                let __sym2 = __pop_Variant13(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym4.2;
                let __nt = super::__action341(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                );
                __symbols.push((__start, __Symbol::Variant25(__nt), __end));
                (5, 41)
            }
            fn __reduce81<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 4) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 4")
                }
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant13(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym3.2;
                let __nt = super::__action342(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                );
                __symbols.push((__start, __Symbol::Variant25(__nt), __end));
                (4, 41)
            }
            fn __reduce82<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 3) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 3")
                }
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant12(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = super::__action343(errors, db, __sym0, __sym1, __sym2);
                __symbols.push((__start, __Symbol::Variant25(__nt), __end));
                (3, 41)
            }
            fn __reduce83<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 2) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 2")
                }
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym1.2;
                let __nt = super::__action344(errors, db, __sym0, __sym1);
                __symbols.push((__start, __Symbol::Variant25(__nt), __end));
                (2, 41)
            }
            fn __reduce84<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 4) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 4")
                }
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant12(__symbols);
                let __sym1 = __pop_Variant13(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym3.2;
                let __nt = super::__action345(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                );
                __symbols.push((__start, __Symbol::Variant25(__nt), __end));
                (4, 41)
            }
            fn __reduce85<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 3) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 3")
                }
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant13(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = super::__action346(errors, db, __sym0, __sym1, __sym2);
                __symbols.push((__start, __Symbol::Variant25(__nt), __end));
                (3, 41)
            }
            fn __reduce86<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 4) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 4")
                }
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant20(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym3.2;
                let __nt = super::__action367(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                );
                __symbols.push((__start, __Symbol::Variant26(__nt), __end));
                (4, 42)
            }
            fn __reduce87<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 3) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 3")
                }
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = super::__action368(errors, db, __sym0, __sym1, __sym2);
                __symbols.push((__start, __Symbol::Variant26(__nt), __end));
                (3, 42)
            }
            fn __reduce88<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 5) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 5")
                }
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant20(__symbols);
                let __sym2 = __pop_Variant21(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym4.2;
                let __nt = super::__action369(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                );
                __symbols.push((__start, __Symbol::Variant26(__nt), __end));
                (5, 42)
            }
            fn __reduce89<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 4) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 4")
                }
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant21(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym3.2;
                let __nt = super::__action370(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                );
                __symbols.push((__start, __Symbol::Variant26(__nt), __end));
                (4, 42)
            }
            fn __reduce90<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 3) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 3")
                }
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant20(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = super::__action371(errors, db, __sym0, __sym1, __sym2);
                __symbols.push((__start, __Symbol::Variant26(__nt), __end));
                (3, 42)
            }
            fn __reduce91<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 2) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 2")
                }
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym1.2;
                let __nt = super::__action372(errors, db, __sym0, __sym1);
                __symbols.push((__start, __Symbol::Variant26(__nt), __end));
                (2, 42)
            }
            fn __reduce92<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 4) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 4")
                }
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant20(__symbols);
                let __sym1 = __pop_Variant21(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym3.2;
                let __nt = super::__action373(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                );
                __symbols.push((__start, __Symbol::Variant26(__nt), __end));
                (4, 42)
            }
            fn __reduce93<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 3) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 3")
                }
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant21(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = super::__action374(errors, db, __sym0, __sym1, __sym2);
                __symbols.push((__start, __Symbol::Variant26(__nt), __end));
                (3, 42)
            }
            fn __reduce94<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 4) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 4")
                }
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant12(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym3.2;
                let __nt = super::__action387(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                );
                __symbols.push((__start, __Symbol::Variant25(__nt), __end));
                (4, 43)
            }
            fn __reduce95<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 3) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 3")
                }
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = super::__action388(errors, db, __sym0, __sym1, __sym2);
                __symbols.push((__start, __Symbol::Variant25(__nt), __end));
                (3, 43)
            }
            fn __reduce96<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 5) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 5")
                }
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant12(__symbols);
                let __sym2 = __pop_Variant13(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym4.2;
                let __nt = super::__action389(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                );
                __symbols.push((__start, __Symbol::Variant25(__nt), __end));
                (5, 43)
            }
            fn __reduce97<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 4) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 4")
                }
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant13(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym3.2;
                let __nt = super::__action390(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                );
                __symbols.push((__start, __Symbol::Variant25(__nt), __end));
                (4, 43)
            }
            fn __reduce98<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 3) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 3")
                }
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant12(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = super::__action391(errors, db, __sym0, __sym1, __sym2);
                __symbols.push((__start, __Symbol::Variant25(__nt), __end));
                (3, 43)
            }
            fn __reduce99<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 2) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 2")
                }
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym1.2;
                let __nt = super::__action392(errors, db, __sym0, __sym1);
                __symbols.push((__start, __Symbol::Variant25(__nt), __end));
                (2, 43)
            }
            fn __reduce100<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 4) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 4")
                }
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant12(__symbols);
                let __sym1 = __pop_Variant13(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym3.2;
                let __nt = super::__action393(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                );
                __symbols.push((__start, __Symbol::Variant25(__nt), __end));
                (4, 43)
            }
            fn __reduce101<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 3) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 3")
                }
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant13(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = super::__action394(errors, db, __sym0, __sym1, __sym2);
                __symbols.push((__start, __Symbol::Variant25(__nt), __end));
                (3, 43)
            }
            fn __reduce102<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __sym0 = __pop_Variant12(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action483(errors, db, __sym0);
                __symbols.push((__start, __Symbol::Variant27(__nt), __end));
                (1, 44)
            }
            fn __reduce103<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __start = __lookahead_start
                    .cloned()
                    .or_else(|| __symbols.last().map(|s| s.2))
                    .unwrap_or_default();
                let __end = __start;
                let __nt = super::__action484(errors, db, &__start, &__end);
                __symbols.push((__start, __Symbol::Variant27(__nt), __end));
                (0, 44)
            }
            fn __reduce104<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 2) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 2")
                }
                let __sym1 = __pop_Variant12(__symbols);
                let __sym0 = __pop_Variant13(__symbols);
                let __start = __sym0.0;
                let __end = __sym1.2;
                let __nt = super::__action485(errors, db, __sym0, __sym1);
                __symbols.push((__start, __Symbol::Variant27(__nt), __end));
                (2, 44)
            }
            fn __reduce105<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __sym0 = __pop_Variant13(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action486(errors, db, __sym0);
                __symbols.push((__start, __Symbol::Variant27(__nt), __end));
                (1, 44)
            }
            fn __reduce106<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __sym0 = __pop_Variant16(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action491(errors, db, __sym0);
                __symbols.push((__start, __Symbol::Variant28(__nt), __end));
                (1, 45)
            }
            fn __reduce107<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __start = __lookahead_start
                    .cloned()
                    .or_else(|| __symbols.last().map(|s| s.2))
                    .unwrap_or_default();
                let __end = __start;
                let __nt = super::__action492(errors, db, &__start, &__end);
                __symbols.push((__start, __Symbol::Variant28(__nt), __end));
                (0, 45)
            }
            fn __reduce108<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 2) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 2")
                }
                let __sym1 = __pop_Variant16(__symbols);
                let __sym0 = __pop_Variant17(__symbols);
                let __start = __sym0.0;
                let __end = __sym1.2;
                let __nt = super::__action493(errors, db, __sym0, __sym1);
                __symbols.push((__start, __Symbol::Variant28(__nt), __end));
                (2, 45)
            }
            fn __reduce109<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __sym0 = __pop_Variant17(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action494(errors, db, __sym0);
                __symbols.push((__start, __Symbol::Variant28(__nt), __end));
                (1, 45)
            }
            fn __reduce110<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __sym0 = __pop_Variant18(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action503(errors, db, __sym0);
                __symbols.push((__start, __Symbol::Variant29(__nt), __end));
                (1, 46)
            }
            fn __reduce111<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __start = __lookahead_start
                    .cloned()
                    .or_else(|| __symbols.last().map(|s| s.2))
                    .unwrap_or_default();
                let __end = __start;
                let __nt = super::__action504(errors, db, &__start, &__end);
                __symbols.push((__start, __Symbol::Variant29(__nt), __end));
                (0, 46)
            }
            fn __reduce112<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 2) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 2")
                }
                let __sym1 = __pop_Variant18(__symbols);
                let __sym0 = __pop_Variant19(__symbols);
                let __start = __sym0.0;
                let __end = __sym1.2;
                let __nt = super::__action505(errors, db, __sym0, __sym1);
                __symbols.push((__start, __Symbol::Variant29(__nt), __end));
                (2, 46)
            }
            fn __reduce113<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __sym0 = __pop_Variant19(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action506(errors, db, __sym0);
                __symbols.push((__start, __Symbol::Variant29(__nt), __end));
                (1, 46)
            }
            fn __reduce114<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action271(errors, db, __sym0);
                __symbols.push((__start, __Symbol::Variant30(__nt), __end));
                (1, 47)
            }
            fn __reduce115<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 8) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 8")
                }
                let __sym7 = __pop_Variant0(__symbols);
                let __sym6 = __pop_Variant20(__symbols);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant18(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant18(__symbols);
                let __sym0 = __pop_Variant36(__symbols);
                let __start = __sym0.0;
                let __end = __sym7.2;
                let __nt = super::__action555(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                    __sym7,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (8, 48)
            }
            fn __reduce116<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 7) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 7")
                }
                let __sym6 = __pop_Variant0(__symbols);
                let __sym5 = __pop_Variant20(__symbols);
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant18(__symbols);
                let __sym0 = __pop_Variant36(__symbols);
                let __start = __sym0.0;
                let __end = __sym6.2;
                let __nt = super::__action556(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (7, 48)
            }
            fn __reduce117<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 9) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 9")
                }
                let __sym8 = __pop_Variant0(__symbols);
                let __sym7 = __pop_Variant20(__symbols);
                let __sym6 = __pop_Variant0(__symbols);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant18(__symbols);
                let __sym3 = __pop_Variant19(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant18(__symbols);
                let __sym0 = __pop_Variant36(__symbols);
                let __start = __sym0.0;
                let __end = __sym8.2;
                let __nt = super::__action557(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                    __sym7,
                    __sym8,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (9, 48)
            }
            fn __reduce118<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 8) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 8")
                }
                let __sym7 = __pop_Variant0(__symbols);
                let __sym6 = __pop_Variant20(__symbols);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant19(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant18(__symbols);
                let __sym0 = __pop_Variant36(__symbols);
                let __start = __sym0.0;
                let __end = __sym7.2;
                let __nt = super::__action558(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                    __sym7,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (8, 48)
            }
            fn __reduce119<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 7) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 7")
                }
                let __sym6 = __pop_Variant0(__symbols);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant18(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant18(__symbols);
                let __sym0 = __pop_Variant36(__symbols);
                let __start = __sym0.0;
                let __end = __sym6.2;
                let __nt = super::__action559(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (7, 48)
            }
            fn __reduce120<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 6) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 6")
                }
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant18(__symbols);
                let __sym0 = __pop_Variant36(__symbols);
                let __start = __sym0.0;
                let __end = __sym5.2;
                let __nt = super::__action560(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (6, 48)
            }
            fn __reduce121<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 8) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 8")
                }
                let __sym7 = __pop_Variant0(__symbols);
                let __sym6 = __pop_Variant0(__symbols);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant18(__symbols);
                let __sym3 = __pop_Variant19(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant18(__symbols);
                let __sym0 = __pop_Variant36(__symbols);
                let __start = __sym0.0;
                let __end = __sym7.2;
                let __nt = super::__action561(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                    __sym7,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (8, 48)
            }
            fn __reduce122<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 7) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 7")
                }
                let __sym6 = __pop_Variant0(__symbols);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant19(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant18(__symbols);
                let __sym0 = __pop_Variant36(__symbols);
                let __start = __sym0.0;
                let __end = __sym6.2;
                let __nt = super::__action562(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (7, 48)
            }
            fn __reduce123<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 9) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 9")
                }
                let __sym8 = __pop_Variant0(__symbols);
                let __sym7 = __pop_Variant20(__symbols);
                let __sym6 = __pop_Variant21(__symbols);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant18(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant18(__symbols);
                let __sym0 = __pop_Variant36(__symbols);
                let __start = __sym0.0;
                let __end = __sym8.2;
                let __nt = super::__action563(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                    __sym7,
                    __sym8,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (9, 48)
            }
            fn __reduce124<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 8) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 8")
                }
                let __sym7 = __pop_Variant0(__symbols);
                let __sym6 = __pop_Variant20(__symbols);
                let __sym5 = __pop_Variant21(__symbols);
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant18(__symbols);
                let __sym0 = __pop_Variant36(__symbols);
                let __start = __sym0.0;
                let __end = __sym7.2;
                let __nt = super::__action564(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                    __sym7,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (8, 48)
            }
            fn __reduce125<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 10) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 10")
                }
                let __sym9 = __pop_Variant0(__symbols);
                let __sym8 = __pop_Variant20(__symbols);
                let __sym7 = __pop_Variant21(__symbols);
                let __sym6 = __pop_Variant0(__symbols);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant18(__symbols);
                let __sym3 = __pop_Variant19(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant18(__symbols);
                let __sym0 = __pop_Variant36(__symbols);
                let __start = __sym0.0;
                let __end = __sym9.2;
                let __nt = super::__action565(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                    __sym7,
                    __sym8,
                    __sym9,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (10, 48)
            }
            fn __reduce126<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 9) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 9")
                }
                let __sym8 = __pop_Variant0(__symbols);
                let __sym7 = __pop_Variant20(__symbols);
                let __sym6 = __pop_Variant21(__symbols);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant19(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant18(__symbols);
                let __sym0 = __pop_Variant36(__symbols);
                let __start = __sym0.0;
                let __end = __sym8.2;
                let __nt = super::__action566(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                    __sym7,
                    __sym8,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (9, 48)
            }
            fn __reduce127<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 8) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 8")
                }
                let __sym7 = __pop_Variant0(__symbols);
                let __sym6 = __pop_Variant21(__symbols);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant18(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant18(__symbols);
                let __sym0 = __pop_Variant36(__symbols);
                let __start = __sym0.0;
                let __end = __sym7.2;
                let __nt = super::__action567(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                    __sym7,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (8, 48)
            }
            fn __reduce128<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 7) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 7")
                }
                let __sym6 = __pop_Variant0(__symbols);
                let __sym5 = __pop_Variant21(__symbols);
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant18(__symbols);
                let __sym0 = __pop_Variant36(__symbols);
                let __start = __sym0.0;
                let __end = __sym6.2;
                let __nt = super::__action568(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (7, 48)
            }
            fn __reduce129<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 9) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 9")
                }
                let __sym8 = __pop_Variant0(__symbols);
                let __sym7 = __pop_Variant21(__symbols);
                let __sym6 = __pop_Variant0(__symbols);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant18(__symbols);
                let __sym3 = __pop_Variant19(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant18(__symbols);
                let __sym0 = __pop_Variant36(__symbols);
                let __start = __sym0.0;
                let __end = __sym8.2;
                let __nt = super::__action569(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                    __sym7,
                    __sym8,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (9, 48)
            }
            fn __reduce130<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 8) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 8")
                }
                let __sym7 = __pop_Variant0(__symbols);
                let __sym6 = __pop_Variant21(__symbols);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant19(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant18(__symbols);
                let __sym0 = __pop_Variant36(__symbols);
                let __start = __sym0.0;
                let __end = __sym7.2;
                let __nt = super::__action570(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                    __sym7,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (8, 48)
            }
            fn __reduce131<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 7) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 7")
                }
                let __sym6 = __pop_Variant0(__symbols);
                let __sym5 = __pop_Variant20(__symbols);
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant18(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant18(__symbols);
                let __sym0 = __pop_Variant36(__symbols);
                let __start = __sym0.0;
                let __end = __sym6.2;
                let __nt = super::__action571(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (7, 48)
            }
            fn __reduce132<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 6) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 6")
                }
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant20(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant18(__symbols);
                let __sym0 = __pop_Variant36(__symbols);
                let __start = __sym0.0;
                let __end = __sym5.2;
                let __nt = super::__action572(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (6, 48)
            }
            fn __reduce133<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 8) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 8")
                }
                let __sym7 = __pop_Variant0(__symbols);
                let __sym6 = __pop_Variant20(__symbols);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant18(__symbols);
                let __sym3 = __pop_Variant19(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant18(__symbols);
                let __sym0 = __pop_Variant36(__symbols);
                let __start = __sym0.0;
                let __end = __sym7.2;
                let __nt = super::__action573(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                    __sym7,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (8, 48)
            }
            fn __reduce134<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 7) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 7")
                }
                let __sym6 = __pop_Variant0(__symbols);
                let __sym5 = __pop_Variant20(__symbols);
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant19(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant18(__symbols);
                let __sym0 = __pop_Variant36(__symbols);
                let __start = __sym0.0;
                let __end = __sym6.2;
                let __nt = super::__action574(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (7, 48)
            }
            fn __reduce135<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 6) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 6")
                }
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant18(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant18(__symbols);
                let __sym0 = __pop_Variant36(__symbols);
                let __start = __sym0.0;
                let __end = __sym5.2;
                let __nt = super::__action575(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (6, 48)
            }
            fn __reduce136<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 5) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 5")
                }
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant18(__symbols);
                let __sym0 = __pop_Variant36(__symbols);
                let __start = __sym0.0;
                let __end = __sym4.2;
                let __nt = super::__action576(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (5, 48)
            }
            fn __reduce137<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 7) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 7")
                }
                let __sym6 = __pop_Variant0(__symbols);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant18(__symbols);
                let __sym3 = __pop_Variant19(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant18(__symbols);
                let __sym0 = __pop_Variant36(__symbols);
                let __start = __sym0.0;
                let __end = __sym6.2;
                let __nt = super::__action577(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (7, 48)
            }
            fn __reduce138<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 6) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 6")
                }
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant19(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant18(__symbols);
                let __sym0 = __pop_Variant36(__symbols);
                let __start = __sym0.0;
                let __end = __sym5.2;
                let __nt = super::__action578(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (6, 48)
            }
            fn __reduce139<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 8) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 8")
                }
                let __sym7 = __pop_Variant0(__symbols);
                let __sym6 = __pop_Variant20(__symbols);
                let __sym5 = __pop_Variant21(__symbols);
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant18(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant18(__symbols);
                let __sym0 = __pop_Variant36(__symbols);
                let __start = __sym0.0;
                let __end = __sym7.2;
                let __nt = super::__action579(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                    __sym7,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (8, 48)
            }
            fn __reduce140<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 7) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 7")
                }
                let __sym6 = __pop_Variant0(__symbols);
                let __sym5 = __pop_Variant20(__symbols);
                let __sym4 = __pop_Variant21(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant18(__symbols);
                let __sym0 = __pop_Variant36(__symbols);
                let __start = __sym0.0;
                let __end = __sym6.2;
                let __nt = super::__action580(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (7, 48)
            }
            fn __reduce141<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 9) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 9")
                }
                let __sym8 = __pop_Variant0(__symbols);
                let __sym7 = __pop_Variant20(__symbols);
                let __sym6 = __pop_Variant21(__symbols);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant18(__symbols);
                let __sym3 = __pop_Variant19(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant18(__symbols);
                let __sym0 = __pop_Variant36(__symbols);
                let __start = __sym0.0;
                let __end = __sym8.2;
                let __nt = super::__action581(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                    __sym7,
                    __sym8,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (9, 48)
            }
            fn __reduce142<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 8) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 8")
                }
                let __sym7 = __pop_Variant0(__symbols);
                let __sym6 = __pop_Variant20(__symbols);
                let __sym5 = __pop_Variant21(__symbols);
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant19(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant18(__symbols);
                let __sym0 = __pop_Variant36(__symbols);
                let __start = __sym0.0;
                let __end = __sym7.2;
                let __nt = super::__action582(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                    __sym7,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (8, 48)
            }
            fn __reduce143<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 7) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 7")
                }
                let __sym6 = __pop_Variant0(__symbols);
                let __sym5 = __pop_Variant21(__symbols);
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant18(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant18(__symbols);
                let __sym0 = __pop_Variant36(__symbols);
                let __start = __sym0.0;
                let __end = __sym6.2;
                let __nt = super::__action583(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (7, 48)
            }
            fn __reduce144<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 6) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 6")
                }
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant21(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant18(__symbols);
                let __sym0 = __pop_Variant36(__symbols);
                let __start = __sym0.0;
                let __end = __sym5.2;
                let __nt = super::__action584(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (6, 48)
            }
            fn __reduce145<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 8) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 8")
                }
                let __sym7 = __pop_Variant0(__symbols);
                let __sym6 = __pop_Variant21(__symbols);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant18(__symbols);
                let __sym3 = __pop_Variant19(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant18(__symbols);
                let __sym0 = __pop_Variant36(__symbols);
                let __start = __sym0.0;
                let __end = __sym7.2;
                let __nt = super::__action585(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                    __sym7,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (8, 48)
            }
            fn __reduce146<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 7) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 7")
                }
                let __sym6 = __pop_Variant0(__symbols);
                let __sym5 = __pop_Variant21(__symbols);
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant19(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant18(__symbols);
                let __sym0 = __pop_Variant36(__symbols);
                let __start = __sym0.0;
                let __end = __sym6.2;
                let __nt = super::__action586(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (7, 48)
            }
            fn __reduce147<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action273(errors, db, __sym0);
                __symbols.push((__start, __Symbol::Variant30(__nt), __end));
                (1, 49)
            }
            fn __reduce148<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 3) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 3")
                }
                let __sym2 = __pop_Variant12(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant12(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = super::__action29(errors, db, __sym0, __sym1, __sym2);
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (3, 50)
            }
            fn __reduce149<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 3) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 3")
                }
                let __sym2 = __pop_Variant12(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant12(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = super::__action30(errors, db, __sym0, __sym1, __sym2);
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (3, 50)
            }
            fn __reduce150<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __sym0 = __pop_Variant12(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action31(errors, db, __sym0);
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (1, 50)
            }
            fn __reduce151<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __sym0 = __pop_Variant12(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action25(errors, db, __sym0);
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (1, 51)
            }
            fn __reduce152<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 3) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 3")
                }
                let __sym2 = __pop_Variant12(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant12(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = super::__action26(errors, db, __sym0, __sym1, __sym2);
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (3, 52)
            }
            fn __reduce153<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 3) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 3")
                }
                let __sym2 = __pop_Variant12(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant12(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = super::__action274(errors, db, __sym0, __sym1, __sym2);
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (3, 52)
            }
            fn __reduce154<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __sym0 = __pop_Variant12(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action28(errors, db, __sym0);
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (1, 52)
            }
            fn __reduce155<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __sym0 = __pop_Variant12(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action103(errors, db, __sym0);
                __symbols.push((__start, __Symbol::Variant31(__nt), __end));
                (1, 53)
            }
            fn __reduce156<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __start = __lookahead_start
                    .cloned()
                    .or_else(|| __symbols.last().map(|s| s.2))
                    .unwrap_or_default();
                let __end = __start;
                let __nt = super::__action104(errors, db, &__start, &__end);
                __symbols.push((__start, __Symbol::Variant31(__nt), __end));
                (0, 53)
            }
            fn __reduce157<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action13(errors, db, __sym0);
                __symbols.push((__start, __Symbol::Variant32(__nt), __end));
                (1, 54)
            }
            fn __reduce158<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 4) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 4")
                }
                let __sym3 = __pop_Variant18(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant18(__symbols);
                let __sym0 = __pop_Variant45(__symbols);
                let __start = __sym0.0;
                let __end = __sym3.2;
                let __nt = super::__action44(errors, db, __sym0, __sym1, __sym2, __sym3);
                __symbols.push((__start, __Symbol::Variant14(__nt), __end));
                (4, 55)
            }
            fn __reduce159<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __sym0 = __pop_Variant14(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action134(errors, db, __sym0);
                __symbols.push((__start, __Symbol::Variant33(__nt), __end));
                (1, 56)
            }
            fn __reduce160<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __start = __lookahead_start
                    .cloned()
                    .or_else(|| __symbols.last().map(|s| s.2))
                    .unwrap_or_default();
                let __end = __start;
                let __nt = super::__action135(errors, db, &__start, &__end);
                __symbols.push((__start, __Symbol::Variant33(__nt), __end));
                (0, 56)
            }
            fn __reduce161<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 3) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 3")
                }
                let __sym2 = __pop_Variant12(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant12(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = super::__action42(errors, db, __sym0, __sym1, __sym2);
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (3, 57)
            }
            fn __reduce162<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __sym0 = __pop_Variant12(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action43(errors, db, __sym0);
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (1, 57)
            }
            fn __reduce163<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action275(errors, db, __sym0);
                __symbols.push((__start, __Symbol::Variant30(__nt), __end));
                (1, 58)
            }
            fn __reduce164<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action587(errors, db, __sym0);
                __symbols.push((__start, __Symbol::Variant16(__nt), __end));
                (1, 59)
            }
            fn __reduce165<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __sym0 = __pop_Variant14(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action588(errors, db, __sym0);
                __symbols.push((__start, __Symbol::Variant16(__nt), __end));
                (1, 59)
            }
            fn __reduce166<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __sym0 = __pop_Variant16(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action108(errors, db, __sym0);
                __symbols.push((__start, __Symbol::Variant34(__nt), __end));
                (1, 60)
            }
            fn __reduce167<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __start = __lookahead_start
                    .cloned()
                    .or_else(|| __symbols.last().map(|s| s.2))
                    .unwrap_or_default();
                let __end = __start;
                let __nt = super::__action109(errors, db, &__start, &__end);
                __symbols.push((__start, __Symbol::Variant34(__nt), __end));
                (0, 60)
            }
            fn __reduce168<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 4) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 4")
                }
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant12(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant18(__symbols);
                let __start = __sym0.0;
                let __end = __sym3.2;
                let __nt = super::__action487(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (4, 61)
            }
            fn __reduce169<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 3) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 3")
                }
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant18(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = super::__action488(errors, db, __sym0, __sym1, __sym2);
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (3, 61)
            }
            fn __reduce170<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 5) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 5")
                }
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant12(__symbols);
                let __sym2 = __pop_Variant13(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant18(__symbols);
                let __start = __sym0.0;
                let __end = __sym4.2;
                let __nt = super::__action489(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (5, 61)
            }
            fn __reduce171<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 4) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 4")
                }
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant13(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant18(__symbols);
                let __start = __sym0.0;
                let __end = __sym3.2;
                let __nt = super::__action490(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (4, 61)
            }
            fn __reduce172<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 6) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 6")
                }
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant12(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant20(__symbols);
                let __sym0 = __pop_Variant36(__symbols);
                let __start = __sym0.0;
                let __end = __sym5.2;
                let __nt = super::__action395(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (6, 62)
            }
            fn __reduce173<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 5) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 5")
                }
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant20(__symbols);
                let __sym0 = __pop_Variant36(__symbols);
                let __start = __sym0.0;
                let __end = __sym4.2;
                let __nt = super::__action396(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (5, 62)
            }
            fn __reduce174<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 7) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 7")
                }
                let __sym6 = __pop_Variant0(__symbols);
                let __sym5 = __pop_Variant12(__symbols);
                let __sym4 = __pop_Variant13(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant20(__symbols);
                let __sym0 = __pop_Variant36(__symbols);
                let __start = __sym0.0;
                let __end = __sym6.2;
                let __nt = super::__action397(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (7, 62)
            }
            fn __reduce175<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 6) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 6")
                }
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant13(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant20(__symbols);
                let __sym0 = __pop_Variant36(__symbols);
                let __start = __sym0.0;
                let __end = __sym5.2;
                let __nt = super::__action398(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (6, 62)
            }
            fn __reduce176<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 5) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 5")
                }
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant12(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant20(__symbols);
                let __sym0 = __pop_Variant36(__symbols);
                let __start = __sym0.0;
                let __end = __sym4.2;
                let __nt = super::__action399(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (5, 62)
            }
            fn __reduce177<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 4) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 4")
                }
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant20(__symbols);
                let __sym0 = __pop_Variant36(__symbols);
                let __start = __sym0.0;
                let __end = __sym3.2;
                let __nt = super::__action400(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (4, 62)
            }
            fn __reduce178<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 6) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 6")
                }
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant12(__symbols);
                let __sym3 = __pop_Variant13(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant20(__symbols);
                let __sym0 = __pop_Variant36(__symbols);
                let __start = __sym0.0;
                let __end = __sym5.2;
                let __nt = super::__action401(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (6, 62)
            }
            fn __reduce179<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 5) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 5")
                }
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant13(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant20(__symbols);
                let __sym0 = __pop_Variant36(__symbols);
                let __start = __sym0.0;
                let __end = __sym4.2;
                let __nt = super::__action402(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (5, 62)
            }
            fn __reduce180<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __sym0 = __pop_Variant12(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action129(errors, db, __sym0);
                __symbols.push((__start, __Symbol::Variant31(__nt), __end));
                (1, 63)
            }
            fn __reduce181<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __start = __lookahead_start
                    .cloned()
                    .or_else(|| __symbols.last().map(|s| s.2))
                    .unwrap_or_default();
                let __end = __start;
                let __nt = super::__action130(errors, db, &__start, &__end);
                __symbols.push((__start, __Symbol::Variant31(__nt), __end));
                (0, 63)
            }
            fn __reduce182<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action278(errors, db, __sym0);
                __symbols.push((__start, __Symbol::Variant30(__nt), __end));
                (1, 64)
            }
            fn __reduce183<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __sym0 = __pop_Variant1(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action279(errors, db, __sym0);
                __symbols.push((__start, __Symbol::Variant18(__nt), __end));
                (1, 65)
            }
            fn __reduce184<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __sym0 = __pop_Variant18(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action114(errors, db, __sym0);
                __symbols.push((__start, __Symbol::Variant35(__nt), __end));
                (1, 66)
            }
            fn __reduce185<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __start = __lookahead_start
                    .cloned()
                    .or_else(|| __symbols.last().map(|s| s.2))
                    .unwrap_or_default();
                let __end = __start;
                let __nt = super::__action115(errors, db, &__start, &__end);
                __symbols.push((__start, __Symbol::Variant35(__nt), __end));
                (0, 66)
            }
            fn __reduce186<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __sym0 = __pop_Variant18(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action16(errors, db, __sym0);
                __symbols.push((__start, __Symbol::Variant18(__nt), __end));
                (1, 67)
            }
            fn __reduce187<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __sym0 = __pop_Variant18(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action17(errors, db, __sym0);
                __symbols.push((__start, __Symbol::Variant18(__nt), __end));
                (1, 67)
            }
            fn __reduce188<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action280(errors, db, __sym0);
                __symbols.push((__start, __Symbol::Variant18(__nt), __end));
                (1, 67)
            }
            fn __reduce189<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __sym0 = __pop_Variant18(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action40(errors, db, __sym0);
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (1, 68)
            }
            fn __reduce190<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __sym0 = __pop_Variant12(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action41(errors, db, __sym0);
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (1, 68)
            }
            fn __reduce191<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 4) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 4")
                }
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant18(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant1(__symbols);
                let __start = __sym0.0;
                let __end = __sym3.2;
                let __nt = super::__action511(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                );
                __symbols.push((__start, __Symbol::Variant18(__nt), __end));
                (4, 69)
            }
            fn __reduce192<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 3) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 3")
                }
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant1(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = super::__action512(errors, db, __sym0, __sym1, __sym2);
                __symbols.push((__start, __Symbol::Variant18(__nt), __end));
                (3, 69)
            }
            fn __reduce193<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 5) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 5")
                }
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant18(__symbols);
                let __sym2 = __pop_Variant19(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant1(__symbols);
                let __start = __sym0.0;
                let __end = __sym4.2;
                let __nt = super::__action513(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                );
                __symbols.push((__start, __Symbol::Variant18(__nt), __end));
                (5, 69)
            }
            fn __reduce194<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 4) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 4")
                }
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant19(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant1(__symbols);
                let __start = __sym0.0;
                let __end = __sym3.2;
                let __nt = super::__action514(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                );
                __symbols.push((__start, __Symbol::Variant18(__nt), __end));
                (4, 69)
            }
            fn __reduce195<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action282(errors, db, __sym0);
                __symbols.push((__start, __Symbol::Variant30(__nt), __end));
                (1, 70)
            }
            fn __reduce196<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 6) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 6")
                }
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant12(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant12(__symbols);
                let __sym0 = __pop_Variant30(__symbols);
                let __start = __sym0.0;
                let __end = __sym5.2;
                let __nt = super::__action403(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (6, 71)
            }
            fn __reduce197<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 5) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 5")
                }
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant12(__symbols);
                let __sym0 = __pop_Variant30(__symbols);
                let __start = __sym0.0;
                let __end = __sym4.2;
                let __nt = super::__action404(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (5, 71)
            }
            fn __reduce198<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 7) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 7")
                }
                let __sym6 = __pop_Variant0(__symbols);
                let __sym5 = __pop_Variant12(__symbols);
                let __sym4 = __pop_Variant13(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant12(__symbols);
                let __sym0 = __pop_Variant30(__symbols);
                let __start = __sym0.0;
                let __end = __sym6.2;
                let __nt = super::__action405(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (7, 71)
            }
            fn __reduce199<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 6) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 6")
                }
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant13(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant12(__symbols);
                let __sym0 = __pop_Variant30(__symbols);
                let __start = __sym0.0;
                let __end = __sym5.2;
                let __nt = super::__action406(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (6, 71)
            }
            fn __reduce200<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 5) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 5")
                }
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant12(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant12(__symbols);
                let __sym0 = __pop_Variant30(__symbols);
                let __start = __sym0.0;
                let __end = __sym4.2;
                let __nt = super::__action407(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (5, 71)
            }
            fn __reduce201<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 4) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 4")
                }
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant12(__symbols);
                let __sym0 = __pop_Variant30(__symbols);
                let __start = __sym0.0;
                let __end = __sym3.2;
                let __nt = super::__action408(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (4, 71)
            }
            fn __reduce202<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 6) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 6")
                }
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant12(__symbols);
                let __sym3 = __pop_Variant13(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant12(__symbols);
                let __sym0 = __pop_Variant30(__symbols);
                let __start = __sym0.0;
                let __end = __sym5.2;
                let __nt = super::__action409(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (6, 71)
            }
            fn __reduce203<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 5) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 5")
                }
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant13(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant12(__symbols);
                let __sym0 = __pop_Variant30(__symbols);
                let __start = __sym0.0;
                let __end = __sym4.2;
                let __nt = super::__action410(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (5, 71)
            }
            fn __reduce204<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 11) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 11")
                }
                let __sym10 = __pop_Variant0(__symbols);
                let __sym9 = __pop_Variant12(__symbols);
                let __sym8 = __pop_Variant0(__symbols);
                let __sym7 = __pop_Variant0(__symbols);
                let __sym6 = __pop_Variant30(__symbols);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant12(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant12(__symbols);
                let __sym0 = __pop_Variant30(__symbols);
                let __start = __sym0.0;
                let __end = __sym10.2;
                let __nt = super::__action411(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                    __sym7,
                    __sym8,
                    __sym9,
                    __sym10,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (11, 71)
            }
            fn __reduce205<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 10) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 10")
                }
                let __sym9 = __pop_Variant0(__symbols);
                let __sym8 = __pop_Variant0(__symbols);
                let __sym7 = __pop_Variant0(__symbols);
                let __sym6 = __pop_Variant30(__symbols);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant12(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant12(__symbols);
                let __sym0 = __pop_Variant30(__symbols);
                let __start = __sym0.0;
                let __end = __sym9.2;
                let __nt = super::__action412(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                    __sym7,
                    __sym8,
                    __sym9,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (10, 71)
            }
            fn __reduce206<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 12) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 12")
                }
                let __sym11 = __pop_Variant0(__symbols);
                let __sym10 = __pop_Variant12(__symbols);
                let __sym9 = __pop_Variant13(__symbols);
                let __sym8 = __pop_Variant0(__symbols);
                let __sym7 = __pop_Variant0(__symbols);
                let __sym6 = __pop_Variant30(__symbols);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant12(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant12(__symbols);
                let __sym0 = __pop_Variant30(__symbols);
                let __start = __sym0.0;
                let __end = __sym11.2;
                let __nt = super::__action413(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                    __sym7,
                    __sym8,
                    __sym9,
                    __sym10,
                    __sym11,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (12, 71)
            }
            fn __reduce207<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 11) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 11")
                }
                let __sym10 = __pop_Variant0(__symbols);
                let __sym9 = __pop_Variant13(__symbols);
                let __sym8 = __pop_Variant0(__symbols);
                let __sym7 = __pop_Variant0(__symbols);
                let __sym6 = __pop_Variant30(__symbols);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant12(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant12(__symbols);
                let __sym0 = __pop_Variant30(__symbols);
                let __start = __sym0.0;
                let __end = __sym10.2;
                let __nt = super::__action414(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                    __sym7,
                    __sym8,
                    __sym9,
                    __sym10,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (11, 71)
            }
            fn __reduce208<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 10) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 10")
                }
                let __sym9 = __pop_Variant0(__symbols);
                let __sym8 = __pop_Variant12(__symbols);
                let __sym7 = __pop_Variant0(__symbols);
                let __sym6 = __pop_Variant30(__symbols);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant12(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant12(__symbols);
                let __sym0 = __pop_Variant30(__symbols);
                let __start = __sym0.0;
                let __end = __sym9.2;
                let __nt = super::__action415(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                    __sym7,
                    __sym8,
                    __sym9,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (10, 71)
            }
            fn __reduce209<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 9) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 9")
                }
                let __sym8 = __pop_Variant0(__symbols);
                let __sym7 = __pop_Variant0(__symbols);
                let __sym6 = __pop_Variant30(__symbols);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant12(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant12(__symbols);
                let __sym0 = __pop_Variant30(__symbols);
                let __start = __sym0.0;
                let __end = __sym8.2;
                let __nt = super::__action416(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                    __sym7,
                    __sym8,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (9, 71)
            }
            fn __reduce210<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 11) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 11")
                }
                let __sym10 = __pop_Variant0(__symbols);
                let __sym9 = __pop_Variant12(__symbols);
                let __sym8 = __pop_Variant13(__symbols);
                let __sym7 = __pop_Variant0(__symbols);
                let __sym6 = __pop_Variant30(__symbols);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant12(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant12(__symbols);
                let __sym0 = __pop_Variant30(__symbols);
                let __start = __sym0.0;
                let __end = __sym10.2;
                let __nt = super::__action417(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                    __sym7,
                    __sym8,
                    __sym9,
                    __sym10,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (11, 71)
            }
            fn __reduce211<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 10) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 10")
                }
                let __sym9 = __pop_Variant0(__symbols);
                let __sym8 = __pop_Variant13(__symbols);
                let __sym7 = __pop_Variant0(__symbols);
                let __sym6 = __pop_Variant30(__symbols);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant12(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant12(__symbols);
                let __sym0 = __pop_Variant30(__symbols);
                let __start = __sym0.0;
                let __end = __sym9.2;
                let __nt = super::__action418(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                    __sym7,
                    __sym8,
                    __sym9,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (10, 71)
            }
            fn __reduce212<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 10) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 10")
                }
                let __sym9 = __pop_Variant0(__symbols);
                let __sym8 = __pop_Variant12(__symbols);
                let __sym7 = __pop_Variant0(__symbols);
                let __sym6 = __pop_Variant0(__symbols);
                let __sym5 = __pop_Variant30(__symbols);
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant12(__symbols);
                let __sym0 = __pop_Variant30(__symbols);
                let __start = __sym0.0;
                let __end = __sym9.2;
                let __nt = super::__action419(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                    __sym7,
                    __sym8,
                    __sym9,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (10, 71)
            }
            fn __reduce213<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 9) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 9")
                }
                let __sym8 = __pop_Variant0(__symbols);
                let __sym7 = __pop_Variant0(__symbols);
                let __sym6 = __pop_Variant0(__symbols);
                let __sym5 = __pop_Variant30(__symbols);
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant12(__symbols);
                let __sym0 = __pop_Variant30(__symbols);
                let __start = __sym0.0;
                let __end = __sym8.2;
                let __nt = super::__action420(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                    __sym7,
                    __sym8,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (9, 71)
            }
            fn __reduce214<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 11) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 11")
                }
                let __sym10 = __pop_Variant0(__symbols);
                let __sym9 = __pop_Variant12(__symbols);
                let __sym8 = __pop_Variant13(__symbols);
                let __sym7 = __pop_Variant0(__symbols);
                let __sym6 = __pop_Variant0(__symbols);
                let __sym5 = __pop_Variant30(__symbols);
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant12(__symbols);
                let __sym0 = __pop_Variant30(__symbols);
                let __start = __sym0.0;
                let __end = __sym10.2;
                let __nt = super::__action421(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                    __sym7,
                    __sym8,
                    __sym9,
                    __sym10,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (11, 71)
            }
            fn __reduce215<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 10) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 10")
                }
                let __sym9 = __pop_Variant0(__symbols);
                let __sym8 = __pop_Variant13(__symbols);
                let __sym7 = __pop_Variant0(__symbols);
                let __sym6 = __pop_Variant0(__symbols);
                let __sym5 = __pop_Variant30(__symbols);
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant12(__symbols);
                let __sym0 = __pop_Variant30(__symbols);
                let __start = __sym0.0;
                let __end = __sym9.2;
                let __nt = super::__action422(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                    __sym7,
                    __sym8,
                    __sym9,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (10, 71)
            }
            fn __reduce216<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 9) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 9")
                }
                let __sym8 = __pop_Variant0(__symbols);
                let __sym7 = __pop_Variant12(__symbols);
                let __sym6 = __pop_Variant0(__symbols);
                let __sym5 = __pop_Variant30(__symbols);
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant12(__symbols);
                let __sym0 = __pop_Variant30(__symbols);
                let __start = __sym0.0;
                let __end = __sym8.2;
                let __nt = super::__action423(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                    __sym7,
                    __sym8,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (9, 71)
            }
            fn __reduce217<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 8) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 8")
                }
                let __sym7 = __pop_Variant0(__symbols);
                let __sym6 = __pop_Variant0(__symbols);
                let __sym5 = __pop_Variant30(__symbols);
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant12(__symbols);
                let __sym0 = __pop_Variant30(__symbols);
                let __start = __sym0.0;
                let __end = __sym7.2;
                let __nt = super::__action424(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                    __sym7,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (8, 71)
            }
            fn __reduce218<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 10) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 10")
                }
                let __sym9 = __pop_Variant0(__symbols);
                let __sym8 = __pop_Variant12(__symbols);
                let __sym7 = __pop_Variant13(__symbols);
                let __sym6 = __pop_Variant0(__symbols);
                let __sym5 = __pop_Variant30(__symbols);
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant12(__symbols);
                let __sym0 = __pop_Variant30(__symbols);
                let __start = __sym0.0;
                let __end = __sym9.2;
                let __nt = super::__action425(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                    __sym7,
                    __sym8,
                    __sym9,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (10, 71)
            }
            fn __reduce219<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 9) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 9")
                }
                let __sym8 = __pop_Variant0(__symbols);
                let __sym7 = __pop_Variant13(__symbols);
                let __sym6 = __pop_Variant0(__symbols);
                let __sym5 = __pop_Variant30(__symbols);
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant12(__symbols);
                let __sym0 = __pop_Variant30(__symbols);
                let __start = __sym0.0;
                let __end = __sym8.2;
                let __nt = super::__action426(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                    __sym7,
                    __sym8,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (9, 71)
            }
            fn __reduce220<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 12) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 12")
                }
                let __sym11 = __pop_Variant0(__symbols);
                let __sym10 = __pop_Variant12(__symbols);
                let __sym9 = __pop_Variant0(__symbols);
                let __sym8 = __pop_Variant0(__symbols);
                let __sym7 = __pop_Variant30(__symbols);
                let __sym6 = __pop_Variant0(__symbols);
                let __sym5 = __pop_Variant12(__symbols);
                let __sym4 = __pop_Variant13(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant12(__symbols);
                let __sym0 = __pop_Variant30(__symbols);
                let __start = __sym0.0;
                let __end = __sym11.2;
                let __nt = super::__action427(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                    __sym7,
                    __sym8,
                    __sym9,
                    __sym10,
                    __sym11,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (12, 71)
            }
            fn __reduce221<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 11) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 11")
                }
                let __sym10 = __pop_Variant0(__symbols);
                let __sym9 = __pop_Variant0(__symbols);
                let __sym8 = __pop_Variant0(__symbols);
                let __sym7 = __pop_Variant30(__symbols);
                let __sym6 = __pop_Variant0(__symbols);
                let __sym5 = __pop_Variant12(__symbols);
                let __sym4 = __pop_Variant13(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant12(__symbols);
                let __sym0 = __pop_Variant30(__symbols);
                let __start = __sym0.0;
                let __end = __sym10.2;
                let __nt = super::__action428(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                    __sym7,
                    __sym8,
                    __sym9,
                    __sym10,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (11, 71)
            }
            fn __reduce222<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 13) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 13")
                }
                let __sym12 = __pop_Variant0(__symbols);
                let __sym11 = __pop_Variant12(__symbols);
                let __sym10 = __pop_Variant13(__symbols);
                let __sym9 = __pop_Variant0(__symbols);
                let __sym8 = __pop_Variant0(__symbols);
                let __sym7 = __pop_Variant30(__symbols);
                let __sym6 = __pop_Variant0(__symbols);
                let __sym5 = __pop_Variant12(__symbols);
                let __sym4 = __pop_Variant13(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant12(__symbols);
                let __sym0 = __pop_Variant30(__symbols);
                let __start = __sym0.0;
                let __end = __sym12.2;
                let __nt = super::__action429(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                    __sym7,
                    __sym8,
                    __sym9,
                    __sym10,
                    __sym11,
                    __sym12,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (13, 71)
            }
            fn __reduce223<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 12) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 12")
                }
                let __sym11 = __pop_Variant0(__symbols);
                let __sym10 = __pop_Variant13(__symbols);
                let __sym9 = __pop_Variant0(__symbols);
                let __sym8 = __pop_Variant0(__symbols);
                let __sym7 = __pop_Variant30(__symbols);
                let __sym6 = __pop_Variant0(__symbols);
                let __sym5 = __pop_Variant12(__symbols);
                let __sym4 = __pop_Variant13(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant12(__symbols);
                let __sym0 = __pop_Variant30(__symbols);
                let __start = __sym0.0;
                let __end = __sym11.2;
                let __nt = super::__action430(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                    __sym7,
                    __sym8,
                    __sym9,
                    __sym10,
                    __sym11,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (12, 71)
            }
            fn __reduce224<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 11) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 11")
                }
                let __sym10 = __pop_Variant0(__symbols);
                let __sym9 = __pop_Variant12(__symbols);
                let __sym8 = __pop_Variant0(__symbols);
                let __sym7 = __pop_Variant30(__symbols);
                let __sym6 = __pop_Variant0(__symbols);
                let __sym5 = __pop_Variant12(__symbols);
                let __sym4 = __pop_Variant13(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant12(__symbols);
                let __sym0 = __pop_Variant30(__symbols);
                let __start = __sym0.0;
                let __end = __sym10.2;
                let __nt = super::__action431(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                    __sym7,
                    __sym8,
                    __sym9,
                    __sym10,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (11, 71)
            }
            fn __reduce225<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 10) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 10")
                }
                let __sym9 = __pop_Variant0(__symbols);
                let __sym8 = __pop_Variant0(__symbols);
                let __sym7 = __pop_Variant30(__symbols);
                let __sym6 = __pop_Variant0(__symbols);
                let __sym5 = __pop_Variant12(__symbols);
                let __sym4 = __pop_Variant13(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant12(__symbols);
                let __sym0 = __pop_Variant30(__symbols);
                let __start = __sym0.0;
                let __end = __sym9.2;
                let __nt = super::__action432(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                    __sym7,
                    __sym8,
                    __sym9,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (10, 71)
            }
            fn __reduce226<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 12) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 12")
                }
                let __sym11 = __pop_Variant0(__symbols);
                let __sym10 = __pop_Variant12(__symbols);
                let __sym9 = __pop_Variant13(__symbols);
                let __sym8 = __pop_Variant0(__symbols);
                let __sym7 = __pop_Variant30(__symbols);
                let __sym6 = __pop_Variant0(__symbols);
                let __sym5 = __pop_Variant12(__symbols);
                let __sym4 = __pop_Variant13(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant12(__symbols);
                let __sym0 = __pop_Variant30(__symbols);
                let __start = __sym0.0;
                let __end = __sym11.2;
                let __nt = super::__action433(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                    __sym7,
                    __sym8,
                    __sym9,
                    __sym10,
                    __sym11,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (12, 71)
            }
            fn __reduce227<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 11) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 11")
                }
                let __sym10 = __pop_Variant0(__symbols);
                let __sym9 = __pop_Variant13(__symbols);
                let __sym8 = __pop_Variant0(__symbols);
                let __sym7 = __pop_Variant30(__symbols);
                let __sym6 = __pop_Variant0(__symbols);
                let __sym5 = __pop_Variant12(__symbols);
                let __sym4 = __pop_Variant13(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant12(__symbols);
                let __sym0 = __pop_Variant30(__symbols);
                let __start = __sym0.0;
                let __end = __sym10.2;
                let __nt = super::__action434(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                    __sym7,
                    __sym8,
                    __sym9,
                    __sym10,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (11, 71)
            }
            fn __reduce228<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 11) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 11")
                }
                let __sym10 = __pop_Variant0(__symbols);
                let __sym9 = __pop_Variant12(__symbols);
                let __sym8 = __pop_Variant0(__symbols);
                let __sym7 = __pop_Variant0(__symbols);
                let __sym6 = __pop_Variant30(__symbols);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant13(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant12(__symbols);
                let __sym0 = __pop_Variant30(__symbols);
                let __start = __sym0.0;
                let __end = __sym10.2;
                let __nt = super::__action435(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                    __sym7,
                    __sym8,
                    __sym9,
                    __sym10,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (11, 71)
            }
            fn __reduce229<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 10) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 10")
                }
                let __sym9 = __pop_Variant0(__symbols);
                let __sym8 = __pop_Variant0(__symbols);
                let __sym7 = __pop_Variant0(__symbols);
                let __sym6 = __pop_Variant30(__symbols);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant13(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant12(__symbols);
                let __sym0 = __pop_Variant30(__symbols);
                let __start = __sym0.0;
                let __end = __sym9.2;
                let __nt = super::__action436(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                    __sym7,
                    __sym8,
                    __sym9,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (10, 71)
            }
            fn __reduce230<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 12) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 12")
                }
                let __sym11 = __pop_Variant0(__symbols);
                let __sym10 = __pop_Variant12(__symbols);
                let __sym9 = __pop_Variant13(__symbols);
                let __sym8 = __pop_Variant0(__symbols);
                let __sym7 = __pop_Variant0(__symbols);
                let __sym6 = __pop_Variant30(__symbols);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant13(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant12(__symbols);
                let __sym0 = __pop_Variant30(__symbols);
                let __start = __sym0.0;
                let __end = __sym11.2;
                let __nt = super::__action437(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                    __sym7,
                    __sym8,
                    __sym9,
                    __sym10,
                    __sym11,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (12, 71)
            }
            fn __reduce231<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 11) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 11")
                }
                let __sym10 = __pop_Variant0(__symbols);
                let __sym9 = __pop_Variant13(__symbols);
                let __sym8 = __pop_Variant0(__symbols);
                let __sym7 = __pop_Variant0(__symbols);
                let __sym6 = __pop_Variant30(__symbols);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant13(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant12(__symbols);
                let __sym0 = __pop_Variant30(__symbols);
                let __start = __sym0.0;
                let __end = __sym10.2;
                let __nt = super::__action438(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                    __sym7,
                    __sym8,
                    __sym9,
                    __sym10,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (11, 71)
            }
            fn __reduce232<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 10) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 10")
                }
                let __sym9 = __pop_Variant0(__symbols);
                let __sym8 = __pop_Variant12(__symbols);
                let __sym7 = __pop_Variant0(__symbols);
                let __sym6 = __pop_Variant30(__symbols);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant13(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant12(__symbols);
                let __sym0 = __pop_Variant30(__symbols);
                let __start = __sym0.0;
                let __end = __sym9.2;
                let __nt = super::__action439(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                    __sym7,
                    __sym8,
                    __sym9,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (10, 71)
            }
            fn __reduce233<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 9) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 9")
                }
                let __sym8 = __pop_Variant0(__symbols);
                let __sym7 = __pop_Variant0(__symbols);
                let __sym6 = __pop_Variant30(__symbols);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant13(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant12(__symbols);
                let __sym0 = __pop_Variant30(__symbols);
                let __start = __sym0.0;
                let __end = __sym8.2;
                let __nt = super::__action440(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                    __sym7,
                    __sym8,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (9, 71)
            }
            fn __reduce234<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 11) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 11")
                }
                let __sym10 = __pop_Variant0(__symbols);
                let __sym9 = __pop_Variant12(__symbols);
                let __sym8 = __pop_Variant13(__symbols);
                let __sym7 = __pop_Variant0(__symbols);
                let __sym6 = __pop_Variant30(__symbols);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant13(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant12(__symbols);
                let __sym0 = __pop_Variant30(__symbols);
                let __start = __sym0.0;
                let __end = __sym10.2;
                let __nt = super::__action441(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                    __sym7,
                    __sym8,
                    __sym9,
                    __sym10,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (11, 71)
            }
            fn __reduce235<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 10) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 10")
                }
                let __sym9 = __pop_Variant0(__symbols);
                let __sym8 = __pop_Variant13(__symbols);
                let __sym7 = __pop_Variant0(__symbols);
                let __sym6 = __pop_Variant30(__symbols);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant13(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant12(__symbols);
                let __sym0 = __pop_Variant30(__symbols);
                let __start = __sym0.0;
                let __end = __sym9.2;
                let __nt = super::__action442(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                    __sym7,
                    __sym8,
                    __sym9,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (10, 71)
            }
            fn __reduce236<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 10) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 10")
                }
                let __sym9 = __pop_Variant0(__symbols);
                let __sym8 = __pop_Variant12(__symbols);
                let __sym7 = __pop_Variant0(__symbols);
                let __sym6 = __pop_Variant0(__symbols);
                let __sym5 = __pop_Variant30(__symbols);
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant12(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant12(__symbols);
                let __sym0 = __pop_Variant30(__symbols);
                let __start = __sym0.0;
                let __end = __sym9.2;
                let __nt = super::__action443(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                    __sym7,
                    __sym8,
                    __sym9,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (10, 71)
            }
            fn __reduce237<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 9) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 9")
                }
                let __sym8 = __pop_Variant0(__symbols);
                let __sym7 = __pop_Variant0(__symbols);
                let __sym6 = __pop_Variant0(__symbols);
                let __sym5 = __pop_Variant30(__symbols);
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant12(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant12(__symbols);
                let __sym0 = __pop_Variant30(__symbols);
                let __start = __sym0.0;
                let __end = __sym8.2;
                let __nt = super::__action444(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                    __sym7,
                    __sym8,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (9, 71)
            }
            fn __reduce238<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 11) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 11")
                }
                let __sym10 = __pop_Variant0(__symbols);
                let __sym9 = __pop_Variant12(__symbols);
                let __sym8 = __pop_Variant13(__symbols);
                let __sym7 = __pop_Variant0(__symbols);
                let __sym6 = __pop_Variant0(__symbols);
                let __sym5 = __pop_Variant30(__symbols);
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant12(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant12(__symbols);
                let __sym0 = __pop_Variant30(__symbols);
                let __start = __sym0.0;
                let __end = __sym10.2;
                let __nt = super::__action445(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                    __sym7,
                    __sym8,
                    __sym9,
                    __sym10,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (11, 71)
            }
            fn __reduce239<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 10) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 10")
                }
                let __sym9 = __pop_Variant0(__symbols);
                let __sym8 = __pop_Variant13(__symbols);
                let __sym7 = __pop_Variant0(__symbols);
                let __sym6 = __pop_Variant0(__symbols);
                let __sym5 = __pop_Variant30(__symbols);
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant12(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant12(__symbols);
                let __sym0 = __pop_Variant30(__symbols);
                let __start = __sym0.0;
                let __end = __sym9.2;
                let __nt = super::__action446(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                    __sym7,
                    __sym8,
                    __sym9,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (10, 71)
            }
            fn __reduce240<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 9) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 9")
                }
                let __sym8 = __pop_Variant0(__symbols);
                let __sym7 = __pop_Variant12(__symbols);
                let __sym6 = __pop_Variant0(__symbols);
                let __sym5 = __pop_Variant30(__symbols);
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant12(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant12(__symbols);
                let __sym0 = __pop_Variant30(__symbols);
                let __start = __sym0.0;
                let __end = __sym8.2;
                let __nt = super::__action447(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                    __sym7,
                    __sym8,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (9, 71)
            }
            fn __reduce241<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 8) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 8")
                }
                let __sym7 = __pop_Variant0(__symbols);
                let __sym6 = __pop_Variant0(__symbols);
                let __sym5 = __pop_Variant30(__symbols);
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant12(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant12(__symbols);
                let __sym0 = __pop_Variant30(__symbols);
                let __start = __sym0.0;
                let __end = __sym7.2;
                let __nt = super::__action448(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                    __sym7,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (8, 71)
            }
            fn __reduce242<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 10) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 10")
                }
                let __sym9 = __pop_Variant0(__symbols);
                let __sym8 = __pop_Variant12(__symbols);
                let __sym7 = __pop_Variant13(__symbols);
                let __sym6 = __pop_Variant0(__symbols);
                let __sym5 = __pop_Variant30(__symbols);
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant12(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant12(__symbols);
                let __sym0 = __pop_Variant30(__symbols);
                let __start = __sym0.0;
                let __end = __sym9.2;
                let __nt = super::__action449(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                    __sym7,
                    __sym8,
                    __sym9,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (10, 71)
            }
            fn __reduce243<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 9) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 9")
                }
                let __sym8 = __pop_Variant0(__symbols);
                let __sym7 = __pop_Variant13(__symbols);
                let __sym6 = __pop_Variant0(__symbols);
                let __sym5 = __pop_Variant30(__symbols);
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant12(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant12(__symbols);
                let __sym0 = __pop_Variant30(__symbols);
                let __start = __sym0.0;
                let __end = __sym8.2;
                let __nt = super::__action450(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                    __sym7,
                    __sym8,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (9, 71)
            }
            fn __reduce244<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 9) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 9")
                }
                let __sym8 = __pop_Variant0(__symbols);
                let __sym7 = __pop_Variant12(__symbols);
                let __sym6 = __pop_Variant0(__symbols);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant30(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant12(__symbols);
                let __sym0 = __pop_Variant30(__symbols);
                let __start = __sym0.0;
                let __end = __sym8.2;
                let __nt = super::__action451(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                    __sym7,
                    __sym8,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (9, 71)
            }
            fn __reduce245<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 8) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 8")
                }
                let __sym7 = __pop_Variant0(__symbols);
                let __sym6 = __pop_Variant0(__symbols);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant30(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant12(__symbols);
                let __sym0 = __pop_Variant30(__symbols);
                let __start = __sym0.0;
                let __end = __sym7.2;
                let __nt = super::__action452(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                    __sym7,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (8, 71)
            }
            fn __reduce246<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 10) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 10")
                }
                let __sym9 = __pop_Variant0(__symbols);
                let __sym8 = __pop_Variant12(__symbols);
                let __sym7 = __pop_Variant13(__symbols);
                let __sym6 = __pop_Variant0(__symbols);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant30(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant12(__symbols);
                let __sym0 = __pop_Variant30(__symbols);
                let __start = __sym0.0;
                let __end = __sym9.2;
                let __nt = super::__action453(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                    __sym7,
                    __sym8,
                    __sym9,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (10, 71)
            }
            fn __reduce247<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 9) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 9")
                }
                let __sym8 = __pop_Variant0(__symbols);
                let __sym7 = __pop_Variant13(__symbols);
                let __sym6 = __pop_Variant0(__symbols);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant30(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant12(__symbols);
                let __sym0 = __pop_Variant30(__symbols);
                let __start = __sym0.0;
                let __end = __sym8.2;
                let __nt = super::__action454(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                    __sym7,
                    __sym8,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (9, 71)
            }
            fn __reduce248<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 8) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 8")
                }
                let __sym7 = __pop_Variant0(__symbols);
                let __sym6 = __pop_Variant12(__symbols);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant30(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant12(__symbols);
                let __sym0 = __pop_Variant30(__symbols);
                let __start = __sym0.0;
                let __end = __sym7.2;
                let __nt = super::__action455(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                    __sym7,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (8, 71)
            }
            fn __reduce249<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 7) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 7")
                }
                let __sym6 = __pop_Variant0(__symbols);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant30(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant12(__symbols);
                let __sym0 = __pop_Variant30(__symbols);
                let __start = __sym0.0;
                let __end = __sym6.2;
                let __nt = super::__action456(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (7, 71)
            }
            fn __reduce250<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 9) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 9")
                }
                let __sym8 = __pop_Variant0(__symbols);
                let __sym7 = __pop_Variant12(__symbols);
                let __sym6 = __pop_Variant13(__symbols);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant30(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant12(__symbols);
                let __sym0 = __pop_Variant30(__symbols);
                let __start = __sym0.0;
                let __end = __sym8.2;
                let __nt = super::__action457(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                    __sym7,
                    __sym8,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (9, 71)
            }
            fn __reduce251<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 8) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 8")
                }
                let __sym7 = __pop_Variant0(__symbols);
                let __sym6 = __pop_Variant13(__symbols);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant30(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant12(__symbols);
                let __sym0 = __pop_Variant30(__symbols);
                let __start = __sym0.0;
                let __end = __sym7.2;
                let __nt = super::__action458(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                    __sym7,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (8, 71)
            }
            fn __reduce252<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 11) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 11")
                }
                let __sym10 = __pop_Variant0(__symbols);
                let __sym9 = __pop_Variant12(__symbols);
                let __sym8 = __pop_Variant0(__symbols);
                let __sym7 = __pop_Variant0(__symbols);
                let __sym6 = __pop_Variant30(__symbols);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant12(__symbols);
                let __sym3 = __pop_Variant13(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant12(__symbols);
                let __sym0 = __pop_Variant30(__symbols);
                let __start = __sym0.0;
                let __end = __sym10.2;
                let __nt = super::__action459(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                    __sym7,
                    __sym8,
                    __sym9,
                    __sym10,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (11, 71)
            }
            fn __reduce253<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 10) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 10")
                }
                let __sym9 = __pop_Variant0(__symbols);
                let __sym8 = __pop_Variant0(__symbols);
                let __sym7 = __pop_Variant0(__symbols);
                let __sym6 = __pop_Variant30(__symbols);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant12(__symbols);
                let __sym3 = __pop_Variant13(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant12(__symbols);
                let __sym0 = __pop_Variant30(__symbols);
                let __start = __sym0.0;
                let __end = __sym9.2;
                let __nt = super::__action460(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                    __sym7,
                    __sym8,
                    __sym9,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (10, 71)
            }
            fn __reduce254<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 12) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 12")
                }
                let __sym11 = __pop_Variant0(__symbols);
                let __sym10 = __pop_Variant12(__symbols);
                let __sym9 = __pop_Variant13(__symbols);
                let __sym8 = __pop_Variant0(__symbols);
                let __sym7 = __pop_Variant0(__symbols);
                let __sym6 = __pop_Variant30(__symbols);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant12(__symbols);
                let __sym3 = __pop_Variant13(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant12(__symbols);
                let __sym0 = __pop_Variant30(__symbols);
                let __start = __sym0.0;
                let __end = __sym11.2;
                let __nt = super::__action461(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                    __sym7,
                    __sym8,
                    __sym9,
                    __sym10,
                    __sym11,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (12, 71)
            }
            fn __reduce255<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 11) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 11")
                }
                let __sym10 = __pop_Variant0(__symbols);
                let __sym9 = __pop_Variant13(__symbols);
                let __sym8 = __pop_Variant0(__symbols);
                let __sym7 = __pop_Variant0(__symbols);
                let __sym6 = __pop_Variant30(__symbols);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant12(__symbols);
                let __sym3 = __pop_Variant13(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant12(__symbols);
                let __sym0 = __pop_Variant30(__symbols);
                let __start = __sym0.0;
                let __end = __sym10.2;
                let __nt = super::__action462(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                    __sym7,
                    __sym8,
                    __sym9,
                    __sym10,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (11, 71)
            }
            fn __reduce256<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 10) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 10")
                }
                let __sym9 = __pop_Variant0(__symbols);
                let __sym8 = __pop_Variant12(__symbols);
                let __sym7 = __pop_Variant0(__symbols);
                let __sym6 = __pop_Variant30(__symbols);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant12(__symbols);
                let __sym3 = __pop_Variant13(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant12(__symbols);
                let __sym0 = __pop_Variant30(__symbols);
                let __start = __sym0.0;
                let __end = __sym9.2;
                let __nt = super::__action463(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                    __sym7,
                    __sym8,
                    __sym9,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (10, 71)
            }
            fn __reduce257<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 9) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 9")
                }
                let __sym8 = __pop_Variant0(__symbols);
                let __sym7 = __pop_Variant0(__symbols);
                let __sym6 = __pop_Variant30(__symbols);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant12(__symbols);
                let __sym3 = __pop_Variant13(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant12(__symbols);
                let __sym0 = __pop_Variant30(__symbols);
                let __start = __sym0.0;
                let __end = __sym8.2;
                let __nt = super::__action464(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                    __sym7,
                    __sym8,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (9, 71)
            }
            fn __reduce258<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 11) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 11")
                }
                let __sym10 = __pop_Variant0(__symbols);
                let __sym9 = __pop_Variant12(__symbols);
                let __sym8 = __pop_Variant13(__symbols);
                let __sym7 = __pop_Variant0(__symbols);
                let __sym6 = __pop_Variant30(__symbols);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant12(__symbols);
                let __sym3 = __pop_Variant13(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant12(__symbols);
                let __sym0 = __pop_Variant30(__symbols);
                let __start = __sym0.0;
                let __end = __sym10.2;
                let __nt = super::__action465(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                    __sym7,
                    __sym8,
                    __sym9,
                    __sym10,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (11, 71)
            }
            fn __reduce259<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 10) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 10")
                }
                let __sym9 = __pop_Variant0(__symbols);
                let __sym8 = __pop_Variant13(__symbols);
                let __sym7 = __pop_Variant0(__symbols);
                let __sym6 = __pop_Variant30(__symbols);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant12(__symbols);
                let __sym3 = __pop_Variant13(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant12(__symbols);
                let __sym0 = __pop_Variant30(__symbols);
                let __start = __sym0.0;
                let __end = __sym9.2;
                let __nt = super::__action466(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                    __sym7,
                    __sym8,
                    __sym9,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (10, 71)
            }
            fn __reduce260<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 10) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 10")
                }
                let __sym9 = __pop_Variant0(__symbols);
                let __sym8 = __pop_Variant12(__symbols);
                let __sym7 = __pop_Variant0(__symbols);
                let __sym6 = __pop_Variant0(__symbols);
                let __sym5 = __pop_Variant30(__symbols);
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant13(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant12(__symbols);
                let __sym0 = __pop_Variant30(__symbols);
                let __start = __sym0.0;
                let __end = __sym9.2;
                let __nt = super::__action467(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                    __sym7,
                    __sym8,
                    __sym9,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (10, 71)
            }
            fn __reduce261<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 9) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 9")
                }
                let __sym8 = __pop_Variant0(__symbols);
                let __sym7 = __pop_Variant0(__symbols);
                let __sym6 = __pop_Variant0(__symbols);
                let __sym5 = __pop_Variant30(__symbols);
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant13(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant12(__symbols);
                let __sym0 = __pop_Variant30(__symbols);
                let __start = __sym0.0;
                let __end = __sym8.2;
                let __nt = super::__action468(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                    __sym7,
                    __sym8,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (9, 71)
            }
            fn __reduce262<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 11) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 11")
                }
                let __sym10 = __pop_Variant0(__symbols);
                let __sym9 = __pop_Variant12(__symbols);
                let __sym8 = __pop_Variant13(__symbols);
                let __sym7 = __pop_Variant0(__symbols);
                let __sym6 = __pop_Variant0(__symbols);
                let __sym5 = __pop_Variant30(__symbols);
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant13(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant12(__symbols);
                let __sym0 = __pop_Variant30(__symbols);
                let __start = __sym0.0;
                let __end = __sym10.2;
                let __nt = super::__action469(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                    __sym7,
                    __sym8,
                    __sym9,
                    __sym10,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (11, 71)
            }
            fn __reduce263<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 10) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 10")
                }
                let __sym9 = __pop_Variant0(__symbols);
                let __sym8 = __pop_Variant13(__symbols);
                let __sym7 = __pop_Variant0(__symbols);
                let __sym6 = __pop_Variant0(__symbols);
                let __sym5 = __pop_Variant30(__symbols);
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant13(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant12(__symbols);
                let __sym0 = __pop_Variant30(__symbols);
                let __start = __sym0.0;
                let __end = __sym9.2;
                let __nt = super::__action470(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                    __sym7,
                    __sym8,
                    __sym9,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (10, 71)
            }
            fn __reduce264<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 9) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 9")
                }
                let __sym8 = __pop_Variant0(__symbols);
                let __sym7 = __pop_Variant12(__symbols);
                let __sym6 = __pop_Variant0(__symbols);
                let __sym5 = __pop_Variant30(__symbols);
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant13(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant12(__symbols);
                let __sym0 = __pop_Variant30(__symbols);
                let __start = __sym0.0;
                let __end = __sym8.2;
                let __nt = super::__action471(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                    __sym7,
                    __sym8,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (9, 71)
            }
            fn __reduce265<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 8) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 8")
                }
                let __sym7 = __pop_Variant0(__symbols);
                let __sym6 = __pop_Variant0(__symbols);
                let __sym5 = __pop_Variant30(__symbols);
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant13(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant12(__symbols);
                let __sym0 = __pop_Variant30(__symbols);
                let __start = __sym0.0;
                let __end = __sym7.2;
                let __nt = super::__action472(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                    __sym7,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (8, 71)
            }
            fn __reduce266<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 10) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 10")
                }
                let __sym9 = __pop_Variant0(__symbols);
                let __sym8 = __pop_Variant12(__symbols);
                let __sym7 = __pop_Variant13(__symbols);
                let __sym6 = __pop_Variant0(__symbols);
                let __sym5 = __pop_Variant30(__symbols);
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant13(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant12(__symbols);
                let __sym0 = __pop_Variant30(__symbols);
                let __start = __sym0.0;
                let __end = __sym9.2;
                let __nt = super::__action473(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                    __sym7,
                    __sym8,
                    __sym9,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (10, 71)
            }
            fn __reduce267<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 9) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 9")
                }
                let __sym8 = __pop_Variant0(__symbols);
                let __sym7 = __pop_Variant13(__symbols);
                let __sym6 = __pop_Variant0(__symbols);
                let __sym5 = __pop_Variant30(__symbols);
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant13(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant12(__symbols);
                let __sym0 = __pop_Variant30(__symbols);
                let __start = __sym0.0;
                let __end = __sym8.2;
                let __nt = super::__action474(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                    __sym7,
                    __sym8,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (9, 71)
            }
            fn __reduce268<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action285(errors, db, __sym0);
                __symbols.push((__start, __Symbol::Variant30(__nt), __end));
                (1, 72)
            }
            fn __reduce269<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 8) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 8")
                }
                let __sym7 = __pop_Variant0(__symbols);
                let __sym6 = __pop_Variant12(__symbols);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant18(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant18(__symbols);
                let __sym0 = __pop_Variant36(__symbols);
                let __start = __sym0.0;
                let __end = __sym7.2;
                let __nt = super::__action347(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                    __sym7,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (8, 73)
            }
            fn __reduce270<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 7) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 7")
                }
                let __sym6 = __pop_Variant0(__symbols);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant18(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant18(__symbols);
                let __sym0 = __pop_Variant36(__symbols);
                let __start = __sym0.0;
                let __end = __sym6.2;
                let __nt = super::__action348(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (7, 73)
            }
            fn __reduce271<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 9) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 9")
                }
                let __sym8 = __pop_Variant0(__symbols);
                let __sym7 = __pop_Variant12(__symbols);
                let __sym6 = __pop_Variant13(__symbols);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant18(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant18(__symbols);
                let __sym0 = __pop_Variant36(__symbols);
                let __start = __sym0.0;
                let __end = __sym8.2;
                let __nt = super::__action349(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                    __sym7,
                    __sym8,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (9, 73)
            }
            fn __reduce272<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 8) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 8")
                }
                let __sym7 = __pop_Variant0(__symbols);
                let __sym6 = __pop_Variant13(__symbols);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant18(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant18(__symbols);
                let __sym0 = __pop_Variant36(__symbols);
                let __start = __sym0.0;
                let __end = __sym7.2;
                let __nt = super::__action350(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                    __sym7,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (8, 73)
            }
            fn __reduce273<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 7) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 7")
                }
                let __sym6 = __pop_Variant0(__symbols);
                let __sym5 = __pop_Variant12(__symbols);
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant18(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant18(__symbols);
                let __sym0 = __pop_Variant36(__symbols);
                let __start = __sym0.0;
                let __end = __sym6.2;
                let __nt = super::__action351(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (7, 73)
            }
            fn __reduce274<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 6) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 6")
                }
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant18(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant18(__symbols);
                let __sym0 = __pop_Variant36(__symbols);
                let __start = __sym0.0;
                let __end = __sym5.2;
                let __nt = super::__action352(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (6, 73)
            }
            fn __reduce275<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 8) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 8")
                }
                let __sym7 = __pop_Variant0(__symbols);
                let __sym6 = __pop_Variant12(__symbols);
                let __sym5 = __pop_Variant13(__symbols);
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant18(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant18(__symbols);
                let __sym0 = __pop_Variant36(__symbols);
                let __start = __sym0.0;
                let __end = __sym7.2;
                let __nt = super::__action353(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                    __sym7,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (8, 73)
            }
            fn __reduce276<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 7) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 7")
                }
                let __sym6 = __pop_Variant0(__symbols);
                let __sym5 = __pop_Variant13(__symbols);
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant18(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant18(__symbols);
                let __sym0 = __pop_Variant36(__symbols);
                let __start = __sym0.0;
                let __end = __sym6.2;
                let __nt = super::__action354(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (7, 73)
            }
            fn __reduce277<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 6) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 6")
                }
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant12(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant18(__symbols);
                let __sym0 = __pop_Variant36(__symbols);
                let __start = __sym0.0;
                let __end = __sym5.2;
                let __nt = super::__action355(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (6, 73)
            }
            fn __reduce278<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 5) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 5")
                }
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant18(__symbols);
                let __sym0 = __pop_Variant36(__symbols);
                let __start = __sym0.0;
                let __end = __sym4.2;
                let __nt = super::__action356(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (5, 73)
            }
            fn __reduce279<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 7) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 7")
                }
                let __sym6 = __pop_Variant0(__symbols);
                let __sym5 = __pop_Variant12(__symbols);
                let __sym4 = __pop_Variant13(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant18(__symbols);
                let __sym0 = __pop_Variant36(__symbols);
                let __start = __sym0.0;
                let __end = __sym6.2;
                let __nt = super::__action357(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (7, 73)
            }
            fn __reduce280<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 6) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 6")
                }
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant13(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant18(__symbols);
                let __sym0 = __pop_Variant36(__symbols);
                let __start = __sym0.0;
                let __end = __sym5.2;
                let __nt = super::__action358(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (6, 73)
            }
            fn __reduce281<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 5) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 5")
                }
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant12(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant18(__symbols);
                let __sym0 = __pop_Variant36(__symbols);
                let __start = __sym0.0;
                let __end = __sym4.2;
                let __nt = super::__action359(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (5, 73)
            }
            fn __reduce282<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 4) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 4")
                }
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant18(__symbols);
                let __sym0 = __pop_Variant36(__symbols);
                let __start = __sym0.0;
                let __end = __sym3.2;
                let __nt = super::__action360(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (4, 73)
            }
            fn __reduce283<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 6) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 6")
                }
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant12(__symbols);
                let __sym3 = __pop_Variant13(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant18(__symbols);
                let __sym0 = __pop_Variant36(__symbols);
                let __start = __sym0.0;
                let __end = __sym5.2;
                let __nt = super::__action361(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (6, 73)
            }
            fn __reduce284<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 5) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 5")
                }
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant13(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant18(__symbols);
                let __sym0 = __pop_Variant36(__symbols);
                let __start = __sym0.0;
                let __end = __sym4.2;
                let __nt = super::__action362(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (5, 73)
            }
            fn __reduce285<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 2) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 2")
                }
                let __sym1 = __pop_Variant30(__symbols);
                let __sym0 = __pop_Variant45(__symbols);
                let __start = __sym0.0;
                let __end = __sym1.2;
                let __nt = super::__action288(errors, db, __sym0, __sym1);
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (2, 74)
            }
            fn __reduce286<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 2) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 2")
                }
                let __sym1 = __pop_Variant30(__symbols);
                let __sym0 = __pop_Variant45(__symbols);
                let __start = __sym0.0;
                let __end = __sym1.2;
                let __nt = super::__action289(errors, db, __sym0, __sym1);
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (2, 75)
            }
            fn __reduce287<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 2) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 2")
                }
                let __sym1 = __pop_Variant30(__symbols);
                let __sym0 = __pop_Variant45(__symbols);
                let __start = __sym0.0;
                let __end = __sym1.2;
                let __nt = super::__action290(errors, db, __sym0, __sym1);
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (2, 76)
            }
            fn __reduce288<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 2) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 2")
                }
                let __sym1 = __pop_Variant30(__symbols);
                let __sym0 = __pop_Variant45(__symbols);
                let __start = __sym0.0;
                let __end = __sym1.2;
                let __nt = super::__action291(errors, db, __sym0, __sym1);
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (2, 77)
            }
            fn __reduce289<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 2) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 2")
                }
                let __sym1 = __pop_Variant30(__symbols);
                let __sym0 = __pop_Variant45(__symbols);
                let __start = __sym0.0;
                let __end = __sym1.2;
                let __nt = super::__action292(errors, db, __sym0, __sym1);
                __symbols.push((__start, __Symbol::Variant36(__nt), __end));
                (2, 78)
            }
            fn __reduce290<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action293(errors, db, __sym0);
                __symbols.push((__start, __Symbol::Variant30(__nt), __end));
                (1, 79)
            }
            fn __reduce291<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __sym0 = __pop_Variant14(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action315(errors, db, __sym0);
                __symbols.push((__start, __Symbol::Variant37(__nt), __end));
                (1, 80)
            }
            fn __reduce292<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __start = __lookahead_start
                    .cloned()
                    .or_else(|| __symbols.last().map(|s| s.2))
                    .unwrap_or_default();
                let __end = __start;
                let __nt = super::__action316(errors, db, &__start, &__end);
                __symbols.push((__start, __Symbol::Variant37(__nt), __end));
                (0, 80)
            }
            fn __reduce293<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 2) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 2")
                }
                let __sym1 = __pop_Variant14(__symbols);
                let __sym0 = __pop_Variant15(__symbols);
                let __start = __sym0.0;
                let __end = __sym1.2;
                let __nt = super::__action317(errors, db, __sym0, __sym1);
                __symbols.push((__start, __Symbol::Variant37(__nt), __end));
                (2, 80)
            }
            fn __reduce294<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __sym0 = __pop_Variant15(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action318(errors, db, __sym0);
                __symbols.push((__start, __Symbol::Variant37(__nt), __end));
                (1, 80)
            }
            fn __reduce295<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __sym0 = __pop_Variant12(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action335(errors, db, __sym0);
                __symbols.push((__start, __Symbol::Variant27(__nt), __end));
                (1, 81)
            }
            fn __reduce296<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __start = __lookahead_start
                    .cloned()
                    .or_else(|| __symbols.last().map(|s| s.2))
                    .unwrap_or_default();
                let __end = __start;
                let __nt = super::__action336(errors, db, &__start, &__end);
                __symbols.push((__start, __Symbol::Variant27(__nt), __end));
                (0, 81)
            }
            fn __reduce297<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 2) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 2")
                }
                let __sym1 = __pop_Variant12(__symbols);
                let __sym0 = __pop_Variant13(__symbols);
                let __start = __sym0.0;
                let __end = __sym1.2;
                let __nt = super::__action337(errors, db, __sym0, __sym1);
                __symbols.push((__start, __Symbol::Variant27(__nt), __end));
                (2, 81)
            }
            fn __reduce298<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __sym0 = __pop_Variant13(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action338(errors, db, __sym0);
                __symbols.push((__start, __Symbol::Variant27(__nt), __end));
                (1, 81)
            }
            fn __reduce299<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __sym0 = __pop_Variant20(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action363(errors, db, __sym0);
                __symbols.push((__start, __Symbol::Variant38(__nt), __end));
                (1, 82)
            }
            fn __reduce300<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __start = __lookahead_start
                    .cloned()
                    .or_else(|| __symbols.last().map(|s| s.2))
                    .unwrap_or_default();
                let __end = __start;
                let __nt = super::__action364(errors, db, &__start, &__end);
                __symbols.push((__start, __Symbol::Variant38(__nt), __end));
                (0, 82)
            }
            fn __reduce301<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 2) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 2")
                }
                let __sym1 = __pop_Variant20(__symbols);
                let __sym0 = __pop_Variant21(__symbols);
                let __start = __sym0.0;
                let __end = __sym1.2;
                let __nt = super::__action365(errors, db, __sym0, __sym1);
                __symbols.push((__start, __Symbol::Variant38(__nt), __end));
                (2, 82)
            }
            fn __reduce302<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __sym0 = __pop_Variant21(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action366(errors, db, __sym0);
                __symbols.push((__start, __Symbol::Variant38(__nt), __end));
                (1, 82)
            }
            fn __reduce303<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __sym0 = __pop_Variant12(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action383(errors, db, __sym0);
                __symbols.push((__start, __Symbol::Variant27(__nt), __end));
                (1, 83)
            }
            fn __reduce304<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __start = __lookahead_start
                    .cloned()
                    .or_else(|| __symbols.last().map(|s| s.2))
                    .unwrap_or_default();
                let __end = __start;
                let __nt = super::__action384(errors, db, &__start, &__end);
                __symbols.push((__start, __Symbol::Variant27(__nt), __end));
                (0, 83)
            }
            fn __reduce305<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 2) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 2")
                }
                let __sym1 = __pop_Variant12(__symbols);
                let __sym0 = __pop_Variant13(__symbols);
                let __start = __sym0.0;
                let __end = __sym1.2;
                let __nt = super::__action385(errors, db, __sym0, __sym1);
                __symbols.push((__start, __Symbol::Variant27(__nt), __end));
                (2, 83)
            }
            fn __reduce306<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __sym0 = __pop_Variant13(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action386(errors, db, __sym0);
                __symbols.push((__start, __Symbol::Variant27(__nt), __end));
                (1, 83)
            }
            fn __reduce307<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action294(errors, db, __sym0);
                __symbols.push((__start, __Symbol::Variant30(__nt), __end));
                (1, 84)
            }
            fn __reduce308<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __sym0 = __pop_Variant18(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action507(errors, db, __sym0);
                __symbols.push((__start, __Symbol::Variant29(__nt), __end));
                (1, 85)
            }
            fn __reduce309<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __start = __lookahead_start
                    .cloned()
                    .or_else(|| __symbols.last().map(|s| s.2))
                    .unwrap_or_default();
                let __end = __start;
                let __nt = super::__action508(errors, db, &__start, &__end);
                __symbols.push((__start, __Symbol::Variant29(__nt), __end));
                (0, 85)
            }
            fn __reduce310<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 2) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 2")
                }
                let __sym1 = __pop_Variant18(__symbols);
                let __sym0 = __pop_Variant19(__symbols);
                let __start = __sym0.0;
                let __end = __sym1.2;
                let __nt = super::__action509(errors, db, __sym0, __sym1);
                __symbols.push((__start, __Symbol::Variant29(__nt), __end));
                (2, 85)
            }
            fn __reduce311<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __sym0 = __pop_Variant19(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action510(errors, db, __sym0);
                __symbols.push((__start, __Symbol::Variant29(__nt), __end));
                (1, 85)
            }
            fn __reduce312<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 9) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 9")
                }
                let __sym8 = __pop_Variant18(__symbols);
                let __sym7 = __pop_Variant0(__symbols);
                let __sym6 = __pop_Variant0(__symbols);
                let __sym5 = __pop_Variant18(__symbols);
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant16(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant18(__symbols);
                let __start = __sym0.0;
                let __end = __sym8.2;
                let __nt = super::__action515(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                    __sym7,
                    __sym8,
                );
                __symbols.push((__start, __Symbol::Variant20(__nt), __end));
                (9, 86)
            }
            fn __reduce313<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 8) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 8")
                }
                let __sym7 = __pop_Variant18(__symbols);
                let __sym6 = __pop_Variant0(__symbols);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant16(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant18(__symbols);
                let __start = __sym0.0;
                let __end = __sym7.2;
                let __nt = super::__action516(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                    __sym7,
                );
                __symbols.push((__start, __Symbol::Variant20(__nt), __end));
                (8, 86)
            }
            fn __reduce314<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 10) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 10")
                }
                let __sym9 = __pop_Variant18(__symbols);
                let __sym8 = __pop_Variant0(__symbols);
                let __sym7 = __pop_Variant0(__symbols);
                let __sym6 = __pop_Variant18(__symbols);
                let __sym5 = __pop_Variant19(__symbols);
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant16(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant18(__symbols);
                let __start = __sym0.0;
                let __end = __sym9.2;
                let __nt = super::__action517(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                    __sym7,
                    __sym8,
                    __sym9,
                );
                __symbols.push((__start, __Symbol::Variant20(__nt), __end));
                (10, 86)
            }
            fn __reduce315<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 9) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 9")
                }
                let __sym8 = __pop_Variant18(__symbols);
                let __sym7 = __pop_Variant0(__symbols);
                let __sym6 = __pop_Variant0(__symbols);
                let __sym5 = __pop_Variant19(__symbols);
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant16(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant18(__symbols);
                let __start = __sym0.0;
                let __end = __sym8.2;
                let __nt = super::__action518(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                    __sym7,
                    __sym8,
                );
                __symbols.push((__start, __Symbol::Variant20(__nt), __end));
                (9, 86)
            }
            fn __reduce316<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 8) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 8")
                }
                let __sym7 = __pop_Variant18(__symbols);
                let __sym6 = __pop_Variant0(__symbols);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant18(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant18(__symbols);
                let __start = __sym0.0;
                let __end = __sym7.2;
                let __nt = super::__action519(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                    __sym7,
                );
                __symbols.push((__start, __Symbol::Variant20(__nt), __end));
                (8, 86)
            }
            fn __reduce317<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 7) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 7")
                }
                let __sym6 = __pop_Variant18(__symbols);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant18(__symbols);
                let __start = __sym0.0;
                let __end = __sym6.2;
                let __nt = super::__action520(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                );
                __symbols.push((__start, __Symbol::Variant20(__nt), __end));
                (7, 86)
            }
            fn __reduce318<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 9) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 9")
                }
                let __sym8 = __pop_Variant18(__symbols);
                let __sym7 = __pop_Variant0(__symbols);
                let __sym6 = __pop_Variant0(__symbols);
                let __sym5 = __pop_Variant18(__symbols);
                let __sym4 = __pop_Variant19(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant18(__symbols);
                let __start = __sym0.0;
                let __end = __sym8.2;
                let __nt = super::__action521(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                    __sym7,
                    __sym8,
                );
                __symbols.push((__start, __Symbol::Variant20(__nt), __end));
                (9, 86)
            }
            fn __reduce319<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 8) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 8")
                }
                let __sym7 = __pop_Variant18(__symbols);
                let __sym6 = __pop_Variant0(__symbols);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant19(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant18(__symbols);
                let __start = __sym0.0;
                let __end = __sym7.2;
                let __nt = super::__action522(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                    __sym7,
                );
                __symbols.push((__start, __Symbol::Variant20(__nt), __end));
                (8, 86)
            }
            fn __reduce320<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 10) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 10")
                }
                let __sym9 = __pop_Variant18(__symbols);
                let __sym8 = __pop_Variant0(__symbols);
                let __sym7 = __pop_Variant0(__symbols);
                let __sym6 = __pop_Variant18(__symbols);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant16(__symbols);
                let __sym2 = __pop_Variant17(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant18(__symbols);
                let __start = __sym0.0;
                let __end = __sym9.2;
                let __nt = super::__action523(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                    __sym7,
                    __sym8,
                    __sym9,
                );
                __symbols.push((__start, __Symbol::Variant20(__nt), __end));
                (10, 86)
            }
            fn __reduce321<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 9) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 9")
                }
                let __sym8 = __pop_Variant18(__symbols);
                let __sym7 = __pop_Variant0(__symbols);
                let __sym6 = __pop_Variant0(__symbols);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant16(__symbols);
                let __sym2 = __pop_Variant17(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant18(__symbols);
                let __start = __sym0.0;
                let __end = __sym8.2;
                let __nt = super::__action524(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                    __sym7,
                    __sym8,
                );
                __symbols.push((__start, __Symbol::Variant20(__nt), __end));
                (9, 86)
            }
            fn __reduce322<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 11) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 11")
                }
                let __sym10 = __pop_Variant18(__symbols);
                let __sym9 = __pop_Variant0(__symbols);
                let __sym8 = __pop_Variant0(__symbols);
                let __sym7 = __pop_Variant18(__symbols);
                let __sym6 = __pop_Variant19(__symbols);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant16(__symbols);
                let __sym2 = __pop_Variant17(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant18(__symbols);
                let __start = __sym0.0;
                let __end = __sym10.2;
                let __nt = super::__action525(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                    __sym7,
                    __sym8,
                    __sym9,
                    __sym10,
                );
                __symbols.push((__start, __Symbol::Variant20(__nt), __end));
                (11, 86)
            }
            fn __reduce323<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 10) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 10")
                }
                let __sym9 = __pop_Variant18(__symbols);
                let __sym8 = __pop_Variant0(__symbols);
                let __sym7 = __pop_Variant0(__symbols);
                let __sym6 = __pop_Variant19(__symbols);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant16(__symbols);
                let __sym2 = __pop_Variant17(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant18(__symbols);
                let __start = __sym0.0;
                let __end = __sym9.2;
                let __nt = super::__action526(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                    __sym7,
                    __sym8,
                    __sym9,
                );
                __symbols.push((__start, __Symbol::Variant20(__nt), __end));
                (10, 86)
            }
            fn __reduce324<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 9) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 9")
                }
                let __sym8 = __pop_Variant18(__symbols);
                let __sym7 = __pop_Variant0(__symbols);
                let __sym6 = __pop_Variant0(__symbols);
                let __sym5 = __pop_Variant18(__symbols);
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant17(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant18(__symbols);
                let __start = __sym0.0;
                let __end = __sym8.2;
                let __nt = super::__action527(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                    __sym7,
                    __sym8,
                );
                __symbols.push((__start, __Symbol::Variant20(__nt), __end));
                (9, 86)
            }
            fn __reduce325<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 8) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 8")
                }
                let __sym7 = __pop_Variant18(__symbols);
                let __sym6 = __pop_Variant0(__symbols);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant17(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant18(__symbols);
                let __start = __sym0.0;
                let __end = __sym7.2;
                let __nt = super::__action528(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                    __sym7,
                );
                __symbols.push((__start, __Symbol::Variant20(__nt), __end));
                (8, 86)
            }
            fn __reduce326<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 10) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 10")
                }
                let __sym9 = __pop_Variant18(__symbols);
                let __sym8 = __pop_Variant0(__symbols);
                let __sym7 = __pop_Variant0(__symbols);
                let __sym6 = __pop_Variant18(__symbols);
                let __sym5 = __pop_Variant19(__symbols);
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant17(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant18(__symbols);
                let __start = __sym0.0;
                let __end = __sym9.2;
                let __nt = super::__action529(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                    __sym7,
                    __sym8,
                    __sym9,
                );
                __symbols.push((__start, __Symbol::Variant20(__nt), __end));
                (10, 86)
            }
            fn __reduce327<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 9) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 9")
                }
                let __sym8 = __pop_Variant18(__symbols);
                let __sym7 = __pop_Variant0(__symbols);
                let __sym6 = __pop_Variant0(__symbols);
                let __sym5 = __pop_Variant19(__symbols);
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant17(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant18(__symbols);
                let __start = __sym0.0;
                let __end = __sym8.2;
                let __nt = super::__action530(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                    __sym7,
                    __sym8,
                );
                __symbols.push((__start, __Symbol::Variant20(__nt), __end));
                (9, 86)
            }
            fn __reduce328<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 7) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 7")
                }
                let __sym6 = __pop_Variant0(__symbols);
                let __sym5 = __pop_Variant18(__symbols);
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant16(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant18(__symbols);
                let __start = __sym0.0;
                let __end = __sym6.2;
                let __nt = super::__action531(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                );
                __symbols.push((__start, __Symbol::Variant20(__nt), __end));
                (7, 86)
            }
            fn __reduce329<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 6) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 6")
                }
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant16(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant18(__symbols);
                let __start = __sym0.0;
                let __end = __sym5.2;
                let __nt = super::__action532(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                );
                __symbols.push((__start, __Symbol::Variant20(__nt), __end));
                (6, 86)
            }
            fn __reduce330<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 8) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 8")
                }
                let __sym7 = __pop_Variant0(__symbols);
                let __sym6 = __pop_Variant18(__symbols);
                let __sym5 = __pop_Variant19(__symbols);
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant16(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant18(__symbols);
                let __start = __sym0.0;
                let __end = __sym7.2;
                let __nt = super::__action533(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                    __sym7,
                );
                __symbols.push((__start, __Symbol::Variant20(__nt), __end));
                (8, 86)
            }
            fn __reduce331<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 7) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 7")
                }
                let __sym6 = __pop_Variant0(__symbols);
                let __sym5 = __pop_Variant19(__symbols);
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant16(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant18(__symbols);
                let __start = __sym0.0;
                let __end = __sym6.2;
                let __nt = super::__action534(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                );
                __symbols.push((__start, __Symbol::Variant20(__nt), __end));
                (7, 86)
            }
            fn __reduce332<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 6) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 6")
                }
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant18(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant18(__symbols);
                let __start = __sym0.0;
                let __end = __sym5.2;
                let __nt = super::__action535(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                );
                __symbols.push((__start, __Symbol::Variant20(__nt), __end));
                (6, 86)
            }
            fn __reduce333<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 5) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 5")
                }
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant18(__symbols);
                let __start = __sym0.0;
                let __end = __sym4.2;
                let __nt = super::__action536(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                );
                __symbols.push((__start, __Symbol::Variant20(__nt), __end));
                (5, 86)
            }
            fn __reduce334<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 7) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 7")
                }
                let __sym6 = __pop_Variant0(__symbols);
                let __sym5 = __pop_Variant18(__symbols);
                let __sym4 = __pop_Variant19(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant18(__symbols);
                let __start = __sym0.0;
                let __end = __sym6.2;
                let __nt = super::__action537(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                );
                __symbols.push((__start, __Symbol::Variant20(__nt), __end));
                (7, 86)
            }
            fn __reduce335<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 6) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 6")
                }
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant19(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant18(__symbols);
                let __start = __sym0.0;
                let __end = __sym5.2;
                let __nt = super::__action538(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                );
                __symbols.push((__start, __Symbol::Variant20(__nt), __end));
                (6, 86)
            }
            fn __reduce336<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 8) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 8")
                }
                let __sym7 = __pop_Variant0(__symbols);
                let __sym6 = __pop_Variant18(__symbols);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant16(__symbols);
                let __sym2 = __pop_Variant17(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant18(__symbols);
                let __start = __sym0.0;
                let __end = __sym7.2;
                let __nt = super::__action539(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                    __sym7,
                );
                __symbols.push((__start, __Symbol::Variant20(__nt), __end));
                (8, 86)
            }
            fn __reduce337<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 7) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 7")
                }
                let __sym6 = __pop_Variant0(__symbols);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant16(__symbols);
                let __sym2 = __pop_Variant17(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant18(__symbols);
                let __start = __sym0.0;
                let __end = __sym6.2;
                let __nt = super::__action540(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                );
                __symbols.push((__start, __Symbol::Variant20(__nt), __end));
                (7, 86)
            }
            fn __reduce338<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 9) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 9")
                }
                let __sym8 = __pop_Variant0(__symbols);
                let __sym7 = __pop_Variant18(__symbols);
                let __sym6 = __pop_Variant19(__symbols);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant16(__symbols);
                let __sym2 = __pop_Variant17(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant18(__symbols);
                let __start = __sym0.0;
                let __end = __sym8.2;
                let __nt = super::__action541(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                    __sym7,
                    __sym8,
                );
                __symbols.push((__start, __Symbol::Variant20(__nt), __end));
                (9, 86)
            }
            fn __reduce339<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 8) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 8")
                }
                let __sym7 = __pop_Variant0(__symbols);
                let __sym6 = __pop_Variant19(__symbols);
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant16(__symbols);
                let __sym2 = __pop_Variant17(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant18(__symbols);
                let __start = __sym0.0;
                let __end = __sym7.2;
                let __nt = super::__action542(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                    __sym7,
                );
                __symbols.push((__start, __Symbol::Variant20(__nt), __end));
                (8, 86)
            }
            fn __reduce340<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 7) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 7")
                }
                let __sym6 = __pop_Variant0(__symbols);
                let __sym5 = __pop_Variant18(__symbols);
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant17(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant18(__symbols);
                let __start = __sym0.0;
                let __end = __sym6.2;
                let __nt = super::__action543(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                );
                __symbols.push((__start, __Symbol::Variant20(__nt), __end));
                (7, 86)
            }
            fn __reduce341<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 6) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 6")
                }
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant17(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant18(__symbols);
                let __start = __sym0.0;
                let __end = __sym5.2;
                let __nt = super::__action544(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                );
                __symbols.push((__start, __Symbol::Variant20(__nt), __end));
                (6, 86)
            }
            fn __reduce342<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 8) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 8")
                }
                let __sym7 = __pop_Variant0(__symbols);
                let __sym6 = __pop_Variant18(__symbols);
                let __sym5 = __pop_Variant19(__symbols);
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant17(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant18(__symbols);
                let __start = __sym0.0;
                let __end = __sym7.2;
                let __nt = super::__action545(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                    __sym7,
                );
                __symbols.push((__start, __Symbol::Variant20(__nt), __end));
                (8, 86)
            }
            fn __reduce343<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 7) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 7")
                }
                let __sym6 = __pop_Variant0(__symbols);
                let __sym5 = __pop_Variant19(__symbols);
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant17(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant18(__symbols);
                let __start = __sym0.0;
                let __end = __sym6.2;
                let __nt = super::__action546(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                );
                __symbols.push((__start, __Symbol::Variant20(__nt), __end));
                (7, 86)
            }
            fn __reduce344<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __sym0 = __pop_Variant20(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action139(errors, db, __sym0);
                __symbols.push((__start, __Symbol::Variant39(__nt), __end));
                (1, 87)
            }
            fn __reduce345<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __start = __lookahead_start
                    .cloned()
                    .or_else(|| __symbols.last().map(|s| s.2))
                    .unwrap_or_default();
                let __end = __start;
                let __nt = super::__action140(errors, db, &__start, &__end);
                __symbols.push((__start, __Symbol::Variant39(__nt), __end));
                (0, 87)
            }
            fn __reduce346<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __start = __lookahead_start
                    .cloned()
                    .or_else(|| __symbols.last().map(|s| s.2))
                    .unwrap_or_default();
                let __end = __start;
                let __nt = super::__action176(errors, db, &__start, &__end);
                __symbols.push((__start, __Symbol::Variant40(__nt), __end));
                (0, 88)
            }
            fn __reduce347<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __sym0 = __pop_Variant10(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action177(errors, db, __sym0);
                __symbols.push((__start, __Symbol::Variant40(__nt), __end));
                (1, 88)
            }
            fn __reduce348<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __sym0 = __pop_Variant4(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action69(errors, db, __sym0);
                __symbols.push((__start, __Symbol::Variant40(__nt), __end));
                (1, 88)
            }
            fn __reduce349<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action297(errors, db, __sym0);
                __symbols.push((__start, __Symbol::Variant41(__nt), __end));
                (1, 89)
            }
            fn __reduce350<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __sym0 = __pop_Variant14(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action298(errors, db, __sym0);
                __symbols.push((__start, __Symbol::Variant42(__nt), __end));
                (1, 90)
            }
            fn __reduce351<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __sym0 = __pop_Variant12(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action299(errors, db, __sym0);
                __symbols.push((__start, __Symbol::Variant43(__nt), __end));
                (1, 91)
            }
            fn __reduce352<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 4) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 4")
                }
                let __sym3 = __pop_Variant12(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant18(__symbols);
                let __sym0 = __pop_Variant30(__symbols);
                let __start = __sym0.0;
                let __end = __sym3.2;
                let __nt = super::__action300(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (4, 92)
            }
            fn __reduce353<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __sym0 = __pop_Variant12(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action50(errors, db, __sym0);
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (1, 92)
            }
            fn __reduce354<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __sym0 = __pop_Variant12(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action51(errors, db, __sym0);
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (1, 92)
            }
            fn __reduce355<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __sym0 = __pop_Variant12(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action146(errors, db, __sym0);
                __symbols.push((__start, __Symbol::Variant31(__nt), __end));
                (1, 93)
            }
            fn __reduce356<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __start = __lookahead_start
                    .cloned()
                    .or_else(|| __symbols.last().map(|s| s.2))
                    .unwrap_or_default();
                let __end = __start;
                let __nt = super::__action147(errors, db, &__start, &__end);
                __symbols.push((__start, __Symbol::Variant31(__nt), __end));
                (0, 93)
            }
            fn __reduce357<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __sym0 = __pop_Variant1(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action301(errors, db, __sym0);
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (1, 94)
            }
            fn __reduce358<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action302(errors, db, __sym0);
                __symbols.push((__start, __Symbol::Variant30(__nt), __end));
                (1, 95)
            }
            fn __reduce359<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 6) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 6")
                }
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant14(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant18(__symbols);
                let __sym0 = __pop_Variant36(__symbols);
                let __start = __sym0.0;
                let __end = __sym5.2;
                let __nt = super::__action327(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (6, 96)
            }
            fn __reduce360<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 5) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 5")
                }
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant18(__symbols);
                let __sym0 = __pop_Variant36(__symbols);
                let __start = __sym0.0;
                let __end = __sym4.2;
                let __nt = super::__action328(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (5, 96)
            }
            fn __reduce361<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 7) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 7")
                }
                let __sym6 = __pop_Variant0(__symbols);
                let __sym5 = __pop_Variant14(__symbols);
                let __sym4 = __pop_Variant15(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant18(__symbols);
                let __sym0 = __pop_Variant36(__symbols);
                let __start = __sym0.0;
                let __end = __sym6.2;
                let __nt = super::__action329(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (7, 96)
            }
            fn __reduce362<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 6) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 6")
                }
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant15(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant18(__symbols);
                let __sym0 = __pop_Variant36(__symbols);
                let __start = __sym0.0;
                let __end = __sym5.2;
                let __nt = super::__action330(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (6, 96)
            }
            fn __reduce363<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 5) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 5")
                }
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant14(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant18(__symbols);
                let __sym0 = __pop_Variant36(__symbols);
                let __start = __sym0.0;
                let __end = __sym4.2;
                let __nt = super::__action331(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (5, 96)
            }
            fn __reduce364<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 4) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 4")
                }
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant18(__symbols);
                let __sym0 = __pop_Variant36(__symbols);
                let __start = __sym0.0;
                let __end = __sym3.2;
                let __nt = super::__action332(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (4, 96)
            }
            fn __reduce365<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 6) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 6")
                }
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant14(__symbols);
                let __sym3 = __pop_Variant15(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant18(__symbols);
                let __sym0 = __pop_Variant36(__symbols);
                let __start = __sym0.0;
                let __end = __sym5.2;
                let __nt = super::__action333(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (6, 96)
            }
            fn __reduce366<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 5) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 5")
                }
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant15(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant18(__symbols);
                let __sym0 = __pop_Variant36(__symbols);
                let __start = __sym0.0;
                let __end = __sym4.2;
                let __nt = super::__action334(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (5, 96)
            }
            fn __reduce367<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __sym0 = __pop_Variant12(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action589(errors, db, __sym0);
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (1, 97)
            }
            fn __reduce368<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __sym0 = __pop_Variant3(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action304(errors, db, __sym0);
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (1, 97)
            }
            fn __reduce369<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __sym0 = __pop_Variant18(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action35(errors, db, __sym0);
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (1, 97)
            }
            fn __reduce370<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __sym0 = __pop_Variant12(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action36(errors, db, __sym0);
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (1, 97)
            }
            fn __reduce371<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __sym0 = __pop_Variant32(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action305(errors, db, __sym0);
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (1, 97)
            }
            fn __reduce372<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __sym0 = __pop_Variant32(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action306(errors, db, __sym0);
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (1, 97)
            }
            fn __reduce373<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 3) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 3")
                }
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant12(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = super::__action39(errors, db, __sym0, __sym1, __sym2);
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (3, 97)
            }
            fn __reduce374<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __sym0 = __pop_Variant12(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action63(errors, db, __sym0);
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (1, 98)
            }
            fn __reduce375<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __sym0 = __pop_Variant12(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action64(errors, db, __sym0);
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (1, 98)
            }
            fn __reduce376<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __sym0 = __pop_Variant12(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action65(errors, db, __sym0);
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (1, 98)
            }
            fn __reduce377<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __sym0 = __pop_Variant12(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action66(errors, db, __sym0);
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (1, 98)
            }
            fn __reduce378<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __sym0 = __pop_Variant12(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action67(errors, db, __sym0);
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (1, 98)
            }
            fn __reduce379<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action12(errors, db, __sym0);
                __symbols.push((__start, __Symbol::Variant32(__nt), __end));
                (1, 99)
            }
            fn __reduce380<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 3) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 3")
                }
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant18(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = super::__action547(errors, db, __sym0, __sym1, __sym2);
                __symbols.push((__start, __Symbol::Variant44(__nt), __end));
                (3, 100)
            }
            fn __reduce381<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 2) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 2")
                }
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym1.2;
                let __nt = super::__action548(errors, db, __sym0, __sym1);
                __symbols.push((__start, __Symbol::Variant44(__nt), __end));
                (2, 100)
            }
            fn __reduce382<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 4) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 4")
                }
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant18(__symbols);
                let __sym1 = __pop_Variant19(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym3.2;
                let __nt = super::__action549(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                );
                __symbols.push((__start, __Symbol::Variant44(__nt), __end));
                (4, 100)
            }
            fn __reduce383<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 3) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 3")
                }
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant19(__symbols);
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym2.2;
                let __nt = super::__action550(errors, db, __sym0, __sym1, __sym2);
                __symbols.push((__start, __Symbol::Variant44(__nt), __end));
                (3, 100)
            }
            fn __reduce384<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action308(errors, db, __sym0);
                __symbols.push((__start, __Symbol::Variant30(__nt), __end));
                (1, 101)
            }
            fn __reduce385<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 6) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 6")
                }
                let __sym5 = __pop_Variant18(__symbols);
                let __sym4 = __pop_Variant30(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant18(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant36(__symbols);
                let __start = __sym0.0;
                let __end = __sym5.2;
                let __nt = super::__action551(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (6, 102)
            }
            fn __reduce386<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 5) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 5")
                }
                let __sym4 = __pop_Variant18(__symbols);
                let __sym3 = __pop_Variant30(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant36(__symbols);
                let __start = __sym0.0;
                let __end = __sym4.2;
                let __nt = super::__action552(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (5, 102)
            }
            fn __reduce387<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 7) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 7")
                }
                let __sym6 = __pop_Variant18(__symbols);
                let __sym5 = __pop_Variant30(__symbols);
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant18(__symbols);
                let __sym2 = __pop_Variant19(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant36(__symbols);
                let __start = __sym0.0;
                let __end = __sym6.2;
                let __nt = super::__action553(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (7, 102)
            }
            fn __reduce388<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 6) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 6")
                }
                let __sym5 = __pop_Variant18(__symbols);
                let __sym4 = __pop_Variant30(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant19(__symbols);
                let __sym1 = __pop_Variant0(__symbols);
                let __sym0 = __pop_Variant36(__symbols);
                let __start = __sym0.0;
                let __end = __sym5.2;
                let __nt = super::__action554(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                );
                __symbols.push((__start, __Symbol::Variant12(__nt), __end));
                (6, 102)
            }
            fn __reduce389<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action310(errors, db, __sym0);
                __symbols.push((__start, __Symbol::Variant45(__nt), __end));
                (1, 103)
            }
            fn __reduce390<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action311(errors, db, __sym0);
                __symbols.push((__start, __Symbol::Variant45(__nt), __end));
                (1, 103)
            }
            fn __reduce391<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __start = __lookahead_start
                    .cloned()
                    .or_else(|| __symbols.last().map(|s| s.2))
                    .unwrap_or_default();
                let __end = __start;
                let __nt = super::__action312(errors, db, &__start, &__end);
                __symbols.push((__start, __Symbol::Variant45(__nt), __end));
                (0, 103)
            }
            fn __reduce392<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                let __sym0 = __pop_Variant0(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action313(errors, db, __sym0);
                __symbols.push((__start, __Symbol::Variant30(__nt), __end));
                (1, 104)
            }
            fn __reduce393<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 6) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 6")
                }
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant12(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant18(__symbols);
                let __sym0 = __pop_Variant30(__symbols);
                let __start = __sym0.0;
                let __end = __sym5.2;
                let __nt = super::__action475(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                );
                __symbols.push((__start, __Symbol::Variant46(__nt), __end));
                (6, 105)
            }
            fn __reduce394<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 5) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 5")
                }
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant18(__symbols);
                let __sym0 = __pop_Variant30(__symbols);
                let __start = __sym0.0;
                let __end = __sym4.2;
                let __nt = super::__action476(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                );
                __symbols.push((__start, __Symbol::Variant46(__nt), __end));
                (5, 105)
            }
            fn __reduce395<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 7) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 7")
                }
                let __sym6 = __pop_Variant0(__symbols);
                let __sym5 = __pop_Variant12(__symbols);
                let __sym4 = __pop_Variant13(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant18(__symbols);
                let __sym0 = __pop_Variant30(__symbols);
                let __start = __sym0.0;
                let __end = __sym6.2;
                let __nt = super::__action477(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                    __sym6,
                );
                __symbols.push((__start, __Symbol::Variant46(__nt), __end));
                (7, 105)
            }
            fn __reduce396<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 6) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 6")
                }
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant13(__symbols);
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant18(__symbols);
                let __sym0 = __pop_Variant30(__symbols);
                let __start = __sym0.0;
                let __end = __sym5.2;
                let __nt = super::__action478(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                );
                __symbols.push((__start, __Symbol::Variant46(__nt), __end));
                (6, 105)
            }
            fn __reduce397<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 5) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 5")
                }
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant12(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant18(__symbols);
                let __sym0 = __pop_Variant30(__symbols);
                let __start = __sym0.0;
                let __end = __sym4.2;
                let __nt = super::__action479(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                );
                __symbols.push((__start, __Symbol::Variant46(__nt), __end));
                (5, 105)
            }
            fn __reduce398<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 4) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 4")
                }
                let __sym3 = __pop_Variant0(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant18(__symbols);
                let __sym0 = __pop_Variant30(__symbols);
                let __start = __sym0.0;
                let __end = __sym3.2;
                let __nt = super::__action480(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                );
                __symbols.push((__start, __Symbol::Variant46(__nt), __end));
                (4, 105)
            }
            fn __reduce399<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 6) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 6")
                }
                let __sym5 = __pop_Variant0(__symbols);
                let __sym4 = __pop_Variant12(__symbols);
                let __sym3 = __pop_Variant13(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant18(__symbols);
                let __sym0 = __pop_Variant30(__symbols);
                let __start = __sym0.0;
                let __end = __sym5.2;
                let __nt = super::__action481(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                    __sym5,
                );
                __symbols.push((__start, __Symbol::Variant46(__nt), __end));
                (6, 105)
            }
            fn __reduce400<'input, 'err>(
                errors: &'err mut Vec<
                    ErrorRecovery<Location, Token<'input>, &'static str>,
                >,
                db: &dyn Db,
                __lookahead_start: Option<&Location>,
                __symbols: &mut alloc::vec::Vec<(Location, __Symbol<'input>, Location)>,
                _: core::marker::PhantomData<(&'input (), &'err ())>,
            ) -> (usize, usize) {
                if !(__symbols.len() >= 5) {
                    ::core::panicking::panic("assertion failed: __symbols.len() >= 5")
                }
                let __sym4 = __pop_Variant0(__symbols);
                let __sym3 = __pop_Variant13(__symbols);
                let __sym2 = __pop_Variant0(__symbols);
                let __sym1 = __pop_Variant18(__symbols);
                let __sym0 = __pop_Variant30(__symbols);
                let __start = __sym0.0;
                let __end = __sym4.2;
                let __nt = super::__action482(
                    errors,
                    db,
                    __sym0,
                    __sym1,
                    __sym2,
                    __sym3,
                    __sym4,
                );
                __symbols.push((__start, __Symbol::Variant46(__nt), __end));
                (5, 105)
            }
        }
        #[allow(unused_imports)]
        pub use self::__parse__Source::SourceParser;
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action0<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, __0, _): (Location, Module, Location),
        ) -> Module {
            __0
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action1<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, lo, _): (Location, Location, Location),
            (_, _, _): (Location, Token<'input>, Location),
            (_, hi, _): (Location, Location, Location),
        ) -> Spanned<Keyword> {
            Spanned(lo, Keyword::None, hi)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action2<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, lo, _): (Location, Location, Location),
            (_, _, _): (Location, Token<'input>, Location),
            (_, hi, _): (Location, Location, Location),
        ) -> Spanned<Keyword> {
            Spanned(lo, Keyword::Fn, hi)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action3<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, lo, _): (Location, Location, Location),
            (_, _, _): (Location, Token<'input>, Location),
            (_, hi, _): (Location, Location, Location),
        ) -> Spanned<Keyword> {
            Spanned(lo, Keyword::Effect, hi)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action4<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, lo, _): (Location, Location, Location),
            (_, _, _): (Location, Token<'input>, Location),
            (_, hi, _): (Location, Location, Location),
        ) -> Spanned<Keyword> {
            Spanned(lo, Keyword::Struct, hi)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action5<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, lo, _): (Location, Location, Location),
            (_, _, _): (Location, Token<'input>, Location),
            (_, hi, _): (Location, Location, Location),
        ) -> Spanned<Keyword> {
            Spanned(lo, Keyword::If, hi)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action6<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, lo, _): (Location, Location, Location),
            (_, _, _): (Location, Token<'input>, Location),
            (_, hi, _): (Location, Location, Location),
        ) -> Spanned<Keyword> {
            Spanned(lo, Keyword::Else, hi)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action7<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, lo, _): (Location, Location, Location),
            (_, _, _): (Location, Token<'input>, Location),
            (_, hi, _): (Location, Location, Location),
        ) -> Spanned<Keyword> {
            Spanned(lo, Keyword::When, hi)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action8<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, lo, _): (Location, Location, Location),
            (_, _, _): (Location, Token<'input>, Location),
            (_, hi, _): (Location, Location, Location),
        ) -> Spanned<Keyword> {
            Spanned(lo, Keyword::Use, hi)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action9<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, lo, _): (Location, Location, Location),
            (_, _, _): (Location, Token<'input>, Location),
            (_, hi, _): (Location, Location, Location),
        ) -> Spanned<Keyword> {
            Spanned(lo, Keyword::From, hi)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action10<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, lo, _): (Location, Location, Location),
            (_, _, _): (Location, Token<'input>, Location),
            (_, hi, _): (Location, Location, Location),
        ) -> Spanned<Keyword> {
            Spanned(lo, Keyword::Impl, hi)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action11<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, lo, _): (Location, Location, Location),
            (_, _, _): (Location, Token<'input>, Location),
            (_, hi, _): (Location, Location, Location),
        ) -> Spanned<Keyword> {
            Spanned(lo, Keyword::Let, hi)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action12<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, __0, _): (Location, Token<'input>, Location),
        ) -> Node {
            Node::Bool(true)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action13<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, __0, _): (Location, Token<'input>, Location),
        ) -> Node {
            Node::Bool(false)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action14<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, l, _): (Location, Location, Location),
            (_, i, _): (Location, &'input str, Location),
            (_, r, _): (Location, Location, Location),
        ) -> Spanned<Ident> {
            Spanned(l, Ident(i.to_string(), None), r)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action15<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, l, _): (Location, Location, Location),
            (_, i, _): (Location, &'input str, Location),
            (_, _, _): (Location, Token<'input>, Location),
            (_, g, _): (Location, Vec<Spanned<Ident>>, Location),
            (_, _, _): (Location, Token<'input>, Location),
            (_, r, _): (Location, Location, Location),
        ) -> Spanned<Ident> {
            Spanned(l, Ident(i.to_string(), Some(g)), r)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action16<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, i, _): (Location, Spanned<Ident>, Location),
        ) -> Spanned<Ident> {
            i
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action17<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, i, _): (Location, Spanned<Ident>, Location),
        ) -> Spanned<Ident> {
            i
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action18<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, l, _): (Location, Location, Location),
            (_, _, _): (Location, Token<'input>, Location),
            (_, r, _): (Location, Location, Location),
        ) -> Spanned<Ident> {
            Spanned(l, Ident("self".to_string(), None), r)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action19<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, l, _): (Location, Location, Location),
            (_, i, _): (Location, i64, Location),
            (_, r, _): (Location, Location, Location),
        ) -> Spanned<Value> {
            Spanned(l, Value::Literal(Literal::Integer(i)), r)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action20<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, l, _): (Location, Location, Location),
            (_, f, _): (Location, f64, Location),
            (_, r, _): (Location, Location, Location),
        ) -> Spanned<Value> {
            Spanned(l, Value::Literal(Literal::Float(f)), r)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action21<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, l, _): (Location, Location, Location),
            (_, s, _): (Location, &'input str, Location),
            (_, r, _): (Location, Location, Location),
        ) -> Spanned<Value> {
            {
                let start = 1;
                let end = s.len() - 1;
                Spanned(
                    l,
                    Value::Literal(
                        Literal::String(
                            s
                                .get(start..end)
                                .expect(
                                    {
                                        let res = ::alloc::fmt::format(
                                            format_args!(
                                                "malformed string {0}, strings must be quoted",
                                                s,
                                            ),
                                        );
                                        res
                                    }
                                        .as_str(),
                                )
                                .to_string(),
                        ),
                    ),
                    r,
                )
            }
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action22<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, i, _): (Location, Spanned<Ident>, Location),
        ) -> Spanned<Value> {
            Spanned(i.0, Value::Ident(i.1), i.2)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action23<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, __0, _): (Location, Spanned<Value>, Location),
        ) -> Spanned<Value> {
            __0
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action24<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, l, _): (Location, Location, Location),
            (_, s, _): (Location, &'input str, Location),
            (_, r, _): (Location, Location, Location),
        ) -> Spanned<Node> {
            {
                let start = 1;
                let end = s.len() - 1;
                Spanned(
                    l,
                    Node::String(
                        s
                            .get(start..end)
                            .expect(
                                {
                                    let res = ::alloc::fmt::format(
                                        format_args!(
                                            "malformed string {0}, strings must be quoted",
                                            s,
                                        ),
                                    );
                                    res
                                }
                                    .as_str(),
                            )
                            .to_string(),
                    ),
                    r,
                )
            }
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action25<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, __0, _): (Location, Spanned<Node>, Location),
        ) -> Spanned<Node> {
            __0
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action26<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, lhs, _): (Location, Spanned<Node>, Location),
            (_, _, _): (Location, Token<'input>, Location),
            (_, rhs, _): (Location, Spanned<Node>, Location),
        ) -> Spanned<Node> {
            {
                let (l, r) = (lhs.2, rhs.0);
                Spanned(
                    l,
                    Node::BinaryExpression(BinaryOperation {
                        lhs: Box::new(lhs),
                        op: Operator::Mul,
                        rhs: Box::new(rhs),
                    }),
                    r,
                )
            }
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action27<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, l, _): (Location, Location, Location),
            (_, lhs, _): (Location, Spanned<Node>, Location),
            (_, _, _): (Location, Token<'input>, Location),
            (_, rhs, _): (Location, Spanned<Node>, Location),
            (_, r, _): (Location, Location, Location),
        ) -> Spanned<Node> {
            {
                let (l, r) = (lhs.2, rhs.0);
                Spanned(
                    l,
                    Node::BinaryExpression(BinaryOperation {
                        lhs: Box::new(lhs),
                        op: Operator::Div,
                        rhs: Box::new(rhs),
                    }),
                    r,
                )
            }
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action28<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, __0, _): (Location, Spanned<Node>, Location),
        ) -> Spanned<Node> {
            __0
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action29<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, lhs, _): (Location, Spanned<Node>, Location),
            (_, _, _): (Location, Token<'input>, Location),
            (_, rhs, _): (Location, Spanned<Node>, Location),
        ) -> Spanned<Node> {
            {
                let (l, r) = (lhs.2, rhs.0);
                Spanned(
                    l,
                    Node::BinaryExpression(BinaryOperation {
                        lhs: Box::new(lhs),
                        op: Operator::Add,
                        rhs: Box::new(rhs),
                    }),
                    r,
                )
            }
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action30<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, lhs, _): (Location, Spanned<Node>, Location),
            (_, _, _): (Location, Token<'input>, Location),
            (_, rhs, _): (Location, Spanned<Node>, Location),
        ) -> Spanned<Node> {
            {
                let (l, r) = (lhs.2, rhs.0);
                Spanned(
                    l,
                    Node::BinaryExpression(BinaryOperation {
                        lhs: Box::new(lhs),
                        op: Operator::Sub,
                        rhs: Box::new(rhs),
                    }),
                    r,
                )
            }
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action31<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, __0, _): (Location, Spanned<Node>, Location),
        ) -> Spanned<Node> {
            __0
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action32<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, name, _): (Location, Spanned<Ident>, Location),
            (_, _, _): (Location, Token<'input>, Location),
            (_, args, _): (Location, Vec<Spanned<Node>>, Location),
            (_, _, _): (Location, Token<'input>, Location),
            (_, r, _): (Location, Location, Location),
        ) -> Spanned<Node> {
            Spanned(name.0, Node::FnCall(FnCall(name, args)), r)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action33<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, s, _): (Location, Spanned<Spanned<Node>>, Location),
        ) -> Spanned<Node> {
            s.1
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action34<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, l, _): (Location, Location, Location),
            (_, val, _): (Location, i64, Location),
            (_, r, _): (Location, Location, Location),
        ) -> Spanned<Node> {
            Spanned(l, Node::Integer(val), r)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action35<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, i, _): (Location, Spanned<Ident>, Location),
        ) -> Spanned<Node> {
            {
                let (l, r) = (i.0, i.2);
                Spanned(l, Node::Ident(i), r)
            }
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action36<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, f, _): (Location, Spanned<Node>, Location),
        ) -> Spanned<Node> {
            f
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action37<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, l, _): (Location, Location, Location),
            (_, true_, _): (Location, Node, Location),
            (_, r, _): (Location, Location, Location),
        ) -> Spanned<Node> {
            Spanned(l, true_, r)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action38<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, l, _): (Location, Location, Location),
            (_, false_, _): (Location, Node, Location),
            (_, r, _): (Location, Location, Location),
        ) -> Spanned<Node> {
            Spanned(l, false_, r)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action39<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, _, _): (Location, Token<'input>, Location),
            (_, __0, _): (Location, Spanned<Node>, Location),
            (_, _, _): (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            __0
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action40<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, i, _): (Location, Spanned<Ident>, Location),
        ) -> Spanned<Node> {
            {
                let (l, r) = (i.0, i.2);
                Spanned(l, Node::Ident(i), r)
            }
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action41<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, f, _): (Location, Spanned<Node>, Location),
        ) -> Spanned<Node> {
            f
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action42<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, lhs, _): (Location, Spanned<Node>, Location),
            (_, _, _): (Location, Token<'input>, Location),
            (_, rhs, _): (Location, Spanned<Node>, Location),
        ) -> Spanned<Node> {
            {
                let (l, r) = (lhs.0, rhs.2);
                Spanned(
                    l,
                    Node::FieldAccess(FieldAccess(Box::new(lhs), Box::new(rhs))),
                    r,
                )
            }
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action43<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, lhs, _): (Location, Spanned<Node>, Location),
        ) -> Spanned<Node> {
            lhs
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action44<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, vis, _): (Location, Spanned<Visibility>, Location),
            (_, name, _): (Location, Spanned<Ident>, Location),
            (_, _, _): (Location, Token<'input>, Location),
            (_, ty, _): (Location, Spanned<Ident>, Location),
        ) -> Spanned<FieldDef> {
            {
                let (l, r) = (name.0, ty.2);
                Spanned(l, FieldDef(vis, name, ty), r)
            }
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action45<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, l, _): (Location, Location, Location),
            (_, _, _): (Location, Token<'input>, Location),
            (_, is, _): (Location, Vec<Spanned<Ident>>, Location),
            (_, _, _): (Location, Token<'input>, Location),
            (_, r, _): (Location, Location, Location),
        ) -> Spanned<Vec<Spanned<Ident>>> {
            Spanned(l, is, r)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action46<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, self_, _): (Location, Spanned<Token<'input>>, Location),
        ) -> Spanned<FnArg> {
            Spanned(self_.0, FnArg::Reciever, self_.2)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action47<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, field, _): (Location, Spanned<Spanned<FieldDef>>, Location),
        ) -> Spanned<FnArg> {
            {
                let (l, r) = (field.0, field.2);
                Spanned(l, FnArg::Field(field.1), r)
            }
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action48<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, l, _): (Location, Location, Location),
            (_, name, _): (Location, Spanned<Ident>, Location),
            (_, _, _): (Location, Token<'input>, Location),
            (_, args, _): (Location, Vec<Spanned<FnArg>>, Location),
            (_, _, _): (Location, Token<'input>, Location),
            (_, _, _): (Location, Token<'input>, Location),
            (_, effects, _): (Location, Vec<Spanned<Ident>>, Location),
            (_, _, _): (Location, Token<'input>, Location),
            (
                _,
                ret,
                _,
            ): (
                Location,
                core::option::Option<(Token<'input>, Spanned<Ident>)>,
                Location,
            ),
            (_, r, _): (Location, Location, Location),
        ) -> Spanned<Prototype> {
            {
                let ret = match ret {
                    None => None,
                    Some(r) => Some(r.1),
                };
                Spanned(
                    l,
                    Prototype {
                        name,
                        args,
                        ret,
                        effects,
                    },
                    r,
                )
            }
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action49<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, l, _): (Location, Location, Location),
            (_, _, _): (Location, Spanned<Keyword>, Location),
            (_, name, _): (Location, Spanned<Ident>, Location),
            (_, _, _): (Location, Token<'input>, Location),
            (_, value, _): (Location, Spanned<Node>, Location),
            (_, r, _): (Location, Location, Location),
        ) -> Spanned<Node> {
            Spanned(l, Node::Binding(Binding(name, Box::new(value))), r)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action50<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, __0, _): (Location, Spanned<Node>, Location),
        ) -> Spanned<Node> {
            __0
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action51<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, __0, _): (Location, Spanned<Node>, Location),
        ) -> Spanned<Node> {
            __0
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action52<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, l, _): (Location, Location, Location),
            (_, _, _): (Location, Token<'input>, Location),
            (_, r, _): (Location, Location, Location),
        ) -> Spanned<Visibility> {
            Spanned(l, Visibility::Public, r)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action53<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, l, _): (Location, Location, Location),
            (_, _, _): (Location, Token<'input>, Location),
            (_, r, _): (Location, Location, Location),
        ) -> Spanned<Visibility> {
            Spanned(l, Visibility::Private, r)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action54<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, l, _): (Location, Location, Location),
            (_, _, _): (Location, (), Location),
            (_, r, _): (Location, Location, Location),
        ) -> Spanned<Visibility> {
            Spanned(l, Visibility::Private, r)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action55<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, l, _): (Location, Location, Location),
            (_, _, _): (Location, Spanned<Keyword>, Location),
            (_, i, _): (Location, Spanned<Ident>, Location),
            (_, lines, _): (Location, Block<Spanned<Node>>, Location),
            (_, r, _): (Location, Location, Location),
        ) -> (Spanned<Ident>, Block<Spanned<Node>>) {
            (i, lines)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action56<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, l, _): (Location, Location, Location),
            (_, kwv, _): (Location, Spanned<KeywordAndVisibility>, Location),
            (_, proto, _): (Location, Spanned<Prototype>, Location),
            (_, block, _): (Location, Block<Spanned<Node>>, Location),
            (_, r, _): (Location, Location, Location),
        ) -> Spanned<Node> {
            Spanned(l, Node::FnDef(FnDef(kwv, proto, block)), r)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action57<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, l, _): (Location, Location, Location),
            (_, kwv, _): (Location, Spanned<KeywordAndVisibility>, Location),
            (_, i, _): (Location, Spanned<Ident>, Location),
            (_, _, _): (Location, Token<'input>, Location),
            (_, effects, _): (Location, Vec<Spanned<Ident>>, Location),
            (_, block, _): (Location, Block<Spanned<Prototype>>, Location),
            (_, r, _): (Location, Location, Location),
        ) -> Spanned<Node> {
            Spanned(l, Node::EffectDef(EffectDef(kwv, i, effects, block)), r)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action58<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, l, _): (Location, Location, Location),
            (_, kwv, _): (Location, Spanned<KeywordAndVisibility>, Location),
            (_, i, _): (Location, Spanned<Ident>, Location),
            (_, fields, _): (Location, Block<Spanned<FieldDef>>, Location),
            (_, r, _): (Location, Location, Location),
        ) -> Spanned<Node> {
            Spanned(l, Node::StructDef(StructDef(kwv, i, fields)), r)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action59<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, l, _): (Location, Location, Location),
            (_, _, _): (Location, Spanned<Keyword>, Location),
            (_, cl, _): (Location, Location, Location),
            (_, cond, _): (Location, Spanned<Node>, Location),
            (_, cr, _): (Location, Location, Location),
            (_, if_, _): (Location, Block<Spanned<Node>>, Location),
            (_, r, _): (Location, Location, Location),
        ) -> Spanned<Node> {
            {
                let branch = BranchDef(
                    Box::new(cond),
                    <[_]>::into_vec(
                        #[rustc_box]
                        ::alloc::boxed::Box::new([
                            (Spanned(l, Node::Bool(true), cl), if_),
                        ]),
                    ),
                );
                Spanned(l, Node::Branch(branch), r)
            }
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action60<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, l, _): (Location, Location, Location),
            (_, _, _): (Location, Spanned<Keyword>, Location),
            (_, cl, _): (Location, Location, Location),
            (_, cond, _): (Location, Spanned<Node>, Location),
            (_, cr, _): (Location, Location, Location),
            (_, if_, _): (Location, Block<Spanned<Node>>, Location),
            (_, el, _): (Location, Location, Location),
            (_, _, _): (Location, Spanned<Keyword>, Location),
            (_, er, _): (Location, Location, Location),
            (_, else_, _): (Location, Block<Spanned<Node>>, Location),
            (_, r, _): (Location, Location, Location),
        ) -> Spanned<Node> {
            {
                let branch = BranchDef(
                    Box::new(cond),
                    <[_]>::into_vec(
                        #[rustc_box]
                        ::alloc::boxed::Box::new([
                            (Spanned(l, Node::Bool(true), cl), if_),
                            (Spanned(el, Node::Bool(false), er), else_),
                        ]),
                    ),
                );
                Spanned(l, Node::Branch(branch), r)
            }
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action61<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, l, _): (Location, Location, Location),
            (_, kwv, _): (Location, Spanned<KeywordAndVisibility>, Location),
            (_, _, _): (Location, Token<'input>, Location),
            (_, imports, _): (Location, Vec<Spanned<Ident>>, Location),
            (_, _, _): (Location, Token<'input>, Location),
            (_, _, _): (Location, Spanned<Keyword>, Location),
            (_, i, _): (Location, Spanned<Ident>, Location),
            (_, r, _): (Location, Location, Location),
        ) -> Spanned<Node> {
            { Spanned(l, Node::UseDef(UseDef(kwv, imports, i)), r) }
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action62<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, l, _): (Location, Location, Location),
            (_, kwv, _): (Location, Spanned<KeywordAndVisibility>, Location),
            (_, i, _): (Location, Spanned<Ident>, Location),
            (
                _,
                t,
                _,
            ): (
                Location,
                core::option::Option<(Token<'input>, Spanned<Ident>)>,
                Location,
            ),
            (_, lines, _): (Location, Block<Spanned<Node>>, Location),
            (_, r, _): (Location, Location, Location),
        ) -> Spanned<Node> {
            Spanned(l, Node::ImplDef(ImplDef(kwv, i, t.map(|t| t.1), lines)), r)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action63<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, __0, _): (Location, Spanned<Node>, Location),
        ) -> Spanned<Node> {
            __0
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action64<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, __0, _): (Location, Spanned<Node>, Location),
        ) -> Spanned<Node> {
            __0
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action65<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, __0, _): (Location, Spanned<Node>, Location),
        ) -> Spanned<Node> {
            __0
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action66<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, __0, _): (Location, Spanned<Node>, Location),
        ) -> Spanned<Node> {
            __0
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action67<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, __0, _): (Location, Spanned<Node>, Location),
        ) -> Spanned<Node> {
            __0
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action68<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (
                _,
                expr,
                _,
            ): (
                Location,
                alloc::vec::Vec<(alloc::vec::Vec<Token<'input>>, Spanned<Node>)>,
                Location,
            ),
        ) -> Module {
            Module(expr.into_iter().map(|e| e.1).collect())
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action69<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (
                _,
                __0,
                _,
            ): (
                Location,
                __lalrpop_util::ErrorRecovery<Location, Token<'input>, &'static str>,
                Location,
            ),
        ) -> Module {
            {
                errors.push(__0);
                Module(::alloc::vec::Vec::new())
            }
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action70<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __lookbehind: &Location,
            __lookahead: &Location,
        ) -> alloc::vec::Vec<(alloc::vec::Vec<Token<'input>>, Spanned<Node>)> {
            ::alloc::vec::Vec::new()
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action71<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (
                _,
                v,
                _,
            ): (
                Location,
                alloc::vec::Vec<(alloc::vec::Vec<Token<'input>>, Spanned<Node>)>,
                Location,
            ),
        ) -> alloc::vec::Vec<(alloc::vec::Vec<Token<'input>>, Spanned<Node>)> {
            v
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action72<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, __0, _): (Location, alloc::vec::Vec<Token<'input>>, Location),
            (_, __1, _): (Location, Spanned<Node>, Location),
        ) -> (alloc::vec::Vec<Token<'input>>, Spanned<Node>) {
            (__0, __1)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action73<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __lookbehind: &Location,
            __lookahead: &Location,
        ) -> alloc::vec::Vec<Token<'input>> {
            ::alloc::vec::Vec::new()
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action74<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, v, _): (Location, alloc::vec::Vec<Token<'input>>, Location),
        ) -> alloc::vec::Vec<Token<'input>> {
            v
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action75<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, _, _): (Location, Token<'input>, Location),
            (_, _, _): (Location, core::option::Option<Token<'input>>, Location),
            (_, lines, _): (Location, Vec<Spanned<Node>>, Location),
            (_, _, _): (Location, Token<'input>, Location),
        ) -> Block<Spanned<Node>> {
            Block(lines)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action76<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, __0, _): (Location, (Token<'input>, Spanned<Ident>), Location),
        ) -> core::option::Option<(Token<'input>, Spanned<Ident>)> {
            Some(__0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action77<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __lookbehind: &Location,
            __lookahead: &Location,
        ) -> core::option::Option<(Token<'input>, Spanned<Ident>)> {
            None
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action78<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, __0, _): (Location, Token<'input>, Location),
            (_, __1, _): (Location, Spanned<Ident>, Location),
        ) -> (Token<'input>, Spanned<Ident>) {
            (__0, __1)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action79<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, lo, _): (Location, Location, Location),
            (_, v, _): (Location, Spanned<Visibility>, Location),
            (_, k, _): (Location, Spanned<Keyword>, Location),
            (_, hi, _): (Location, Location, Location),
        ) -> Spanned<KeywordAndVisibility> {
            Spanned(lo, KeywordAndVisibility(k, v), hi)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action80<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, lo, _): (Location, Location, Location),
            (_, v, _): (Location, Spanned<Visibility>, Location),
            (_, k, _): (Location, Spanned<Keyword>, Location),
            (_, hi, _): (Location, Location, Location),
        ) -> Spanned<KeywordAndVisibility> {
            Spanned(lo, KeywordAndVisibility(k, v), hi)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action81<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, _, _): (Location, Token<'input>, Location),
            (_, _, _): (Location, core::option::Option<Token<'input>>, Location),
            (_, lines, _): (Location, Vec<Spanned<FieldDef>>, Location),
            (_, _, _): (Location, Token<'input>, Location),
        ) -> Block<Spanned<FieldDef>> {
            Block(lines)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action82<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, lo, _): (Location, Location, Location),
            (_, v, _): (Location, Spanned<Visibility>, Location),
            (_, k, _): (Location, Spanned<Keyword>, Location),
            (_, hi, _): (Location, Location, Location),
        ) -> Spanned<KeywordAndVisibility> {
            Spanned(lo, KeywordAndVisibility(k, v), hi)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action83<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, _, _): (Location, Token<'input>, Location),
            (_, _, _): (Location, core::option::Option<Token<'input>>, Location),
            (_, lines, _): (Location, Vec<Spanned<Prototype>>, Location),
            (_, _, _): (Location, Token<'input>, Location),
        ) -> Block<Spanned<Prototype>> {
            Block(lines)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action84<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, mut v, _): (Location, alloc::vec::Vec<Spanned<Ident>>, Location),
            (_, e, _): (Location, core::option::Option<Spanned<Ident>>, Location),
        ) -> Vec<Spanned<Ident>> {
            match e {
                None => v,
                Some(e) => {
                    v.push(e);
                    v
                }
            }
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action85<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, lo, _): (Location, Location, Location),
            (_, v, _): (Location, Spanned<Visibility>, Location),
            (_, k, _): (Location, Spanned<Keyword>, Location),
            (_, hi, _): (Location, Location, Location),
        ) -> Spanned<KeywordAndVisibility> {
            Spanned(lo, KeywordAndVisibility(k, v), hi)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action86<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, lo, _): (Location, Location, Location),
            (_, v, _): (Location, Spanned<Visibility>, Location),
            (_, k, _): (Location, Spanned<Keyword>, Location),
            (_, hi, _): (Location, Location, Location),
        ) -> Spanned<KeywordAndVisibility> {
            Spanned(lo, KeywordAndVisibility(k, v), hi)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action87<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, _, _): (Location, Token<'input>, Location),
            (_, _, _): (Location, core::option::Option<Token<'input>>, Location),
            (_, lines, _): (Location, Vec<Spanned<Node>>, Location),
            (_, _, _): (Location, Token<'input>, Location),
        ) -> Block<Spanned<Node>> {
            Block(lines)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action88<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __lookbehind: &Location,
            __lookahead: &Location,
        ) {}
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action89<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, __0, _): (Location, (Token<'input>, Spanned<Ident>), Location),
        ) -> core::option::Option<(Token<'input>, Spanned<Ident>)> {
            Some(__0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action90<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __lookbehind: &Location,
            __lookahead: &Location,
        ) -> core::option::Option<(Token<'input>, Spanned<Ident>)> {
            None
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action91<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, __0, _): (Location, Token<'input>, Location),
            (_, __1, _): (Location, Spanned<Ident>, Location),
        ) -> (Token<'input>, Spanned<Ident>) {
            (__0, __1)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action92<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, mut v, _): (Location, alloc::vec::Vec<Spanned<FnArg>>, Location),
            (_, e, _): (Location, core::option::Option<Spanned<FnArg>>, Location),
        ) -> Vec<Spanned<FnArg>> {
            match e {
                None => v,
                Some(e) => {
                    v.push(e);
                    v
                }
            }
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action93<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, __0, _): (Location, Location, Location),
            (_, __1, _): (Location, Spanned<FieldDef>, Location),
            (_, __2, _): (Location, Location, Location),
        ) -> Spanned<Spanned<FieldDef>> {
            Spanned(__0, __1, __2)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action94<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, __0, _): (Location, Location, Location),
            (_, __1, _): (Location, Token<'input>, Location),
            (_, __2, _): (Location, Location, Location),
        ) -> Spanned<Token<'input>> {
            Spanned(__0, __1, __2)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action95<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, __0, _): (Location, Location, Location),
            (_, __1, _): (Location, Spanned<Node>, Location),
            (_, __2, _): (Location, Location, Location),
        ) -> Spanned<Spanned<Node>> {
            Spanned(__0, __1, __2)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action96<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, mut v, _): (Location, alloc::vec::Vec<Spanned<Node>>, Location),
            (_, e, _): (Location, core::option::Option<Spanned<Node>>, Location),
        ) -> Vec<Spanned<Node>> {
            match e {
                None => v,
                Some(e) => {
                    v.push(e);
                    v
                }
            }
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action97<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, mut v, _): (Location, alloc::vec::Vec<Spanned<Ident>>, Location),
            (_, e, _): (Location, core::option::Option<Spanned<Ident>>, Location),
        ) -> Vec<Spanned<Ident>> {
            match e {
                None => v,
                Some(e) => {
                    v.push(e);
                    v
                }
            }
        }
        #[allow(unused_variables)]
        fn __action98<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __lookbehind: &Location,
            __lookahead: &Location,
        ) -> Location {
            *__lookbehind
        }
        #[allow(unused_variables)]
        fn __action99<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __lookbehind: &Location,
            __lookahead: &Location,
        ) -> Location {
            *__lookahead
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action100<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __lookbehind: &Location,
            __lookahead: &Location,
        ) -> alloc::vec::Vec<Spanned<Ident>> {
            ::alloc::vec::Vec::new()
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action101<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, v, _): (Location, alloc::vec::Vec<Spanned<Ident>>, Location),
        ) -> alloc::vec::Vec<Spanned<Ident>> {
            v
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action102<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, __0, _): (Location, Spanned<Ident>, Location),
            (_, _, _): (Location, Token<'input>, Location),
        ) -> Spanned<Ident> {
            __0
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action103<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, __0, _): (Location, Spanned<Node>, Location),
        ) -> core::option::Option<Spanned<Node>> {
            Some(__0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action104<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __lookbehind: &Location,
            __lookahead: &Location,
        ) -> core::option::Option<Spanned<Node>> {
            None
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action105<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __lookbehind: &Location,
            __lookahead: &Location,
        ) -> alloc::vec::Vec<Spanned<Node>> {
            ::alloc::vec::Vec::new()
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action106<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, v, _): (Location, alloc::vec::Vec<Spanned<Node>>, Location),
        ) -> alloc::vec::Vec<Spanned<Node>> {
            v
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action107<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, __0, _): (Location, Spanned<Node>, Location),
            (_, _, _): (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            __0
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action108<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, __0, _): (Location, Spanned<FnArg>, Location),
        ) -> core::option::Option<Spanned<FnArg>> {
            Some(__0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action109<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __lookbehind: &Location,
            __lookahead: &Location,
        ) -> core::option::Option<Spanned<FnArg>> {
            None
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action110<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __lookbehind: &Location,
            __lookahead: &Location,
        ) -> alloc::vec::Vec<Spanned<FnArg>> {
            ::alloc::vec::Vec::new()
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action111<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, v, _): (Location, alloc::vec::Vec<Spanned<FnArg>>, Location),
        ) -> alloc::vec::Vec<Spanned<FnArg>> {
            v
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action112<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, __0, _): (Location, Spanned<FnArg>, Location),
            (_, _, _): (Location, Token<'input>, Location),
        ) -> Spanned<FnArg> {
            __0
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action113<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, mut v, _): (Location, alloc::vec::Vec<Spanned<Node>>, Location),
            (_, e, _): (Location, core::option::Option<Spanned<Node>>, Location),
        ) -> Vec<Spanned<Node>> {
            match e {
                None => v,
                Some(e) => {
                    v.push(e);
                    v
                }
            }
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action114<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, __0, _): (Location, Spanned<Ident>, Location),
        ) -> core::option::Option<Spanned<Ident>> {
            Some(__0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action115<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __lookbehind: &Location,
            __lookahead: &Location,
        ) -> core::option::Option<Spanned<Ident>> {
            None
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action116<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __lookbehind: &Location,
            __lookahead: &Location,
        ) -> alloc::vec::Vec<Spanned<Ident>> {
            ::alloc::vec::Vec::new()
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action117<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, v, _): (Location, alloc::vec::Vec<Spanned<Ident>>, Location),
        ) -> alloc::vec::Vec<Spanned<Ident>> {
            v
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action118<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, __0, _): (Location, Spanned<Ident>, Location),
            (_, _, _): (Location, Token<'input>, Location),
        ) -> Spanned<Ident> {
            __0
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action119<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, mut v, _): (Location, alloc::vec::Vec<Spanned<Prototype>>, Location),
            (_, e, _): (Location, core::option::Option<Spanned<Prototype>>, Location),
        ) -> Vec<Spanned<Prototype>> {
            match e {
                None => v,
                Some(e) => {
                    v.push(e);
                    v
                }
            }
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action120<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, mut v, _): (Location, alloc::vec::Vec<Spanned<FieldDef>>, Location),
            (_, e, _): (Location, core::option::Option<Spanned<FieldDef>>, Location),
        ) -> Vec<Spanned<FieldDef>> {
            match e {
                None => v,
                Some(e) => {
                    v.push(e);
                    v
                }
            }
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action121<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, mut v, _): (Location, alloc::vec::Vec<Spanned<Node>>, Location),
            (_, e, _): (Location, core::option::Option<Spanned<Node>>, Location),
        ) -> Vec<Spanned<Node>> {
            match e {
                None => v,
                Some(e) => {
                    v.push(e);
                    v
                }
            }
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action122<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, __0, _): (Location, core::option::Option<Token<'input>>, Location),
        ) -> core::option::Option<Token<'input>> {
            __0
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action123<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, __0, _): (Location, Token<'input>, Location),
        ) -> core::option::Option<Token<'input>> {
            Some(__0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action124<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __lookbehind: &Location,
            __lookahead: &Location,
        ) -> core::option::Option<Token<'input>> {
            None
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action125<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, __0, _): (Location, Token<'input>, Location),
        ) -> alloc::vec::Vec<Token<'input>> {
            <[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([__0]))
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action126<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, v, _): (Location, alloc::vec::Vec<Token<'input>>, Location),
            (_, e, _): (Location, Token<'input>, Location),
        ) -> alloc::vec::Vec<Token<'input>> {
            {
                let mut v = v;
                v.push(e);
                v
            }
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action127<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (
                _,
                __0,
                _,
            ): (Location, (alloc::vec::Vec<Token<'input>>, Spanned<Node>), Location),
        ) -> alloc::vec::Vec<(alloc::vec::Vec<Token<'input>>, Spanned<Node>)> {
            <[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([__0]))
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action128<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (
                _,
                v,
                _,
            ): (
                Location,
                alloc::vec::Vec<(alloc::vec::Vec<Token<'input>>, Spanned<Node>)>,
                Location,
            ),
            (
                _,
                e,
                _,
            ): (Location, (alloc::vec::Vec<Token<'input>>, Spanned<Node>), Location),
        ) -> alloc::vec::Vec<(alloc::vec::Vec<Token<'input>>, Spanned<Node>)> {
            {
                let mut v = v;
                v.push(e);
                v
            }
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action129<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, __0, _): (Location, Spanned<Node>, Location),
        ) -> core::option::Option<Spanned<Node>> {
            Some(__0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action130<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __lookbehind: &Location,
            __lookahead: &Location,
        ) -> core::option::Option<Spanned<Node>> {
            None
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action131<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __lookbehind: &Location,
            __lookahead: &Location,
        ) -> alloc::vec::Vec<Spanned<Node>> {
            ::alloc::vec::Vec::new()
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action132<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, v, _): (Location, alloc::vec::Vec<Spanned<Node>>, Location),
        ) -> alloc::vec::Vec<Spanned<Node>> {
            v
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action133<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, __0, _): (Location, Spanned<Node>, Location),
            (_, _, _): (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            __0
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action134<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, __0, _): (Location, Spanned<FieldDef>, Location),
        ) -> core::option::Option<Spanned<FieldDef>> {
            Some(__0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action135<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __lookbehind: &Location,
            __lookahead: &Location,
        ) -> core::option::Option<Spanned<FieldDef>> {
            None
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action136<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __lookbehind: &Location,
            __lookahead: &Location,
        ) -> alloc::vec::Vec<Spanned<FieldDef>> {
            ::alloc::vec::Vec::new()
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action137<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, v, _): (Location, alloc::vec::Vec<Spanned<FieldDef>>, Location),
        ) -> alloc::vec::Vec<Spanned<FieldDef>> {
            v
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action138<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, __0, _): (Location, Spanned<FieldDef>, Location),
            (_, _, _): (Location, Token<'input>, Location),
        ) -> Spanned<FieldDef> {
            __0
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action139<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, __0, _): (Location, Spanned<Prototype>, Location),
        ) -> core::option::Option<Spanned<Prototype>> {
            Some(__0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action140<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __lookbehind: &Location,
            __lookahead: &Location,
        ) -> core::option::Option<Spanned<Prototype>> {
            None
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action141<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __lookbehind: &Location,
            __lookahead: &Location,
        ) -> alloc::vec::Vec<Spanned<Prototype>> {
            ::alloc::vec::Vec::new()
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action142<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, v, _): (Location, alloc::vec::Vec<Spanned<Prototype>>, Location),
        ) -> alloc::vec::Vec<Spanned<Prototype>> {
            v
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action143<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, __0, _): (Location, Spanned<Prototype>, Location),
            (_, _, _): (Location, Token<'input>, Location),
        ) -> Spanned<Prototype> {
            __0
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action144<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, __0, _): (Location, Spanned<Ident>, Location),
        ) -> alloc::vec::Vec<Spanned<Ident>> {
            <[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([__0]))
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action145<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, v, _): (Location, alloc::vec::Vec<Spanned<Ident>>, Location),
            (_, e, _): (Location, Spanned<Ident>, Location),
        ) -> alloc::vec::Vec<Spanned<Ident>> {
            {
                let mut v = v;
                v.push(e);
                v
            }
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action146<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, __0, _): (Location, Spanned<Node>, Location),
        ) -> core::option::Option<Spanned<Node>> {
            Some(__0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action147<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __lookbehind: &Location,
            __lookahead: &Location,
        ) -> core::option::Option<Spanned<Node>> {
            None
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action148<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __lookbehind: &Location,
            __lookahead: &Location,
        ) -> alloc::vec::Vec<Spanned<Node>> {
            ::alloc::vec::Vec::new()
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action149<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, v, _): (Location, alloc::vec::Vec<Spanned<Node>>, Location),
        ) -> alloc::vec::Vec<Spanned<Node>> {
            v
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action150<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, __0, _): (Location, Spanned<Node>, Location),
            (_, _, _): (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            __0
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action151<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, __0, _): (Location, Spanned<FnArg>, Location),
        ) -> alloc::vec::Vec<Spanned<FnArg>> {
            <[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([__0]))
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action152<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, v, _): (Location, alloc::vec::Vec<Spanned<FnArg>>, Location),
            (_, e, _): (Location, Spanned<FnArg>, Location),
        ) -> alloc::vec::Vec<Spanned<FnArg>> {
            {
                let mut v = v;
                v.push(e);
                v
            }
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action153<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, __0, _): (Location, Spanned<Node>, Location),
        ) -> alloc::vec::Vec<Spanned<Node>> {
            <[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([__0]))
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action154<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, v, _): (Location, alloc::vec::Vec<Spanned<Node>>, Location),
            (_, e, _): (Location, Spanned<Node>, Location),
        ) -> alloc::vec::Vec<Spanned<Node>> {
            {
                let mut v = v;
                v.push(e);
                v
            }
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action155<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, __0, _): (Location, Spanned<Ident>, Location),
        ) -> alloc::vec::Vec<Spanned<Ident>> {
            <[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([__0]))
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action156<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, v, _): (Location, alloc::vec::Vec<Spanned<Ident>>, Location),
            (_, e, _): (Location, Spanned<Ident>, Location),
        ) -> alloc::vec::Vec<Spanned<Ident>> {
            {
                let mut v = v;
                v.push(e);
                v
            }
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action157<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, __0, _): (Location, Spanned<Node>, Location),
        ) -> alloc::vec::Vec<Spanned<Node>> {
            <[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([__0]))
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action158<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, v, _): (Location, alloc::vec::Vec<Spanned<Node>>, Location),
            (_, e, _): (Location, Spanned<Node>, Location),
        ) -> alloc::vec::Vec<Spanned<Node>> {
            {
                let mut v = v;
                v.push(e);
                v
            }
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action159<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, __0, _): (Location, Spanned<Prototype>, Location),
        ) -> alloc::vec::Vec<Spanned<Prototype>> {
            <[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([__0]))
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action160<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, v, _): (Location, alloc::vec::Vec<Spanned<Prototype>>, Location),
            (_, e, _): (Location, Spanned<Prototype>, Location),
        ) -> alloc::vec::Vec<Spanned<Prototype>> {
            {
                let mut v = v;
                v.push(e);
                v
            }
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action161<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, __0, _): (Location, Spanned<FieldDef>, Location),
        ) -> alloc::vec::Vec<Spanned<FieldDef>> {
            <[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([__0]))
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action162<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, v, _): (Location, alloc::vec::Vec<Spanned<FieldDef>>, Location),
            (_, e, _): (Location, Spanned<FieldDef>, Location),
        ) -> alloc::vec::Vec<Spanned<FieldDef>> {
            {
                let mut v = v;
                v.push(e);
                v
            }
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action163<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, __0, _): (Location, Spanned<Node>, Location),
        ) -> alloc::vec::Vec<Spanned<Node>> {
            <[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([__0]))
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action164<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            (_, v, _): (Location, alloc::vec::Vec<Spanned<Node>>, Location),
            (_, e, _): (Location, Spanned<Node>, Location),
        ) -> alloc::vec::Vec<Spanned<Node>> {
            {
                let mut v = v;
                v.push(e);
                v
            }
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action165<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Node>, Location),
        ) -> (alloc::vec::Vec<Token<'input>>, Spanned<Node>) {
            let __start0 = __0.0;
            let __end0 = __0.0;
            let __temp0 = __action73(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action72(errors, db, __temp0, __0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action166<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, alloc::vec::Vec<Token<'input>>, Location),
            __1: (Location, Spanned<Node>, Location),
        ) -> (alloc::vec::Vec<Token<'input>>, Spanned<Node>) {
            let __start0 = __0.0;
            let __end0 = __0.2;
            let __temp0 = __action74(errors, db, __0);
            let __temp0 = (__start0, __temp0, __end0);
            __action72(errors, db, __temp0, __1)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action167<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Token<'input>, Location),
        ) -> core::option::Option<Token<'input>> {
            let __start0 = __0.0;
            let __end0 = __0.2;
            let __temp0 = __action123(errors, db, __0);
            let __temp0 = (__start0, __temp0, __end0);
            __action122(errors, db, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action168<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __lookbehind: &Location,
            __lookahead: &Location,
        ) -> core::option::Option<Token<'input>> {
            let __start0 = *__lookbehind;
            let __end0 = *__lookahead;
            let __temp0 = __action124(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action122(errors, db, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action169<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Token<'input>, Location),
            __1: (Location, Spanned<Ident>, Location),
        ) -> core::option::Option<(Token<'input>, Spanned<Ident>)> {
            let __start0 = __0.0;
            let __end0 = __1.2;
            let __temp0 = __action91(errors, db, __0, __1);
            let __temp0 = (__start0, __temp0, __end0);
            __action89(errors, db, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action170<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Location, Location),
            __1: (Location, Spanned<Ident>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Vec<Spanned<FnArg>>, Location),
            __4: (Location, Token<'input>, Location),
            __5: (Location, Token<'input>, Location),
            __6: (Location, Vec<Spanned<Ident>>, Location),
            __7: (Location, Token<'input>, Location),
            __8: (Location, Token<'input>, Location),
            __9: (Location, Spanned<Ident>, Location),
            __10: (Location, Location, Location),
        ) -> Spanned<Prototype> {
            let __start0 = __8.0;
            let __end0 = __9.2;
            let __temp0 = __action169(errors, db, __8, __9);
            let __temp0 = (__start0, __temp0, __end0);
            __action48(errors, db, __0, __1, __2, __3, __4, __5, __6, __7, __temp0, __10)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action171<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Location, Location),
            __1: (Location, Spanned<Ident>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Vec<Spanned<FnArg>>, Location),
            __4: (Location, Token<'input>, Location),
            __5: (Location, Token<'input>, Location),
            __6: (Location, Vec<Spanned<Ident>>, Location),
            __7: (Location, Token<'input>, Location),
            __8: (Location, Location, Location),
        ) -> Spanned<Prototype> {
            let __start0 = __7.2;
            let __end0 = __8.0;
            let __temp0 = __action90(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action48(errors, db, __0, __1, __2, __3, __4, __5, __6, __7, __temp0, __8)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action172<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Node>, Location),
        ) -> alloc::vec::Vec<(alloc::vec::Vec<Token<'input>>, Spanned<Node>)> {
            let __start0 = __0.0;
            let __end0 = __0.2;
            let __temp0 = __action165(errors, db, __0);
            let __temp0 = (__start0, __temp0, __end0);
            __action127(errors, db, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action173<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, alloc::vec::Vec<Token<'input>>, Location),
            __1: (Location, Spanned<Node>, Location),
        ) -> alloc::vec::Vec<(alloc::vec::Vec<Token<'input>>, Spanned<Node>)> {
            let __start0 = __0.0;
            let __end0 = __1.2;
            let __temp0 = __action166(errors, db, __0, __1);
            let __temp0 = (__start0, __temp0, __end0);
            __action127(errors, db, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action174<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (
                Location,
                alloc::vec::Vec<(alloc::vec::Vec<Token<'input>>, Spanned<Node>)>,
                Location,
            ),
            __1: (Location, Spanned<Node>, Location),
        ) -> alloc::vec::Vec<(alloc::vec::Vec<Token<'input>>, Spanned<Node>)> {
            let __start0 = __1.0;
            let __end0 = __1.2;
            let __temp0 = __action165(errors, db, __1);
            let __temp0 = (__start0, __temp0, __end0);
            __action128(errors, db, __0, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action175<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (
                Location,
                alloc::vec::Vec<(alloc::vec::Vec<Token<'input>>, Spanned<Node>)>,
                Location,
            ),
            __1: (Location, alloc::vec::Vec<Token<'input>>, Location),
            __2: (Location, Spanned<Node>, Location),
        ) -> alloc::vec::Vec<(alloc::vec::Vec<Token<'input>>, Spanned<Node>)> {
            let __start0 = __1.0;
            let __end0 = __2.2;
            let __temp0 = __action166(errors, db, __1, __2);
            let __temp0 = (__start0, __temp0, __end0);
            __action128(errors, db, __0, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action176<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __lookbehind: &Location,
            __lookahead: &Location,
        ) -> Module {
            let __start0 = *__lookbehind;
            let __end0 = *__lookahead;
            let __temp0 = __action70(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action68(errors, db, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action177<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (
                Location,
                alloc::vec::Vec<(alloc::vec::Vec<Token<'input>>, Spanned<Node>)>,
                Location,
            ),
        ) -> Module {
            let __start0 = __0.0;
            let __end0 = __0.2;
            let __temp0 = __action71(errors, db, __0);
            let __temp0 = (__start0, __temp0, __end0);
            __action68(errors, db, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action178<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Token<'input>, Location),
            __1: (Location, Token<'input>, Location),
            __2: (Location, Vec<Spanned<FieldDef>>, Location),
            __3: (Location, Token<'input>, Location),
        ) -> Block<Spanned<FieldDef>> {
            let __start0 = __1.0;
            let __end0 = __1.2;
            let __temp0 = __action167(errors, db, __1);
            let __temp0 = (__start0, __temp0, __end0);
            __action81(errors, db, __0, __temp0, __2, __3)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action179<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Token<'input>, Location),
            __1: (Location, Vec<Spanned<FieldDef>>, Location),
            __2: (Location, Token<'input>, Location),
        ) -> Block<Spanned<FieldDef>> {
            let __start0 = __0.2;
            let __end0 = __1.0;
            let __temp0 = __action168(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action81(errors, db, __0, __temp0, __1, __2)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action180<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Token<'input>, Location),
            __1: (Location, Token<'input>, Location),
            __2: (Location, Vec<Spanned<Node>>, Location),
            __3: (Location, Token<'input>, Location),
        ) -> Block<Spanned<Node>> {
            let __start0 = __1.0;
            let __end0 = __1.2;
            let __temp0 = __action167(errors, db, __1);
            let __temp0 = (__start0, __temp0, __end0);
            __action75(errors, db, __0, __temp0, __2, __3)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action181<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Token<'input>, Location),
            __1: (Location, Vec<Spanned<Node>>, Location),
            __2: (Location, Token<'input>, Location),
        ) -> Block<Spanned<Node>> {
            let __start0 = __0.2;
            let __end0 = __1.0;
            let __temp0 = __action168(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action75(errors, db, __0, __temp0, __1, __2)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action182<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Token<'input>, Location),
            __1: (Location, Token<'input>, Location),
            __2: (Location, Vec<Spanned<Prototype>>, Location),
            __3: (Location, Token<'input>, Location),
        ) -> Block<Spanned<Prototype>> {
            let __start0 = __1.0;
            let __end0 = __1.2;
            let __temp0 = __action167(errors, db, __1);
            let __temp0 = (__start0, __temp0, __end0);
            __action83(errors, db, __0, __temp0, __2, __3)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action183<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Token<'input>, Location),
            __1: (Location, Vec<Spanned<Prototype>>, Location),
            __2: (Location, Token<'input>, Location),
        ) -> Block<Spanned<Prototype>> {
            let __start0 = __0.2;
            let __end0 = __1.0;
            let __temp0 = __action168(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action83(errors, db, __0, __temp0, __1, __2)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action184<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Token<'input>, Location),
            __1: (Location, Token<'input>, Location),
            __2: (Location, Vec<Spanned<Node>>, Location),
            __3: (Location, Token<'input>, Location),
        ) -> Block<Spanned<Node>> {
            let __start0 = __1.0;
            let __end0 = __1.2;
            let __temp0 = __action167(errors, db, __1);
            let __temp0 = (__start0, __temp0, __end0);
            __action87(errors, db, __0, __temp0, __2, __3)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action185<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Token<'input>, Location),
            __1: (Location, Vec<Spanned<Node>>, Location),
            __2: (Location, Token<'input>, Location),
        ) -> Block<Spanned<Node>> {
            let __start0 = __0.2;
            let __end0 = __1.0;
            let __temp0 = __action168(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action87(errors, db, __0, __temp0, __1, __2)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action186<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Token<'input>, Location),
            __1: (Location, Spanned<Ident>, Location),
        ) -> core::option::Option<(Token<'input>, Spanned<Ident>)> {
            let __start0 = __0.0;
            let __end0 = __1.2;
            let __temp0 = __action78(errors, db, __0, __1);
            let __temp0 = (__start0, __temp0, __end0);
            __action76(errors, db, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action187<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Location, Location),
            __1: (Location, Spanned<KeywordAndVisibility>, Location),
            __2: (Location, Spanned<Ident>, Location),
            __3: (Location, Token<'input>, Location),
            __4: (Location, Spanned<Ident>, Location),
            __5: (Location, Block<Spanned<Node>>, Location),
            __6: (Location, Location, Location),
        ) -> Spanned<Node> {
            let __start0 = __3.0;
            let __end0 = __4.2;
            let __temp0 = __action186(errors, db, __3, __4);
            let __temp0 = (__start0, __temp0, __end0);
            __action62(errors, db, __0, __1, __2, __temp0, __5, __6)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action188<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Location, Location),
            __1: (Location, Spanned<KeywordAndVisibility>, Location),
            __2: (Location, Spanned<Ident>, Location),
            __3: (Location, Block<Spanned<Node>>, Location),
            __4: (Location, Location, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.2;
            let __end0 = __3.0;
            let __temp0 = __action77(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action62(errors, db, __0, __1, __2, __temp0, __3, __4)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action189<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Location, Location),
            __1: (Location, Location, Location),
        ) -> Spanned<Visibility> {
            let __start0 = __0.2;
            let __end0 = __1.0;
            let __temp0 = __action88(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action54(errors, db, __0, __temp0, __1)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action190<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Node>, Location),
            __1: (Location, Token<'input>, Location),
        ) -> alloc::vec::Vec<Spanned<Node>> {
            let __start0 = __0.0;
            let __end0 = __1.2;
            let __temp0 = __action107(errors, db, __0, __1);
            let __temp0 = (__start0, __temp0, __end0);
            __action153(errors, db, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action191<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
            __1: (Location, Spanned<Node>, Location),
            __2: (Location, Token<'input>, Location),
        ) -> alloc::vec::Vec<Spanned<Node>> {
            let __start0 = __1.0;
            let __end0 = __2.2;
            let __temp0 = __action107(errors, db, __1, __2);
            let __temp0 = (__start0, __temp0, __end0);
            __action154(errors, db, __0, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action192<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, core::option::Option<Spanned<Node>>, Location),
        ) -> Vec<Spanned<Node>> {
            let __start0 = __0.0;
            let __end0 = __0.0;
            let __temp0 = __action105(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action96(errors, db, __temp0, __0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action193<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
            __1: (Location, core::option::Option<Spanned<Node>>, Location),
        ) -> Vec<Spanned<Node>> {
            let __start0 = __0.0;
            let __end0 = __0.2;
            let __temp0 = __action106(errors, db, __0);
            let __temp0 = (__start0, __temp0, __end0);
            __action96(errors, db, __temp0, __1)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action194<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<FieldDef>, Location),
            __1: (Location, Token<'input>, Location),
        ) -> alloc::vec::Vec<Spanned<FieldDef>> {
            let __start0 = __0.0;
            let __end0 = __1.2;
            let __temp0 = __action138(errors, db, __0, __1);
            let __temp0 = (__start0, __temp0, __end0);
            __action161(errors, db, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action195<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, alloc::vec::Vec<Spanned<FieldDef>>, Location),
            __1: (Location, Spanned<FieldDef>, Location),
            __2: (Location, Token<'input>, Location),
        ) -> alloc::vec::Vec<Spanned<FieldDef>> {
            let __start0 = __1.0;
            let __end0 = __2.2;
            let __temp0 = __action138(errors, db, __1, __2);
            let __temp0 = (__start0, __temp0, __end0);
            __action162(errors, db, __0, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action196<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, core::option::Option<Spanned<FieldDef>>, Location),
        ) -> Vec<Spanned<FieldDef>> {
            let __start0 = __0.0;
            let __end0 = __0.0;
            let __temp0 = __action136(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action120(errors, db, __temp0, __0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action197<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, alloc::vec::Vec<Spanned<FieldDef>>, Location),
            __1: (Location, core::option::Option<Spanned<FieldDef>>, Location),
        ) -> Vec<Spanned<FieldDef>> {
            let __start0 = __0.0;
            let __end0 = __0.2;
            let __temp0 = __action137(errors, db, __0);
            let __temp0 = (__start0, __temp0, __end0);
            __action120(errors, db, __temp0, __1)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action198<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<FnArg>, Location),
            __1: (Location, Token<'input>, Location),
        ) -> alloc::vec::Vec<Spanned<FnArg>> {
            let __start0 = __0.0;
            let __end0 = __1.2;
            let __temp0 = __action112(errors, db, __0, __1);
            let __temp0 = (__start0, __temp0, __end0);
            __action151(errors, db, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action199<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, alloc::vec::Vec<Spanned<FnArg>>, Location),
            __1: (Location, Spanned<FnArg>, Location),
            __2: (Location, Token<'input>, Location),
        ) -> alloc::vec::Vec<Spanned<FnArg>> {
            let __start0 = __1.0;
            let __end0 = __2.2;
            let __temp0 = __action112(errors, db, __1, __2);
            let __temp0 = (__start0, __temp0, __end0);
            __action152(errors, db, __0, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action200<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, core::option::Option<Spanned<FnArg>>, Location),
        ) -> Vec<Spanned<FnArg>> {
            let __start0 = __0.0;
            let __end0 = __0.0;
            let __temp0 = __action110(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action92(errors, db, __temp0, __0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action201<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, alloc::vec::Vec<Spanned<FnArg>>, Location),
            __1: (Location, core::option::Option<Spanned<FnArg>>, Location),
        ) -> Vec<Spanned<FnArg>> {
            let __start0 = __0.0;
            let __end0 = __0.2;
            let __temp0 = __action111(errors, db, __0);
            let __temp0 = (__start0, __temp0, __end0);
            __action92(errors, db, __temp0, __1)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action202<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Node>, Location),
            __1: (Location, Token<'input>, Location),
        ) -> alloc::vec::Vec<Spanned<Node>> {
            let __start0 = __0.0;
            let __end0 = __1.2;
            let __temp0 = __action133(errors, db, __0, __1);
            let __temp0 = (__start0, __temp0, __end0);
            __action163(errors, db, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action203<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
            __1: (Location, Spanned<Node>, Location),
            __2: (Location, Token<'input>, Location),
        ) -> alloc::vec::Vec<Spanned<Node>> {
            let __start0 = __1.0;
            let __end0 = __2.2;
            let __temp0 = __action133(errors, db, __1, __2);
            let __temp0 = (__start0, __temp0, __end0);
            __action164(errors, db, __0, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action204<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, core::option::Option<Spanned<Node>>, Location),
        ) -> Vec<Spanned<Node>> {
            let __start0 = __0.0;
            let __end0 = __0.0;
            let __temp0 = __action131(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action121(errors, db, __temp0, __0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action205<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
            __1: (Location, core::option::Option<Spanned<Node>>, Location),
        ) -> Vec<Spanned<Node>> {
            let __start0 = __0.0;
            let __end0 = __0.2;
            let __temp0 = __action132(errors, db, __0);
            let __temp0 = (__start0, __temp0, __end0);
            __action121(errors, db, __temp0, __1)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action206<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Ident>, Location),
            __1: (Location, Token<'input>, Location),
        ) -> alloc::vec::Vec<Spanned<Ident>> {
            let __start0 = __0.0;
            let __end0 = __1.2;
            let __temp0 = __action118(errors, db, __0, __1);
            let __temp0 = (__start0, __temp0, __end0);
            __action144(errors, db, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action207<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, alloc::vec::Vec<Spanned<Ident>>, Location),
            __1: (Location, Spanned<Ident>, Location),
            __2: (Location, Token<'input>, Location),
        ) -> alloc::vec::Vec<Spanned<Ident>> {
            let __start0 = __1.0;
            let __end0 = __2.2;
            let __temp0 = __action118(errors, db, __1, __2);
            let __temp0 = (__start0, __temp0, __end0);
            __action145(errors, db, __0, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action208<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, core::option::Option<Spanned<Ident>>, Location),
        ) -> Vec<Spanned<Ident>> {
            let __start0 = __0.0;
            let __end0 = __0.0;
            let __temp0 = __action116(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action84(errors, db, __temp0, __0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action209<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, alloc::vec::Vec<Spanned<Ident>>, Location),
            __1: (Location, core::option::Option<Spanned<Ident>>, Location),
        ) -> Vec<Spanned<Ident>> {
            let __start0 = __0.0;
            let __end0 = __0.2;
            let __temp0 = __action117(errors, db, __0);
            let __temp0 = (__start0, __temp0, __end0);
            __action84(errors, db, __temp0, __1)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action210<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Ident>, Location),
            __1: (Location, Token<'input>, Location),
        ) -> alloc::vec::Vec<Spanned<Ident>> {
            let __start0 = __0.0;
            let __end0 = __1.2;
            let __temp0 = __action102(errors, db, __0, __1);
            let __temp0 = (__start0, __temp0, __end0);
            __action155(errors, db, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action211<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, alloc::vec::Vec<Spanned<Ident>>, Location),
            __1: (Location, Spanned<Ident>, Location),
            __2: (Location, Token<'input>, Location),
        ) -> alloc::vec::Vec<Spanned<Ident>> {
            let __start0 = __1.0;
            let __end0 = __2.2;
            let __temp0 = __action102(errors, db, __1, __2);
            let __temp0 = (__start0, __temp0, __end0);
            __action156(errors, db, __0, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action212<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, core::option::Option<Spanned<Ident>>, Location),
        ) -> Vec<Spanned<Ident>> {
            let __start0 = __0.0;
            let __end0 = __0.0;
            let __temp0 = __action100(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action97(errors, db, __temp0, __0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action213<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, alloc::vec::Vec<Spanned<Ident>>, Location),
            __1: (Location, core::option::Option<Spanned<Ident>>, Location),
        ) -> Vec<Spanned<Ident>> {
            let __start0 = __0.0;
            let __end0 = __0.2;
            let __temp0 = __action101(errors, db, __0);
            let __temp0 = (__start0, __temp0, __end0);
            __action97(errors, db, __temp0, __1)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action214<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Prototype>, Location),
            __1: (Location, Token<'input>, Location),
        ) -> alloc::vec::Vec<Spanned<Prototype>> {
            let __start0 = __0.0;
            let __end0 = __1.2;
            let __temp0 = __action143(errors, db, __0, __1);
            let __temp0 = (__start0, __temp0, __end0);
            __action159(errors, db, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action215<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, alloc::vec::Vec<Spanned<Prototype>>, Location),
            __1: (Location, Spanned<Prototype>, Location),
            __2: (Location, Token<'input>, Location),
        ) -> alloc::vec::Vec<Spanned<Prototype>> {
            let __start0 = __1.0;
            let __end0 = __2.2;
            let __temp0 = __action143(errors, db, __1, __2);
            let __temp0 = (__start0, __temp0, __end0);
            __action160(errors, db, __0, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action216<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, core::option::Option<Spanned<Prototype>>, Location),
        ) -> Vec<Spanned<Prototype>> {
            let __start0 = __0.0;
            let __end0 = __0.0;
            let __temp0 = __action141(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action119(errors, db, __temp0, __0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action217<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, alloc::vec::Vec<Spanned<Prototype>>, Location),
            __1: (Location, core::option::Option<Spanned<Prototype>>, Location),
        ) -> Vec<Spanned<Prototype>> {
            let __start0 = __0.0;
            let __end0 = __0.2;
            let __temp0 = __action142(errors, db, __0);
            let __temp0 = (__start0, __temp0, __end0);
            __action119(errors, db, __temp0, __1)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action218<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Node>, Location),
            __1: (Location, Token<'input>, Location),
        ) -> alloc::vec::Vec<Spanned<Node>> {
            let __start0 = __0.0;
            let __end0 = __1.2;
            let __temp0 = __action150(errors, db, __0, __1);
            let __temp0 = (__start0, __temp0, __end0);
            __action157(errors, db, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action219<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
            __1: (Location, Spanned<Node>, Location),
            __2: (Location, Token<'input>, Location),
        ) -> alloc::vec::Vec<Spanned<Node>> {
            let __start0 = __1.0;
            let __end0 = __2.2;
            let __temp0 = __action150(errors, db, __1, __2);
            let __temp0 = (__start0, __temp0, __end0);
            __action158(errors, db, __0, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action220<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, core::option::Option<Spanned<Node>>, Location),
        ) -> Vec<Spanned<Node>> {
            let __start0 = __0.0;
            let __end0 = __0.0;
            let __temp0 = __action148(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action113(errors, db, __temp0, __0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action221<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
            __1: (Location, core::option::Option<Spanned<Node>>, Location),
        ) -> Vec<Spanned<Node>> {
            let __start0 = __0.0;
            let __end0 = __0.2;
            let __temp0 = __action149(errors, db, __0);
            let __temp0 = (__start0, __temp0, __end0);
            __action113(errors, db, __temp0, __1)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action222<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, i64, Location),
            __1: (Location, Location, Location),
        ) -> Spanned<Value> {
            let __start0 = __0.0;
            let __end0 = __0.0;
            let __temp0 = __action99(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action19(errors, db, __temp0, __0, __1)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action223<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, f64, Location),
            __1: (Location, Location, Location),
        ) -> Spanned<Value> {
            let __start0 = __0.0;
            let __end0 = __0.0;
            let __temp0 = __action99(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action20(errors, db, __temp0, __0, __1)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action224<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, &'input str, Location),
            __1: (Location, Location, Location),
        ) -> Spanned<Value> {
            let __start0 = __0.0;
            let __end0 = __0.0;
            let __temp0 = __action99(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action21(errors, db, __temp0, __0, __1)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action225<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Token<'input>, Location),
            __1: (Location, Location, Location),
        ) -> Spanned<Keyword> {
            let __start0 = __0.0;
            let __end0 = __0.0;
            let __temp0 = __action99(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action3(errors, db, __temp0, __0, __1)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action226<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<KeywordAndVisibility>, Location),
            __1: (Location, Spanned<Ident>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Vec<Spanned<Ident>>, Location),
            __4: (Location, Block<Spanned<Prototype>>, Location),
            __5: (Location, Location, Location),
        ) -> Spanned<Node> {
            let __start0 = __0.0;
            let __end0 = __0.0;
            let __temp0 = __action99(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action57(errors, db, __temp0, __0, __1, __2, __3, __4, __5)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action227<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Token<'input>, Location),
            __1: (Location, Location, Location),
        ) -> Spanned<Keyword> {
            let __start0 = __0.0;
            let __end0 = __0.0;
            let __temp0 = __action99(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action6(errors, db, __temp0, __0, __1)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action228<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Node>, Location),
            __1: (Location, Token<'input>, Location),
            __2: (Location, Spanned<Node>, Location),
            __3: (Location, Location, Location),
        ) -> Spanned<Node> {
            let __start0 = __0.0;
            let __end0 = __0.0;
            let __temp0 = __action99(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action27(errors, db, __temp0, __0, __1, __2, __3)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action229<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Token<'input>, Location),
            __1: (Location, Location, Location),
        ) -> Spanned<Keyword> {
            let __start0 = __0.0;
            let __end0 = __0.0;
            let __temp0 = __action99(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action2(errors, db, __temp0, __0, __1)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action230<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<KeywordAndVisibility>, Location),
            __1: (Location, Spanned<Prototype>, Location),
            __2: (Location, Block<Spanned<Node>>, Location),
            __3: (Location, Location, Location),
        ) -> Spanned<Node> {
            let __start0 = __0.0;
            let __end0 = __0.0;
            let __temp0 = __action99(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action56(errors, db, __temp0, __0, __1, __2, __3)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action231<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Token<'input>, Location),
            __1: (Location, Location, Location),
        ) -> Spanned<Keyword> {
            let __start0 = __0.0;
            let __end0 = __0.0;
            let __temp0 = __action99(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action9(errors, db, __temp0, __0, __1)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action232<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, &'input str, Location),
            __1: (Location, Location, Location),
        ) -> Spanned<Ident> {
            let __start0 = __0.0;
            let __end0 = __0.0;
            let __temp0 = __action99(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action14(errors, db, __temp0, __0, __1)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action233<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Token<'input>, Location),
            __1: (Location, Location, Location),
        ) -> Spanned<Ident> {
            let __start0 = __0.0;
            let __end0 = __0.0;
            let __temp0 = __action99(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action18(errors, db, __temp0, __0, __1)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action234<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, &'input str, Location),
            __1: (Location, Token<'input>, Location),
            __2: (Location, Vec<Spanned<Ident>>, Location),
            __3: (Location, Token<'input>, Location),
            __4: (Location, Location, Location),
        ) -> Spanned<Ident> {
            let __start0 = __0.0;
            let __end0 = __0.0;
            let __temp0 = __action99(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action15(errors, db, __temp0, __0, __1, __2, __3, __4)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action235<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Token<'input>, Location),
            __1: (Location, Location, Location),
        ) -> Spanned<Keyword> {
            let __start0 = __0.0;
            let __end0 = __0.0;
            let __temp0 = __action99(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action5(errors, db, __temp0, __0, __1)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action236<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Keyword>, Location),
            __1: (Location, Spanned<Node>, Location),
            __2: (Location, Location, Location),
            __3: (Location, Block<Spanned<Node>>, Location),
            __4: (Location, Location, Location),
        ) -> Spanned<Node> {
            let __start0 = __0.0;
            let __end0 = __0.0;
            let __start1 = __0.2;
            let __end1 = __1.0;
            let __temp0 = __action99(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            let __temp1 = __action99(errors, db, &__start1, &__end1);
            let __temp1 = (__start1, __temp1, __end1);
            __action59(errors, db, __temp0, __0, __temp1, __1, __2, __3, __4)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action237<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Keyword>, Location),
            __1: (Location, Spanned<Node>, Location),
            __2: (Location, Location, Location),
            __3: (Location, Block<Spanned<Node>>, Location),
            __4: (Location, Spanned<Keyword>, Location),
            __5: (Location, Location, Location),
            __6: (Location, Block<Spanned<Node>>, Location),
            __7: (Location, Location, Location),
        ) -> Spanned<Node> {
            let __start0 = __0.0;
            let __end0 = __0.0;
            let __start1 = __0.2;
            let __end1 = __1.0;
            let __start2 = __3.2;
            let __end2 = __4.0;
            let __temp0 = __action99(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            let __temp1 = __action99(errors, db, &__start1, &__end1);
            let __temp1 = (__start1, __temp1, __end1);
            let __temp2 = __action99(errors, db, &__start2, &__end2);
            let __temp2 = (__start2, __temp2, __end2);
            __action60(
                errors,
                db,
                __temp0,
                __0,
                __temp1,
                __1,
                __2,
                __3,
                __temp2,
                __4,
                __5,
                __6,
                __7,
            )
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action238<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Token<'input>, Location),
            __1: (Location, Location, Location),
        ) -> Spanned<Keyword> {
            let __start0 = __0.0;
            let __end0 = __0.0;
            let __temp0 = __action99(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action10(errors, db, __temp0, __0, __1)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action239<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<KeywordAndVisibility>, Location),
            __1: (Location, Spanned<Ident>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Spanned<Ident>, Location),
            __4: (Location, Block<Spanned<Node>>, Location),
            __5: (Location, Location, Location),
        ) -> Spanned<Node> {
            let __start0 = __0.0;
            let __end0 = __0.0;
            let __temp0 = __action99(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action187(errors, db, __temp0, __0, __1, __2, __3, __4, __5)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action240<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<KeywordAndVisibility>, Location),
            __1: (Location, Spanned<Ident>, Location),
            __2: (Location, Block<Spanned<Node>>, Location),
            __3: (Location, Location, Location),
        ) -> Spanned<Node> {
            let __start0 = __0.0;
            let __end0 = __0.0;
            let __temp0 = __action99(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action188(errors, db, __temp0, __0, __1, __2, __3)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action241<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Visibility>, Location),
            __1: (Location, Spanned<Keyword>, Location),
            __2: (Location, Location, Location),
        ) -> Spanned<KeywordAndVisibility> {
            let __start0 = __0.0;
            let __end0 = __0.0;
            let __temp0 = __action99(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action85(errors, db, __temp0, __0, __1, __2)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action242<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Visibility>, Location),
            __1: (Location, Spanned<Keyword>, Location),
            __2: (Location, Location, Location),
        ) -> Spanned<KeywordAndVisibility> {
            let __start0 = __0.0;
            let __end0 = __0.0;
            let __temp0 = __action99(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action86(errors, db, __temp0, __0, __1, __2)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action243<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Visibility>, Location),
            __1: (Location, Spanned<Keyword>, Location),
            __2: (Location, Location, Location),
        ) -> Spanned<KeywordAndVisibility> {
            let __start0 = __0.0;
            let __end0 = __0.0;
            let __temp0 = __action99(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action79(errors, db, __temp0, __0, __1, __2)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action244<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Visibility>, Location),
            __1: (Location, Spanned<Keyword>, Location),
            __2: (Location, Location, Location),
        ) -> Spanned<KeywordAndVisibility> {
            let __start0 = __0.0;
            let __end0 = __0.0;
            let __temp0 = __action99(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action82(errors, db, __temp0, __0, __1, __2)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action245<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Visibility>, Location),
            __1: (Location, Spanned<Keyword>, Location),
            __2: (Location, Location, Location),
        ) -> Spanned<KeywordAndVisibility> {
            let __start0 = __0.0;
            let __end0 = __0.0;
            let __temp0 = __action99(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action80(errors, db, __temp0, __0, __1, __2)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action246<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Token<'input>, Location),
            __1: (Location, Location, Location),
        ) -> Spanned<Keyword> {
            let __start0 = __0.0;
            let __end0 = __0.0;
            let __temp0 = __action99(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action11(errors, db, __temp0, __0, __1)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action247<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Token<'input>, Location),
            __1: (Location, Location, Location),
        ) -> Spanned<Keyword> {
            let __start0 = __0.0;
            let __end0 = __0.0;
            let __temp0 = __action99(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action1(errors, db, __temp0, __0, __1)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action248<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Ident>, Location),
            __1: (Location, Token<'input>, Location),
            __2: (Location, Vec<Spanned<FnArg>>, Location),
            __3: (Location, Token<'input>, Location),
            __4: (Location, Token<'input>, Location),
            __5: (Location, Vec<Spanned<Ident>>, Location),
            __6: (Location, Token<'input>, Location),
            __7: (Location, Token<'input>, Location),
            __8: (Location, Spanned<Ident>, Location),
            __9: (Location, Location, Location),
        ) -> Spanned<Prototype> {
            let __start0 = __0.0;
            let __end0 = __0.0;
            let __temp0 = __action99(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action170(
                errors,
                db,
                __temp0,
                __0,
                __1,
                __2,
                __3,
                __4,
                __5,
                __6,
                __7,
                __8,
                __9,
            )
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action249<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Ident>, Location),
            __1: (Location, Token<'input>, Location),
            __2: (Location, Vec<Spanned<FnArg>>, Location),
            __3: (Location, Token<'input>, Location),
            __4: (Location, Token<'input>, Location),
            __5: (Location, Vec<Spanned<Ident>>, Location),
            __6: (Location, Token<'input>, Location),
            __7: (Location, Location, Location),
        ) -> Spanned<Prototype> {
            let __start0 = __0.0;
            let __end0 = __0.0;
            let __temp0 = __action99(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action171(errors, db, __temp0, __0, __1, __2, __3, __4, __5, __6, __7)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action250<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Token<'input>, Location),
            __1: (Location, Location, Location),
        ) -> Spanned<Token<'input>> {
            let __start0 = __0.0;
            let __end0 = __0.0;
            let __temp0 = __action99(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action94(errors, db, __temp0, __0, __1)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action251<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<FieldDef>, Location),
            __1: (Location, Location, Location),
        ) -> Spanned<Spanned<FieldDef>> {
            let __start0 = __0.0;
            let __end0 = __0.0;
            let __temp0 = __action99(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action93(errors, db, __temp0, __0, __1)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action252<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Node>, Location),
            __1: (Location, Location, Location),
        ) -> Spanned<Spanned<Node>> {
            let __start0 = __0.0;
            let __end0 = __0.0;
            let __temp0 = __action99(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action95(errors, db, __temp0, __0, __1)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action253<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Keyword>, Location),
            __1: (Location, Spanned<Ident>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Spanned<Node>, Location),
            __4: (Location, Location, Location),
        ) -> Spanned<Node> {
            let __start0 = __0.0;
            let __end0 = __0.0;
            let __temp0 = __action99(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action49(errors, db, __temp0, __0, __1, __2, __3, __4)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action254<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, &'input str, Location),
            __1: (Location, Location, Location),
        ) -> Spanned<Node> {
            let __start0 = __0.0;
            let __end0 = __0.0;
            let __temp0 = __action99(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action24(errors, db, __temp0, __0, __1)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action255<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Token<'input>, Location),
            __1: (Location, Location, Location),
        ) -> Spanned<Keyword> {
            let __start0 = __0.0;
            let __end0 = __0.0;
            let __temp0 = __action99(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action4(errors, db, __temp0, __0, __1)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action256<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<KeywordAndVisibility>, Location),
            __1: (Location, Spanned<Ident>, Location),
            __2: (Location, Block<Spanned<FieldDef>>, Location),
            __3: (Location, Location, Location),
        ) -> Spanned<Node> {
            let __start0 = __0.0;
            let __end0 = __0.0;
            let __temp0 = __action99(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action58(errors, db, __temp0, __0, __1, __2, __3)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action257<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, i64, Location),
            __1: (Location, Location, Location),
        ) -> Spanned<Node> {
            let __start0 = __0.0;
            let __end0 = __0.0;
            let __temp0 = __action99(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action34(errors, db, __temp0, __0, __1)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action258<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Node, Location),
            __1: (Location, Location, Location),
        ) -> Spanned<Node> {
            let __start0 = __0.0;
            let __end0 = __0.0;
            let __temp0 = __action99(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action37(errors, db, __temp0, __0, __1)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action259<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Node, Location),
            __1: (Location, Location, Location),
        ) -> Spanned<Node> {
            let __start0 = __0.0;
            let __end0 = __0.0;
            let __temp0 = __action99(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action38(errors, db, __temp0, __0, __1)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action260<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Token<'input>, Location),
            __1: (Location, Vec<Spanned<Ident>>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Location, Location),
        ) -> Spanned<Vec<Spanned<Ident>>> {
            let __start0 = __0.0;
            let __end0 = __0.0;
            let __temp0 = __action99(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action45(errors, db, __temp0, __0, __1, __2, __3)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action261<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Token<'input>, Location),
            __1: (Location, Location, Location),
        ) -> Spanned<Keyword> {
            let __start0 = __0.0;
            let __end0 = __0.0;
            let __temp0 = __action99(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action8(errors, db, __temp0, __0, __1)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action262<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<KeywordAndVisibility>, Location),
            __1: (Location, Token<'input>, Location),
            __2: (Location, Vec<Spanned<Ident>>, Location),
            __3: (Location, Token<'input>, Location),
            __4: (Location, Spanned<Keyword>, Location),
            __5: (Location, Spanned<Ident>, Location),
            __6: (Location, Location, Location),
        ) -> Spanned<Node> {
            let __start0 = __0.0;
            let __end0 = __0.0;
            let __temp0 = __action99(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action61(errors, db, __temp0, __0, __1, __2, __3, __4, __5, __6)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action263<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Token<'input>, Location),
            __1: (Location, Location, Location),
        ) -> Spanned<Visibility> {
            let __start0 = __0.0;
            let __end0 = __0.0;
            let __temp0 = __action99(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action52(errors, db, __temp0, __0, __1)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action264<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Token<'input>, Location),
            __1: (Location, Location, Location),
        ) -> Spanned<Visibility> {
            let __start0 = __0.0;
            let __end0 = __0.0;
            let __temp0 = __action99(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action53(errors, db, __temp0, __0, __1)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action265<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Location, Location),
        ) -> Spanned<Visibility> {
            let __start0 = __0.0;
            let __end0 = __0.0;
            let __temp0 = __action99(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action189(errors, db, __temp0, __0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action266<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Token<'input>, Location),
            __1: (Location, Location, Location),
        ) -> Spanned<Keyword> {
            let __start0 = __0.0;
            let __end0 = __0.0;
            let __temp0 = __action99(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action7(errors, db, __temp0, __0, __1)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action267<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Keyword>, Location),
            __1: (Location, Spanned<Ident>, Location),
            __2: (Location, Block<Spanned<Node>>, Location),
            __3: (Location, Location, Location),
        ) -> (Spanned<Ident>, Block<Spanned<Node>>) {
            let __start0 = __0.0;
            let __end0 = __0.0;
            let __temp0 = __action99(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action55(errors, db, __temp0, __0, __1, __2, __3)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action268<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, i64, Location),
        ) -> Spanned<Value> {
            let __start0 = __0.2;
            let __end0 = __0.2;
            let __temp0 = __action98(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action222(errors, db, __0, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action269<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, f64, Location),
        ) -> Spanned<Value> {
            let __start0 = __0.2;
            let __end0 = __0.2;
            let __temp0 = __action98(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action223(errors, db, __0, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action270<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, &'input str, Location),
        ) -> Spanned<Value> {
            let __start0 = __0.2;
            let __end0 = __0.2;
            let __temp0 = __action98(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action224(errors, db, __0, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action271<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Token<'input>, Location),
        ) -> Spanned<Keyword> {
            let __start0 = __0.2;
            let __end0 = __0.2;
            let __temp0 = __action98(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action225(errors, db, __0, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action272<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<KeywordAndVisibility>, Location),
            __1: (Location, Spanned<Ident>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Vec<Spanned<Ident>>, Location),
            __4: (Location, Block<Spanned<Prototype>>, Location),
        ) -> Spanned<Node> {
            let __start0 = __4.2;
            let __end0 = __4.2;
            let __temp0 = __action98(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action226(errors, db, __0, __1, __2, __3, __4, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action273<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Token<'input>, Location),
        ) -> Spanned<Keyword> {
            let __start0 = __0.2;
            let __end0 = __0.2;
            let __temp0 = __action98(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action227(errors, db, __0, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action274<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Node>, Location),
            __1: (Location, Token<'input>, Location),
            __2: (Location, Spanned<Node>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.2;
            let __end0 = __2.2;
            let __temp0 = __action98(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action228(errors, db, __0, __1, __2, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action275<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Token<'input>, Location),
        ) -> Spanned<Keyword> {
            let __start0 = __0.2;
            let __end0 = __0.2;
            let __temp0 = __action98(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action229(errors, db, __0, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action276<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Ident>, Location),
            __1: (Location, Token<'input>, Location),
            __2: (Location, Vec<Spanned<Node>>, Location),
            __3: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __3.2;
            let __end0 = __3.2;
            let __temp0 = __action98(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action32(errors, db, __0, __1, __2, __3, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action277<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<KeywordAndVisibility>, Location),
            __1: (Location, Spanned<Prototype>, Location),
            __2: (Location, Block<Spanned<Node>>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.2;
            let __end0 = __2.2;
            let __temp0 = __action98(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action230(errors, db, __0, __1, __2, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action278<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Token<'input>, Location),
        ) -> Spanned<Keyword> {
            let __start0 = __0.2;
            let __end0 = __0.2;
            let __temp0 = __action98(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action231(errors, db, __0, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action279<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, &'input str, Location),
        ) -> Spanned<Ident> {
            let __start0 = __0.2;
            let __end0 = __0.2;
            let __temp0 = __action98(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action232(errors, db, __0, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action280<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Token<'input>, Location),
        ) -> Spanned<Ident> {
            let __start0 = __0.2;
            let __end0 = __0.2;
            let __temp0 = __action98(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action233(errors, db, __0, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action281<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, &'input str, Location),
            __1: (Location, Token<'input>, Location),
            __2: (Location, Vec<Spanned<Ident>>, Location),
            __3: (Location, Token<'input>, Location),
        ) -> Spanned<Ident> {
            let __start0 = __3.2;
            let __end0 = __3.2;
            let __temp0 = __action98(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action234(errors, db, __0, __1, __2, __3, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action282<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Token<'input>, Location),
        ) -> Spanned<Keyword> {
            let __start0 = __0.2;
            let __end0 = __0.2;
            let __temp0 = __action98(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action235(errors, db, __0, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action283<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Keyword>, Location),
            __1: (Location, Spanned<Node>, Location),
            __2: (Location, Block<Spanned<Node>>, Location),
        ) -> Spanned<Node> {
            let __start0 = __1.2;
            let __end0 = __2.0;
            let __start1 = __2.2;
            let __end1 = __2.2;
            let __temp0 = __action98(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            let __temp1 = __action98(errors, db, &__start1, &__end1);
            let __temp1 = (__start1, __temp1, __end1);
            __action236(errors, db, __0, __1, __temp0, __2, __temp1)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action284<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Keyword>, Location),
            __1: (Location, Spanned<Node>, Location),
            __2: (Location, Block<Spanned<Node>>, Location),
            __3: (Location, Spanned<Keyword>, Location),
            __4: (Location, Block<Spanned<Node>>, Location),
        ) -> Spanned<Node> {
            let __start0 = __1.2;
            let __end0 = __2.0;
            let __start1 = __3.2;
            let __end1 = __4.0;
            let __start2 = __4.2;
            let __end2 = __4.2;
            let __temp0 = __action98(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            let __temp1 = __action98(errors, db, &__start1, &__end1);
            let __temp1 = (__start1, __temp1, __end1);
            let __temp2 = __action98(errors, db, &__start2, &__end2);
            let __temp2 = (__start2, __temp2, __end2);
            __action237(errors, db, __0, __1, __temp0, __2, __3, __temp1, __4, __temp2)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action285<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Token<'input>, Location),
        ) -> Spanned<Keyword> {
            let __start0 = __0.2;
            let __end0 = __0.2;
            let __temp0 = __action98(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action238(errors, db, __0, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action286<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<KeywordAndVisibility>, Location),
            __1: (Location, Spanned<Ident>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Spanned<Ident>, Location),
            __4: (Location, Block<Spanned<Node>>, Location),
        ) -> Spanned<Node> {
            let __start0 = __4.2;
            let __end0 = __4.2;
            let __temp0 = __action98(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action239(errors, db, __0, __1, __2, __3, __4, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action287<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<KeywordAndVisibility>, Location),
            __1: (Location, Spanned<Ident>, Location),
            __2: (Location, Block<Spanned<Node>>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.2;
            let __end0 = __2.2;
            let __temp0 = __action98(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action240(errors, db, __0, __1, __2, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action288<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Visibility>, Location),
            __1: (Location, Spanned<Keyword>, Location),
        ) -> Spanned<KeywordAndVisibility> {
            let __start0 = __1.2;
            let __end0 = __1.2;
            let __temp0 = __action98(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action241(errors, db, __0, __1, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action289<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Visibility>, Location),
            __1: (Location, Spanned<Keyword>, Location),
        ) -> Spanned<KeywordAndVisibility> {
            let __start0 = __1.2;
            let __end0 = __1.2;
            let __temp0 = __action98(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action242(errors, db, __0, __1, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action290<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Visibility>, Location),
            __1: (Location, Spanned<Keyword>, Location),
        ) -> Spanned<KeywordAndVisibility> {
            let __start0 = __1.2;
            let __end0 = __1.2;
            let __temp0 = __action98(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action243(errors, db, __0, __1, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action291<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Visibility>, Location),
            __1: (Location, Spanned<Keyword>, Location),
        ) -> Spanned<KeywordAndVisibility> {
            let __start0 = __1.2;
            let __end0 = __1.2;
            let __temp0 = __action98(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action244(errors, db, __0, __1, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action292<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Visibility>, Location),
            __1: (Location, Spanned<Keyword>, Location),
        ) -> Spanned<KeywordAndVisibility> {
            let __start0 = __1.2;
            let __end0 = __1.2;
            let __temp0 = __action98(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action245(errors, db, __0, __1, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action293<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Token<'input>, Location),
        ) -> Spanned<Keyword> {
            let __start0 = __0.2;
            let __end0 = __0.2;
            let __temp0 = __action98(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action246(errors, db, __0, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action294<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Token<'input>, Location),
        ) -> Spanned<Keyword> {
            let __start0 = __0.2;
            let __end0 = __0.2;
            let __temp0 = __action98(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action247(errors, db, __0, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action295<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Ident>, Location),
            __1: (Location, Token<'input>, Location),
            __2: (Location, Vec<Spanned<FnArg>>, Location),
            __3: (Location, Token<'input>, Location),
            __4: (Location, Token<'input>, Location),
            __5: (Location, Vec<Spanned<Ident>>, Location),
            __6: (Location, Token<'input>, Location),
            __7: (Location, Token<'input>, Location),
            __8: (Location, Spanned<Ident>, Location),
        ) -> Spanned<Prototype> {
            let __start0 = __8.2;
            let __end0 = __8.2;
            let __temp0 = __action98(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action248(errors, db, __0, __1, __2, __3, __4, __5, __6, __7, __8, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action296<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Ident>, Location),
            __1: (Location, Token<'input>, Location),
            __2: (Location, Vec<Spanned<FnArg>>, Location),
            __3: (Location, Token<'input>, Location),
            __4: (Location, Token<'input>, Location),
            __5: (Location, Vec<Spanned<Ident>>, Location),
            __6: (Location, Token<'input>, Location),
        ) -> Spanned<Prototype> {
            let __start0 = __6.2;
            let __end0 = __6.2;
            let __temp0 = __action98(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action249(errors, db, __0, __1, __2, __3, __4, __5, __6, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action297<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Token<'input>, Location),
        ) -> Spanned<Token<'input>> {
            let __start0 = __0.2;
            let __end0 = __0.2;
            let __temp0 = __action98(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action250(errors, db, __0, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action298<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<FieldDef>, Location),
        ) -> Spanned<Spanned<FieldDef>> {
            let __start0 = __0.2;
            let __end0 = __0.2;
            let __temp0 = __action98(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action251(errors, db, __0, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action299<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Node>, Location),
        ) -> Spanned<Spanned<Node>> {
            let __start0 = __0.2;
            let __end0 = __0.2;
            let __temp0 = __action98(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action252(errors, db, __0, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action300<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Keyword>, Location),
            __1: (Location, Spanned<Ident>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Spanned<Node>, Location),
        ) -> Spanned<Node> {
            let __start0 = __3.2;
            let __end0 = __3.2;
            let __temp0 = __action98(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action253(errors, db, __0, __1, __2, __3, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action301<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, &'input str, Location),
        ) -> Spanned<Node> {
            let __start0 = __0.2;
            let __end0 = __0.2;
            let __temp0 = __action98(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action254(errors, db, __0, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action302<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Token<'input>, Location),
        ) -> Spanned<Keyword> {
            let __start0 = __0.2;
            let __end0 = __0.2;
            let __temp0 = __action98(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action255(errors, db, __0, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action303<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<KeywordAndVisibility>, Location),
            __1: (Location, Spanned<Ident>, Location),
            __2: (Location, Block<Spanned<FieldDef>>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.2;
            let __end0 = __2.2;
            let __temp0 = __action98(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action256(errors, db, __0, __1, __2, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action304<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, i64, Location),
        ) -> Spanned<Node> {
            let __start0 = __0.2;
            let __end0 = __0.2;
            let __temp0 = __action98(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action257(errors, db, __0, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action305<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Node, Location),
        ) -> Spanned<Node> {
            let __start0 = __0.2;
            let __end0 = __0.2;
            let __temp0 = __action98(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action258(errors, db, __0, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action306<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Node, Location),
        ) -> Spanned<Node> {
            let __start0 = __0.2;
            let __end0 = __0.2;
            let __temp0 = __action98(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action259(errors, db, __0, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action307<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Token<'input>, Location),
            __1: (Location, Vec<Spanned<Ident>>, Location),
            __2: (Location, Token<'input>, Location),
        ) -> Spanned<Vec<Spanned<Ident>>> {
            let __start0 = __2.2;
            let __end0 = __2.2;
            let __temp0 = __action98(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action260(errors, db, __0, __1, __2, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action308<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Token<'input>, Location),
        ) -> Spanned<Keyword> {
            let __start0 = __0.2;
            let __end0 = __0.2;
            let __temp0 = __action98(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action261(errors, db, __0, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action309<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<KeywordAndVisibility>, Location),
            __1: (Location, Token<'input>, Location),
            __2: (Location, Vec<Spanned<Ident>>, Location),
            __3: (Location, Token<'input>, Location),
            __4: (Location, Spanned<Keyword>, Location),
            __5: (Location, Spanned<Ident>, Location),
        ) -> Spanned<Node> {
            let __start0 = __5.2;
            let __end0 = __5.2;
            let __temp0 = __action98(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action262(errors, db, __0, __1, __2, __3, __4, __5, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action310<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Token<'input>, Location),
        ) -> Spanned<Visibility> {
            let __start0 = __0.2;
            let __end0 = __0.2;
            let __temp0 = __action98(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action263(errors, db, __0, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action311<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Token<'input>, Location),
        ) -> Spanned<Visibility> {
            let __start0 = __0.2;
            let __end0 = __0.2;
            let __temp0 = __action98(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action264(errors, db, __0, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action312<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __lookbehind: &Location,
            __lookahead: &Location,
        ) -> Spanned<Visibility> {
            let __start0 = *__lookbehind;
            let __end0 = *__lookahead;
            let __temp0 = __action98(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action265(errors, db, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action313<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Token<'input>, Location),
        ) -> Spanned<Keyword> {
            let __start0 = __0.2;
            let __end0 = __0.2;
            let __temp0 = __action98(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action266(errors, db, __0, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action314<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Keyword>, Location),
            __1: (Location, Spanned<Ident>, Location),
            __2: (Location, Block<Spanned<Node>>, Location),
        ) -> (Spanned<Ident>, Block<Spanned<Node>>) {
            let __start0 = __2.2;
            let __end0 = __2.2;
            let __temp0 = __action98(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action267(errors, db, __0, __1, __2, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action315<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<FieldDef>, Location),
        ) -> Vec<Spanned<FieldDef>> {
            let __start0 = __0.0;
            let __end0 = __0.2;
            let __temp0 = __action134(errors, db, __0);
            let __temp0 = (__start0, __temp0, __end0);
            __action196(errors, db, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action316<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __lookbehind: &Location,
            __lookahead: &Location,
        ) -> Vec<Spanned<FieldDef>> {
            let __start0 = *__lookbehind;
            let __end0 = *__lookahead;
            let __temp0 = __action135(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action196(errors, db, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action317<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, alloc::vec::Vec<Spanned<FieldDef>>, Location),
            __1: (Location, Spanned<FieldDef>, Location),
        ) -> Vec<Spanned<FieldDef>> {
            let __start0 = __1.0;
            let __end0 = __1.2;
            let __temp0 = __action134(errors, db, __1);
            let __temp0 = (__start0, __temp0, __end0);
            __action197(errors, db, __0, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action318<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, alloc::vec::Vec<Spanned<FieldDef>>, Location),
        ) -> Vec<Spanned<FieldDef>> {
            let __start0 = __0.2;
            let __end0 = __0.2;
            let __temp0 = __action135(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action197(errors, db, __0, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action319<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Token<'input>, Location),
            __1: (Location, Token<'input>, Location),
            __2: (Location, Spanned<FieldDef>, Location),
            __3: (Location, Token<'input>, Location),
        ) -> Block<Spanned<FieldDef>> {
            let __start0 = __2.0;
            let __end0 = __2.2;
            let __temp0 = __action315(errors, db, __2);
            let __temp0 = (__start0, __temp0, __end0);
            __action178(errors, db, __0, __1, __temp0, __3)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action320<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Token<'input>, Location),
            __1: (Location, Token<'input>, Location),
            __2: (Location, Token<'input>, Location),
        ) -> Block<Spanned<FieldDef>> {
            let __start0 = __1.2;
            let __end0 = __2.0;
            let __temp0 = __action316(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action178(errors, db, __0, __1, __temp0, __2)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action321<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Token<'input>, Location),
            __1: (Location, Token<'input>, Location),
            __2: (Location, alloc::vec::Vec<Spanned<FieldDef>>, Location),
            __3: (Location, Spanned<FieldDef>, Location),
            __4: (Location, Token<'input>, Location),
        ) -> Block<Spanned<FieldDef>> {
            let __start0 = __2.0;
            let __end0 = __3.2;
            let __temp0 = __action317(errors, db, __2, __3);
            let __temp0 = (__start0, __temp0, __end0);
            __action178(errors, db, __0, __1, __temp0, __4)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action322<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Token<'input>, Location),
            __1: (Location, Token<'input>, Location),
            __2: (Location, alloc::vec::Vec<Spanned<FieldDef>>, Location),
            __3: (Location, Token<'input>, Location),
        ) -> Block<Spanned<FieldDef>> {
            let __start0 = __2.0;
            let __end0 = __2.2;
            let __temp0 = __action318(errors, db, __2);
            let __temp0 = (__start0, __temp0, __end0);
            __action178(errors, db, __0, __1, __temp0, __3)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action323<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Token<'input>, Location),
            __1: (Location, Spanned<FieldDef>, Location),
            __2: (Location, Token<'input>, Location),
        ) -> Block<Spanned<FieldDef>> {
            let __start0 = __1.0;
            let __end0 = __1.2;
            let __temp0 = __action315(errors, db, __1);
            let __temp0 = (__start0, __temp0, __end0);
            __action179(errors, db, __0, __temp0, __2)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action324<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Token<'input>, Location),
            __1: (Location, Token<'input>, Location),
        ) -> Block<Spanned<FieldDef>> {
            let __start0 = __0.2;
            let __end0 = __1.0;
            let __temp0 = __action316(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action179(errors, db, __0, __temp0, __1)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action325<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Token<'input>, Location),
            __1: (Location, alloc::vec::Vec<Spanned<FieldDef>>, Location),
            __2: (Location, Spanned<FieldDef>, Location),
            __3: (Location, Token<'input>, Location),
        ) -> Block<Spanned<FieldDef>> {
            let __start0 = __1.0;
            let __end0 = __2.2;
            let __temp0 = __action317(errors, db, __1, __2);
            let __temp0 = (__start0, __temp0, __end0);
            __action179(errors, db, __0, __temp0, __3)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action326<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Token<'input>, Location),
            __1: (Location, alloc::vec::Vec<Spanned<FieldDef>>, Location),
            __2: (Location, Token<'input>, Location),
        ) -> Block<Spanned<FieldDef>> {
            let __start0 = __1.0;
            let __end0 = __1.2;
            let __temp0 = __action318(errors, db, __1);
            let __temp0 = (__start0, __temp0, __end0);
            __action179(errors, db, __0, __temp0, __2)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action327<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<KeywordAndVisibility>, Location),
            __1: (Location, Spanned<Ident>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Token<'input>, Location),
            __4: (Location, Spanned<FieldDef>, Location),
            __5: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.0;
            let __end0 = __5.2;
            let __temp0 = __action319(errors, db, __2, __3, __4, __5);
            let __temp0 = (__start0, __temp0, __end0);
            __action303(errors, db, __0, __1, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action328<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<KeywordAndVisibility>, Location),
            __1: (Location, Spanned<Ident>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Token<'input>, Location),
            __4: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.0;
            let __end0 = __4.2;
            let __temp0 = __action320(errors, db, __2, __3, __4);
            let __temp0 = (__start0, __temp0, __end0);
            __action303(errors, db, __0, __1, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action329<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<KeywordAndVisibility>, Location),
            __1: (Location, Spanned<Ident>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Token<'input>, Location),
            __4: (Location, alloc::vec::Vec<Spanned<FieldDef>>, Location),
            __5: (Location, Spanned<FieldDef>, Location),
            __6: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.0;
            let __end0 = __6.2;
            let __temp0 = __action321(errors, db, __2, __3, __4, __5, __6);
            let __temp0 = (__start0, __temp0, __end0);
            __action303(errors, db, __0, __1, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action330<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<KeywordAndVisibility>, Location),
            __1: (Location, Spanned<Ident>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Token<'input>, Location),
            __4: (Location, alloc::vec::Vec<Spanned<FieldDef>>, Location),
            __5: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.0;
            let __end0 = __5.2;
            let __temp0 = __action322(errors, db, __2, __3, __4, __5);
            let __temp0 = (__start0, __temp0, __end0);
            __action303(errors, db, __0, __1, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action331<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<KeywordAndVisibility>, Location),
            __1: (Location, Spanned<Ident>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Spanned<FieldDef>, Location),
            __4: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.0;
            let __end0 = __4.2;
            let __temp0 = __action323(errors, db, __2, __3, __4);
            let __temp0 = (__start0, __temp0, __end0);
            __action303(errors, db, __0, __1, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action332<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<KeywordAndVisibility>, Location),
            __1: (Location, Spanned<Ident>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.0;
            let __end0 = __3.2;
            let __temp0 = __action324(errors, db, __2, __3);
            let __temp0 = (__start0, __temp0, __end0);
            __action303(errors, db, __0, __1, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action333<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<KeywordAndVisibility>, Location),
            __1: (Location, Spanned<Ident>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, alloc::vec::Vec<Spanned<FieldDef>>, Location),
            __4: (Location, Spanned<FieldDef>, Location),
            __5: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.0;
            let __end0 = __5.2;
            let __temp0 = __action325(errors, db, __2, __3, __4, __5);
            let __temp0 = (__start0, __temp0, __end0);
            __action303(errors, db, __0, __1, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action334<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<KeywordAndVisibility>, Location),
            __1: (Location, Spanned<Ident>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, alloc::vec::Vec<Spanned<FieldDef>>, Location),
            __4: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.0;
            let __end0 = __4.2;
            let __temp0 = __action326(errors, db, __2, __3, __4);
            let __temp0 = (__start0, __temp0, __end0);
            __action303(errors, db, __0, __1, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action335<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Node>, Location),
        ) -> Vec<Spanned<Node>> {
            let __start0 = __0.0;
            let __end0 = __0.2;
            let __temp0 = __action129(errors, db, __0);
            let __temp0 = (__start0, __temp0, __end0);
            __action204(errors, db, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action336<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __lookbehind: &Location,
            __lookahead: &Location,
        ) -> Vec<Spanned<Node>> {
            let __start0 = *__lookbehind;
            let __end0 = *__lookahead;
            let __temp0 = __action130(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action204(errors, db, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action337<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
            __1: (Location, Spanned<Node>, Location),
        ) -> Vec<Spanned<Node>> {
            let __start0 = __1.0;
            let __end0 = __1.2;
            let __temp0 = __action129(errors, db, __1);
            let __temp0 = (__start0, __temp0, __end0);
            __action205(errors, db, __0, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action338<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
        ) -> Vec<Spanned<Node>> {
            let __start0 = __0.2;
            let __end0 = __0.2;
            let __temp0 = __action130(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action205(errors, db, __0, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action339<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Token<'input>, Location),
            __1: (Location, Token<'input>, Location),
            __2: (Location, Spanned<Node>, Location),
            __3: (Location, Token<'input>, Location),
        ) -> Block<Spanned<Node>> {
            let __start0 = __2.0;
            let __end0 = __2.2;
            let __temp0 = __action335(errors, db, __2);
            let __temp0 = (__start0, __temp0, __end0);
            __action180(errors, db, __0, __1, __temp0, __3)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action340<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Token<'input>, Location),
            __1: (Location, Token<'input>, Location),
            __2: (Location, Token<'input>, Location),
        ) -> Block<Spanned<Node>> {
            let __start0 = __1.2;
            let __end0 = __2.0;
            let __temp0 = __action336(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action180(errors, db, __0, __1, __temp0, __2)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action341<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Token<'input>, Location),
            __1: (Location, Token<'input>, Location),
            __2: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
            __3: (Location, Spanned<Node>, Location),
            __4: (Location, Token<'input>, Location),
        ) -> Block<Spanned<Node>> {
            let __start0 = __2.0;
            let __end0 = __3.2;
            let __temp0 = __action337(errors, db, __2, __3);
            let __temp0 = (__start0, __temp0, __end0);
            __action180(errors, db, __0, __1, __temp0, __4)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action342<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Token<'input>, Location),
            __1: (Location, Token<'input>, Location),
            __2: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
            __3: (Location, Token<'input>, Location),
        ) -> Block<Spanned<Node>> {
            let __start0 = __2.0;
            let __end0 = __2.2;
            let __temp0 = __action338(errors, db, __2);
            let __temp0 = (__start0, __temp0, __end0);
            __action180(errors, db, __0, __1, __temp0, __3)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action343<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Token<'input>, Location),
            __1: (Location, Spanned<Node>, Location),
            __2: (Location, Token<'input>, Location),
        ) -> Block<Spanned<Node>> {
            let __start0 = __1.0;
            let __end0 = __1.2;
            let __temp0 = __action335(errors, db, __1);
            let __temp0 = (__start0, __temp0, __end0);
            __action181(errors, db, __0, __temp0, __2)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action344<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Token<'input>, Location),
            __1: (Location, Token<'input>, Location),
        ) -> Block<Spanned<Node>> {
            let __start0 = __0.2;
            let __end0 = __1.0;
            let __temp0 = __action336(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action181(errors, db, __0, __temp0, __1)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action345<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Token<'input>, Location),
            __1: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
            __2: (Location, Spanned<Node>, Location),
            __3: (Location, Token<'input>, Location),
        ) -> Block<Spanned<Node>> {
            let __start0 = __1.0;
            let __end0 = __2.2;
            let __temp0 = __action337(errors, db, __1, __2);
            let __temp0 = (__start0, __temp0, __end0);
            __action181(errors, db, __0, __temp0, __3)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action346<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Token<'input>, Location),
            __1: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
            __2: (Location, Token<'input>, Location),
        ) -> Block<Spanned<Node>> {
            let __start0 = __1.0;
            let __end0 = __1.2;
            let __temp0 = __action338(errors, db, __1);
            let __temp0 = (__start0, __temp0, __end0);
            __action181(errors, db, __0, __temp0, __2)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action347<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<KeywordAndVisibility>, Location),
            __1: (Location, Spanned<Ident>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Spanned<Ident>, Location),
            __4: (Location, Token<'input>, Location),
            __5: (Location, Token<'input>, Location),
            __6: (Location, Spanned<Node>, Location),
            __7: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __4.0;
            let __end0 = __7.2;
            let __temp0 = __action339(errors, db, __4, __5, __6, __7);
            let __temp0 = (__start0, __temp0, __end0);
            __action286(errors, db, __0, __1, __2, __3, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action348<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<KeywordAndVisibility>, Location),
            __1: (Location, Spanned<Ident>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Spanned<Ident>, Location),
            __4: (Location, Token<'input>, Location),
            __5: (Location, Token<'input>, Location),
            __6: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __4.0;
            let __end0 = __6.2;
            let __temp0 = __action340(errors, db, __4, __5, __6);
            let __temp0 = (__start0, __temp0, __end0);
            __action286(errors, db, __0, __1, __2, __3, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action349<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<KeywordAndVisibility>, Location),
            __1: (Location, Spanned<Ident>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Spanned<Ident>, Location),
            __4: (Location, Token<'input>, Location),
            __5: (Location, Token<'input>, Location),
            __6: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
            __7: (Location, Spanned<Node>, Location),
            __8: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __4.0;
            let __end0 = __8.2;
            let __temp0 = __action341(errors, db, __4, __5, __6, __7, __8);
            let __temp0 = (__start0, __temp0, __end0);
            __action286(errors, db, __0, __1, __2, __3, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action350<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<KeywordAndVisibility>, Location),
            __1: (Location, Spanned<Ident>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Spanned<Ident>, Location),
            __4: (Location, Token<'input>, Location),
            __5: (Location, Token<'input>, Location),
            __6: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
            __7: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __4.0;
            let __end0 = __7.2;
            let __temp0 = __action342(errors, db, __4, __5, __6, __7);
            let __temp0 = (__start0, __temp0, __end0);
            __action286(errors, db, __0, __1, __2, __3, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action351<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<KeywordAndVisibility>, Location),
            __1: (Location, Spanned<Ident>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Spanned<Ident>, Location),
            __4: (Location, Token<'input>, Location),
            __5: (Location, Spanned<Node>, Location),
            __6: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __4.0;
            let __end0 = __6.2;
            let __temp0 = __action343(errors, db, __4, __5, __6);
            let __temp0 = (__start0, __temp0, __end0);
            __action286(errors, db, __0, __1, __2, __3, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action352<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<KeywordAndVisibility>, Location),
            __1: (Location, Spanned<Ident>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Spanned<Ident>, Location),
            __4: (Location, Token<'input>, Location),
            __5: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __4.0;
            let __end0 = __5.2;
            let __temp0 = __action344(errors, db, __4, __5);
            let __temp0 = (__start0, __temp0, __end0);
            __action286(errors, db, __0, __1, __2, __3, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action353<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<KeywordAndVisibility>, Location),
            __1: (Location, Spanned<Ident>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Spanned<Ident>, Location),
            __4: (Location, Token<'input>, Location),
            __5: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
            __6: (Location, Spanned<Node>, Location),
            __7: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __4.0;
            let __end0 = __7.2;
            let __temp0 = __action345(errors, db, __4, __5, __6, __7);
            let __temp0 = (__start0, __temp0, __end0);
            __action286(errors, db, __0, __1, __2, __3, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action354<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<KeywordAndVisibility>, Location),
            __1: (Location, Spanned<Ident>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Spanned<Ident>, Location),
            __4: (Location, Token<'input>, Location),
            __5: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
            __6: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __4.0;
            let __end0 = __6.2;
            let __temp0 = __action346(errors, db, __4, __5, __6);
            let __temp0 = (__start0, __temp0, __end0);
            __action286(errors, db, __0, __1, __2, __3, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action355<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<KeywordAndVisibility>, Location),
            __1: (Location, Spanned<Ident>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Token<'input>, Location),
            __4: (Location, Spanned<Node>, Location),
            __5: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.0;
            let __end0 = __5.2;
            let __temp0 = __action339(errors, db, __2, __3, __4, __5);
            let __temp0 = (__start0, __temp0, __end0);
            __action287(errors, db, __0, __1, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action356<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<KeywordAndVisibility>, Location),
            __1: (Location, Spanned<Ident>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Token<'input>, Location),
            __4: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.0;
            let __end0 = __4.2;
            let __temp0 = __action340(errors, db, __2, __3, __4);
            let __temp0 = (__start0, __temp0, __end0);
            __action287(errors, db, __0, __1, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action357<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<KeywordAndVisibility>, Location),
            __1: (Location, Spanned<Ident>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Token<'input>, Location),
            __4: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
            __5: (Location, Spanned<Node>, Location),
            __6: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.0;
            let __end0 = __6.2;
            let __temp0 = __action341(errors, db, __2, __3, __4, __5, __6);
            let __temp0 = (__start0, __temp0, __end0);
            __action287(errors, db, __0, __1, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action358<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<KeywordAndVisibility>, Location),
            __1: (Location, Spanned<Ident>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Token<'input>, Location),
            __4: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
            __5: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.0;
            let __end0 = __5.2;
            let __temp0 = __action342(errors, db, __2, __3, __4, __5);
            let __temp0 = (__start0, __temp0, __end0);
            __action287(errors, db, __0, __1, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action359<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<KeywordAndVisibility>, Location),
            __1: (Location, Spanned<Ident>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Spanned<Node>, Location),
            __4: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.0;
            let __end0 = __4.2;
            let __temp0 = __action343(errors, db, __2, __3, __4);
            let __temp0 = (__start0, __temp0, __end0);
            __action287(errors, db, __0, __1, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action360<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<KeywordAndVisibility>, Location),
            __1: (Location, Spanned<Ident>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.0;
            let __end0 = __3.2;
            let __temp0 = __action344(errors, db, __2, __3);
            let __temp0 = (__start0, __temp0, __end0);
            __action287(errors, db, __0, __1, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action361<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<KeywordAndVisibility>, Location),
            __1: (Location, Spanned<Ident>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
            __4: (Location, Spanned<Node>, Location),
            __5: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.0;
            let __end0 = __5.2;
            let __temp0 = __action345(errors, db, __2, __3, __4, __5);
            let __temp0 = (__start0, __temp0, __end0);
            __action287(errors, db, __0, __1, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action362<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<KeywordAndVisibility>, Location),
            __1: (Location, Spanned<Ident>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
            __4: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.0;
            let __end0 = __4.2;
            let __temp0 = __action346(errors, db, __2, __3, __4);
            let __temp0 = (__start0, __temp0, __end0);
            __action287(errors, db, __0, __1, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action363<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Prototype>, Location),
        ) -> Vec<Spanned<Prototype>> {
            let __start0 = __0.0;
            let __end0 = __0.2;
            let __temp0 = __action139(errors, db, __0);
            let __temp0 = (__start0, __temp0, __end0);
            __action216(errors, db, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action364<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __lookbehind: &Location,
            __lookahead: &Location,
        ) -> Vec<Spanned<Prototype>> {
            let __start0 = *__lookbehind;
            let __end0 = *__lookahead;
            let __temp0 = __action140(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action216(errors, db, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action365<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, alloc::vec::Vec<Spanned<Prototype>>, Location),
            __1: (Location, Spanned<Prototype>, Location),
        ) -> Vec<Spanned<Prototype>> {
            let __start0 = __1.0;
            let __end0 = __1.2;
            let __temp0 = __action139(errors, db, __1);
            let __temp0 = (__start0, __temp0, __end0);
            __action217(errors, db, __0, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action366<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, alloc::vec::Vec<Spanned<Prototype>>, Location),
        ) -> Vec<Spanned<Prototype>> {
            let __start0 = __0.2;
            let __end0 = __0.2;
            let __temp0 = __action140(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action217(errors, db, __0, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action367<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Token<'input>, Location),
            __1: (Location, Token<'input>, Location),
            __2: (Location, Spanned<Prototype>, Location),
            __3: (Location, Token<'input>, Location),
        ) -> Block<Spanned<Prototype>> {
            let __start0 = __2.0;
            let __end0 = __2.2;
            let __temp0 = __action363(errors, db, __2);
            let __temp0 = (__start0, __temp0, __end0);
            __action182(errors, db, __0, __1, __temp0, __3)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action368<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Token<'input>, Location),
            __1: (Location, Token<'input>, Location),
            __2: (Location, Token<'input>, Location),
        ) -> Block<Spanned<Prototype>> {
            let __start0 = __1.2;
            let __end0 = __2.0;
            let __temp0 = __action364(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action182(errors, db, __0, __1, __temp0, __2)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action369<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Token<'input>, Location),
            __1: (Location, Token<'input>, Location),
            __2: (Location, alloc::vec::Vec<Spanned<Prototype>>, Location),
            __3: (Location, Spanned<Prototype>, Location),
            __4: (Location, Token<'input>, Location),
        ) -> Block<Spanned<Prototype>> {
            let __start0 = __2.0;
            let __end0 = __3.2;
            let __temp0 = __action365(errors, db, __2, __3);
            let __temp0 = (__start0, __temp0, __end0);
            __action182(errors, db, __0, __1, __temp0, __4)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action370<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Token<'input>, Location),
            __1: (Location, Token<'input>, Location),
            __2: (Location, alloc::vec::Vec<Spanned<Prototype>>, Location),
            __3: (Location, Token<'input>, Location),
        ) -> Block<Spanned<Prototype>> {
            let __start0 = __2.0;
            let __end0 = __2.2;
            let __temp0 = __action366(errors, db, __2);
            let __temp0 = (__start0, __temp0, __end0);
            __action182(errors, db, __0, __1, __temp0, __3)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action371<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Token<'input>, Location),
            __1: (Location, Spanned<Prototype>, Location),
            __2: (Location, Token<'input>, Location),
        ) -> Block<Spanned<Prototype>> {
            let __start0 = __1.0;
            let __end0 = __1.2;
            let __temp0 = __action363(errors, db, __1);
            let __temp0 = (__start0, __temp0, __end0);
            __action183(errors, db, __0, __temp0, __2)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action372<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Token<'input>, Location),
            __1: (Location, Token<'input>, Location),
        ) -> Block<Spanned<Prototype>> {
            let __start0 = __0.2;
            let __end0 = __1.0;
            let __temp0 = __action364(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action183(errors, db, __0, __temp0, __1)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action373<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Token<'input>, Location),
            __1: (Location, alloc::vec::Vec<Spanned<Prototype>>, Location),
            __2: (Location, Spanned<Prototype>, Location),
            __3: (Location, Token<'input>, Location),
        ) -> Block<Spanned<Prototype>> {
            let __start0 = __1.0;
            let __end0 = __2.2;
            let __temp0 = __action365(errors, db, __1, __2);
            let __temp0 = (__start0, __temp0, __end0);
            __action183(errors, db, __0, __temp0, __3)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action374<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Token<'input>, Location),
            __1: (Location, alloc::vec::Vec<Spanned<Prototype>>, Location),
            __2: (Location, Token<'input>, Location),
        ) -> Block<Spanned<Prototype>> {
            let __start0 = __1.0;
            let __end0 = __1.2;
            let __temp0 = __action366(errors, db, __1);
            let __temp0 = (__start0, __temp0, __end0);
            __action183(errors, db, __0, __temp0, __2)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action375<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<KeywordAndVisibility>, Location),
            __1: (Location, Spanned<Ident>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Vec<Spanned<Ident>>, Location),
            __4: (Location, Token<'input>, Location),
            __5: (Location, Token<'input>, Location),
            __6: (Location, Spanned<Prototype>, Location),
            __7: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __4.0;
            let __end0 = __7.2;
            let __temp0 = __action367(errors, db, __4, __5, __6, __7);
            let __temp0 = (__start0, __temp0, __end0);
            __action272(errors, db, __0, __1, __2, __3, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action376<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<KeywordAndVisibility>, Location),
            __1: (Location, Spanned<Ident>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Vec<Spanned<Ident>>, Location),
            __4: (Location, Token<'input>, Location),
            __5: (Location, Token<'input>, Location),
            __6: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __4.0;
            let __end0 = __6.2;
            let __temp0 = __action368(errors, db, __4, __5, __6);
            let __temp0 = (__start0, __temp0, __end0);
            __action272(errors, db, __0, __1, __2, __3, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action377<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<KeywordAndVisibility>, Location),
            __1: (Location, Spanned<Ident>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Vec<Spanned<Ident>>, Location),
            __4: (Location, Token<'input>, Location),
            __5: (Location, Token<'input>, Location),
            __6: (Location, alloc::vec::Vec<Spanned<Prototype>>, Location),
            __7: (Location, Spanned<Prototype>, Location),
            __8: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __4.0;
            let __end0 = __8.2;
            let __temp0 = __action369(errors, db, __4, __5, __6, __7, __8);
            let __temp0 = (__start0, __temp0, __end0);
            __action272(errors, db, __0, __1, __2, __3, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action378<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<KeywordAndVisibility>, Location),
            __1: (Location, Spanned<Ident>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Vec<Spanned<Ident>>, Location),
            __4: (Location, Token<'input>, Location),
            __5: (Location, Token<'input>, Location),
            __6: (Location, alloc::vec::Vec<Spanned<Prototype>>, Location),
            __7: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __4.0;
            let __end0 = __7.2;
            let __temp0 = __action370(errors, db, __4, __5, __6, __7);
            let __temp0 = (__start0, __temp0, __end0);
            __action272(errors, db, __0, __1, __2, __3, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action379<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<KeywordAndVisibility>, Location),
            __1: (Location, Spanned<Ident>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Vec<Spanned<Ident>>, Location),
            __4: (Location, Token<'input>, Location),
            __5: (Location, Spanned<Prototype>, Location),
            __6: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __4.0;
            let __end0 = __6.2;
            let __temp0 = __action371(errors, db, __4, __5, __6);
            let __temp0 = (__start0, __temp0, __end0);
            __action272(errors, db, __0, __1, __2, __3, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action380<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<KeywordAndVisibility>, Location),
            __1: (Location, Spanned<Ident>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Vec<Spanned<Ident>>, Location),
            __4: (Location, Token<'input>, Location),
            __5: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __4.0;
            let __end0 = __5.2;
            let __temp0 = __action372(errors, db, __4, __5);
            let __temp0 = (__start0, __temp0, __end0);
            __action272(errors, db, __0, __1, __2, __3, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action381<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<KeywordAndVisibility>, Location),
            __1: (Location, Spanned<Ident>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Vec<Spanned<Ident>>, Location),
            __4: (Location, Token<'input>, Location),
            __5: (Location, alloc::vec::Vec<Spanned<Prototype>>, Location),
            __6: (Location, Spanned<Prototype>, Location),
            __7: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __4.0;
            let __end0 = __7.2;
            let __temp0 = __action373(errors, db, __4, __5, __6, __7);
            let __temp0 = (__start0, __temp0, __end0);
            __action272(errors, db, __0, __1, __2, __3, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action382<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<KeywordAndVisibility>, Location),
            __1: (Location, Spanned<Ident>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Vec<Spanned<Ident>>, Location),
            __4: (Location, Token<'input>, Location),
            __5: (Location, alloc::vec::Vec<Spanned<Prototype>>, Location),
            __6: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __4.0;
            let __end0 = __6.2;
            let __temp0 = __action374(errors, db, __4, __5, __6);
            let __temp0 = (__start0, __temp0, __end0);
            __action272(errors, db, __0, __1, __2, __3, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action383<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Node>, Location),
        ) -> Vec<Spanned<Node>> {
            let __start0 = __0.0;
            let __end0 = __0.2;
            let __temp0 = __action146(errors, db, __0);
            let __temp0 = (__start0, __temp0, __end0);
            __action220(errors, db, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action384<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __lookbehind: &Location,
            __lookahead: &Location,
        ) -> Vec<Spanned<Node>> {
            let __start0 = *__lookbehind;
            let __end0 = *__lookahead;
            let __temp0 = __action147(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action220(errors, db, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action385<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
            __1: (Location, Spanned<Node>, Location),
        ) -> Vec<Spanned<Node>> {
            let __start0 = __1.0;
            let __end0 = __1.2;
            let __temp0 = __action146(errors, db, __1);
            let __temp0 = (__start0, __temp0, __end0);
            __action221(errors, db, __0, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action386<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
        ) -> Vec<Spanned<Node>> {
            let __start0 = __0.2;
            let __end0 = __0.2;
            let __temp0 = __action147(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action221(errors, db, __0, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action387<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Token<'input>, Location),
            __1: (Location, Token<'input>, Location),
            __2: (Location, Spanned<Node>, Location),
            __3: (Location, Token<'input>, Location),
        ) -> Block<Spanned<Node>> {
            let __start0 = __2.0;
            let __end0 = __2.2;
            let __temp0 = __action383(errors, db, __2);
            let __temp0 = (__start0, __temp0, __end0);
            __action184(errors, db, __0, __1, __temp0, __3)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action388<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Token<'input>, Location),
            __1: (Location, Token<'input>, Location),
            __2: (Location, Token<'input>, Location),
        ) -> Block<Spanned<Node>> {
            let __start0 = __1.2;
            let __end0 = __2.0;
            let __temp0 = __action384(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action184(errors, db, __0, __1, __temp0, __2)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action389<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Token<'input>, Location),
            __1: (Location, Token<'input>, Location),
            __2: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
            __3: (Location, Spanned<Node>, Location),
            __4: (Location, Token<'input>, Location),
        ) -> Block<Spanned<Node>> {
            let __start0 = __2.0;
            let __end0 = __3.2;
            let __temp0 = __action385(errors, db, __2, __3);
            let __temp0 = (__start0, __temp0, __end0);
            __action184(errors, db, __0, __1, __temp0, __4)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action390<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Token<'input>, Location),
            __1: (Location, Token<'input>, Location),
            __2: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
            __3: (Location, Token<'input>, Location),
        ) -> Block<Spanned<Node>> {
            let __start0 = __2.0;
            let __end0 = __2.2;
            let __temp0 = __action386(errors, db, __2);
            let __temp0 = (__start0, __temp0, __end0);
            __action184(errors, db, __0, __1, __temp0, __3)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action391<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Token<'input>, Location),
            __1: (Location, Spanned<Node>, Location),
            __2: (Location, Token<'input>, Location),
        ) -> Block<Spanned<Node>> {
            let __start0 = __1.0;
            let __end0 = __1.2;
            let __temp0 = __action383(errors, db, __1);
            let __temp0 = (__start0, __temp0, __end0);
            __action185(errors, db, __0, __temp0, __2)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action392<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Token<'input>, Location),
            __1: (Location, Token<'input>, Location),
        ) -> Block<Spanned<Node>> {
            let __start0 = __0.2;
            let __end0 = __1.0;
            let __temp0 = __action384(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action185(errors, db, __0, __temp0, __1)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action393<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Token<'input>, Location),
            __1: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
            __2: (Location, Spanned<Node>, Location),
            __3: (Location, Token<'input>, Location),
        ) -> Block<Spanned<Node>> {
            let __start0 = __1.0;
            let __end0 = __2.2;
            let __temp0 = __action385(errors, db, __1, __2);
            let __temp0 = (__start0, __temp0, __end0);
            __action185(errors, db, __0, __temp0, __3)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action394<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Token<'input>, Location),
            __1: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
            __2: (Location, Token<'input>, Location),
        ) -> Block<Spanned<Node>> {
            let __start0 = __1.0;
            let __end0 = __1.2;
            let __temp0 = __action386(errors, db, __1);
            let __temp0 = (__start0, __temp0, __end0);
            __action185(errors, db, __0, __temp0, __2)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action395<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<KeywordAndVisibility>, Location),
            __1: (Location, Spanned<Prototype>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Token<'input>, Location),
            __4: (Location, Spanned<Node>, Location),
            __5: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.0;
            let __end0 = __5.2;
            let __temp0 = __action387(errors, db, __2, __3, __4, __5);
            let __temp0 = (__start0, __temp0, __end0);
            __action277(errors, db, __0, __1, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action396<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<KeywordAndVisibility>, Location),
            __1: (Location, Spanned<Prototype>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Token<'input>, Location),
            __4: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.0;
            let __end0 = __4.2;
            let __temp0 = __action388(errors, db, __2, __3, __4);
            let __temp0 = (__start0, __temp0, __end0);
            __action277(errors, db, __0, __1, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action397<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<KeywordAndVisibility>, Location),
            __1: (Location, Spanned<Prototype>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Token<'input>, Location),
            __4: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
            __5: (Location, Spanned<Node>, Location),
            __6: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.0;
            let __end0 = __6.2;
            let __temp0 = __action389(errors, db, __2, __3, __4, __5, __6);
            let __temp0 = (__start0, __temp0, __end0);
            __action277(errors, db, __0, __1, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action398<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<KeywordAndVisibility>, Location),
            __1: (Location, Spanned<Prototype>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Token<'input>, Location),
            __4: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
            __5: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.0;
            let __end0 = __5.2;
            let __temp0 = __action390(errors, db, __2, __3, __4, __5);
            let __temp0 = (__start0, __temp0, __end0);
            __action277(errors, db, __0, __1, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action399<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<KeywordAndVisibility>, Location),
            __1: (Location, Spanned<Prototype>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Spanned<Node>, Location),
            __4: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.0;
            let __end0 = __4.2;
            let __temp0 = __action391(errors, db, __2, __3, __4);
            let __temp0 = (__start0, __temp0, __end0);
            __action277(errors, db, __0, __1, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action400<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<KeywordAndVisibility>, Location),
            __1: (Location, Spanned<Prototype>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.0;
            let __end0 = __3.2;
            let __temp0 = __action392(errors, db, __2, __3);
            let __temp0 = (__start0, __temp0, __end0);
            __action277(errors, db, __0, __1, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action401<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<KeywordAndVisibility>, Location),
            __1: (Location, Spanned<Prototype>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
            __4: (Location, Spanned<Node>, Location),
            __5: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.0;
            let __end0 = __5.2;
            let __temp0 = __action393(errors, db, __2, __3, __4, __5);
            let __temp0 = (__start0, __temp0, __end0);
            __action277(errors, db, __0, __1, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action402<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<KeywordAndVisibility>, Location),
            __1: (Location, Spanned<Prototype>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
            __4: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.0;
            let __end0 = __4.2;
            let __temp0 = __action394(errors, db, __2, __3, __4);
            let __temp0 = (__start0, __temp0, __end0);
            __action277(errors, db, __0, __1, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action403<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Keyword>, Location),
            __1: (Location, Spanned<Node>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Token<'input>, Location),
            __4: (Location, Spanned<Node>, Location),
            __5: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.0;
            let __end0 = __5.2;
            let __temp0 = __action387(errors, db, __2, __3, __4, __5);
            let __temp0 = (__start0, __temp0, __end0);
            __action283(errors, db, __0, __1, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action404<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Keyword>, Location),
            __1: (Location, Spanned<Node>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Token<'input>, Location),
            __4: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.0;
            let __end0 = __4.2;
            let __temp0 = __action388(errors, db, __2, __3, __4);
            let __temp0 = (__start0, __temp0, __end0);
            __action283(errors, db, __0, __1, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action405<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Keyword>, Location),
            __1: (Location, Spanned<Node>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Token<'input>, Location),
            __4: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
            __5: (Location, Spanned<Node>, Location),
            __6: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.0;
            let __end0 = __6.2;
            let __temp0 = __action389(errors, db, __2, __3, __4, __5, __6);
            let __temp0 = (__start0, __temp0, __end0);
            __action283(errors, db, __0, __1, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action406<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Keyword>, Location),
            __1: (Location, Spanned<Node>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Token<'input>, Location),
            __4: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
            __5: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.0;
            let __end0 = __5.2;
            let __temp0 = __action390(errors, db, __2, __3, __4, __5);
            let __temp0 = (__start0, __temp0, __end0);
            __action283(errors, db, __0, __1, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action407<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Keyword>, Location),
            __1: (Location, Spanned<Node>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Spanned<Node>, Location),
            __4: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.0;
            let __end0 = __4.2;
            let __temp0 = __action391(errors, db, __2, __3, __4);
            let __temp0 = (__start0, __temp0, __end0);
            __action283(errors, db, __0, __1, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action408<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Keyword>, Location),
            __1: (Location, Spanned<Node>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.0;
            let __end0 = __3.2;
            let __temp0 = __action392(errors, db, __2, __3);
            let __temp0 = (__start0, __temp0, __end0);
            __action283(errors, db, __0, __1, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action409<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Keyword>, Location),
            __1: (Location, Spanned<Node>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
            __4: (Location, Spanned<Node>, Location),
            __5: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.0;
            let __end0 = __5.2;
            let __temp0 = __action393(errors, db, __2, __3, __4, __5);
            let __temp0 = (__start0, __temp0, __end0);
            __action283(errors, db, __0, __1, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action410<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Keyword>, Location),
            __1: (Location, Spanned<Node>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
            __4: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.0;
            let __end0 = __4.2;
            let __temp0 = __action394(errors, db, __2, __3, __4);
            let __temp0 = (__start0, __temp0, __end0);
            __action283(errors, db, __0, __1, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action411<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Keyword>, Location),
            __1: (Location, Spanned<Node>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Token<'input>, Location),
            __4: (Location, Spanned<Node>, Location),
            __5: (Location, Token<'input>, Location),
            __6: (Location, Spanned<Keyword>, Location),
            __7: (Location, Token<'input>, Location),
            __8: (Location, Token<'input>, Location),
            __9: (Location, Spanned<Node>, Location),
            __10: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.0;
            let __end0 = __5.2;
            let __start1 = __7.0;
            let __end1 = __10.2;
            let __temp0 = __action387(errors, db, __2, __3, __4, __5);
            let __temp0 = (__start0, __temp0, __end0);
            let __temp1 = __action387(errors, db, __7, __8, __9, __10);
            let __temp1 = (__start1, __temp1, __end1);
            __action284(errors, db, __0, __1, __temp0, __6, __temp1)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action412<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Keyword>, Location),
            __1: (Location, Spanned<Node>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Token<'input>, Location),
            __4: (Location, Spanned<Node>, Location),
            __5: (Location, Token<'input>, Location),
            __6: (Location, Spanned<Keyword>, Location),
            __7: (Location, Token<'input>, Location),
            __8: (Location, Token<'input>, Location),
            __9: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.0;
            let __end0 = __5.2;
            let __start1 = __7.0;
            let __end1 = __9.2;
            let __temp0 = __action387(errors, db, __2, __3, __4, __5);
            let __temp0 = (__start0, __temp0, __end0);
            let __temp1 = __action388(errors, db, __7, __8, __9);
            let __temp1 = (__start1, __temp1, __end1);
            __action284(errors, db, __0, __1, __temp0, __6, __temp1)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action413<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Keyword>, Location),
            __1: (Location, Spanned<Node>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Token<'input>, Location),
            __4: (Location, Spanned<Node>, Location),
            __5: (Location, Token<'input>, Location),
            __6: (Location, Spanned<Keyword>, Location),
            __7: (Location, Token<'input>, Location),
            __8: (Location, Token<'input>, Location),
            __9: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
            __10: (Location, Spanned<Node>, Location),
            __11: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.0;
            let __end0 = __5.2;
            let __start1 = __7.0;
            let __end1 = __11.2;
            let __temp0 = __action387(errors, db, __2, __3, __4, __5);
            let __temp0 = (__start0, __temp0, __end0);
            let __temp1 = __action389(errors, db, __7, __8, __9, __10, __11);
            let __temp1 = (__start1, __temp1, __end1);
            __action284(errors, db, __0, __1, __temp0, __6, __temp1)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action414<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Keyword>, Location),
            __1: (Location, Spanned<Node>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Token<'input>, Location),
            __4: (Location, Spanned<Node>, Location),
            __5: (Location, Token<'input>, Location),
            __6: (Location, Spanned<Keyword>, Location),
            __7: (Location, Token<'input>, Location),
            __8: (Location, Token<'input>, Location),
            __9: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
            __10: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.0;
            let __end0 = __5.2;
            let __start1 = __7.0;
            let __end1 = __10.2;
            let __temp0 = __action387(errors, db, __2, __3, __4, __5);
            let __temp0 = (__start0, __temp0, __end0);
            let __temp1 = __action390(errors, db, __7, __8, __9, __10);
            let __temp1 = (__start1, __temp1, __end1);
            __action284(errors, db, __0, __1, __temp0, __6, __temp1)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action415<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Keyword>, Location),
            __1: (Location, Spanned<Node>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Token<'input>, Location),
            __4: (Location, Spanned<Node>, Location),
            __5: (Location, Token<'input>, Location),
            __6: (Location, Spanned<Keyword>, Location),
            __7: (Location, Token<'input>, Location),
            __8: (Location, Spanned<Node>, Location),
            __9: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.0;
            let __end0 = __5.2;
            let __start1 = __7.0;
            let __end1 = __9.2;
            let __temp0 = __action387(errors, db, __2, __3, __4, __5);
            let __temp0 = (__start0, __temp0, __end0);
            let __temp1 = __action391(errors, db, __7, __8, __9);
            let __temp1 = (__start1, __temp1, __end1);
            __action284(errors, db, __0, __1, __temp0, __6, __temp1)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action416<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Keyword>, Location),
            __1: (Location, Spanned<Node>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Token<'input>, Location),
            __4: (Location, Spanned<Node>, Location),
            __5: (Location, Token<'input>, Location),
            __6: (Location, Spanned<Keyword>, Location),
            __7: (Location, Token<'input>, Location),
            __8: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.0;
            let __end0 = __5.2;
            let __start1 = __7.0;
            let __end1 = __8.2;
            let __temp0 = __action387(errors, db, __2, __3, __4, __5);
            let __temp0 = (__start0, __temp0, __end0);
            let __temp1 = __action392(errors, db, __7, __8);
            let __temp1 = (__start1, __temp1, __end1);
            __action284(errors, db, __0, __1, __temp0, __6, __temp1)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action417<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Keyword>, Location),
            __1: (Location, Spanned<Node>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Token<'input>, Location),
            __4: (Location, Spanned<Node>, Location),
            __5: (Location, Token<'input>, Location),
            __6: (Location, Spanned<Keyword>, Location),
            __7: (Location, Token<'input>, Location),
            __8: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
            __9: (Location, Spanned<Node>, Location),
            __10: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.0;
            let __end0 = __5.2;
            let __start1 = __7.0;
            let __end1 = __10.2;
            let __temp0 = __action387(errors, db, __2, __3, __4, __5);
            let __temp0 = (__start0, __temp0, __end0);
            let __temp1 = __action393(errors, db, __7, __8, __9, __10);
            let __temp1 = (__start1, __temp1, __end1);
            __action284(errors, db, __0, __1, __temp0, __6, __temp1)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action418<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Keyword>, Location),
            __1: (Location, Spanned<Node>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Token<'input>, Location),
            __4: (Location, Spanned<Node>, Location),
            __5: (Location, Token<'input>, Location),
            __6: (Location, Spanned<Keyword>, Location),
            __7: (Location, Token<'input>, Location),
            __8: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
            __9: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.0;
            let __end0 = __5.2;
            let __start1 = __7.0;
            let __end1 = __9.2;
            let __temp0 = __action387(errors, db, __2, __3, __4, __5);
            let __temp0 = (__start0, __temp0, __end0);
            let __temp1 = __action394(errors, db, __7, __8, __9);
            let __temp1 = (__start1, __temp1, __end1);
            __action284(errors, db, __0, __1, __temp0, __6, __temp1)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action419<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Keyword>, Location),
            __1: (Location, Spanned<Node>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Token<'input>, Location),
            __4: (Location, Token<'input>, Location),
            __5: (Location, Spanned<Keyword>, Location),
            __6: (Location, Token<'input>, Location),
            __7: (Location, Token<'input>, Location),
            __8: (Location, Spanned<Node>, Location),
            __9: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.0;
            let __end0 = __4.2;
            let __start1 = __6.0;
            let __end1 = __9.2;
            let __temp0 = __action388(errors, db, __2, __3, __4);
            let __temp0 = (__start0, __temp0, __end0);
            let __temp1 = __action387(errors, db, __6, __7, __8, __9);
            let __temp1 = (__start1, __temp1, __end1);
            __action284(errors, db, __0, __1, __temp0, __5, __temp1)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action420<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Keyword>, Location),
            __1: (Location, Spanned<Node>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Token<'input>, Location),
            __4: (Location, Token<'input>, Location),
            __5: (Location, Spanned<Keyword>, Location),
            __6: (Location, Token<'input>, Location),
            __7: (Location, Token<'input>, Location),
            __8: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.0;
            let __end0 = __4.2;
            let __start1 = __6.0;
            let __end1 = __8.2;
            let __temp0 = __action388(errors, db, __2, __3, __4);
            let __temp0 = (__start0, __temp0, __end0);
            let __temp1 = __action388(errors, db, __6, __7, __8);
            let __temp1 = (__start1, __temp1, __end1);
            __action284(errors, db, __0, __1, __temp0, __5, __temp1)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action421<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Keyword>, Location),
            __1: (Location, Spanned<Node>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Token<'input>, Location),
            __4: (Location, Token<'input>, Location),
            __5: (Location, Spanned<Keyword>, Location),
            __6: (Location, Token<'input>, Location),
            __7: (Location, Token<'input>, Location),
            __8: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
            __9: (Location, Spanned<Node>, Location),
            __10: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.0;
            let __end0 = __4.2;
            let __start1 = __6.0;
            let __end1 = __10.2;
            let __temp0 = __action388(errors, db, __2, __3, __4);
            let __temp0 = (__start0, __temp0, __end0);
            let __temp1 = __action389(errors, db, __6, __7, __8, __9, __10);
            let __temp1 = (__start1, __temp1, __end1);
            __action284(errors, db, __0, __1, __temp0, __5, __temp1)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action422<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Keyword>, Location),
            __1: (Location, Spanned<Node>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Token<'input>, Location),
            __4: (Location, Token<'input>, Location),
            __5: (Location, Spanned<Keyword>, Location),
            __6: (Location, Token<'input>, Location),
            __7: (Location, Token<'input>, Location),
            __8: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
            __9: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.0;
            let __end0 = __4.2;
            let __start1 = __6.0;
            let __end1 = __9.2;
            let __temp0 = __action388(errors, db, __2, __3, __4);
            let __temp0 = (__start0, __temp0, __end0);
            let __temp1 = __action390(errors, db, __6, __7, __8, __9);
            let __temp1 = (__start1, __temp1, __end1);
            __action284(errors, db, __0, __1, __temp0, __5, __temp1)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action423<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Keyword>, Location),
            __1: (Location, Spanned<Node>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Token<'input>, Location),
            __4: (Location, Token<'input>, Location),
            __5: (Location, Spanned<Keyword>, Location),
            __6: (Location, Token<'input>, Location),
            __7: (Location, Spanned<Node>, Location),
            __8: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.0;
            let __end0 = __4.2;
            let __start1 = __6.0;
            let __end1 = __8.2;
            let __temp0 = __action388(errors, db, __2, __3, __4);
            let __temp0 = (__start0, __temp0, __end0);
            let __temp1 = __action391(errors, db, __6, __7, __8);
            let __temp1 = (__start1, __temp1, __end1);
            __action284(errors, db, __0, __1, __temp0, __5, __temp1)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action424<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Keyword>, Location),
            __1: (Location, Spanned<Node>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Token<'input>, Location),
            __4: (Location, Token<'input>, Location),
            __5: (Location, Spanned<Keyword>, Location),
            __6: (Location, Token<'input>, Location),
            __7: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.0;
            let __end0 = __4.2;
            let __start1 = __6.0;
            let __end1 = __7.2;
            let __temp0 = __action388(errors, db, __2, __3, __4);
            let __temp0 = (__start0, __temp0, __end0);
            let __temp1 = __action392(errors, db, __6, __7);
            let __temp1 = (__start1, __temp1, __end1);
            __action284(errors, db, __0, __1, __temp0, __5, __temp1)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action425<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Keyword>, Location),
            __1: (Location, Spanned<Node>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Token<'input>, Location),
            __4: (Location, Token<'input>, Location),
            __5: (Location, Spanned<Keyword>, Location),
            __6: (Location, Token<'input>, Location),
            __7: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
            __8: (Location, Spanned<Node>, Location),
            __9: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.0;
            let __end0 = __4.2;
            let __start1 = __6.0;
            let __end1 = __9.2;
            let __temp0 = __action388(errors, db, __2, __3, __4);
            let __temp0 = (__start0, __temp0, __end0);
            let __temp1 = __action393(errors, db, __6, __7, __8, __9);
            let __temp1 = (__start1, __temp1, __end1);
            __action284(errors, db, __0, __1, __temp0, __5, __temp1)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action426<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Keyword>, Location),
            __1: (Location, Spanned<Node>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Token<'input>, Location),
            __4: (Location, Token<'input>, Location),
            __5: (Location, Spanned<Keyword>, Location),
            __6: (Location, Token<'input>, Location),
            __7: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
            __8: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.0;
            let __end0 = __4.2;
            let __start1 = __6.0;
            let __end1 = __8.2;
            let __temp0 = __action388(errors, db, __2, __3, __4);
            let __temp0 = (__start0, __temp0, __end0);
            let __temp1 = __action394(errors, db, __6, __7, __8);
            let __temp1 = (__start1, __temp1, __end1);
            __action284(errors, db, __0, __1, __temp0, __5, __temp1)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action427<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Keyword>, Location),
            __1: (Location, Spanned<Node>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Token<'input>, Location),
            __4: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
            __5: (Location, Spanned<Node>, Location),
            __6: (Location, Token<'input>, Location),
            __7: (Location, Spanned<Keyword>, Location),
            __8: (Location, Token<'input>, Location),
            __9: (Location, Token<'input>, Location),
            __10: (Location, Spanned<Node>, Location),
            __11: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.0;
            let __end0 = __6.2;
            let __start1 = __8.0;
            let __end1 = __11.2;
            let __temp0 = __action389(errors, db, __2, __3, __4, __5, __6);
            let __temp0 = (__start0, __temp0, __end0);
            let __temp1 = __action387(errors, db, __8, __9, __10, __11);
            let __temp1 = (__start1, __temp1, __end1);
            __action284(errors, db, __0, __1, __temp0, __7, __temp1)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action428<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Keyword>, Location),
            __1: (Location, Spanned<Node>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Token<'input>, Location),
            __4: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
            __5: (Location, Spanned<Node>, Location),
            __6: (Location, Token<'input>, Location),
            __7: (Location, Spanned<Keyword>, Location),
            __8: (Location, Token<'input>, Location),
            __9: (Location, Token<'input>, Location),
            __10: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.0;
            let __end0 = __6.2;
            let __start1 = __8.0;
            let __end1 = __10.2;
            let __temp0 = __action389(errors, db, __2, __3, __4, __5, __6);
            let __temp0 = (__start0, __temp0, __end0);
            let __temp1 = __action388(errors, db, __8, __9, __10);
            let __temp1 = (__start1, __temp1, __end1);
            __action284(errors, db, __0, __1, __temp0, __7, __temp1)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action429<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Keyword>, Location),
            __1: (Location, Spanned<Node>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Token<'input>, Location),
            __4: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
            __5: (Location, Spanned<Node>, Location),
            __6: (Location, Token<'input>, Location),
            __7: (Location, Spanned<Keyword>, Location),
            __8: (Location, Token<'input>, Location),
            __9: (Location, Token<'input>, Location),
            __10: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
            __11: (Location, Spanned<Node>, Location),
            __12: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.0;
            let __end0 = __6.2;
            let __start1 = __8.0;
            let __end1 = __12.2;
            let __temp0 = __action389(errors, db, __2, __3, __4, __5, __6);
            let __temp0 = (__start0, __temp0, __end0);
            let __temp1 = __action389(errors, db, __8, __9, __10, __11, __12);
            let __temp1 = (__start1, __temp1, __end1);
            __action284(errors, db, __0, __1, __temp0, __7, __temp1)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action430<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Keyword>, Location),
            __1: (Location, Spanned<Node>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Token<'input>, Location),
            __4: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
            __5: (Location, Spanned<Node>, Location),
            __6: (Location, Token<'input>, Location),
            __7: (Location, Spanned<Keyword>, Location),
            __8: (Location, Token<'input>, Location),
            __9: (Location, Token<'input>, Location),
            __10: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
            __11: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.0;
            let __end0 = __6.2;
            let __start1 = __8.0;
            let __end1 = __11.2;
            let __temp0 = __action389(errors, db, __2, __3, __4, __5, __6);
            let __temp0 = (__start0, __temp0, __end0);
            let __temp1 = __action390(errors, db, __8, __9, __10, __11);
            let __temp1 = (__start1, __temp1, __end1);
            __action284(errors, db, __0, __1, __temp0, __7, __temp1)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action431<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Keyword>, Location),
            __1: (Location, Spanned<Node>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Token<'input>, Location),
            __4: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
            __5: (Location, Spanned<Node>, Location),
            __6: (Location, Token<'input>, Location),
            __7: (Location, Spanned<Keyword>, Location),
            __8: (Location, Token<'input>, Location),
            __9: (Location, Spanned<Node>, Location),
            __10: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.0;
            let __end0 = __6.2;
            let __start1 = __8.0;
            let __end1 = __10.2;
            let __temp0 = __action389(errors, db, __2, __3, __4, __5, __6);
            let __temp0 = (__start0, __temp0, __end0);
            let __temp1 = __action391(errors, db, __8, __9, __10);
            let __temp1 = (__start1, __temp1, __end1);
            __action284(errors, db, __0, __1, __temp0, __7, __temp1)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action432<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Keyword>, Location),
            __1: (Location, Spanned<Node>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Token<'input>, Location),
            __4: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
            __5: (Location, Spanned<Node>, Location),
            __6: (Location, Token<'input>, Location),
            __7: (Location, Spanned<Keyword>, Location),
            __8: (Location, Token<'input>, Location),
            __9: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.0;
            let __end0 = __6.2;
            let __start1 = __8.0;
            let __end1 = __9.2;
            let __temp0 = __action389(errors, db, __2, __3, __4, __5, __6);
            let __temp0 = (__start0, __temp0, __end0);
            let __temp1 = __action392(errors, db, __8, __9);
            let __temp1 = (__start1, __temp1, __end1);
            __action284(errors, db, __0, __1, __temp0, __7, __temp1)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action433<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Keyword>, Location),
            __1: (Location, Spanned<Node>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Token<'input>, Location),
            __4: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
            __5: (Location, Spanned<Node>, Location),
            __6: (Location, Token<'input>, Location),
            __7: (Location, Spanned<Keyword>, Location),
            __8: (Location, Token<'input>, Location),
            __9: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
            __10: (Location, Spanned<Node>, Location),
            __11: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.0;
            let __end0 = __6.2;
            let __start1 = __8.0;
            let __end1 = __11.2;
            let __temp0 = __action389(errors, db, __2, __3, __4, __5, __6);
            let __temp0 = (__start0, __temp0, __end0);
            let __temp1 = __action393(errors, db, __8, __9, __10, __11);
            let __temp1 = (__start1, __temp1, __end1);
            __action284(errors, db, __0, __1, __temp0, __7, __temp1)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action434<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Keyword>, Location),
            __1: (Location, Spanned<Node>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Token<'input>, Location),
            __4: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
            __5: (Location, Spanned<Node>, Location),
            __6: (Location, Token<'input>, Location),
            __7: (Location, Spanned<Keyword>, Location),
            __8: (Location, Token<'input>, Location),
            __9: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
            __10: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.0;
            let __end0 = __6.2;
            let __start1 = __8.0;
            let __end1 = __10.2;
            let __temp0 = __action389(errors, db, __2, __3, __4, __5, __6);
            let __temp0 = (__start0, __temp0, __end0);
            let __temp1 = __action394(errors, db, __8, __9, __10);
            let __temp1 = (__start1, __temp1, __end1);
            __action284(errors, db, __0, __1, __temp0, __7, __temp1)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action435<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Keyword>, Location),
            __1: (Location, Spanned<Node>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Token<'input>, Location),
            __4: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
            __5: (Location, Token<'input>, Location),
            __6: (Location, Spanned<Keyword>, Location),
            __7: (Location, Token<'input>, Location),
            __8: (Location, Token<'input>, Location),
            __9: (Location, Spanned<Node>, Location),
            __10: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.0;
            let __end0 = __5.2;
            let __start1 = __7.0;
            let __end1 = __10.2;
            let __temp0 = __action390(errors, db, __2, __3, __4, __5);
            let __temp0 = (__start0, __temp0, __end0);
            let __temp1 = __action387(errors, db, __7, __8, __9, __10);
            let __temp1 = (__start1, __temp1, __end1);
            __action284(errors, db, __0, __1, __temp0, __6, __temp1)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action436<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Keyword>, Location),
            __1: (Location, Spanned<Node>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Token<'input>, Location),
            __4: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
            __5: (Location, Token<'input>, Location),
            __6: (Location, Spanned<Keyword>, Location),
            __7: (Location, Token<'input>, Location),
            __8: (Location, Token<'input>, Location),
            __9: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.0;
            let __end0 = __5.2;
            let __start1 = __7.0;
            let __end1 = __9.2;
            let __temp0 = __action390(errors, db, __2, __3, __4, __5);
            let __temp0 = (__start0, __temp0, __end0);
            let __temp1 = __action388(errors, db, __7, __8, __9);
            let __temp1 = (__start1, __temp1, __end1);
            __action284(errors, db, __0, __1, __temp0, __6, __temp1)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action437<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Keyword>, Location),
            __1: (Location, Spanned<Node>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Token<'input>, Location),
            __4: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
            __5: (Location, Token<'input>, Location),
            __6: (Location, Spanned<Keyword>, Location),
            __7: (Location, Token<'input>, Location),
            __8: (Location, Token<'input>, Location),
            __9: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
            __10: (Location, Spanned<Node>, Location),
            __11: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.0;
            let __end0 = __5.2;
            let __start1 = __7.0;
            let __end1 = __11.2;
            let __temp0 = __action390(errors, db, __2, __3, __4, __5);
            let __temp0 = (__start0, __temp0, __end0);
            let __temp1 = __action389(errors, db, __7, __8, __9, __10, __11);
            let __temp1 = (__start1, __temp1, __end1);
            __action284(errors, db, __0, __1, __temp0, __6, __temp1)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action438<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Keyword>, Location),
            __1: (Location, Spanned<Node>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Token<'input>, Location),
            __4: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
            __5: (Location, Token<'input>, Location),
            __6: (Location, Spanned<Keyword>, Location),
            __7: (Location, Token<'input>, Location),
            __8: (Location, Token<'input>, Location),
            __9: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
            __10: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.0;
            let __end0 = __5.2;
            let __start1 = __7.0;
            let __end1 = __10.2;
            let __temp0 = __action390(errors, db, __2, __3, __4, __5);
            let __temp0 = (__start0, __temp0, __end0);
            let __temp1 = __action390(errors, db, __7, __8, __9, __10);
            let __temp1 = (__start1, __temp1, __end1);
            __action284(errors, db, __0, __1, __temp0, __6, __temp1)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action439<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Keyword>, Location),
            __1: (Location, Spanned<Node>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Token<'input>, Location),
            __4: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
            __5: (Location, Token<'input>, Location),
            __6: (Location, Spanned<Keyword>, Location),
            __7: (Location, Token<'input>, Location),
            __8: (Location, Spanned<Node>, Location),
            __9: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.0;
            let __end0 = __5.2;
            let __start1 = __7.0;
            let __end1 = __9.2;
            let __temp0 = __action390(errors, db, __2, __3, __4, __5);
            let __temp0 = (__start0, __temp0, __end0);
            let __temp1 = __action391(errors, db, __7, __8, __9);
            let __temp1 = (__start1, __temp1, __end1);
            __action284(errors, db, __0, __1, __temp0, __6, __temp1)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action440<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Keyword>, Location),
            __1: (Location, Spanned<Node>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Token<'input>, Location),
            __4: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
            __5: (Location, Token<'input>, Location),
            __6: (Location, Spanned<Keyword>, Location),
            __7: (Location, Token<'input>, Location),
            __8: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.0;
            let __end0 = __5.2;
            let __start1 = __7.0;
            let __end1 = __8.2;
            let __temp0 = __action390(errors, db, __2, __3, __4, __5);
            let __temp0 = (__start0, __temp0, __end0);
            let __temp1 = __action392(errors, db, __7, __8);
            let __temp1 = (__start1, __temp1, __end1);
            __action284(errors, db, __0, __1, __temp0, __6, __temp1)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action441<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Keyword>, Location),
            __1: (Location, Spanned<Node>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Token<'input>, Location),
            __4: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
            __5: (Location, Token<'input>, Location),
            __6: (Location, Spanned<Keyword>, Location),
            __7: (Location, Token<'input>, Location),
            __8: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
            __9: (Location, Spanned<Node>, Location),
            __10: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.0;
            let __end0 = __5.2;
            let __start1 = __7.0;
            let __end1 = __10.2;
            let __temp0 = __action390(errors, db, __2, __3, __4, __5);
            let __temp0 = (__start0, __temp0, __end0);
            let __temp1 = __action393(errors, db, __7, __8, __9, __10);
            let __temp1 = (__start1, __temp1, __end1);
            __action284(errors, db, __0, __1, __temp0, __6, __temp1)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action442<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Keyword>, Location),
            __1: (Location, Spanned<Node>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Token<'input>, Location),
            __4: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
            __5: (Location, Token<'input>, Location),
            __6: (Location, Spanned<Keyword>, Location),
            __7: (Location, Token<'input>, Location),
            __8: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
            __9: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.0;
            let __end0 = __5.2;
            let __start1 = __7.0;
            let __end1 = __9.2;
            let __temp0 = __action390(errors, db, __2, __3, __4, __5);
            let __temp0 = (__start0, __temp0, __end0);
            let __temp1 = __action394(errors, db, __7, __8, __9);
            let __temp1 = (__start1, __temp1, __end1);
            __action284(errors, db, __0, __1, __temp0, __6, __temp1)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action443<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Keyword>, Location),
            __1: (Location, Spanned<Node>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Spanned<Node>, Location),
            __4: (Location, Token<'input>, Location),
            __5: (Location, Spanned<Keyword>, Location),
            __6: (Location, Token<'input>, Location),
            __7: (Location, Token<'input>, Location),
            __8: (Location, Spanned<Node>, Location),
            __9: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.0;
            let __end0 = __4.2;
            let __start1 = __6.0;
            let __end1 = __9.2;
            let __temp0 = __action391(errors, db, __2, __3, __4);
            let __temp0 = (__start0, __temp0, __end0);
            let __temp1 = __action387(errors, db, __6, __7, __8, __9);
            let __temp1 = (__start1, __temp1, __end1);
            __action284(errors, db, __0, __1, __temp0, __5, __temp1)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action444<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Keyword>, Location),
            __1: (Location, Spanned<Node>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Spanned<Node>, Location),
            __4: (Location, Token<'input>, Location),
            __5: (Location, Spanned<Keyword>, Location),
            __6: (Location, Token<'input>, Location),
            __7: (Location, Token<'input>, Location),
            __8: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.0;
            let __end0 = __4.2;
            let __start1 = __6.0;
            let __end1 = __8.2;
            let __temp0 = __action391(errors, db, __2, __3, __4);
            let __temp0 = (__start0, __temp0, __end0);
            let __temp1 = __action388(errors, db, __6, __7, __8);
            let __temp1 = (__start1, __temp1, __end1);
            __action284(errors, db, __0, __1, __temp0, __5, __temp1)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action445<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Keyword>, Location),
            __1: (Location, Spanned<Node>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Spanned<Node>, Location),
            __4: (Location, Token<'input>, Location),
            __5: (Location, Spanned<Keyword>, Location),
            __6: (Location, Token<'input>, Location),
            __7: (Location, Token<'input>, Location),
            __8: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
            __9: (Location, Spanned<Node>, Location),
            __10: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.0;
            let __end0 = __4.2;
            let __start1 = __6.0;
            let __end1 = __10.2;
            let __temp0 = __action391(errors, db, __2, __3, __4);
            let __temp0 = (__start0, __temp0, __end0);
            let __temp1 = __action389(errors, db, __6, __7, __8, __9, __10);
            let __temp1 = (__start1, __temp1, __end1);
            __action284(errors, db, __0, __1, __temp0, __5, __temp1)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action446<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Keyword>, Location),
            __1: (Location, Spanned<Node>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Spanned<Node>, Location),
            __4: (Location, Token<'input>, Location),
            __5: (Location, Spanned<Keyword>, Location),
            __6: (Location, Token<'input>, Location),
            __7: (Location, Token<'input>, Location),
            __8: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
            __9: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.0;
            let __end0 = __4.2;
            let __start1 = __6.0;
            let __end1 = __9.2;
            let __temp0 = __action391(errors, db, __2, __3, __4);
            let __temp0 = (__start0, __temp0, __end0);
            let __temp1 = __action390(errors, db, __6, __7, __8, __9);
            let __temp1 = (__start1, __temp1, __end1);
            __action284(errors, db, __0, __1, __temp0, __5, __temp1)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action447<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Keyword>, Location),
            __1: (Location, Spanned<Node>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Spanned<Node>, Location),
            __4: (Location, Token<'input>, Location),
            __5: (Location, Spanned<Keyword>, Location),
            __6: (Location, Token<'input>, Location),
            __7: (Location, Spanned<Node>, Location),
            __8: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.0;
            let __end0 = __4.2;
            let __start1 = __6.0;
            let __end1 = __8.2;
            let __temp0 = __action391(errors, db, __2, __3, __4);
            let __temp0 = (__start0, __temp0, __end0);
            let __temp1 = __action391(errors, db, __6, __7, __8);
            let __temp1 = (__start1, __temp1, __end1);
            __action284(errors, db, __0, __1, __temp0, __5, __temp1)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action448<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Keyword>, Location),
            __1: (Location, Spanned<Node>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Spanned<Node>, Location),
            __4: (Location, Token<'input>, Location),
            __5: (Location, Spanned<Keyword>, Location),
            __6: (Location, Token<'input>, Location),
            __7: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.0;
            let __end0 = __4.2;
            let __start1 = __6.0;
            let __end1 = __7.2;
            let __temp0 = __action391(errors, db, __2, __3, __4);
            let __temp0 = (__start0, __temp0, __end0);
            let __temp1 = __action392(errors, db, __6, __7);
            let __temp1 = (__start1, __temp1, __end1);
            __action284(errors, db, __0, __1, __temp0, __5, __temp1)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action449<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Keyword>, Location),
            __1: (Location, Spanned<Node>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Spanned<Node>, Location),
            __4: (Location, Token<'input>, Location),
            __5: (Location, Spanned<Keyword>, Location),
            __6: (Location, Token<'input>, Location),
            __7: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
            __8: (Location, Spanned<Node>, Location),
            __9: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.0;
            let __end0 = __4.2;
            let __start1 = __6.0;
            let __end1 = __9.2;
            let __temp0 = __action391(errors, db, __2, __3, __4);
            let __temp0 = (__start0, __temp0, __end0);
            let __temp1 = __action393(errors, db, __6, __7, __8, __9);
            let __temp1 = (__start1, __temp1, __end1);
            __action284(errors, db, __0, __1, __temp0, __5, __temp1)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action450<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Keyword>, Location),
            __1: (Location, Spanned<Node>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Spanned<Node>, Location),
            __4: (Location, Token<'input>, Location),
            __5: (Location, Spanned<Keyword>, Location),
            __6: (Location, Token<'input>, Location),
            __7: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
            __8: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.0;
            let __end0 = __4.2;
            let __start1 = __6.0;
            let __end1 = __8.2;
            let __temp0 = __action391(errors, db, __2, __3, __4);
            let __temp0 = (__start0, __temp0, __end0);
            let __temp1 = __action394(errors, db, __6, __7, __8);
            let __temp1 = (__start1, __temp1, __end1);
            __action284(errors, db, __0, __1, __temp0, __5, __temp1)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action451<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Keyword>, Location),
            __1: (Location, Spanned<Node>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Token<'input>, Location),
            __4: (Location, Spanned<Keyword>, Location),
            __5: (Location, Token<'input>, Location),
            __6: (Location, Token<'input>, Location),
            __7: (Location, Spanned<Node>, Location),
            __8: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.0;
            let __end0 = __3.2;
            let __start1 = __5.0;
            let __end1 = __8.2;
            let __temp0 = __action392(errors, db, __2, __3);
            let __temp0 = (__start0, __temp0, __end0);
            let __temp1 = __action387(errors, db, __5, __6, __7, __8);
            let __temp1 = (__start1, __temp1, __end1);
            __action284(errors, db, __0, __1, __temp0, __4, __temp1)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action452<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Keyword>, Location),
            __1: (Location, Spanned<Node>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Token<'input>, Location),
            __4: (Location, Spanned<Keyword>, Location),
            __5: (Location, Token<'input>, Location),
            __6: (Location, Token<'input>, Location),
            __7: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.0;
            let __end0 = __3.2;
            let __start1 = __5.0;
            let __end1 = __7.2;
            let __temp0 = __action392(errors, db, __2, __3);
            let __temp0 = (__start0, __temp0, __end0);
            let __temp1 = __action388(errors, db, __5, __6, __7);
            let __temp1 = (__start1, __temp1, __end1);
            __action284(errors, db, __0, __1, __temp0, __4, __temp1)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action453<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Keyword>, Location),
            __1: (Location, Spanned<Node>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Token<'input>, Location),
            __4: (Location, Spanned<Keyword>, Location),
            __5: (Location, Token<'input>, Location),
            __6: (Location, Token<'input>, Location),
            __7: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
            __8: (Location, Spanned<Node>, Location),
            __9: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.0;
            let __end0 = __3.2;
            let __start1 = __5.0;
            let __end1 = __9.2;
            let __temp0 = __action392(errors, db, __2, __3);
            let __temp0 = (__start0, __temp0, __end0);
            let __temp1 = __action389(errors, db, __5, __6, __7, __8, __9);
            let __temp1 = (__start1, __temp1, __end1);
            __action284(errors, db, __0, __1, __temp0, __4, __temp1)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action454<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Keyword>, Location),
            __1: (Location, Spanned<Node>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Token<'input>, Location),
            __4: (Location, Spanned<Keyword>, Location),
            __5: (Location, Token<'input>, Location),
            __6: (Location, Token<'input>, Location),
            __7: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
            __8: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.0;
            let __end0 = __3.2;
            let __start1 = __5.0;
            let __end1 = __8.2;
            let __temp0 = __action392(errors, db, __2, __3);
            let __temp0 = (__start0, __temp0, __end0);
            let __temp1 = __action390(errors, db, __5, __6, __7, __8);
            let __temp1 = (__start1, __temp1, __end1);
            __action284(errors, db, __0, __1, __temp0, __4, __temp1)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action455<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Keyword>, Location),
            __1: (Location, Spanned<Node>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Token<'input>, Location),
            __4: (Location, Spanned<Keyword>, Location),
            __5: (Location, Token<'input>, Location),
            __6: (Location, Spanned<Node>, Location),
            __7: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.0;
            let __end0 = __3.2;
            let __start1 = __5.0;
            let __end1 = __7.2;
            let __temp0 = __action392(errors, db, __2, __3);
            let __temp0 = (__start0, __temp0, __end0);
            let __temp1 = __action391(errors, db, __5, __6, __7);
            let __temp1 = (__start1, __temp1, __end1);
            __action284(errors, db, __0, __1, __temp0, __4, __temp1)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action456<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Keyword>, Location),
            __1: (Location, Spanned<Node>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Token<'input>, Location),
            __4: (Location, Spanned<Keyword>, Location),
            __5: (Location, Token<'input>, Location),
            __6: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.0;
            let __end0 = __3.2;
            let __start1 = __5.0;
            let __end1 = __6.2;
            let __temp0 = __action392(errors, db, __2, __3);
            let __temp0 = (__start0, __temp0, __end0);
            let __temp1 = __action392(errors, db, __5, __6);
            let __temp1 = (__start1, __temp1, __end1);
            __action284(errors, db, __0, __1, __temp0, __4, __temp1)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action457<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Keyword>, Location),
            __1: (Location, Spanned<Node>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Token<'input>, Location),
            __4: (Location, Spanned<Keyword>, Location),
            __5: (Location, Token<'input>, Location),
            __6: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
            __7: (Location, Spanned<Node>, Location),
            __8: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.0;
            let __end0 = __3.2;
            let __start1 = __5.0;
            let __end1 = __8.2;
            let __temp0 = __action392(errors, db, __2, __3);
            let __temp0 = (__start0, __temp0, __end0);
            let __temp1 = __action393(errors, db, __5, __6, __7, __8);
            let __temp1 = (__start1, __temp1, __end1);
            __action284(errors, db, __0, __1, __temp0, __4, __temp1)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action458<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Keyword>, Location),
            __1: (Location, Spanned<Node>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Token<'input>, Location),
            __4: (Location, Spanned<Keyword>, Location),
            __5: (Location, Token<'input>, Location),
            __6: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
            __7: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.0;
            let __end0 = __3.2;
            let __start1 = __5.0;
            let __end1 = __7.2;
            let __temp0 = __action392(errors, db, __2, __3);
            let __temp0 = (__start0, __temp0, __end0);
            let __temp1 = __action394(errors, db, __5, __6, __7);
            let __temp1 = (__start1, __temp1, __end1);
            __action284(errors, db, __0, __1, __temp0, __4, __temp1)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action459<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Keyword>, Location),
            __1: (Location, Spanned<Node>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
            __4: (Location, Spanned<Node>, Location),
            __5: (Location, Token<'input>, Location),
            __6: (Location, Spanned<Keyword>, Location),
            __7: (Location, Token<'input>, Location),
            __8: (Location, Token<'input>, Location),
            __9: (Location, Spanned<Node>, Location),
            __10: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.0;
            let __end0 = __5.2;
            let __start1 = __7.0;
            let __end1 = __10.2;
            let __temp0 = __action393(errors, db, __2, __3, __4, __5);
            let __temp0 = (__start0, __temp0, __end0);
            let __temp1 = __action387(errors, db, __7, __8, __9, __10);
            let __temp1 = (__start1, __temp1, __end1);
            __action284(errors, db, __0, __1, __temp0, __6, __temp1)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action460<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Keyword>, Location),
            __1: (Location, Spanned<Node>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
            __4: (Location, Spanned<Node>, Location),
            __5: (Location, Token<'input>, Location),
            __6: (Location, Spanned<Keyword>, Location),
            __7: (Location, Token<'input>, Location),
            __8: (Location, Token<'input>, Location),
            __9: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.0;
            let __end0 = __5.2;
            let __start1 = __7.0;
            let __end1 = __9.2;
            let __temp0 = __action393(errors, db, __2, __3, __4, __5);
            let __temp0 = (__start0, __temp0, __end0);
            let __temp1 = __action388(errors, db, __7, __8, __9);
            let __temp1 = (__start1, __temp1, __end1);
            __action284(errors, db, __0, __1, __temp0, __6, __temp1)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action461<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Keyword>, Location),
            __1: (Location, Spanned<Node>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
            __4: (Location, Spanned<Node>, Location),
            __5: (Location, Token<'input>, Location),
            __6: (Location, Spanned<Keyword>, Location),
            __7: (Location, Token<'input>, Location),
            __8: (Location, Token<'input>, Location),
            __9: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
            __10: (Location, Spanned<Node>, Location),
            __11: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.0;
            let __end0 = __5.2;
            let __start1 = __7.0;
            let __end1 = __11.2;
            let __temp0 = __action393(errors, db, __2, __3, __4, __5);
            let __temp0 = (__start0, __temp0, __end0);
            let __temp1 = __action389(errors, db, __7, __8, __9, __10, __11);
            let __temp1 = (__start1, __temp1, __end1);
            __action284(errors, db, __0, __1, __temp0, __6, __temp1)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action462<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Keyword>, Location),
            __1: (Location, Spanned<Node>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
            __4: (Location, Spanned<Node>, Location),
            __5: (Location, Token<'input>, Location),
            __6: (Location, Spanned<Keyword>, Location),
            __7: (Location, Token<'input>, Location),
            __8: (Location, Token<'input>, Location),
            __9: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
            __10: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.0;
            let __end0 = __5.2;
            let __start1 = __7.0;
            let __end1 = __10.2;
            let __temp0 = __action393(errors, db, __2, __3, __4, __5);
            let __temp0 = (__start0, __temp0, __end0);
            let __temp1 = __action390(errors, db, __7, __8, __9, __10);
            let __temp1 = (__start1, __temp1, __end1);
            __action284(errors, db, __0, __1, __temp0, __6, __temp1)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action463<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Keyword>, Location),
            __1: (Location, Spanned<Node>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
            __4: (Location, Spanned<Node>, Location),
            __5: (Location, Token<'input>, Location),
            __6: (Location, Spanned<Keyword>, Location),
            __7: (Location, Token<'input>, Location),
            __8: (Location, Spanned<Node>, Location),
            __9: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.0;
            let __end0 = __5.2;
            let __start1 = __7.0;
            let __end1 = __9.2;
            let __temp0 = __action393(errors, db, __2, __3, __4, __5);
            let __temp0 = (__start0, __temp0, __end0);
            let __temp1 = __action391(errors, db, __7, __8, __9);
            let __temp1 = (__start1, __temp1, __end1);
            __action284(errors, db, __0, __1, __temp0, __6, __temp1)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action464<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Keyword>, Location),
            __1: (Location, Spanned<Node>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
            __4: (Location, Spanned<Node>, Location),
            __5: (Location, Token<'input>, Location),
            __6: (Location, Spanned<Keyword>, Location),
            __7: (Location, Token<'input>, Location),
            __8: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.0;
            let __end0 = __5.2;
            let __start1 = __7.0;
            let __end1 = __8.2;
            let __temp0 = __action393(errors, db, __2, __3, __4, __5);
            let __temp0 = (__start0, __temp0, __end0);
            let __temp1 = __action392(errors, db, __7, __8);
            let __temp1 = (__start1, __temp1, __end1);
            __action284(errors, db, __0, __1, __temp0, __6, __temp1)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action465<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Keyword>, Location),
            __1: (Location, Spanned<Node>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
            __4: (Location, Spanned<Node>, Location),
            __5: (Location, Token<'input>, Location),
            __6: (Location, Spanned<Keyword>, Location),
            __7: (Location, Token<'input>, Location),
            __8: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
            __9: (Location, Spanned<Node>, Location),
            __10: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.0;
            let __end0 = __5.2;
            let __start1 = __7.0;
            let __end1 = __10.2;
            let __temp0 = __action393(errors, db, __2, __3, __4, __5);
            let __temp0 = (__start0, __temp0, __end0);
            let __temp1 = __action393(errors, db, __7, __8, __9, __10);
            let __temp1 = (__start1, __temp1, __end1);
            __action284(errors, db, __0, __1, __temp0, __6, __temp1)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action466<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Keyword>, Location),
            __1: (Location, Spanned<Node>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
            __4: (Location, Spanned<Node>, Location),
            __5: (Location, Token<'input>, Location),
            __6: (Location, Spanned<Keyword>, Location),
            __7: (Location, Token<'input>, Location),
            __8: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
            __9: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.0;
            let __end0 = __5.2;
            let __start1 = __7.0;
            let __end1 = __9.2;
            let __temp0 = __action393(errors, db, __2, __3, __4, __5);
            let __temp0 = (__start0, __temp0, __end0);
            let __temp1 = __action394(errors, db, __7, __8, __9);
            let __temp1 = (__start1, __temp1, __end1);
            __action284(errors, db, __0, __1, __temp0, __6, __temp1)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action467<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Keyword>, Location),
            __1: (Location, Spanned<Node>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
            __4: (Location, Token<'input>, Location),
            __5: (Location, Spanned<Keyword>, Location),
            __6: (Location, Token<'input>, Location),
            __7: (Location, Token<'input>, Location),
            __8: (Location, Spanned<Node>, Location),
            __9: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.0;
            let __end0 = __4.2;
            let __start1 = __6.0;
            let __end1 = __9.2;
            let __temp0 = __action394(errors, db, __2, __3, __4);
            let __temp0 = (__start0, __temp0, __end0);
            let __temp1 = __action387(errors, db, __6, __7, __8, __9);
            let __temp1 = (__start1, __temp1, __end1);
            __action284(errors, db, __0, __1, __temp0, __5, __temp1)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action468<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Keyword>, Location),
            __1: (Location, Spanned<Node>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
            __4: (Location, Token<'input>, Location),
            __5: (Location, Spanned<Keyword>, Location),
            __6: (Location, Token<'input>, Location),
            __7: (Location, Token<'input>, Location),
            __8: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.0;
            let __end0 = __4.2;
            let __start1 = __6.0;
            let __end1 = __8.2;
            let __temp0 = __action394(errors, db, __2, __3, __4);
            let __temp0 = (__start0, __temp0, __end0);
            let __temp1 = __action388(errors, db, __6, __7, __8);
            let __temp1 = (__start1, __temp1, __end1);
            __action284(errors, db, __0, __1, __temp0, __5, __temp1)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action469<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Keyword>, Location),
            __1: (Location, Spanned<Node>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
            __4: (Location, Token<'input>, Location),
            __5: (Location, Spanned<Keyword>, Location),
            __6: (Location, Token<'input>, Location),
            __7: (Location, Token<'input>, Location),
            __8: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
            __9: (Location, Spanned<Node>, Location),
            __10: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.0;
            let __end0 = __4.2;
            let __start1 = __6.0;
            let __end1 = __10.2;
            let __temp0 = __action394(errors, db, __2, __3, __4);
            let __temp0 = (__start0, __temp0, __end0);
            let __temp1 = __action389(errors, db, __6, __7, __8, __9, __10);
            let __temp1 = (__start1, __temp1, __end1);
            __action284(errors, db, __0, __1, __temp0, __5, __temp1)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action470<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Keyword>, Location),
            __1: (Location, Spanned<Node>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
            __4: (Location, Token<'input>, Location),
            __5: (Location, Spanned<Keyword>, Location),
            __6: (Location, Token<'input>, Location),
            __7: (Location, Token<'input>, Location),
            __8: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
            __9: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.0;
            let __end0 = __4.2;
            let __start1 = __6.0;
            let __end1 = __9.2;
            let __temp0 = __action394(errors, db, __2, __3, __4);
            let __temp0 = (__start0, __temp0, __end0);
            let __temp1 = __action390(errors, db, __6, __7, __8, __9);
            let __temp1 = (__start1, __temp1, __end1);
            __action284(errors, db, __0, __1, __temp0, __5, __temp1)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action471<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Keyword>, Location),
            __1: (Location, Spanned<Node>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
            __4: (Location, Token<'input>, Location),
            __5: (Location, Spanned<Keyword>, Location),
            __6: (Location, Token<'input>, Location),
            __7: (Location, Spanned<Node>, Location),
            __8: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.0;
            let __end0 = __4.2;
            let __start1 = __6.0;
            let __end1 = __8.2;
            let __temp0 = __action394(errors, db, __2, __3, __4);
            let __temp0 = (__start0, __temp0, __end0);
            let __temp1 = __action391(errors, db, __6, __7, __8);
            let __temp1 = (__start1, __temp1, __end1);
            __action284(errors, db, __0, __1, __temp0, __5, __temp1)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action472<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Keyword>, Location),
            __1: (Location, Spanned<Node>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
            __4: (Location, Token<'input>, Location),
            __5: (Location, Spanned<Keyword>, Location),
            __6: (Location, Token<'input>, Location),
            __7: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.0;
            let __end0 = __4.2;
            let __start1 = __6.0;
            let __end1 = __7.2;
            let __temp0 = __action394(errors, db, __2, __3, __4);
            let __temp0 = (__start0, __temp0, __end0);
            let __temp1 = __action392(errors, db, __6, __7);
            let __temp1 = (__start1, __temp1, __end1);
            __action284(errors, db, __0, __1, __temp0, __5, __temp1)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action473<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Keyword>, Location),
            __1: (Location, Spanned<Node>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
            __4: (Location, Token<'input>, Location),
            __5: (Location, Spanned<Keyword>, Location),
            __6: (Location, Token<'input>, Location),
            __7: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
            __8: (Location, Spanned<Node>, Location),
            __9: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.0;
            let __end0 = __4.2;
            let __start1 = __6.0;
            let __end1 = __9.2;
            let __temp0 = __action394(errors, db, __2, __3, __4);
            let __temp0 = (__start0, __temp0, __end0);
            let __temp1 = __action393(errors, db, __6, __7, __8, __9);
            let __temp1 = (__start1, __temp1, __end1);
            __action284(errors, db, __0, __1, __temp0, __5, __temp1)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action474<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Keyword>, Location),
            __1: (Location, Spanned<Node>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
            __4: (Location, Token<'input>, Location),
            __5: (Location, Spanned<Keyword>, Location),
            __6: (Location, Token<'input>, Location),
            __7: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
            __8: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.0;
            let __end0 = __4.2;
            let __start1 = __6.0;
            let __end1 = __8.2;
            let __temp0 = __action394(errors, db, __2, __3, __4);
            let __temp0 = (__start0, __temp0, __end0);
            let __temp1 = __action394(errors, db, __6, __7, __8);
            let __temp1 = (__start1, __temp1, __end1);
            __action284(errors, db, __0, __1, __temp0, __5, __temp1)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action475<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Keyword>, Location),
            __1: (Location, Spanned<Ident>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Token<'input>, Location),
            __4: (Location, Spanned<Node>, Location),
            __5: (Location, Token<'input>, Location),
        ) -> (Spanned<Ident>, Block<Spanned<Node>>) {
            let __start0 = __2.0;
            let __end0 = __5.2;
            let __temp0 = __action387(errors, db, __2, __3, __4, __5);
            let __temp0 = (__start0, __temp0, __end0);
            __action314(errors, db, __0, __1, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action476<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Keyword>, Location),
            __1: (Location, Spanned<Ident>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Token<'input>, Location),
            __4: (Location, Token<'input>, Location),
        ) -> (Spanned<Ident>, Block<Spanned<Node>>) {
            let __start0 = __2.0;
            let __end0 = __4.2;
            let __temp0 = __action388(errors, db, __2, __3, __4);
            let __temp0 = (__start0, __temp0, __end0);
            __action314(errors, db, __0, __1, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action477<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Keyword>, Location),
            __1: (Location, Spanned<Ident>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Token<'input>, Location),
            __4: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
            __5: (Location, Spanned<Node>, Location),
            __6: (Location, Token<'input>, Location),
        ) -> (Spanned<Ident>, Block<Spanned<Node>>) {
            let __start0 = __2.0;
            let __end0 = __6.2;
            let __temp0 = __action389(errors, db, __2, __3, __4, __5, __6);
            let __temp0 = (__start0, __temp0, __end0);
            __action314(errors, db, __0, __1, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action478<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Keyword>, Location),
            __1: (Location, Spanned<Ident>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Token<'input>, Location),
            __4: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
            __5: (Location, Token<'input>, Location),
        ) -> (Spanned<Ident>, Block<Spanned<Node>>) {
            let __start0 = __2.0;
            let __end0 = __5.2;
            let __temp0 = __action390(errors, db, __2, __3, __4, __5);
            let __temp0 = (__start0, __temp0, __end0);
            __action314(errors, db, __0, __1, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action479<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Keyword>, Location),
            __1: (Location, Spanned<Ident>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Spanned<Node>, Location),
            __4: (Location, Token<'input>, Location),
        ) -> (Spanned<Ident>, Block<Spanned<Node>>) {
            let __start0 = __2.0;
            let __end0 = __4.2;
            let __temp0 = __action391(errors, db, __2, __3, __4);
            let __temp0 = (__start0, __temp0, __end0);
            __action314(errors, db, __0, __1, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action480<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Keyword>, Location),
            __1: (Location, Spanned<Ident>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Token<'input>, Location),
        ) -> (Spanned<Ident>, Block<Spanned<Node>>) {
            let __start0 = __2.0;
            let __end0 = __3.2;
            let __temp0 = __action392(errors, db, __2, __3);
            let __temp0 = (__start0, __temp0, __end0);
            __action314(errors, db, __0, __1, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action481<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Keyword>, Location),
            __1: (Location, Spanned<Ident>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
            __4: (Location, Spanned<Node>, Location),
            __5: (Location, Token<'input>, Location),
        ) -> (Spanned<Ident>, Block<Spanned<Node>>) {
            let __start0 = __2.0;
            let __end0 = __5.2;
            let __temp0 = __action393(errors, db, __2, __3, __4, __5);
            let __temp0 = (__start0, __temp0, __end0);
            __action314(errors, db, __0, __1, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action482<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Keyword>, Location),
            __1: (Location, Spanned<Ident>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
            __4: (Location, Token<'input>, Location),
        ) -> (Spanned<Ident>, Block<Spanned<Node>>) {
            let __start0 = __2.0;
            let __end0 = __4.2;
            let __temp0 = __action394(errors, db, __2, __3, __4);
            let __temp0 = (__start0, __temp0, __end0);
            __action314(errors, db, __0, __1, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action483<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Node>, Location),
        ) -> Vec<Spanned<Node>> {
            let __start0 = __0.0;
            let __end0 = __0.2;
            let __temp0 = __action103(errors, db, __0);
            let __temp0 = (__start0, __temp0, __end0);
            __action192(errors, db, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action484<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __lookbehind: &Location,
            __lookahead: &Location,
        ) -> Vec<Spanned<Node>> {
            let __start0 = *__lookbehind;
            let __end0 = *__lookahead;
            let __temp0 = __action104(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action192(errors, db, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action485<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
            __1: (Location, Spanned<Node>, Location),
        ) -> Vec<Spanned<Node>> {
            let __start0 = __1.0;
            let __end0 = __1.2;
            let __temp0 = __action103(errors, db, __1);
            let __temp0 = (__start0, __temp0, __end0);
            __action193(errors, db, __0, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action486<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
        ) -> Vec<Spanned<Node>> {
            let __start0 = __0.2;
            let __end0 = __0.2;
            let __temp0 = __action104(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action193(errors, db, __0, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action487<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Ident>, Location),
            __1: (Location, Token<'input>, Location),
            __2: (Location, Spanned<Node>, Location),
            __3: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.0;
            let __end0 = __2.2;
            let __temp0 = __action483(errors, db, __2);
            let __temp0 = (__start0, __temp0, __end0);
            __action276(errors, db, __0, __1, __temp0, __3)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action488<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Ident>, Location),
            __1: (Location, Token<'input>, Location),
            __2: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __1.2;
            let __end0 = __2.0;
            let __temp0 = __action484(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action276(errors, db, __0, __1, __temp0, __2)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action489<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Ident>, Location),
            __1: (Location, Token<'input>, Location),
            __2: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
            __3: (Location, Spanned<Node>, Location),
            __4: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.0;
            let __end0 = __3.2;
            let __temp0 = __action485(errors, db, __2, __3);
            let __temp0 = (__start0, __temp0, __end0);
            __action276(errors, db, __0, __1, __temp0, __4)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action490<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Ident>, Location),
            __1: (Location, Token<'input>, Location),
            __2: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
            __3: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.0;
            let __end0 = __2.2;
            let __temp0 = __action486(errors, db, __2);
            let __temp0 = (__start0, __temp0, __end0);
            __action276(errors, db, __0, __1, __temp0, __3)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action491<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<FnArg>, Location),
        ) -> Vec<Spanned<FnArg>> {
            let __start0 = __0.0;
            let __end0 = __0.2;
            let __temp0 = __action108(errors, db, __0);
            let __temp0 = (__start0, __temp0, __end0);
            __action200(errors, db, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action492<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __lookbehind: &Location,
            __lookahead: &Location,
        ) -> Vec<Spanned<FnArg>> {
            let __start0 = *__lookbehind;
            let __end0 = *__lookahead;
            let __temp0 = __action109(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action200(errors, db, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action493<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, alloc::vec::Vec<Spanned<FnArg>>, Location),
            __1: (Location, Spanned<FnArg>, Location),
        ) -> Vec<Spanned<FnArg>> {
            let __start0 = __1.0;
            let __end0 = __1.2;
            let __temp0 = __action108(errors, db, __1);
            let __temp0 = (__start0, __temp0, __end0);
            __action201(errors, db, __0, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action494<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, alloc::vec::Vec<Spanned<FnArg>>, Location),
        ) -> Vec<Spanned<FnArg>> {
            let __start0 = __0.2;
            let __end0 = __0.2;
            let __temp0 = __action109(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action201(errors, db, __0, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action495<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Ident>, Location),
            __1: (Location, Token<'input>, Location),
            __2: (Location, Spanned<FnArg>, Location),
            __3: (Location, Token<'input>, Location),
            __4: (Location, Token<'input>, Location),
            __5: (Location, Vec<Spanned<Ident>>, Location),
            __6: (Location, Token<'input>, Location),
            __7: (Location, Token<'input>, Location),
            __8: (Location, Spanned<Ident>, Location),
        ) -> Spanned<Prototype> {
            let __start0 = __2.0;
            let __end0 = __2.2;
            let __temp0 = __action491(errors, db, __2);
            let __temp0 = (__start0, __temp0, __end0);
            __action295(errors, db, __0, __1, __temp0, __3, __4, __5, __6, __7, __8)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action496<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Ident>, Location),
            __1: (Location, Token<'input>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Token<'input>, Location),
            __4: (Location, Vec<Spanned<Ident>>, Location),
            __5: (Location, Token<'input>, Location),
            __6: (Location, Token<'input>, Location),
            __7: (Location, Spanned<Ident>, Location),
        ) -> Spanned<Prototype> {
            let __start0 = __1.2;
            let __end0 = __2.0;
            let __temp0 = __action492(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action295(errors, db, __0, __1, __temp0, __2, __3, __4, __5, __6, __7)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action497<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Ident>, Location),
            __1: (Location, Token<'input>, Location),
            __2: (Location, alloc::vec::Vec<Spanned<FnArg>>, Location),
            __3: (Location, Spanned<FnArg>, Location),
            __4: (Location, Token<'input>, Location),
            __5: (Location, Token<'input>, Location),
            __6: (Location, Vec<Spanned<Ident>>, Location),
            __7: (Location, Token<'input>, Location),
            __8: (Location, Token<'input>, Location),
            __9: (Location, Spanned<Ident>, Location),
        ) -> Spanned<Prototype> {
            let __start0 = __2.0;
            let __end0 = __3.2;
            let __temp0 = __action493(errors, db, __2, __3);
            let __temp0 = (__start0, __temp0, __end0);
            __action295(errors, db, __0, __1, __temp0, __4, __5, __6, __7, __8, __9)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action498<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Ident>, Location),
            __1: (Location, Token<'input>, Location),
            __2: (Location, alloc::vec::Vec<Spanned<FnArg>>, Location),
            __3: (Location, Token<'input>, Location),
            __4: (Location, Token<'input>, Location),
            __5: (Location, Vec<Spanned<Ident>>, Location),
            __6: (Location, Token<'input>, Location),
            __7: (Location, Token<'input>, Location),
            __8: (Location, Spanned<Ident>, Location),
        ) -> Spanned<Prototype> {
            let __start0 = __2.0;
            let __end0 = __2.2;
            let __temp0 = __action494(errors, db, __2);
            let __temp0 = (__start0, __temp0, __end0);
            __action295(errors, db, __0, __1, __temp0, __3, __4, __5, __6, __7, __8)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action499<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Ident>, Location),
            __1: (Location, Token<'input>, Location),
            __2: (Location, Spanned<FnArg>, Location),
            __3: (Location, Token<'input>, Location),
            __4: (Location, Token<'input>, Location),
            __5: (Location, Vec<Spanned<Ident>>, Location),
            __6: (Location, Token<'input>, Location),
        ) -> Spanned<Prototype> {
            let __start0 = __2.0;
            let __end0 = __2.2;
            let __temp0 = __action491(errors, db, __2);
            let __temp0 = (__start0, __temp0, __end0);
            __action296(errors, db, __0, __1, __temp0, __3, __4, __5, __6)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action500<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Ident>, Location),
            __1: (Location, Token<'input>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Token<'input>, Location),
            __4: (Location, Vec<Spanned<Ident>>, Location),
            __5: (Location, Token<'input>, Location),
        ) -> Spanned<Prototype> {
            let __start0 = __1.2;
            let __end0 = __2.0;
            let __temp0 = __action492(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action296(errors, db, __0, __1, __temp0, __2, __3, __4, __5)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action501<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Ident>, Location),
            __1: (Location, Token<'input>, Location),
            __2: (Location, alloc::vec::Vec<Spanned<FnArg>>, Location),
            __3: (Location, Spanned<FnArg>, Location),
            __4: (Location, Token<'input>, Location),
            __5: (Location, Token<'input>, Location),
            __6: (Location, Vec<Spanned<Ident>>, Location),
            __7: (Location, Token<'input>, Location),
        ) -> Spanned<Prototype> {
            let __start0 = __2.0;
            let __end0 = __3.2;
            let __temp0 = __action493(errors, db, __2, __3);
            let __temp0 = (__start0, __temp0, __end0);
            __action296(errors, db, __0, __1, __temp0, __4, __5, __6, __7)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action502<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Ident>, Location),
            __1: (Location, Token<'input>, Location),
            __2: (Location, alloc::vec::Vec<Spanned<FnArg>>, Location),
            __3: (Location, Token<'input>, Location),
            __4: (Location, Token<'input>, Location),
            __5: (Location, Vec<Spanned<Ident>>, Location),
            __6: (Location, Token<'input>, Location),
        ) -> Spanned<Prototype> {
            let __start0 = __2.0;
            let __end0 = __2.2;
            let __temp0 = __action494(errors, db, __2);
            let __temp0 = (__start0, __temp0, __end0);
            __action296(errors, db, __0, __1, __temp0, __3, __4, __5, __6)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action503<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Ident>, Location),
        ) -> Vec<Spanned<Ident>> {
            let __start0 = __0.0;
            let __end0 = __0.2;
            let __temp0 = __action114(errors, db, __0);
            let __temp0 = (__start0, __temp0, __end0);
            __action212(errors, db, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action504<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __lookbehind: &Location,
            __lookahead: &Location,
        ) -> Vec<Spanned<Ident>> {
            let __start0 = *__lookbehind;
            let __end0 = *__lookahead;
            let __temp0 = __action115(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action212(errors, db, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action505<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, alloc::vec::Vec<Spanned<Ident>>, Location),
            __1: (Location, Spanned<Ident>, Location),
        ) -> Vec<Spanned<Ident>> {
            let __start0 = __1.0;
            let __end0 = __1.2;
            let __temp0 = __action114(errors, db, __1);
            let __temp0 = (__start0, __temp0, __end0);
            __action213(errors, db, __0, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action506<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, alloc::vec::Vec<Spanned<Ident>>, Location),
        ) -> Vec<Spanned<Ident>> {
            let __start0 = __0.2;
            let __end0 = __0.2;
            let __temp0 = __action115(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action213(errors, db, __0, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action507<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Ident>, Location),
        ) -> Vec<Spanned<Ident>> {
            let __start0 = __0.0;
            let __end0 = __0.2;
            let __temp0 = __action114(errors, db, __0);
            let __temp0 = (__start0, __temp0, __end0);
            __action208(errors, db, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action508<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __lookbehind: &Location,
            __lookahead: &Location,
        ) -> Vec<Spanned<Ident>> {
            let __start0 = *__lookbehind;
            let __end0 = *__lookahead;
            let __temp0 = __action115(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action208(errors, db, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action509<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, alloc::vec::Vec<Spanned<Ident>>, Location),
            __1: (Location, Spanned<Ident>, Location),
        ) -> Vec<Spanned<Ident>> {
            let __start0 = __1.0;
            let __end0 = __1.2;
            let __temp0 = __action114(errors, db, __1);
            let __temp0 = (__start0, __temp0, __end0);
            __action209(errors, db, __0, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action510<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, alloc::vec::Vec<Spanned<Ident>>, Location),
        ) -> Vec<Spanned<Ident>> {
            let __start0 = __0.2;
            let __end0 = __0.2;
            let __temp0 = __action115(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action209(errors, db, __0, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action511<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, &'input str, Location),
            __1: (Location, Token<'input>, Location),
            __2: (Location, Spanned<Ident>, Location),
            __3: (Location, Token<'input>, Location),
        ) -> Spanned<Ident> {
            let __start0 = __2.0;
            let __end0 = __2.2;
            let __temp0 = __action503(errors, db, __2);
            let __temp0 = (__start0, __temp0, __end0);
            __action281(errors, db, __0, __1, __temp0, __3)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action512<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, &'input str, Location),
            __1: (Location, Token<'input>, Location),
            __2: (Location, Token<'input>, Location),
        ) -> Spanned<Ident> {
            let __start0 = __1.2;
            let __end0 = __2.0;
            let __temp0 = __action504(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action281(errors, db, __0, __1, __temp0, __2)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action513<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, &'input str, Location),
            __1: (Location, Token<'input>, Location),
            __2: (Location, alloc::vec::Vec<Spanned<Ident>>, Location),
            __3: (Location, Spanned<Ident>, Location),
            __4: (Location, Token<'input>, Location),
        ) -> Spanned<Ident> {
            let __start0 = __2.0;
            let __end0 = __3.2;
            let __temp0 = __action505(errors, db, __2, __3);
            let __temp0 = (__start0, __temp0, __end0);
            __action281(errors, db, __0, __1, __temp0, __4)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action514<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, &'input str, Location),
            __1: (Location, Token<'input>, Location),
            __2: (Location, alloc::vec::Vec<Spanned<Ident>>, Location),
            __3: (Location, Token<'input>, Location),
        ) -> Spanned<Ident> {
            let __start0 = __2.0;
            let __end0 = __2.2;
            let __temp0 = __action506(errors, db, __2);
            let __temp0 = (__start0, __temp0, __end0);
            __action281(errors, db, __0, __1, __temp0, __3)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action515<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Ident>, Location),
            __1: (Location, Token<'input>, Location),
            __2: (Location, Spanned<FnArg>, Location),
            __3: (Location, Token<'input>, Location),
            __4: (Location, Token<'input>, Location),
            __5: (Location, Spanned<Ident>, Location),
            __6: (Location, Token<'input>, Location),
            __7: (Location, Token<'input>, Location),
            __8: (Location, Spanned<Ident>, Location),
        ) -> Spanned<Prototype> {
            let __start0 = __5.0;
            let __end0 = __5.2;
            let __temp0 = __action503(errors, db, __5);
            let __temp0 = (__start0, __temp0, __end0);
            __action495(errors, db, __0, __1, __2, __3, __4, __temp0, __6, __7, __8)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action516<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Ident>, Location),
            __1: (Location, Token<'input>, Location),
            __2: (Location, Spanned<FnArg>, Location),
            __3: (Location, Token<'input>, Location),
            __4: (Location, Token<'input>, Location),
            __5: (Location, Token<'input>, Location),
            __6: (Location, Token<'input>, Location),
            __7: (Location, Spanned<Ident>, Location),
        ) -> Spanned<Prototype> {
            let __start0 = __4.2;
            let __end0 = __5.0;
            let __temp0 = __action504(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action495(errors, db, __0, __1, __2, __3, __4, __temp0, __5, __6, __7)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action517<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Ident>, Location),
            __1: (Location, Token<'input>, Location),
            __2: (Location, Spanned<FnArg>, Location),
            __3: (Location, Token<'input>, Location),
            __4: (Location, Token<'input>, Location),
            __5: (Location, alloc::vec::Vec<Spanned<Ident>>, Location),
            __6: (Location, Spanned<Ident>, Location),
            __7: (Location, Token<'input>, Location),
            __8: (Location, Token<'input>, Location),
            __9: (Location, Spanned<Ident>, Location),
        ) -> Spanned<Prototype> {
            let __start0 = __5.0;
            let __end0 = __6.2;
            let __temp0 = __action505(errors, db, __5, __6);
            let __temp0 = (__start0, __temp0, __end0);
            __action495(errors, db, __0, __1, __2, __3, __4, __temp0, __7, __8, __9)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action518<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Ident>, Location),
            __1: (Location, Token<'input>, Location),
            __2: (Location, Spanned<FnArg>, Location),
            __3: (Location, Token<'input>, Location),
            __4: (Location, Token<'input>, Location),
            __5: (Location, alloc::vec::Vec<Spanned<Ident>>, Location),
            __6: (Location, Token<'input>, Location),
            __7: (Location, Token<'input>, Location),
            __8: (Location, Spanned<Ident>, Location),
        ) -> Spanned<Prototype> {
            let __start0 = __5.0;
            let __end0 = __5.2;
            let __temp0 = __action506(errors, db, __5);
            let __temp0 = (__start0, __temp0, __end0);
            __action495(errors, db, __0, __1, __2, __3, __4, __temp0, __6, __7, __8)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action519<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Ident>, Location),
            __1: (Location, Token<'input>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Token<'input>, Location),
            __4: (Location, Spanned<Ident>, Location),
            __5: (Location, Token<'input>, Location),
            __6: (Location, Token<'input>, Location),
            __7: (Location, Spanned<Ident>, Location),
        ) -> Spanned<Prototype> {
            let __start0 = __4.0;
            let __end0 = __4.2;
            let __temp0 = __action503(errors, db, __4);
            let __temp0 = (__start0, __temp0, __end0);
            __action496(errors, db, __0, __1, __2, __3, __temp0, __5, __6, __7)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action520<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Ident>, Location),
            __1: (Location, Token<'input>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Token<'input>, Location),
            __4: (Location, Token<'input>, Location),
            __5: (Location, Token<'input>, Location),
            __6: (Location, Spanned<Ident>, Location),
        ) -> Spanned<Prototype> {
            let __start0 = __3.2;
            let __end0 = __4.0;
            let __temp0 = __action504(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action496(errors, db, __0, __1, __2, __3, __temp0, __4, __5, __6)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action521<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Ident>, Location),
            __1: (Location, Token<'input>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Token<'input>, Location),
            __4: (Location, alloc::vec::Vec<Spanned<Ident>>, Location),
            __5: (Location, Spanned<Ident>, Location),
            __6: (Location, Token<'input>, Location),
            __7: (Location, Token<'input>, Location),
            __8: (Location, Spanned<Ident>, Location),
        ) -> Spanned<Prototype> {
            let __start0 = __4.0;
            let __end0 = __5.2;
            let __temp0 = __action505(errors, db, __4, __5);
            let __temp0 = (__start0, __temp0, __end0);
            __action496(errors, db, __0, __1, __2, __3, __temp0, __6, __7, __8)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action522<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Ident>, Location),
            __1: (Location, Token<'input>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Token<'input>, Location),
            __4: (Location, alloc::vec::Vec<Spanned<Ident>>, Location),
            __5: (Location, Token<'input>, Location),
            __6: (Location, Token<'input>, Location),
            __7: (Location, Spanned<Ident>, Location),
        ) -> Spanned<Prototype> {
            let __start0 = __4.0;
            let __end0 = __4.2;
            let __temp0 = __action506(errors, db, __4);
            let __temp0 = (__start0, __temp0, __end0);
            __action496(errors, db, __0, __1, __2, __3, __temp0, __5, __6, __7)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action523<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Ident>, Location),
            __1: (Location, Token<'input>, Location),
            __2: (Location, alloc::vec::Vec<Spanned<FnArg>>, Location),
            __3: (Location, Spanned<FnArg>, Location),
            __4: (Location, Token<'input>, Location),
            __5: (Location, Token<'input>, Location),
            __6: (Location, Spanned<Ident>, Location),
            __7: (Location, Token<'input>, Location),
            __8: (Location, Token<'input>, Location),
            __9: (Location, Spanned<Ident>, Location),
        ) -> Spanned<Prototype> {
            let __start0 = __6.0;
            let __end0 = __6.2;
            let __temp0 = __action503(errors, db, __6);
            let __temp0 = (__start0, __temp0, __end0);
            __action497(errors, db, __0, __1, __2, __3, __4, __5, __temp0, __7, __8, __9)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action524<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Ident>, Location),
            __1: (Location, Token<'input>, Location),
            __2: (Location, alloc::vec::Vec<Spanned<FnArg>>, Location),
            __3: (Location, Spanned<FnArg>, Location),
            __4: (Location, Token<'input>, Location),
            __5: (Location, Token<'input>, Location),
            __6: (Location, Token<'input>, Location),
            __7: (Location, Token<'input>, Location),
            __8: (Location, Spanned<Ident>, Location),
        ) -> Spanned<Prototype> {
            let __start0 = __5.2;
            let __end0 = __6.0;
            let __temp0 = __action504(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action497(errors, db, __0, __1, __2, __3, __4, __5, __temp0, __6, __7, __8)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action525<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Ident>, Location),
            __1: (Location, Token<'input>, Location),
            __2: (Location, alloc::vec::Vec<Spanned<FnArg>>, Location),
            __3: (Location, Spanned<FnArg>, Location),
            __4: (Location, Token<'input>, Location),
            __5: (Location, Token<'input>, Location),
            __6: (Location, alloc::vec::Vec<Spanned<Ident>>, Location),
            __7: (Location, Spanned<Ident>, Location),
            __8: (Location, Token<'input>, Location),
            __9: (Location, Token<'input>, Location),
            __10: (Location, Spanned<Ident>, Location),
        ) -> Spanned<Prototype> {
            let __start0 = __6.0;
            let __end0 = __7.2;
            let __temp0 = __action505(errors, db, __6, __7);
            let __temp0 = (__start0, __temp0, __end0);
            __action497(
                errors,
                db,
                __0,
                __1,
                __2,
                __3,
                __4,
                __5,
                __temp0,
                __8,
                __9,
                __10,
            )
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action526<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Ident>, Location),
            __1: (Location, Token<'input>, Location),
            __2: (Location, alloc::vec::Vec<Spanned<FnArg>>, Location),
            __3: (Location, Spanned<FnArg>, Location),
            __4: (Location, Token<'input>, Location),
            __5: (Location, Token<'input>, Location),
            __6: (Location, alloc::vec::Vec<Spanned<Ident>>, Location),
            __7: (Location, Token<'input>, Location),
            __8: (Location, Token<'input>, Location),
            __9: (Location, Spanned<Ident>, Location),
        ) -> Spanned<Prototype> {
            let __start0 = __6.0;
            let __end0 = __6.2;
            let __temp0 = __action506(errors, db, __6);
            let __temp0 = (__start0, __temp0, __end0);
            __action497(errors, db, __0, __1, __2, __3, __4, __5, __temp0, __7, __8, __9)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action527<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Ident>, Location),
            __1: (Location, Token<'input>, Location),
            __2: (Location, alloc::vec::Vec<Spanned<FnArg>>, Location),
            __3: (Location, Token<'input>, Location),
            __4: (Location, Token<'input>, Location),
            __5: (Location, Spanned<Ident>, Location),
            __6: (Location, Token<'input>, Location),
            __7: (Location, Token<'input>, Location),
            __8: (Location, Spanned<Ident>, Location),
        ) -> Spanned<Prototype> {
            let __start0 = __5.0;
            let __end0 = __5.2;
            let __temp0 = __action503(errors, db, __5);
            let __temp0 = (__start0, __temp0, __end0);
            __action498(errors, db, __0, __1, __2, __3, __4, __temp0, __6, __7, __8)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action528<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Ident>, Location),
            __1: (Location, Token<'input>, Location),
            __2: (Location, alloc::vec::Vec<Spanned<FnArg>>, Location),
            __3: (Location, Token<'input>, Location),
            __4: (Location, Token<'input>, Location),
            __5: (Location, Token<'input>, Location),
            __6: (Location, Token<'input>, Location),
            __7: (Location, Spanned<Ident>, Location),
        ) -> Spanned<Prototype> {
            let __start0 = __4.2;
            let __end0 = __5.0;
            let __temp0 = __action504(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action498(errors, db, __0, __1, __2, __3, __4, __temp0, __5, __6, __7)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action529<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Ident>, Location),
            __1: (Location, Token<'input>, Location),
            __2: (Location, alloc::vec::Vec<Spanned<FnArg>>, Location),
            __3: (Location, Token<'input>, Location),
            __4: (Location, Token<'input>, Location),
            __5: (Location, alloc::vec::Vec<Spanned<Ident>>, Location),
            __6: (Location, Spanned<Ident>, Location),
            __7: (Location, Token<'input>, Location),
            __8: (Location, Token<'input>, Location),
            __9: (Location, Spanned<Ident>, Location),
        ) -> Spanned<Prototype> {
            let __start0 = __5.0;
            let __end0 = __6.2;
            let __temp0 = __action505(errors, db, __5, __6);
            let __temp0 = (__start0, __temp0, __end0);
            __action498(errors, db, __0, __1, __2, __3, __4, __temp0, __7, __8, __9)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action530<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Ident>, Location),
            __1: (Location, Token<'input>, Location),
            __2: (Location, alloc::vec::Vec<Spanned<FnArg>>, Location),
            __3: (Location, Token<'input>, Location),
            __4: (Location, Token<'input>, Location),
            __5: (Location, alloc::vec::Vec<Spanned<Ident>>, Location),
            __6: (Location, Token<'input>, Location),
            __7: (Location, Token<'input>, Location),
            __8: (Location, Spanned<Ident>, Location),
        ) -> Spanned<Prototype> {
            let __start0 = __5.0;
            let __end0 = __5.2;
            let __temp0 = __action506(errors, db, __5);
            let __temp0 = (__start0, __temp0, __end0);
            __action498(errors, db, __0, __1, __2, __3, __4, __temp0, __6, __7, __8)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action531<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Ident>, Location),
            __1: (Location, Token<'input>, Location),
            __2: (Location, Spanned<FnArg>, Location),
            __3: (Location, Token<'input>, Location),
            __4: (Location, Token<'input>, Location),
            __5: (Location, Spanned<Ident>, Location),
            __6: (Location, Token<'input>, Location),
        ) -> Spanned<Prototype> {
            let __start0 = __5.0;
            let __end0 = __5.2;
            let __temp0 = __action503(errors, db, __5);
            let __temp0 = (__start0, __temp0, __end0);
            __action499(errors, db, __0, __1, __2, __3, __4, __temp0, __6)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action532<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Ident>, Location),
            __1: (Location, Token<'input>, Location),
            __2: (Location, Spanned<FnArg>, Location),
            __3: (Location, Token<'input>, Location),
            __4: (Location, Token<'input>, Location),
            __5: (Location, Token<'input>, Location),
        ) -> Spanned<Prototype> {
            let __start0 = __4.2;
            let __end0 = __5.0;
            let __temp0 = __action504(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action499(errors, db, __0, __1, __2, __3, __4, __temp0, __5)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action533<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Ident>, Location),
            __1: (Location, Token<'input>, Location),
            __2: (Location, Spanned<FnArg>, Location),
            __3: (Location, Token<'input>, Location),
            __4: (Location, Token<'input>, Location),
            __5: (Location, alloc::vec::Vec<Spanned<Ident>>, Location),
            __6: (Location, Spanned<Ident>, Location),
            __7: (Location, Token<'input>, Location),
        ) -> Spanned<Prototype> {
            let __start0 = __5.0;
            let __end0 = __6.2;
            let __temp0 = __action505(errors, db, __5, __6);
            let __temp0 = (__start0, __temp0, __end0);
            __action499(errors, db, __0, __1, __2, __3, __4, __temp0, __7)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action534<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Ident>, Location),
            __1: (Location, Token<'input>, Location),
            __2: (Location, Spanned<FnArg>, Location),
            __3: (Location, Token<'input>, Location),
            __4: (Location, Token<'input>, Location),
            __5: (Location, alloc::vec::Vec<Spanned<Ident>>, Location),
            __6: (Location, Token<'input>, Location),
        ) -> Spanned<Prototype> {
            let __start0 = __5.0;
            let __end0 = __5.2;
            let __temp0 = __action506(errors, db, __5);
            let __temp0 = (__start0, __temp0, __end0);
            __action499(errors, db, __0, __1, __2, __3, __4, __temp0, __6)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action535<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Ident>, Location),
            __1: (Location, Token<'input>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Token<'input>, Location),
            __4: (Location, Spanned<Ident>, Location),
            __5: (Location, Token<'input>, Location),
        ) -> Spanned<Prototype> {
            let __start0 = __4.0;
            let __end0 = __4.2;
            let __temp0 = __action503(errors, db, __4);
            let __temp0 = (__start0, __temp0, __end0);
            __action500(errors, db, __0, __1, __2, __3, __temp0, __5)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action536<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Ident>, Location),
            __1: (Location, Token<'input>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Token<'input>, Location),
            __4: (Location, Token<'input>, Location),
        ) -> Spanned<Prototype> {
            let __start0 = __3.2;
            let __end0 = __4.0;
            let __temp0 = __action504(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action500(errors, db, __0, __1, __2, __3, __temp0, __4)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action537<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Ident>, Location),
            __1: (Location, Token<'input>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Token<'input>, Location),
            __4: (Location, alloc::vec::Vec<Spanned<Ident>>, Location),
            __5: (Location, Spanned<Ident>, Location),
            __6: (Location, Token<'input>, Location),
        ) -> Spanned<Prototype> {
            let __start0 = __4.0;
            let __end0 = __5.2;
            let __temp0 = __action505(errors, db, __4, __5);
            let __temp0 = (__start0, __temp0, __end0);
            __action500(errors, db, __0, __1, __2, __3, __temp0, __6)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action538<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Ident>, Location),
            __1: (Location, Token<'input>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Token<'input>, Location),
            __4: (Location, alloc::vec::Vec<Spanned<Ident>>, Location),
            __5: (Location, Token<'input>, Location),
        ) -> Spanned<Prototype> {
            let __start0 = __4.0;
            let __end0 = __4.2;
            let __temp0 = __action506(errors, db, __4);
            let __temp0 = (__start0, __temp0, __end0);
            __action500(errors, db, __0, __1, __2, __3, __temp0, __5)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action539<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Ident>, Location),
            __1: (Location, Token<'input>, Location),
            __2: (Location, alloc::vec::Vec<Spanned<FnArg>>, Location),
            __3: (Location, Spanned<FnArg>, Location),
            __4: (Location, Token<'input>, Location),
            __5: (Location, Token<'input>, Location),
            __6: (Location, Spanned<Ident>, Location),
            __7: (Location, Token<'input>, Location),
        ) -> Spanned<Prototype> {
            let __start0 = __6.0;
            let __end0 = __6.2;
            let __temp0 = __action503(errors, db, __6);
            let __temp0 = (__start0, __temp0, __end0);
            __action501(errors, db, __0, __1, __2, __3, __4, __5, __temp0, __7)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action540<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Ident>, Location),
            __1: (Location, Token<'input>, Location),
            __2: (Location, alloc::vec::Vec<Spanned<FnArg>>, Location),
            __3: (Location, Spanned<FnArg>, Location),
            __4: (Location, Token<'input>, Location),
            __5: (Location, Token<'input>, Location),
            __6: (Location, Token<'input>, Location),
        ) -> Spanned<Prototype> {
            let __start0 = __5.2;
            let __end0 = __6.0;
            let __temp0 = __action504(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action501(errors, db, __0, __1, __2, __3, __4, __5, __temp0, __6)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action541<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Ident>, Location),
            __1: (Location, Token<'input>, Location),
            __2: (Location, alloc::vec::Vec<Spanned<FnArg>>, Location),
            __3: (Location, Spanned<FnArg>, Location),
            __4: (Location, Token<'input>, Location),
            __5: (Location, Token<'input>, Location),
            __6: (Location, alloc::vec::Vec<Spanned<Ident>>, Location),
            __7: (Location, Spanned<Ident>, Location),
            __8: (Location, Token<'input>, Location),
        ) -> Spanned<Prototype> {
            let __start0 = __6.0;
            let __end0 = __7.2;
            let __temp0 = __action505(errors, db, __6, __7);
            let __temp0 = (__start0, __temp0, __end0);
            __action501(errors, db, __0, __1, __2, __3, __4, __5, __temp0, __8)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action542<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Ident>, Location),
            __1: (Location, Token<'input>, Location),
            __2: (Location, alloc::vec::Vec<Spanned<FnArg>>, Location),
            __3: (Location, Spanned<FnArg>, Location),
            __4: (Location, Token<'input>, Location),
            __5: (Location, Token<'input>, Location),
            __6: (Location, alloc::vec::Vec<Spanned<Ident>>, Location),
            __7: (Location, Token<'input>, Location),
        ) -> Spanned<Prototype> {
            let __start0 = __6.0;
            let __end0 = __6.2;
            let __temp0 = __action506(errors, db, __6);
            let __temp0 = (__start0, __temp0, __end0);
            __action501(errors, db, __0, __1, __2, __3, __4, __5, __temp0, __7)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action543<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Ident>, Location),
            __1: (Location, Token<'input>, Location),
            __2: (Location, alloc::vec::Vec<Spanned<FnArg>>, Location),
            __3: (Location, Token<'input>, Location),
            __4: (Location, Token<'input>, Location),
            __5: (Location, Spanned<Ident>, Location),
            __6: (Location, Token<'input>, Location),
        ) -> Spanned<Prototype> {
            let __start0 = __5.0;
            let __end0 = __5.2;
            let __temp0 = __action503(errors, db, __5);
            let __temp0 = (__start0, __temp0, __end0);
            __action502(errors, db, __0, __1, __2, __3, __4, __temp0, __6)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action544<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Ident>, Location),
            __1: (Location, Token<'input>, Location),
            __2: (Location, alloc::vec::Vec<Spanned<FnArg>>, Location),
            __3: (Location, Token<'input>, Location),
            __4: (Location, Token<'input>, Location),
            __5: (Location, Token<'input>, Location),
        ) -> Spanned<Prototype> {
            let __start0 = __4.2;
            let __end0 = __5.0;
            let __temp0 = __action504(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action502(errors, db, __0, __1, __2, __3, __4, __temp0, __5)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action545<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Ident>, Location),
            __1: (Location, Token<'input>, Location),
            __2: (Location, alloc::vec::Vec<Spanned<FnArg>>, Location),
            __3: (Location, Token<'input>, Location),
            __4: (Location, Token<'input>, Location),
            __5: (Location, alloc::vec::Vec<Spanned<Ident>>, Location),
            __6: (Location, Spanned<Ident>, Location),
            __7: (Location, Token<'input>, Location),
        ) -> Spanned<Prototype> {
            let __start0 = __5.0;
            let __end0 = __6.2;
            let __temp0 = __action505(errors, db, __5, __6);
            let __temp0 = (__start0, __temp0, __end0);
            __action502(errors, db, __0, __1, __2, __3, __4, __temp0, __7)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action546<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Ident>, Location),
            __1: (Location, Token<'input>, Location),
            __2: (Location, alloc::vec::Vec<Spanned<FnArg>>, Location),
            __3: (Location, Token<'input>, Location),
            __4: (Location, Token<'input>, Location),
            __5: (Location, alloc::vec::Vec<Spanned<Ident>>, Location),
            __6: (Location, Token<'input>, Location),
        ) -> Spanned<Prototype> {
            let __start0 = __5.0;
            let __end0 = __5.2;
            let __temp0 = __action506(errors, db, __5);
            let __temp0 = (__start0, __temp0, __end0);
            __action502(errors, db, __0, __1, __2, __3, __4, __temp0, __6)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action547<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Token<'input>, Location),
            __1: (Location, Spanned<Ident>, Location),
            __2: (Location, Token<'input>, Location),
        ) -> Spanned<Vec<Spanned<Ident>>> {
            let __start0 = __1.0;
            let __end0 = __1.2;
            let __temp0 = __action503(errors, db, __1);
            let __temp0 = (__start0, __temp0, __end0);
            __action307(errors, db, __0, __temp0, __2)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action548<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Token<'input>, Location),
            __1: (Location, Token<'input>, Location),
        ) -> Spanned<Vec<Spanned<Ident>>> {
            let __start0 = __0.2;
            let __end0 = __1.0;
            let __temp0 = __action504(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action307(errors, db, __0, __temp0, __1)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action549<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Token<'input>, Location),
            __1: (Location, alloc::vec::Vec<Spanned<Ident>>, Location),
            __2: (Location, Spanned<Ident>, Location),
            __3: (Location, Token<'input>, Location),
        ) -> Spanned<Vec<Spanned<Ident>>> {
            let __start0 = __1.0;
            let __end0 = __2.2;
            let __temp0 = __action505(errors, db, __1, __2);
            let __temp0 = (__start0, __temp0, __end0);
            __action307(errors, db, __0, __temp0, __3)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action550<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Token<'input>, Location),
            __1: (Location, alloc::vec::Vec<Spanned<Ident>>, Location),
            __2: (Location, Token<'input>, Location),
        ) -> Spanned<Vec<Spanned<Ident>>> {
            let __start0 = __1.0;
            let __end0 = __1.2;
            let __temp0 = __action506(errors, db, __1);
            let __temp0 = (__start0, __temp0, __end0);
            __action307(errors, db, __0, __temp0, __2)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action551<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<KeywordAndVisibility>, Location),
            __1: (Location, Token<'input>, Location),
            __2: (Location, Spanned<Ident>, Location),
            __3: (Location, Token<'input>, Location),
            __4: (Location, Spanned<Keyword>, Location),
            __5: (Location, Spanned<Ident>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.0;
            let __end0 = __2.2;
            let __temp0 = __action503(errors, db, __2);
            let __temp0 = (__start0, __temp0, __end0);
            __action309(errors, db, __0, __1, __temp0, __3, __4, __5)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action552<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<KeywordAndVisibility>, Location),
            __1: (Location, Token<'input>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Spanned<Keyword>, Location),
            __4: (Location, Spanned<Ident>, Location),
        ) -> Spanned<Node> {
            let __start0 = __1.2;
            let __end0 = __2.0;
            let __temp0 = __action504(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action309(errors, db, __0, __1, __temp0, __2, __3, __4)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action553<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<KeywordAndVisibility>, Location),
            __1: (Location, Token<'input>, Location),
            __2: (Location, alloc::vec::Vec<Spanned<Ident>>, Location),
            __3: (Location, Spanned<Ident>, Location),
            __4: (Location, Token<'input>, Location),
            __5: (Location, Spanned<Keyword>, Location),
            __6: (Location, Spanned<Ident>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.0;
            let __end0 = __3.2;
            let __temp0 = __action505(errors, db, __2, __3);
            let __temp0 = (__start0, __temp0, __end0);
            __action309(errors, db, __0, __1, __temp0, __4, __5, __6)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action554<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<KeywordAndVisibility>, Location),
            __1: (Location, Token<'input>, Location),
            __2: (Location, alloc::vec::Vec<Spanned<Ident>>, Location),
            __3: (Location, Token<'input>, Location),
            __4: (Location, Spanned<Keyword>, Location),
            __5: (Location, Spanned<Ident>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.0;
            let __end0 = __2.2;
            let __temp0 = __action506(errors, db, __2);
            let __temp0 = (__start0, __temp0, __end0);
            __action309(errors, db, __0, __1, __temp0, __3, __4, __5)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action555<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<KeywordAndVisibility>, Location),
            __1: (Location, Spanned<Ident>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Spanned<Ident>, Location),
            __4: (Location, Token<'input>, Location),
            __5: (Location, Token<'input>, Location),
            __6: (Location, Spanned<Prototype>, Location),
            __7: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __3.0;
            let __end0 = __3.2;
            let __temp0 = __action507(errors, db, __3);
            let __temp0 = (__start0, __temp0, __end0);
            __action375(errors, db, __0, __1, __2, __temp0, __4, __5, __6, __7)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action556<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<KeywordAndVisibility>, Location),
            __1: (Location, Spanned<Ident>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Token<'input>, Location),
            __4: (Location, Token<'input>, Location),
            __5: (Location, Spanned<Prototype>, Location),
            __6: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.2;
            let __end0 = __3.0;
            let __temp0 = __action508(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action375(errors, db, __0, __1, __2, __temp0, __3, __4, __5, __6)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action557<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<KeywordAndVisibility>, Location),
            __1: (Location, Spanned<Ident>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, alloc::vec::Vec<Spanned<Ident>>, Location),
            __4: (Location, Spanned<Ident>, Location),
            __5: (Location, Token<'input>, Location),
            __6: (Location, Token<'input>, Location),
            __7: (Location, Spanned<Prototype>, Location),
            __8: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __3.0;
            let __end0 = __4.2;
            let __temp0 = __action509(errors, db, __3, __4);
            let __temp0 = (__start0, __temp0, __end0);
            __action375(errors, db, __0, __1, __2, __temp0, __5, __6, __7, __8)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action558<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<KeywordAndVisibility>, Location),
            __1: (Location, Spanned<Ident>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, alloc::vec::Vec<Spanned<Ident>>, Location),
            __4: (Location, Token<'input>, Location),
            __5: (Location, Token<'input>, Location),
            __6: (Location, Spanned<Prototype>, Location),
            __7: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __3.0;
            let __end0 = __3.2;
            let __temp0 = __action510(errors, db, __3);
            let __temp0 = (__start0, __temp0, __end0);
            __action375(errors, db, __0, __1, __2, __temp0, __4, __5, __6, __7)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action559<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<KeywordAndVisibility>, Location),
            __1: (Location, Spanned<Ident>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Spanned<Ident>, Location),
            __4: (Location, Token<'input>, Location),
            __5: (Location, Token<'input>, Location),
            __6: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __3.0;
            let __end0 = __3.2;
            let __temp0 = __action507(errors, db, __3);
            let __temp0 = (__start0, __temp0, __end0);
            __action376(errors, db, __0, __1, __2, __temp0, __4, __5, __6)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action560<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<KeywordAndVisibility>, Location),
            __1: (Location, Spanned<Ident>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Token<'input>, Location),
            __4: (Location, Token<'input>, Location),
            __5: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.2;
            let __end0 = __3.0;
            let __temp0 = __action508(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action376(errors, db, __0, __1, __2, __temp0, __3, __4, __5)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action561<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<KeywordAndVisibility>, Location),
            __1: (Location, Spanned<Ident>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, alloc::vec::Vec<Spanned<Ident>>, Location),
            __4: (Location, Spanned<Ident>, Location),
            __5: (Location, Token<'input>, Location),
            __6: (Location, Token<'input>, Location),
            __7: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __3.0;
            let __end0 = __4.2;
            let __temp0 = __action509(errors, db, __3, __4);
            let __temp0 = (__start0, __temp0, __end0);
            __action376(errors, db, __0, __1, __2, __temp0, __5, __6, __7)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action562<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<KeywordAndVisibility>, Location),
            __1: (Location, Spanned<Ident>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, alloc::vec::Vec<Spanned<Ident>>, Location),
            __4: (Location, Token<'input>, Location),
            __5: (Location, Token<'input>, Location),
            __6: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __3.0;
            let __end0 = __3.2;
            let __temp0 = __action510(errors, db, __3);
            let __temp0 = (__start0, __temp0, __end0);
            __action376(errors, db, __0, __1, __2, __temp0, __4, __5, __6)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action563<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<KeywordAndVisibility>, Location),
            __1: (Location, Spanned<Ident>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Spanned<Ident>, Location),
            __4: (Location, Token<'input>, Location),
            __5: (Location, Token<'input>, Location),
            __6: (Location, alloc::vec::Vec<Spanned<Prototype>>, Location),
            __7: (Location, Spanned<Prototype>, Location),
            __8: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __3.0;
            let __end0 = __3.2;
            let __temp0 = __action507(errors, db, __3);
            let __temp0 = (__start0, __temp0, __end0);
            __action377(errors, db, __0, __1, __2, __temp0, __4, __5, __6, __7, __8)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action564<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<KeywordAndVisibility>, Location),
            __1: (Location, Spanned<Ident>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Token<'input>, Location),
            __4: (Location, Token<'input>, Location),
            __5: (Location, alloc::vec::Vec<Spanned<Prototype>>, Location),
            __6: (Location, Spanned<Prototype>, Location),
            __7: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.2;
            let __end0 = __3.0;
            let __temp0 = __action508(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action377(errors, db, __0, __1, __2, __temp0, __3, __4, __5, __6, __7)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action565<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<KeywordAndVisibility>, Location),
            __1: (Location, Spanned<Ident>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, alloc::vec::Vec<Spanned<Ident>>, Location),
            __4: (Location, Spanned<Ident>, Location),
            __5: (Location, Token<'input>, Location),
            __6: (Location, Token<'input>, Location),
            __7: (Location, alloc::vec::Vec<Spanned<Prototype>>, Location),
            __8: (Location, Spanned<Prototype>, Location),
            __9: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __3.0;
            let __end0 = __4.2;
            let __temp0 = __action509(errors, db, __3, __4);
            let __temp0 = (__start0, __temp0, __end0);
            __action377(errors, db, __0, __1, __2, __temp0, __5, __6, __7, __8, __9)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action566<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<KeywordAndVisibility>, Location),
            __1: (Location, Spanned<Ident>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, alloc::vec::Vec<Spanned<Ident>>, Location),
            __4: (Location, Token<'input>, Location),
            __5: (Location, Token<'input>, Location),
            __6: (Location, alloc::vec::Vec<Spanned<Prototype>>, Location),
            __7: (Location, Spanned<Prototype>, Location),
            __8: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __3.0;
            let __end0 = __3.2;
            let __temp0 = __action510(errors, db, __3);
            let __temp0 = (__start0, __temp0, __end0);
            __action377(errors, db, __0, __1, __2, __temp0, __4, __5, __6, __7, __8)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action567<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<KeywordAndVisibility>, Location),
            __1: (Location, Spanned<Ident>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Spanned<Ident>, Location),
            __4: (Location, Token<'input>, Location),
            __5: (Location, Token<'input>, Location),
            __6: (Location, alloc::vec::Vec<Spanned<Prototype>>, Location),
            __7: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __3.0;
            let __end0 = __3.2;
            let __temp0 = __action507(errors, db, __3);
            let __temp0 = (__start0, __temp0, __end0);
            __action378(errors, db, __0, __1, __2, __temp0, __4, __5, __6, __7)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action568<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<KeywordAndVisibility>, Location),
            __1: (Location, Spanned<Ident>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Token<'input>, Location),
            __4: (Location, Token<'input>, Location),
            __5: (Location, alloc::vec::Vec<Spanned<Prototype>>, Location),
            __6: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.2;
            let __end0 = __3.0;
            let __temp0 = __action508(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action378(errors, db, __0, __1, __2, __temp0, __3, __4, __5, __6)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action569<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<KeywordAndVisibility>, Location),
            __1: (Location, Spanned<Ident>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, alloc::vec::Vec<Spanned<Ident>>, Location),
            __4: (Location, Spanned<Ident>, Location),
            __5: (Location, Token<'input>, Location),
            __6: (Location, Token<'input>, Location),
            __7: (Location, alloc::vec::Vec<Spanned<Prototype>>, Location),
            __8: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __3.0;
            let __end0 = __4.2;
            let __temp0 = __action509(errors, db, __3, __4);
            let __temp0 = (__start0, __temp0, __end0);
            __action378(errors, db, __0, __1, __2, __temp0, __5, __6, __7, __8)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action570<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<KeywordAndVisibility>, Location),
            __1: (Location, Spanned<Ident>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, alloc::vec::Vec<Spanned<Ident>>, Location),
            __4: (Location, Token<'input>, Location),
            __5: (Location, Token<'input>, Location),
            __6: (Location, alloc::vec::Vec<Spanned<Prototype>>, Location),
            __7: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __3.0;
            let __end0 = __3.2;
            let __temp0 = __action510(errors, db, __3);
            let __temp0 = (__start0, __temp0, __end0);
            __action378(errors, db, __0, __1, __2, __temp0, __4, __5, __6, __7)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action571<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<KeywordAndVisibility>, Location),
            __1: (Location, Spanned<Ident>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Spanned<Ident>, Location),
            __4: (Location, Token<'input>, Location),
            __5: (Location, Spanned<Prototype>, Location),
            __6: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __3.0;
            let __end0 = __3.2;
            let __temp0 = __action507(errors, db, __3);
            let __temp0 = (__start0, __temp0, __end0);
            __action379(errors, db, __0, __1, __2, __temp0, __4, __5, __6)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action572<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<KeywordAndVisibility>, Location),
            __1: (Location, Spanned<Ident>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Token<'input>, Location),
            __4: (Location, Spanned<Prototype>, Location),
            __5: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.2;
            let __end0 = __3.0;
            let __temp0 = __action508(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action379(errors, db, __0, __1, __2, __temp0, __3, __4, __5)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action573<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<KeywordAndVisibility>, Location),
            __1: (Location, Spanned<Ident>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, alloc::vec::Vec<Spanned<Ident>>, Location),
            __4: (Location, Spanned<Ident>, Location),
            __5: (Location, Token<'input>, Location),
            __6: (Location, Spanned<Prototype>, Location),
            __7: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __3.0;
            let __end0 = __4.2;
            let __temp0 = __action509(errors, db, __3, __4);
            let __temp0 = (__start0, __temp0, __end0);
            __action379(errors, db, __0, __1, __2, __temp0, __5, __6, __7)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action574<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<KeywordAndVisibility>, Location),
            __1: (Location, Spanned<Ident>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, alloc::vec::Vec<Spanned<Ident>>, Location),
            __4: (Location, Token<'input>, Location),
            __5: (Location, Spanned<Prototype>, Location),
            __6: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __3.0;
            let __end0 = __3.2;
            let __temp0 = __action510(errors, db, __3);
            let __temp0 = (__start0, __temp0, __end0);
            __action379(errors, db, __0, __1, __2, __temp0, __4, __5, __6)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action575<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<KeywordAndVisibility>, Location),
            __1: (Location, Spanned<Ident>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Spanned<Ident>, Location),
            __4: (Location, Token<'input>, Location),
            __5: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __3.0;
            let __end0 = __3.2;
            let __temp0 = __action507(errors, db, __3);
            let __temp0 = (__start0, __temp0, __end0);
            __action380(errors, db, __0, __1, __2, __temp0, __4, __5)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action576<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<KeywordAndVisibility>, Location),
            __1: (Location, Spanned<Ident>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Token<'input>, Location),
            __4: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.2;
            let __end0 = __3.0;
            let __temp0 = __action508(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action380(errors, db, __0, __1, __2, __temp0, __3, __4)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action577<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<KeywordAndVisibility>, Location),
            __1: (Location, Spanned<Ident>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, alloc::vec::Vec<Spanned<Ident>>, Location),
            __4: (Location, Spanned<Ident>, Location),
            __5: (Location, Token<'input>, Location),
            __6: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __3.0;
            let __end0 = __4.2;
            let __temp0 = __action509(errors, db, __3, __4);
            let __temp0 = (__start0, __temp0, __end0);
            __action380(errors, db, __0, __1, __2, __temp0, __5, __6)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action578<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<KeywordAndVisibility>, Location),
            __1: (Location, Spanned<Ident>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, alloc::vec::Vec<Spanned<Ident>>, Location),
            __4: (Location, Token<'input>, Location),
            __5: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __3.0;
            let __end0 = __3.2;
            let __temp0 = __action510(errors, db, __3);
            let __temp0 = (__start0, __temp0, __end0);
            __action380(errors, db, __0, __1, __2, __temp0, __4, __5)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action579<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<KeywordAndVisibility>, Location),
            __1: (Location, Spanned<Ident>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Spanned<Ident>, Location),
            __4: (Location, Token<'input>, Location),
            __5: (Location, alloc::vec::Vec<Spanned<Prototype>>, Location),
            __6: (Location, Spanned<Prototype>, Location),
            __7: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __3.0;
            let __end0 = __3.2;
            let __temp0 = __action507(errors, db, __3);
            let __temp0 = (__start0, __temp0, __end0);
            __action381(errors, db, __0, __1, __2, __temp0, __4, __5, __6, __7)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action580<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<KeywordAndVisibility>, Location),
            __1: (Location, Spanned<Ident>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Token<'input>, Location),
            __4: (Location, alloc::vec::Vec<Spanned<Prototype>>, Location),
            __5: (Location, Spanned<Prototype>, Location),
            __6: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.2;
            let __end0 = __3.0;
            let __temp0 = __action508(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action381(errors, db, __0, __1, __2, __temp0, __3, __4, __5, __6)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action581<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<KeywordAndVisibility>, Location),
            __1: (Location, Spanned<Ident>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, alloc::vec::Vec<Spanned<Ident>>, Location),
            __4: (Location, Spanned<Ident>, Location),
            __5: (Location, Token<'input>, Location),
            __6: (Location, alloc::vec::Vec<Spanned<Prototype>>, Location),
            __7: (Location, Spanned<Prototype>, Location),
            __8: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __3.0;
            let __end0 = __4.2;
            let __temp0 = __action509(errors, db, __3, __4);
            let __temp0 = (__start0, __temp0, __end0);
            __action381(errors, db, __0, __1, __2, __temp0, __5, __6, __7, __8)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action582<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<KeywordAndVisibility>, Location),
            __1: (Location, Spanned<Ident>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, alloc::vec::Vec<Spanned<Ident>>, Location),
            __4: (Location, Token<'input>, Location),
            __5: (Location, alloc::vec::Vec<Spanned<Prototype>>, Location),
            __6: (Location, Spanned<Prototype>, Location),
            __7: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __3.0;
            let __end0 = __3.2;
            let __temp0 = __action510(errors, db, __3);
            let __temp0 = (__start0, __temp0, __end0);
            __action381(errors, db, __0, __1, __2, __temp0, __4, __5, __6, __7)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action583<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<KeywordAndVisibility>, Location),
            __1: (Location, Spanned<Ident>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Spanned<Ident>, Location),
            __4: (Location, Token<'input>, Location),
            __5: (Location, alloc::vec::Vec<Spanned<Prototype>>, Location),
            __6: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __3.0;
            let __end0 = __3.2;
            let __temp0 = __action507(errors, db, __3);
            let __temp0 = (__start0, __temp0, __end0);
            __action382(errors, db, __0, __1, __2, __temp0, __4, __5, __6)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action584<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<KeywordAndVisibility>, Location),
            __1: (Location, Spanned<Ident>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, Token<'input>, Location),
            __4: (Location, alloc::vec::Vec<Spanned<Prototype>>, Location),
            __5: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __2.2;
            let __end0 = __3.0;
            let __temp0 = __action508(errors, db, &__start0, &__end0);
            let __temp0 = (__start0, __temp0, __end0);
            __action382(errors, db, __0, __1, __2, __temp0, __3, __4, __5)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action585<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<KeywordAndVisibility>, Location),
            __1: (Location, Spanned<Ident>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, alloc::vec::Vec<Spanned<Ident>>, Location),
            __4: (Location, Spanned<Ident>, Location),
            __5: (Location, Token<'input>, Location),
            __6: (Location, alloc::vec::Vec<Spanned<Prototype>>, Location),
            __7: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __3.0;
            let __end0 = __4.2;
            let __temp0 = __action509(errors, db, __3, __4);
            let __temp0 = (__start0, __temp0, __end0);
            __action382(errors, db, __0, __1, __2, __temp0, __5, __6, __7)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action586<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<KeywordAndVisibility>, Location),
            __1: (Location, Spanned<Ident>, Location),
            __2: (Location, Token<'input>, Location),
            __3: (Location, alloc::vec::Vec<Spanned<Ident>>, Location),
            __4: (Location, Token<'input>, Location),
            __5: (Location, alloc::vec::Vec<Spanned<Prototype>>, Location),
            __6: (Location, Token<'input>, Location),
        ) -> Spanned<Node> {
            let __start0 = __3.0;
            let __end0 = __3.2;
            let __temp0 = __action510(errors, db, __3);
            let __temp0 = (__start0, __temp0, __end0);
            __action382(errors, db, __0, __1, __2, __temp0, __4, __5, __6)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action587<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Token<'input>, Location),
        ) -> Spanned<FnArg> {
            let __start0 = __0.0;
            let __end0 = __0.2;
            let __temp0 = __action297(errors, db, __0);
            let __temp0 = (__start0, __temp0, __end0);
            __action46(errors, db, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action588<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<FieldDef>, Location),
        ) -> Spanned<FnArg> {
            let __start0 = __0.0;
            let __end0 = __0.2;
            let __temp0 = __action298(errors, db, __0);
            let __temp0 = (__start0, __temp0, __end0);
            __action47(errors, db, __temp0)
        }
        #[allow(unused_variables)]
        #[allow(
            clippy::too_many_arguments,
            clippy::needless_lifetimes,
            clippy::just_underscores_and_digits
        )]
        fn __action589<'input, 'err>(
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __0: (Location, Spanned<Node>, Location),
        ) -> Spanned<Node> {
            let __start0 = __0.0;
            let __end0 = __0.2;
            let __temp0 = __action299(errors, db, __0);
            let __temp0 = (__start0, __temp0, __end0);
            __action33(errors, db, __temp0)
        }
        #[allow(clippy::type_complexity, dead_code)]
        pub trait __ToTriple<'input, 'err> {
            fn to_triple(
                value: Self,
            ) -> Result<
                (Location, Token<'input>, Location),
                __lalrpop_util::ParseError<Location, Token<'input>, &'static str>,
            >;
        }
        impl<'input, 'err> __ToTriple<'input, 'err>
        for (Location, Token<'input>, Location) {
            fn to_triple(
                value: Self,
            ) -> Result<
                (Location, Token<'input>, Location),
                __lalrpop_util::ParseError<Location, Token<'input>, &'static str>,
            > {
                Ok(value)
            }
        }
        impl<'input, 'err> __ToTriple<'input, 'err>
        for Result<(Location, Token<'input>, Location), &'static str> {
            fn to_triple(
                value: Self,
            ) -> Result<
                (Location, Token<'input>, Location),
                __lalrpop_util::ParseError<Location, Token<'input>, &'static str>,
            > {
                match value {
                    Ok(v) => Ok(v),
                    Err(error) => {
                        Err(__lalrpop_util::ParseError::User {
                            error,
                        })
                    }
                }
            }
        }
    }
}
pub mod visitor {}
pub mod ast {
    use crate::parser::span::Spanned;
    use paste::paste;
    use src_derive::node;
    pub struct Ident {
        pub name: String,
        pub generics: Vec<Ident>,
    }
    pub struct Field {
        pub vis: Option<Visibility>,
        pub name: String,
        pub ty: String,
    }
    pub enum Literal {
        Bool(bool),
        Float(f64),
        Integer(i64),
        String(String),
    }
    pub enum Visibility {
        Private,
        Public,
    }
    pub enum Operator {
        Add,
        Sub,
        Mul,
        Div,
        Mod,
        And,
        Or,
        Not,
        Eq,
        Ne,
        Lt,
        Le,
        Gt,
        Ge,
    }
}
use compiler::text;
use crate::compiler::ir;
pub struct Jar(
    <parser::span::ByteOrLineColOrCoordInterned as salsa::storage::IngredientsFor>::Ingredients,
    <parser::span::SourceMap as salsa::storage::IngredientsFor>::Ingredients,
    <analyzer::SyntaxTree as salsa::storage::IngredientsFor>::Ingredients,
    <compiler::compile as salsa::storage::IngredientsFor>::Ingredients,
    <compiler::compile_effect as salsa::storage::IngredientsFor>::Ingredients,
    <compiler::add_imports as salsa::storage::IngredientsFor>::Ingredients,
    <text::to_spans as salsa::storage::IngredientsFor>::Ingredients,
    <text::calculate_line_lengths as salsa::storage::IngredientsFor>::Ingredients,
    <text::Span as salsa::storage::IngredientsFor>::Ingredients,
    <text::Spanned as salsa::storage::IngredientsFor>::Ingredients,
    <text::Position as salsa::storage::IngredientsFor>::Ingredients,
    <text::SourceMap as salsa::storage::IngredientsFor>::Ingredients,
    <text::SourceProgram as salsa::storage::IngredientsFor>::Ingredients,
    <text::Document as salsa::storage::IngredientsFor>::Ingredients,
    <ir::Program as salsa::storage::IngredientsFor>::Ingredients,
    <ir::Function as salsa::storage::IngredientsFor>::Ingredients,
    <ir::InternedEffect as salsa::storage::IngredientsFor>::Ingredients,
    <ir::Symbol as salsa::storage::IngredientsFor>::Ingredients,
    <ir::EffectDef as salsa::storage::IngredientsFor>::Ingredients,
    <ir::Import as salsa::storage::IngredientsFor>::Ingredients,
    <ir::Mangled as salsa::storage::IngredientsFor>::Ingredients,
    <analyzer::get_symbol as salsa::storage::IngredientsFor>::Ingredients,
    <analyzer::add_file as salsa::storage::IngredientsFor>::Ingredients,
    <analyzer::Url as salsa::storage::IngredientsFor>::Ingredients,
    <analyzer::span_text as salsa::storage::IngredientsFor>::Ingredients,
);
impl salsa::storage::HasIngredientsFor<parser::span::ByteOrLineColOrCoordInterned>
for Jar {
    fn ingredient(
        &self,
    ) -> &<parser::span::ByteOrLineColOrCoordInterned as salsa::storage::IngredientsFor>::Ingredients {
        &self.0
    }
    fn ingredient_mut(
        &mut self,
    ) -> &mut <parser::span::ByteOrLineColOrCoordInterned as salsa::storage::IngredientsFor>::Ingredients {
        &mut self.0
    }
}
impl salsa::storage::HasIngredientsFor<parser::span::SourceMap> for Jar {
    fn ingredient(
        &self,
    ) -> &<parser::span::SourceMap as salsa::storage::IngredientsFor>::Ingredients {
        &self.1
    }
    fn ingredient_mut(
        &mut self,
    ) -> &mut <parser::span::SourceMap as salsa::storage::IngredientsFor>::Ingredients {
        &mut self.1
    }
}
impl salsa::storage::HasIngredientsFor<analyzer::SyntaxTree> for Jar {
    fn ingredient(
        &self,
    ) -> &<analyzer::SyntaxTree as salsa::storage::IngredientsFor>::Ingredients {
        &self.2
    }
    fn ingredient_mut(
        &mut self,
    ) -> &mut <analyzer::SyntaxTree as salsa::storage::IngredientsFor>::Ingredients {
        &mut self.2
    }
}
impl salsa::storage::HasIngredientsFor<compiler::compile> for Jar {
    fn ingredient(
        &self,
    ) -> &<compiler::compile as salsa::storage::IngredientsFor>::Ingredients {
        &self.3
    }
    fn ingredient_mut(
        &mut self,
    ) -> &mut <compiler::compile as salsa::storage::IngredientsFor>::Ingredients {
        &mut self.3
    }
}
impl salsa::storage::HasIngredientsFor<compiler::compile_effect> for Jar {
    fn ingredient(
        &self,
    ) -> &<compiler::compile_effect as salsa::storage::IngredientsFor>::Ingredients {
        &self.4
    }
    fn ingredient_mut(
        &mut self,
    ) -> &mut <compiler::compile_effect as salsa::storage::IngredientsFor>::Ingredients {
        &mut self.4
    }
}
impl salsa::storage::HasIngredientsFor<compiler::add_imports> for Jar {
    fn ingredient(
        &self,
    ) -> &<compiler::add_imports as salsa::storage::IngredientsFor>::Ingredients {
        &self.5
    }
    fn ingredient_mut(
        &mut self,
    ) -> &mut <compiler::add_imports as salsa::storage::IngredientsFor>::Ingredients {
        &mut self.5
    }
}
impl salsa::storage::HasIngredientsFor<text::to_spans> for Jar {
    fn ingredient(
        &self,
    ) -> &<text::to_spans as salsa::storage::IngredientsFor>::Ingredients {
        &self.6
    }
    fn ingredient_mut(
        &mut self,
    ) -> &mut <text::to_spans as salsa::storage::IngredientsFor>::Ingredients {
        &mut self.6
    }
}
impl salsa::storage::HasIngredientsFor<text::calculate_line_lengths> for Jar {
    fn ingredient(
        &self,
    ) -> &<text::calculate_line_lengths as salsa::storage::IngredientsFor>::Ingredients {
        &self.7
    }
    fn ingredient_mut(
        &mut self,
    ) -> &mut <text::calculate_line_lengths as salsa::storage::IngredientsFor>::Ingredients {
        &mut self.7
    }
}
impl salsa::storage::HasIngredientsFor<text::Span> for Jar {
    fn ingredient(
        &self,
    ) -> &<text::Span as salsa::storage::IngredientsFor>::Ingredients {
        &self.8
    }
    fn ingredient_mut(
        &mut self,
    ) -> &mut <text::Span as salsa::storage::IngredientsFor>::Ingredients {
        &mut self.8
    }
}
impl salsa::storage::HasIngredientsFor<text::Spanned> for Jar {
    fn ingredient(
        &self,
    ) -> &<text::Spanned as salsa::storage::IngredientsFor>::Ingredients {
        &self.9
    }
    fn ingredient_mut(
        &mut self,
    ) -> &mut <text::Spanned as salsa::storage::IngredientsFor>::Ingredients {
        &mut self.9
    }
}
impl salsa::storage::HasIngredientsFor<text::Position> for Jar {
    fn ingredient(
        &self,
    ) -> &<text::Position as salsa::storage::IngredientsFor>::Ingredients {
        &self.10
    }
    fn ingredient_mut(
        &mut self,
    ) -> &mut <text::Position as salsa::storage::IngredientsFor>::Ingredients {
        &mut self.10
    }
}
impl salsa::storage::HasIngredientsFor<text::SourceMap> for Jar {
    fn ingredient(
        &self,
    ) -> &<text::SourceMap as salsa::storage::IngredientsFor>::Ingredients {
        &self.11
    }
    fn ingredient_mut(
        &mut self,
    ) -> &mut <text::SourceMap as salsa::storage::IngredientsFor>::Ingredients {
        &mut self.11
    }
}
impl salsa::storage::HasIngredientsFor<text::SourceProgram> for Jar {
    fn ingredient(
        &self,
    ) -> &<text::SourceProgram as salsa::storage::IngredientsFor>::Ingredients {
        &self.12
    }
    fn ingredient_mut(
        &mut self,
    ) -> &mut <text::SourceProgram as salsa::storage::IngredientsFor>::Ingredients {
        &mut self.12
    }
}
impl salsa::storage::HasIngredientsFor<text::Document> for Jar {
    fn ingredient(
        &self,
    ) -> &<text::Document as salsa::storage::IngredientsFor>::Ingredients {
        &self.13
    }
    fn ingredient_mut(
        &mut self,
    ) -> &mut <text::Document as salsa::storage::IngredientsFor>::Ingredients {
        &mut self.13
    }
}
impl salsa::storage::HasIngredientsFor<ir::Program> for Jar {
    fn ingredient(
        &self,
    ) -> &<ir::Program as salsa::storage::IngredientsFor>::Ingredients {
        &self.14
    }
    fn ingredient_mut(
        &mut self,
    ) -> &mut <ir::Program as salsa::storage::IngredientsFor>::Ingredients {
        &mut self.14
    }
}
impl salsa::storage::HasIngredientsFor<ir::Function> for Jar {
    fn ingredient(
        &self,
    ) -> &<ir::Function as salsa::storage::IngredientsFor>::Ingredients {
        &self.15
    }
    fn ingredient_mut(
        &mut self,
    ) -> &mut <ir::Function as salsa::storage::IngredientsFor>::Ingredients {
        &mut self.15
    }
}
impl salsa::storage::HasIngredientsFor<ir::InternedEffect> for Jar {
    fn ingredient(
        &self,
    ) -> &<ir::InternedEffect as salsa::storage::IngredientsFor>::Ingredients {
        &self.16
    }
    fn ingredient_mut(
        &mut self,
    ) -> &mut <ir::InternedEffect as salsa::storage::IngredientsFor>::Ingredients {
        &mut self.16
    }
}
impl salsa::storage::HasIngredientsFor<ir::Symbol> for Jar {
    fn ingredient(
        &self,
    ) -> &<ir::Symbol as salsa::storage::IngredientsFor>::Ingredients {
        &self.17
    }
    fn ingredient_mut(
        &mut self,
    ) -> &mut <ir::Symbol as salsa::storage::IngredientsFor>::Ingredients {
        &mut self.17
    }
}
impl salsa::storage::HasIngredientsFor<ir::EffectDef> for Jar {
    fn ingredient(
        &self,
    ) -> &<ir::EffectDef as salsa::storage::IngredientsFor>::Ingredients {
        &self.18
    }
    fn ingredient_mut(
        &mut self,
    ) -> &mut <ir::EffectDef as salsa::storage::IngredientsFor>::Ingredients {
        &mut self.18
    }
}
impl salsa::storage::HasIngredientsFor<ir::Import> for Jar {
    fn ingredient(
        &self,
    ) -> &<ir::Import as salsa::storage::IngredientsFor>::Ingredients {
        &self.19
    }
    fn ingredient_mut(
        &mut self,
    ) -> &mut <ir::Import as salsa::storage::IngredientsFor>::Ingredients {
        &mut self.19
    }
}
impl salsa::storage::HasIngredientsFor<ir::Mangled> for Jar {
    fn ingredient(
        &self,
    ) -> &<ir::Mangled as salsa::storage::IngredientsFor>::Ingredients {
        &self.20
    }
    fn ingredient_mut(
        &mut self,
    ) -> &mut <ir::Mangled as salsa::storage::IngredientsFor>::Ingredients {
        &mut self.20
    }
}
impl salsa::storage::HasIngredientsFor<analyzer::get_symbol> for Jar {
    fn ingredient(
        &self,
    ) -> &<analyzer::get_symbol as salsa::storage::IngredientsFor>::Ingredients {
        &self.21
    }
    fn ingredient_mut(
        &mut self,
    ) -> &mut <analyzer::get_symbol as salsa::storage::IngredientsFor>::Ingredients {
        &mut self.21
    }
}
impl salsa::storage::HasIngredientsFor<analyzer::add_file> for Jar {
    fn ingredient(
        &self,
    ) -> &<analyzer::add_file as salsa::storage::IngredientsFor>::Ingredients {
        &self.22
    }
    fn ingredient_mut(
        &mut self,
    ) -> &mut <analyzer::add_file as salsa::storage::IngredientsFor>::Ingredients {
        &mut self.22
    }
}
impl salsa::storage::HasIngredientsFor<analyzer::Url> for Jar {
    fn ingredient(
        &self,
    ) -> &<analyzer::Url as salsa::storage::IngredientsFor>::Ingredients {
        &self.23
    }
    fn ingredient_mut(
        &mut self,
    ) -> &mut <analyzer::Url as salsa::storage::IngredientsFor>::Ingredients {
        &mut self.23
    }
}
impl salsa::storage::HasIngredientsFor<analyzer::span_text> for Jar {
    fn ingredient(
        &self,
    ) -> &<analyzer::span_text as salsa::storage::IngredientsFor>::Ingredients {
        &self.24
    }
    fn ingredient_mut(
        &mut self,
    ) -> &mut <analyzer::span_text as salsa::storage::IngredientsFor>::Ingredients {
        &mut self.24
    }
}
unsafe impl<'salsa_db> salsa::jar::Jar<'salsa_db> for Jar {
    type DynDb = dyn Db + 'salsa_db;
    unsafe fn init_jar<DB>(place: *mut Self, routes: &mut salsa::routes::Routes<DB>)
    where
        DB: salsa::storage::JarFromJars<Self> + salsa::storage::DbWithJar<Self>,
    {
        unsafe {
            (&raw mut (*place).0)
                .write(
                    <parser::span::ByteOrLineColOrCoordInterned as salsa::storage::IngredientsFor>::create_ingredients(
                        routes,
                    ),
                );
        }
        unsafe {
            (&raw mut (*place).1)
                .write(
                    <parser::span::SourceMap as salsa::storage::IngredientsFor>::create_ingredients(
                        routes,
                    ),
                );
        }
        unsafe {
            (&raw mut (*place).2)
                .write(
                    <analyzer::SyntaxTree as salsa::storage::IngredientsFor>::create_ingredients(
                        routes,
                    ),
                );
        }
        unsafe {
            (&raw mut (*place).3)
                .write(
                    <compiler::compile as salsa::storage::IngredientsFor>::create_ingredients(
                        routes,
                    ),
                );
        }
        unsafe {
            (&raw mut (*place).4)
                .write(
                    <compiler::compile_effect as salsa::storage::IngredientsFor>::create_ingredients(
                        routes,
                    ),
                );
        }
        unsafe {
            (&raw mut (*place).5)
                .write(
                    <compiler::add_imports as salsa::storage::IngredientsFor>::create_ingredients(
                        routes,
                    ),
                );
        }
        unsafe {
            (&raw mut (*place).6)
                .write(
                    <text::to_spans as salsa::storage::IngredientsFor>::create_ingredients(
                        routes,
                    ),
                );
        }
        unsafe {
            (&raw mut (*place).7)
                .write(
                    <text::calculate_line_lengths as salsa::storage::IngredientsFor>::create_ingredients(
                        routes,
                    ),
                );
        }
        unsafe {
            (&raw mut (*place).8)
                .write(
                    <text::Span as salsa::storage::IngredientsFor>::create_ingredients(
                        routes,
                    ),
                );
        }
        unsafe {
            (&raw mut (*place).9)
                .write(
                    <text::Spanned as salsa::storage::IngredientsFor>::create_ingredients(
                        routes,
                    ),
                );
        }
        unsafe {
            (&raw mut (*place).10)
                .write(
                    <text::Position as salsa::storage::IngredientsFor>::create_ingredients(
                        routes,
                    ),
                );
        }
        unsafe {
            (&raw mut (*place).11)
                .write(
                    <text::SourceMap as salsa::storage::IngredientsFor>::create_ingredients(
                        routes,
                    ),
                );
        }
        unsafe {
            (&raw mut (*place).12)
                .write(
                    <text::SourceProgram as salsa::storage::IngredientsFor>::create_ingredients(
                        routes,
                    ),
                );
        }
        unsafe {
            (&raw mut (*place).13)
                .write(
                    <text::Document as salsa::storage::IngredientsFor>::create_ingredients(
                        routes,
                    ),
                );
        }
        unsafe {
            (&raw mut (*place).14)
                .write(
                    <ir::Program as salsa::storage::IngredientsFor>::create_ingredients(
                        routes,
                    ),
                );
        }
        unsafe {
            (&raw mut (*place).15)
                .write(
                    <ir::Function as salsa::storage::IngredientsFor>::create_ingredients(
                        routes,
                    ),
                );
        }
        unsafe {
            (&raw mut (*place).16)
                .write(
                    <ir::InternedEffect as salsa::storage::IngredientsFor>::create_ingredients(
                        routes,
                    ),
                );
        }
        unsafe {
            (&raw mut (*place).17)
                .write(
                    <ir::Symbol as salsa::storage::IngredientsFor>::create_ingredients(
                        routes,
                    ),
                );
        }
        unsafe {
            (&raw mut (*place).18)
                .write(
                    <ir::EffectDef as salsa::storage::IngredientsFor>::create_ingredients(
                        routes,
                    ),
                );
        }
        unsafe {
            (&raw mut (*place).19)
                .write(
                    <ir::Import as salsa::storage::IngredientsFor>::create_ingredients(
                        routes,
                    ),
                );
        }
        unsafe {
            (&raw mut (*place).20)
                .write(
                    <ir::Mangled as salsa::storage::IngredientsFor>::create_ingredients(
                        routes,
                    ),
                );
        }
        unsafe {
            (&raw mut (*place).21)
                .write(
                    <analyzer::get_symbol as salsa::storage::IngredientsFor>::create_ingredients(
                        routes,
                    ),
                );
        }
        unsafe {
            (&raw mut (*place).22)
                .write(
                    <analyzer::add_file as salsa::storage::IngredientsFor>::create_ingredients(
                        routes,
                    ),
                );
        }
        unsafe {
            (&raw mut (*place).23)
                .write(
                    <analyzer::Url as salsa::storage::IngredientsFor>::create_ingredients(
                        routes,
                    ),
                );
        }
        unsafe {
            (&raw mut (*place).24)
                .write(
                    <analyzer::span_text as salsa::storage::IngredientsFor>::create_ingredients(
                        routes,
                    ),
                );
        }
    }
}
pub trait Db: salsa::DbWithJar<Jar> {}
impl<DB> Db for DB
where
    DB: ?Sized + salsa::DbWithJar<Jar>,
{}
