// auto-generated: "lalrpop 0.20.2"
// sha3: 9d4abd7abb2a62b4cce713e96dfa7040f2e5ff87022402197ca8b24162706e2d
use super::ast::*;
use lalrpop_util::ErrorRecovery;
use crate::lexer::{Token,  Location};
use crate::lexer::Word;
use crate::Db;
use super::span::Spanned;
use crate::span;
#[allow(unused_extern_crates)]
extern crate lalrpop_util as __lalrpop_util;
#[allow(unused_imports)]
use self::__lalrpop_util::state_machine as __state_machine;
extern crate core;
extern crate alloc;

#[rustfmt::skip]
#[allow(non_snake_case, non_camel_case_types, unused_mut, unused_variables, unused_imports, unused_parens, clippy::needless_lifetimes, clippy::type_complexity, clippy::needless_return, clippy::too_many_arguments, clippy::never_loop, clippy::match_single_binding, clippy::needless_raw_string_hashes)]
mod __parse__Source {

    use super::super::ast::*;
    use lalrpop_util::ErrorRecovery;
    use crate::lexer::{Token,  Location};
    use crate::lexer::Word;
    use crate::Db;
    use super::super::span::Spanned;
    use crate::span;
    #[allow(unused_extern_crates)]
    extern crate lalrpop_util as __lalrpop_util;
    #[allow(unused_imports)]
    use self::__lalrpop_util::state_machine as __state_machine;
    extern crate core;
    extern crate alloc;
    use super::__ToTriple;
    #[allow(dead_code)]
    pub(crate) enum __Symbol<'input>
     {
        Variant0(Token<'input>),
        Variant1(&'input str),
        Variant2(f64),
        Variant3(i64),
        Variant4(__lalrpop_util::ErrorRecovery<Location, Token<'input>, &'static str>),
        Variant5(alloc::vec::Vec<Token<'input>>),
        Variant6(core::option::Option<Token<'input>>),
        Variant7((Token<'input>, Spanned<Ident>)),
        Variant8(core::option::Option<(Token<'input>, Spanned<Ident>)>),
        Variant9((alloc::vec::Vec<Token<'input>>, Spanned<Node>)),
        Variant10(alloc::vec::Vec<(alloc::vec::Vec<Token<'input>>, Spanned<Node>)>),
        Variant11(()),
        Variant12(Spanned<Node>),
        Variant13(alloc::vec::Vec<Spanned<Node>>),
        Variant14(Spanned<FieldDef>),
        Variant15(alloc::vec::Vec<Spanned<FieldDef>>),
        Variant16(Spanned<FnArg>),
        Variant17(alloc::vec::Vec<Spanned<FnArg>>),
        Variant18(Spanned<Ident>),
        Variant19(alloc::vec::Vec<Spanned<Ident>>),
        Variant20(Spanned<Prototype>),
        Variant21(alloc::vec::Vec<Spanned<Prototype>>),
        Variant22(Location),
        Variant23(Spanned<Value>),
        Variant24(Block<Spanned<FieldDef>>),
        Variant25(Block<Spanned<Node>>),
        Variant26(Block<Spanned<Prototype>>),
        Variant27(Vec<Spanned<Node>>),
        Variant28(Vec<Spanned<FnArg>>),
        Variant29(Vec<Spanned<Ident>>),
        Variant30(Spanned<Keyword>),
        Variant31(core::option::Option<Spanned<Node>>),
        Variant32(Node),
        Variant33(core::option::Option<Spanned<FieldDef>>),
        Variant34(core::option::Option<Spanned<FnArg>>),
        Variant35(core::option::Option<Spanned<Ident>>),
        Variant36(Spanned<KeywordAndVisibility>),
        Variant37(Vec<Spanned<FieldDef>>),
        Variant38(Vec<Spanned<Prototype>>),
        Variant39(core::option::Option<Spanned<Prototype>>),
        Variant40(Module),
        Variant41(Spanned<Token<'input>>),
        Variant42(Spanned<Spanned<FieldDef>>),
        Variant43(Spanned<Spanned<Node>>),
        Variant44(Spanned<Vec<Spanned<Ident>>>),
        Variant45(Spanned<Visibility>),
        Variant46((Spanned<Ident>, Block<Spanned<Node>>)),
    }
    const __ACTION: &[i16] = &[
        // State 0
        149, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -392, 0, 0, 0, 0, 0, -392, 0, 0, 0, 0, -392, 0, 0, 0, 0, 0, 0, 150, 151, 0, 0, -392, 0, -392, 0, 0, 0, 0, 0, 0, 152,
        // State 1
        154, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -392, 0, 0, 0, 0, 0, -392, 0, 0, 0, 0, -392, 0, 0, 0, 0, 0, 0, 150, 151, 0, 0, -392, 0, -392, 0, 0, 0, 0, 0, 0, 0,
        // State 2
        149, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -392, 0, 0, 0, 0, 0, -392, 0, 0, 0, 0, -392, 0, 0, 0, 0, 0, 0, 150, 151, 0, 0, -392, 0, -392, 0, 0, 0, 0, 0, 0, 0,
        // State 3
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 157, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 4
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 162, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 163, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 5
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 157, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 6
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 157, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 7
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 171, 0, 0, 0, 0, 0, 172, 0, 0, 0, 0, 173, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 174, 0, 175, 0, 0, 0, 0, 0, 0, 0,
        // State 8
        154, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -392, 0, 0, 0, 0, 0, -392, 0, 0, 0, 0, -392, 0, 0, 0, 0, 0, 0, 150, 151, 0, 0, -392, 0, -392, 0, 0, 0, 0, 0, 0, 0,
        // State 9
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 157, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0,
        // State 10
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 157, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0,
        // State 11
        0, 0, 0, 0, 0, 0, 0, 181, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -392, 0, 0, 0, 0, 0, 0, 0, 0, 150, 151, 182, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 12
        27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 162, 189, 0, 0, 0, 190, 0, 0, 0, 0, 0, 163, 0, 0, 0, 0, 0, 0, 0, 0, 191, 0, 0,
        // State 13
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 193, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 157, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 14
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 157, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 15
        31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -392, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 150, 151, 0, 0, 0, 0, 0, 0, 0, 0, 0, 196, 0, 0,
        // State 16
        33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -392, 0, 0, 0, 0, 0, 0, 0, 0, 150, 151, 0, 0, 0, 0, 0, 0, 0, 0, 0, 198, 0, 0,
        // State 17
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 157, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34, 0, 0,
        // State 18
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 201, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 19
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 157, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 0, 0, 0, 0,
        // State 20
        40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 162, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 163, 0, 0, 0, 0, 0, 0, 0, 0, 205, 0, 0,
        // State 21
        0, 0, 0, 0, 0, 0, 0, 207, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -392, 0, 0, 0, 0, 0, 0, 0, 0, 150, 151, 182, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 22
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 157, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 23
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 162, 189, 0, 0, 0, 190, 0, 0, 0, 0, 0, 163, 0, 0, 0, 0, 0, 0, 0, 0, 212, 0, 0,
        // State 24
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 162, 189, 0, 0, 0, 190, 0, 0, 0, 0, 0, 163, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 25
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 157, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 26
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 162, 189, 0, 0, 0, 190, 0, 0, 0, 0, 0, 163, 0, 0, 0, 0, 0, 0, 0, 0, 218, 0, 0,
        // State 27
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 220, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 157, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 28
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -392, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 150, 151, 0, 0, 0, 0, 0, 0, 0, 0, 0, 223, 0, 0,
        // State 29
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 172, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 30
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -392, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 150, 151, 0, 0, 0, 0, 0, 0, 0, 0, 0, 227, 0, 0,
        // State 31
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -392, 0, 0, 0, 0, 0, 0, 0, 0, 150, 151, 0, 0, 0, 0, 0, 0, 0, 0, 0, 229, 0, 0,
        // State 32
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -392, 0, 0, 0, 0, 0, 0, 0, 0, 150, 151, 0, 0, 0, 0, 0, 0, 0, 0, 0, 233, 0, 0,
        // State 33
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 201, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 34
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 201, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 35
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 157, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 36
        53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 162, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 163, 0, 0, 0, 0, 0, 0, 0, 0, 238, 0, 0,
        // State 37
        55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 162, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 163, 0, 0, 0, 0, 0, 0, 0, 0, 240, 0, 0,
        // State 38
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 162, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 163, 0, 0, 0, 0, 0, 0, 0, 0, 242, 0, 0,
        // State 39
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 162, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 163, 0, 0, 0, 0, 0, 0, 0, 0, 246, 0, 0,
        // State 40
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 250, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 157, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 41
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 162, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 163, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 42
        0, 0, 0, 0, 0, 0, 62, 264, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 265, 0, 0, 0, 0, 162, 0, 0, 0, 266, 0, 0, 0, 0, 0, 0, 163, 267, 0, 268, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 43
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 162, 189, 0, 0, 0, 190, 0, 0, 0, 0, 0, 163, 0, 0, 0, 0, 0, 0, 0, 0, 270, 0, 0,
        // State 44
        66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -392, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 150, 151, 0, 0, 0, 0, 0, 0, 0, 0, 0, 274, 0, 0,
        // State 45
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -392, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 150, 151, 0, 0, 0, 0, 0, 0, 0, 0, 0, 278, 0, 0,
        // State 46
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -392, 0, 0, 0, 0, 0, 0, 0, 0, 150, 151, 0, 0, 0, 0, 0, 0, 0, 0, 0, 283, 0, 0,
        // State 47
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 201, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 48
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 157, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 49
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 157, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 50
        69, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 162, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 163, 0, 0, 0, 0, 0, 0, 0, 0, 288, 0, 0,
        // State 51
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 162, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 163, 0, 0, 0, 0, 0, 0, 0, 0, 290, 0, 0,
        // State 52
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 162, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 163, 0, 0, 0, 0, 0, 0, 0, 0, 293, 0, 0,
        // State 53
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 162, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 163, 0, 0, 0, 0, 0, 0, 0, 0, 295, 0, 0,
        // State 54
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 162, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 163, 0, 0, 0, 0, 0, 0, 0, 0, 298, 0, 0,
        // State 55
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 162, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 163, 0, 0, 0, 0, 0, 0, 0, 0, 302, 0, 0,
        // State 56
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 305, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 157, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 57
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 307, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 157, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 58
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 162, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 163, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 59
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 310, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 157, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 60
        0, 0, 0, 0, 0, 0, 62, 313, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 265, 0, 0, 0, 0, 162, 0, 0, 0, 266, 0, 0, 0, 0, 0, 0, 163, 267, 0, 268, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 61
        0, 0, 0, 0, 0, 0, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 265, 0, 0, 0, 0, 162, 0, 0, 0, 266, 0, 0, 0, 0, 0, 0, 163, 267, 0, 268, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 62
        81, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 162, 189, 0, 0, 0, 190, 0, 0, 0, 0, 0, 163, 0, 0, 0, 0, 0, 0, 0, 0, 82, 0, 0,
        // State 63
        0, 0, 0, 0, 0, 0, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 265, 0, 0, 0, 0, 162, 0, 0, 0, 266, 0, 0, 0, 0, 0, 0, 163, 267, 0, 268, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 64
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -392, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 150, 151, 0, 0, 0, 0, 0, 0, 0, 0, 0, 321, 0, 0,
        // State 65
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -392, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 150, 151, 0, 0, 0, 0, 0, 0, 0, 0, 0, 324, 0, 0,
        // State 66
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 157, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 67
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 162, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 163, 0, 0, 0, 0, 0, 0, 0, 0, 329, 0, 0,
        // State 68
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 162, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 163, 0, 0, 0, 0, 0, 0, 0, 0, 332, 0, 0,
        // State 69
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 162, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 163, 0, 0, 0, 0, 0, 0, 0, 0, 335, 0, 0,
        // State 70
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 162, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 163, 0, 0, 0, 0, 0, 0, 0, 0, 339, 0, 0,
        // State 71
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 343, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 157, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 72
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 345, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 157, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 73
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 348, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 157, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 74
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 157, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 75
        0, 0, 0, 0, 0, 0, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 265, 0, 0, 0, 0, 162, 0, 0, 0, 266, 0, 0, 0, 0, 0, 0, 163, 267, 0, 268, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 76
        0, 0, 0, 0, 0, 0, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 265, 0, 0, 0, 0, 162, 0, 0, 0, 266, 0, 0, 0, 0, 0, 0, 163, 267, 0, 268, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 77
        0, 0, 0, 0, 0, 0, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 265, 0, 0, 0, 0, 162, 0, 0, 0, 266, 0, 0, 0, 0, 0, 0, 163, 267, 0, 268, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 78
        0, 0, 0, 0, 0, 0, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 265, 0, 0, 0, 0, 162, 0, 0, 0, 266, 0, 0, 0, 0, 0, 0, 163, 267, 0, 268, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 79
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 162, 189, 0, 0, 0, 190, 0, 0, 0, 0, 0, 163, 0, 0, 0, 0, 0, 0, 0, 0, 90, 0, 0,
        // State 80
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 162, 189, 0, 0, 0, 190, 0, 0, 0, 0, 0, 163, 0, 0, 0, 0, 0, 0, 0, 0, 93, 0, 0,
        // State 81
        -202, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 362, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -202, 0, -202, 0, 0,
        // State 82
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -392, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 150, 151, 0, 0, 0, 0, 0, 0, 0, 0, 0, 365, 0, 0,
        // State 83
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 162, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 163, 0, 0, 0, 0, 0, 0, 0, 0, 369, 0, 0,
        // State 84
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 374, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 157, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 85
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 157, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 86
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 157, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 87
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 157, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 88
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 157, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 89
        -204, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 362, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -204, 0, -204, 0, 0,
        // State 90
        -201, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 362, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -201, 0, -201, 0, 0,
        // State 91
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 162, 189, 0, 0, 0, 190, 0, 0, 0, 0, 0, 163, 0, 0, 0, 0, 0, 0, 0, 0, 101, 0, 0,
        // State 92
        -198, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 362, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -198, 0, -198, 0, 0,
        // State 93
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 157, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 94
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 157, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 95
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 157, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 96
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 157, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 97
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 157, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 98
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 157, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 99
        -203, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 362, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -203, 0, -203, 0, 0,
        // State 100
        -200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 362, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -200, 0, -200, 0, 0,
        // State 101
        -197, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 362, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -197, 0, -197, 0, 0,
        // State 102
        113, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 162, 189, 0, 0, 0, 190, 0, 0, 0, 0, 0, 163, 0, 0, 0, 0, 0, 0, 0, 0, 399, 0, 0,
        // State 103
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 157, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 104
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 157, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 105
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 157, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 106
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 157, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 107
        117, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 162, 189, 0, 0, 0, 190, 0, 0, 0, 0, 0, 163, 0, 0, 0, 0, 0, 0, 0, 0, 405, 0, 0,
        // State 108
        119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 162, 189, 0, 0, 0, 190, 0, 0, 0, 0, 0, 163, 0, 0, 0, 0, 0, 0, 0, 0, 407, 0, 0,
        // State 109
        -199, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 362, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -199, 0, -199, 0, 0,
        // State 110
        123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 162, 189, 0, 0, 0, 190, 0, 0, 0, 0, 0, 163, 0, 0, 0, 0, 0, 0, 0, 0, 410, 0, 0,
        // State 111
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 162, 189, 0, 0, 0, 190, 0, 0, 0, 0, 0, 163, 0, 0, 0, 0, 0, 0, 0, 0, 412, 0, 0,
        // State 112
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 162, 189, 0, 0, 0, 190, 0, 0, 0, 0, 0, 163, 0, 0, 0, 0, 0, 0, 0, 0, 415, 0, 0,
        // State 113
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 157, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 114
        126, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 162, 189, 0, 0, 0, 190, 0, 0, 0, 0, 0, 163, 0, 0, 0, 0, 0, 0, 0, 0, 418, 0, 0,
        // State 115
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 162, 189, 0, 0, 0, 190, 0, 0, 0, 0, 0, 163, 0, 0, 0, 0, 0, 0, 0, 0, 420, 0, 0,
        // State 116
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 162, 189, 0, 0, 0, 190, 0, 0, 0, 0, 0, 163, 0, 0, 0, 0, 0, 0, 0, 0, 423, 0, 0,
        // State 117
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 162, 189, 0, 0, 0, 190, 0, 0, 0, 0, 0, 163, 0, 0, 0, 0, 0, 0, 0, 0, 425, 0, 0,
        // State 118
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 162, 189, 0, 0, 0, 190, 0, 0, 0, 0, 0, 163, 0, 0, 0, 0, 0, 0, 0, 0, 428, 0, 0,
        // State 119
        131, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 162, 189, 0, 0, 0, 190, 0, 0, 0, 0, 0, 163, 0, 0, 0, 0, 0, 0, 0, 0, 430, 0, 0,
        // State 120
        133, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 162, 189, 0, 0, 0, 190, 0, 0, 0, 0, 0, 163, 0, 0, 0, 0, 0, 0, 0, 0, 432, 0, 0,
        // State 121
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 162, 189, 0, 0, 0, 190, 0, 0, 0, 0, 0, 163, 0, 0, 0, 0, 0, 0, 0, 0, 434, 0, 0,
        // State 122
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 162, 189, 0, 0, 0, 190, 0, 0, 0, 0, 0, 163, 0, 0, 0, 0, 0, 0, 0, 0, 437, 0, 0,
        // State 123
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 162, 189, 0, 0, 0, 190, 0, 0, 0, 0, 0, 163, 0, 0, 0, 0, 0, 0, 0, 0, 440, 0, 0,
        // State 124
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 162, 189, 0, 0, 0, 190, 0, 0, 0, 0, 0, 163, 0, 0, 0, 0, 0, 0, 0, 0, 443, 0, 0,
        // State 125
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 162, 189, 0, 0, 0, 190, 0, 0, 0, 0, 0, 163, 0, 0, 0, 0, 0, 0, 0, 0, 446, 0, 0,
        // State 126
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 162, 189, 0, 0, 0, 190, 0, 0, 0, 0, 0, 163, 0, 0, 0, 0, 0, 0, 0, 0, 449, 0, 0,
        // State 127
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 162, 189, 0, 0, 0, 190, 0, 0, 0, 0, 0, 163, 0, 0, 0, 0, 0, 0, 0, 0, 453, 0, 0,
        // State 128
        137, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 162, 189, 0, 0, 0, 190, 0, 0, 0, 0, 0, 163, 0, 0, 0, 0, 0, 0, 0, 0, 456, 0, 0,
        // State 129
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 162, 189, 0, 0, 0, 190, 0, 0, 0, 0, 0, 163, 0, 0, 0, 0, 0, 0, 0, 0, 458, 0, 0,
        // State 130
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 162, 189, 0, 0, 0, 190, 0, 0, 0, 0, 0, 163, 0, 0, 0, 0, 0, 0, 0, 0, 461, 0, 0,
        // State 131
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 162, 189, 0, 0, 0, 190, 0, 0, 0, 0, 0, 163, 0, 0, 0, 0, 0, 0, 0, 0, 463, 0, 0,
        // State 132
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 162, 189, 0, 0, 0, 190, 0, 0, 0, 0, 0, 163, 0, 0, 0, 0, 0, 0, 0, 0, 466, 0, 0,
        // State 133
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 162, 189, 0, 0, 0, 190, 0, 0, 0, 0, 0, 163, 0, 0, 0, 0, 0, 0, 0, 0, 469, 0, 0,
        // State 134
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 162, 189, 0, 0, 0, 190, 0, 0, 0, 0, 0, 163, 0, 0, 0, 0, 0, 0, 0, 0, 474, 0, 0,
        // State 135
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 162, 189, 0, 0, 0, 190, 0, 0, 0, 0, 0, 163, 0, 0, 0, 0, 0, 0, 0, 0, 479, 0, 0,
        // State 136
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 162, 189, 0, 0, 0, 190, 0, 0, 0, 0, 0, 163, 0, 0, 0, 0, 0, 0, 0, 0, 482, 0, 0,
        // State 137
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 162, 189, 0, 0, 0, 190, 0, 0, 0, 0, 0, 163, 0, 0, 0, 0, 0, 0, 0, 0, 485, 0, 0,
        // State 138
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 162, 189, 0, 0, 0, 190, 0, 0, 0, 0, 0, 163, 0, 0, 0, 0, 0, 0, 0, 0, 489, 0, 0,
        // State 139
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 162, 189, 0, 0, 0, 190, 0, 0, 0, 0, 0, 163, 0, 0, 0, 0, 0, 0, 0, 0, 495, 0, 0,
        // State 140
        -376, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -376, 0, 0, 0, 0, 0, -376, 0, 0, 0, 0, -376, 0, 0, 0, 0, 0, 0, -376, -376, 0, 0, -376, 0, -376, 0, 0, 0, 0, 0, 0, 0,
        // State 141
        -375, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -375, 0, 0, 0, 0, 0, -375, 0, 0, 0, 0, -375, 0, 0, 0, 0, 0, 0, -375, -375, 0, 0, -375, 0, -375, 0, 0, 0, 0, 0, 0, 0,
        // State 142
        -379, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -379, 0, 0, 0, 0, 0, -379, 0, 0, 0, 0, -379, 0, 0, 0, 0, 0, 0, -379, -379, 0, 0, -379, 0, -379, 0, 0, 0, 0, 0, 0, 0,
        // State 143
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0,
        // State 144
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 145
        -377, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -377, 0, 0, 0, 0, 0, -377, 0, 0, 0, 0, -377, 0, 0, 0, 0, 0, 0, -377, -377, 0, 0, -377, 0, -377, 0, 0, 0, 0, 0, 0, 0,
        // State 146
        -14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -14, 0, 0, 0, 0, 0, -14, 0, 0, 0, 0, -14, 0, 0, 0, 0, 0, 0, -14, -14, 0, 0, -14, 0, -14, 0, 0, 0, 0, 0, 0, 0,
        // State 147
        -378, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -378, 0, 0, 0, 0, 0, -378, 0, 0, 0, 0, -378, 0, 0, 0, 0, 0, 0, -378, -378, 0, 0, -378, 0, -378, 0, 0, 0, 0, 0, 0, 0,
        // State 148
        -3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -3, 0, 0, 0, 0, 0, -3, 0, 0, 0, 0, -3, 0, 0, 0, 0, 0, 0, -3, -3, 0, 0, -3, 0, -3, 0, 0, 0, 0, 0, 0, 0,
        // State 149
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -391, 0, 0, 0, 0, 0, -391, 0, 0, -391, 0, -391, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -391, 0, -391, 0, 0, 0, 0, 0, 0, 0,
        // State 150
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -390, 0, 0, 0, 0, 0, -390, 0, 0, -390, 0, -390, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -390, 0, -390, 0, 0, 0, 0, 0, 0, 0,
        // State 151
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 152
        -15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -15, 0, 0, 0, 0, 0, -15, 0, 0, 0, 0, -15, 0, 0, 0, 0, 0, 0, -15, -15, 0, 0, -15, 0, -15, 0, 0, 0, 0, 0, 0, 0,
        // State 153
        -4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -4, 0, 0, 0, 0, 0, -4, 0, 0, 0, 0, -4, 0, 0, 0, 0, 0, 0, -4, -4, 0, 0, -4, 0, -4, 0, 0, 0, 0, 0, 0, 0,
        // State 154
        -16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -16, 0, 0, 0, 0, 0, -16, 0, 0, 0, 0, -16, 0, 0, 0, 0, 0, 0, -16, -16, 0, 0, -16, 0, -16, 0, 0, 0, 0, 0, 0, 0,
        // State 155
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 156
        -184, 0, 0, 0, 0, 0, 0, 0, 0, -184, -184, 0, 0, 0, 0, -184, 0, 0, -184, 0, -184, 0, 0, 0, -184, 0, 0, 0, -184, 0, 0, 0, 0, 0, -184, -184, 0, 0, 0, -184, 0, 0, 0, 0, 0, 0, -184, -184, 0, 0, -184, 0, -184, 0, 0, -184, 0, -184, 0, 0,
        // State 157
        -187, 0, 0, 0, 0, 0, -187, -187, 0, 0, -187, 0, 0, -187, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -187, 0, -187, 0, 0,
        // State 158
        0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 159
        -188, 0, 0, 0, 0, 0, -188, -188, 0, 0, -188, 0, 0, -188, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -188, 0, -188, 0, 0,
        // State 160
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0,
        // State 161
        -184, 0, 0, 0, 0, 0, -184, -184, -184, -184, -184, -184, 0, -184, -184, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -184, 0, -184, 0, 0,
        // State 162
        -189, 0, 0, 0, 0, 0, -189, -189, 0, 0, -189, 0, 0, -189, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -189, 0, -189, 0, 0,
        // State 163
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0,
        // State 164
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0,
        // State 165
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -286, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 166
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -287, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -287, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 167
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -288, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 168
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -289, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 169
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -290, 0, 0, 0, 0,
        // State 170
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 171
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -164, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -164, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 172
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -269, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 173
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -359, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 174
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -385, 0, 0, 0, 0,
        // State 175
        -17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -17, 0, 0, 0, 0, 0, -17, 0, 0, 0, 0, -17, 0, 0, 0, 0, 0, 0, -17, -17, 0, 0, -17, 0, -17, 0, 0, 0, 0, 0, 0, 0,
        // State 176
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 0, 0,
        // State 177
        0, 0, 0, 0, 0, 0, 0, 0, 0, 203, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 0, 0, 0, 0,
        // State 178
        0, 0, 0, 0, 0, 0, 0, -166, 0, 0, -166, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 179
        0, 0, 0, 0, 0, 0, 0, 208, 0, 0, 209, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 180
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 181
        0, 0, 0, 0, 0, 0, 0, -165, 0, 0, -165, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 182
        -355, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -355, 0, -355, 0, 0,
        // State 183
        -191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -191, 0, -191, 0, 0,
        // State 184
        -190, 0, 0, 0, 0, 0, 43, 0, 0, 0, 0, 0, 0, -190, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -190, 0, -190, 0, 0,
        // State 185
        -163, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -163, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -163, 0, -163, 0, 0,
        // State 186
        -354, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -354, 0, -354, 0, 0,
        // State 187
        215, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 216, 0, 0,
        // State 188
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -196, -196, 0, 0, 0, -196, 0, 0, 0, 0, 0, -196, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 189
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -291, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 190
        -178, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -178, 0, 0, 0, 0, 0, -178, 0, 0, 0, 0, -178, 0, 0, 0, 0, 0, 0, -178, -178, 0, 0, -178, 0, -178, 0, 0, 0, 0, -178, 0, 0,
        // State 191
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 221, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 192
        -193, 0, 0, 0, 0, 0, -193, -193, 0, 0, -193, 0, 0, -193, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -193, 0, -193, 0, 0,
        // State 193
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 0, 0, 0, 0,
        // State 194
        224, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 225, 0, 0,
        // State 195
        -283, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -283, 0, 0, 0, 0, 0, -283, 0, 0, 0, 0, -283, 0, 0, 0, 0, 0, 0, -283, -283, 0, 0, -283, 0, -283, 0, 0, 0, 0, 0, 0, 0,
        // State 196
        230, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 231, 0, 0,
        // State 197
        -365, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -365, 0, 0, 0, 0, 0, -365, 0, 0, 0, 0, -365, 0, 0, 0, 0, 0, 0, -365, -365, 0, 0, -365, 0, -365, 0, 0, 0, 0, 0, 0, 0,
        // State 198
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 234, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 0, 0,
        // State 199
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -52, 0, 0, 0, -52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -52, 0, 0,
        // State 200
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -183, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 201
        0, 0, 0, 0, 0, 0, 0, 0, 0, 236, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51, 0, 0, 0, 0,
        // State 202
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -47, 0, 0, 0, 0,
        // State 203
        243, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 244, 0, 0,
        // State 204
        -137, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -137, 0, 0, 0, 0, 0, -137, 0, 0, 0, 0, -137, 0, 0, 0, 0, 0, 0, -137, -137, 0, 0, -137, 0, -137, 0, 0, 0, 0, 0, 0, 0,
        // State 205
        0, 0, 0, 0, 0, 0, 0, 247, 0, 0, 248, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 206
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 207
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 208
        0, 0, 0, 0, 0, 0, 0, -37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -37, 0, 0, 0, 0, 0, 0, 0, 0, -37, -37, -37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 209
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 210
        251, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 252, 0, 0,
        // State 211
        -180, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -180, 0, 0, 0, 0, 0, -180, 0, 0, 0, 0, -180, 0, 0, 0, 0, 0, 0, -180, -180, 0, 0, -180, 0, -180, 0, 0, 0, 0, -180, 0, 0,
        // State 212
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 0, 0, 0, 0,
        // State 213
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 214
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -62, -62, 0, 0, 0, -62, 0, 0, 0, 0, 0, -62, 0, 0, 0, 0, 0, 0, 0, 0, -62, 0, 0,
        // State 215
        -177, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -177, 0, 0, 0, 0, 0, -177, 0, 0, 0, 0, -177, 0, 0, 0, 0, 0, 0, -177, -177, 0, 0, -177, 0, -177, 0, 0, 0, 0, -177, 0, 0,
        // State 216
        215, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 271, 0, 0,
        // State 217
        -174, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -174, 0, 0, 0, 0, 0, -174, 0, 0, 0, 0, -174, 0, 0, 0, 0, 0, 0, -174, -174, 0, 0, -174, 0, -174, 0, 0, 0, 0, -174, 0, 0,
        // State 218
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 234, 0, 0, 0, 0, 0, 0, 0, 0, 0, 272, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 219
        -195, 0, 0, 0, 0, 0, -195, -195, 0, 0, -195, 0, 0, -195, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -195, 0, -195, 0, 0,
        // State 220
        -192, 0, 0, 0, 0, 0, -192, -192, 0, 0, -192, 0, 0, -192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -192, 0, -192, 0, 0,
        // State 221
        275, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 276, 0, 0,
        // State 222
        -285, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -285, 0, 0, 0, 0, 0, -285, 0, 0, 0, 0, -285, 0, 0, 0, 0, 0, 0, -285, -285, 0, 0, -285, 0, -285, 0, 0, 0, 0, 0, 0, 0,
        // State 223
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -42, -42, 0, 0, 0, 0, 0, 0, 0, 0, 0, -42, 0, 0,
        // State 224
        -282, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -282, 0, 0, 0, 0, 0, -282, 0, 0, 0, 0, -282, 0, 0, 0, 0, 0, 0, -282, -282, 0, 0, -282, 0, -282, 0, 0, 0, 0, 0, 0, 0,
        // State 225
        224, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 279, 0, 0,
        // State 226
        -279, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -279, 0, 0, 0, 0, 0, -279, 0, 0, 0, 0, -279, 0, 0, 0, 0, 0, 0, -279, -279, 0, 0, -279, 0, -279, 0, 0, 0, 0, 0, 0, 0,
        // State 227
        280, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 281, 0, 0,
        // State 228
        -367, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -367, 0, 0, 0, 0, 0, -367, 0, 0, 0, 0, -367, 0, 0, 0, 0, 0, 0, -367, -367, 0, 0, -367, 0, -367, 0, 0, 0, 0, 0, 0, 0,
        // State 229
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -32, 0, 0, 0, 0, 0, 0, 0, 0, -32, -32, 0, 0, 0, 0, 0, 0, 0, 0, 0, -32, 0, 0,
        // State 230
        -364, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -364, 0, 0, 0, 0, 0, -364, 0, 0, 0, 0, -364, 0, 0, 0, 0, 0, 0, -364, -364, 0, 0, -364, 0, -364, 0, 0, 0, 0, 0, 0, 0,
        // State 231
        230, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 284, 0, 0,
        // State 232
        -361, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -361, 0, 0, 0, 0, 0, -361, 0, 0, 0, 0, -361, 0, 0, 0, 0, 0, 0, -361, -361, 0, 0, -361, 0, -361, 0, 0, 0, 0, 0, 0, 0,
        // State 233
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -53, 0, 0, 0, -53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -53, 0, 0,
        // State 234
        -387, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -387, 0, 0, 0, 0, 0, -387, 0, 0, 0, 0, -387, 0, 0, 0, 0, 0, 0, -387, -387, 0, 0, -387, 0, -387, 0, 0, 0, 0, 0, 0, 0,
        // State 235
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -48, 0, 0, 0, 0,
        // State 236
        243, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 291, 0, 0,
        // State 237
        -139, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -139, 0, 0, 0, 0, 0, -139, 0, 0, 0, 0, -139, 0, 0, 0, 0, 0, 0, -139, -139, 0, 0, -139, 0, -139, 0, 0, 0, 0, 0, 0, 0,
        // State 238
        243, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 296, 0, 0,
        // State 239
        -136, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -136, 0, 0, 0, 0, 0, -136, 0, 0, 0, 0, -136, 0, 0, 0, 0, 0, 0, -136, -136, 0, 0, -136, 0, -136, 0, 0, 0, 0, 0, 0, 0,
        // State 240
        299, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 300, 0, 0,
        // State 241
        -145, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -145, 0, 0, 0, 0, 0, -145, 0, 0, 0, 0, -145, 0, 0, 0, 0, 0, 0, -145, -145, 0, 0, -145, 0, -145, 0, 0, 0, 0, 0, 0, 0,
        // State 242
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -57, 0, 0, 0, 0, 0, 0, 0, 0, -57, 0, 0,
        // State 243
        -133, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -133, 0, 0, 0, 0, 0, -133, 0, 0, 0, 0, -133, 0, 0, 0, 0, 0, 0, -133, -133, 0, 0, -133, 0, -133, 0, 0, 0, 0, 0, 0, 0,
        // State 244
        243, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 303, 0, 0,
        // State 245
        -121, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -121, 0, 0, 0, 0, 0, -121, 0, 0, 0, 0, -121, 0, 0, 0, 0, 0, 0, -121, -121, 0, 0, -121, 0, -121, 0, 0, 0, 0, 0, 0, 0,
        // State 246
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 247
        0, 0, 0, 0, 0, 0, 0, -38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -38, 0, 0, 0, 0, 0, 0, 0, 0, -38, -38, -38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 248
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 311, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 249
        -334, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -334, 0, -334, 0, 0,
        // State 250
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -63, -63, 0, 0, 0, -63, 0, 0, 0, 0, 0, -63, 0, 0, 0, 0, 0, 0, 0, 0, -63, 0, 0,
        // State 251
        -179, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -179, 0, 0, 0, 0, 0, -179, 0, 0, 0, 0, -179, 0, 0, 0, 0, 0, 0, -179, -179, 0, 0, -179, 0, -179, 0, 0, 0, 0, -179, 0, 0,
        // State 252
        -162, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -162, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -162, 0, -162, 0, 0,
        // State 253
        0, 0, 0, 0, 0, 0, 0, 314, 0, 76, 315, 77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 254
        -155, 0, 0, 0, 0, 0, 0, -155, -155, -155, -155, -155, 0, 0, -155, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -155, 0, -155, 0, 0,
        // State 255
        -151, 0, 0, 0, 0, 0, 0, -151, 78, -151, -151, -151, 0, 0, 79, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -151, 0, -151, 0, 0,
        // State 256
        -373, 0, 0, 0, 0, 0, 0, -373, -373, -373, -373, -373, 0, 0, -373, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -373, 0, -373, 0, 0,
        // State 257
        -371, 0, 0, 0, 0, 0, 0, -371, -371, -371, -371, -371, 0, 0, -371, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -371, 0, -371, 0, 0,
        // State 258
        -370, 0, 0, 0, 0, 0, -187, -370, -370, -370, -370, -370, 0, 0, -370, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -370, 0, -370, 0, 0,
        // State 259
        0, 0, 0, 0, 0, 0, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 260
        -368, 0, 0, 0, 0, 0, 0, -368, -368, -368, -368, -368, 0, 0, -368, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -368, 0, -368, 0, 0,
        // State 261
        -152, 0, 0, 0, 0, 0, 0, -152, -152, -152, -152, -152, 0, 0, -152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -152, 0, -152, 0, 0,
        // State 262
        -372, 0, 0, 0, 0, 0, 0, -372, -372, -372, -372, -372, 0, 0, -372, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -372, 0, -372, 0, 0,
        // State 263
        -170, 0, 0, 0, 0, 0, 0, -170, -170, -170, -170, -170, 0, -170, -170, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -170, 0, -170, 0, 0,
        // State 264
        -158, 0, 0, 0, 0, 0, 0, -158, -158, -158, -158, -158, 0, 0, -158, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -158, 0, -158, 0, 0,
        // State 265
        -369, 0, 0, 0, 0, 0, 0, -369, -369, -369, -369, -369, 0, 0, -369, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -369, 0, -369, 0, 0,
        // State 266
        -358, 0, 0, 0, 0, 0, 0, -358, -358, -358, -358, -358, 0, 0, -358, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -358, 0, -358, 0, 0,
        // State 267
        -380, 0, 0, 0, 0, 0, 0, -380, -380, -380, -380, -380, 0, 0, -380, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -380, 0, -380, 0, 0,
        // State 268
        251, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 319, 0, 0,
        // State 269
        -176, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -176, 0, 0, 0, 0, 0, -176, 0, 0, 0, 0, -176, 0, 0, 0, 0, 0, 0, -176, -176, 0, 0, -176, 0, -176, 0, 0, 0, 0, -176, 0, 0,
        // State 270
        -173, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -173, 0, 0, 0, 0, 0, -173, 0, 0, 0, 0, -173, 0, 0, 0, 0, 0, 0, -173, -173, 0, 0, -173, 0, -173, 0, 0, 0, 0, -173, 0, 0,
        // State 271
        -194, 0, 0, 0, 0, 0, -194, -194, 0, 0, -194, 0, 0, -194, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -194, 0, -194, 0, 0,
        // State 272
        224, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 322, 0, 0,
        // State 273
        -275, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -275, 0, 0, 0, 0, 0, -275, 0, 0, 0, 0, -275, 0, 0, 0, 0, 0, 0, -275, -275, 0, 0, -275, 0, -275, 0, 0, 0, 0, 0, 0, 0,
        // State 274
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -43, -43, 0, 0, 0, 0, 0, 0, 0, 0, 0, -43, 0, 0,
        // State 275
        -284, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -284, 0, 0, 0, 0, 0, -284, 0, 0, 0, 0, -284, 0, 0, 0, 0, 0, 0, -284, -284, 0, 0, -284, 0, -284, 0, 0, 0, 0, 0, 0, 0,
        // State 276
        275, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 325, 0, 0,
        // State 277
        -281, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -281, 0, 0, 0, 0, 0, -281, 0, 0, 0, 0, -281, 0, 0, 0, 0, 0, 0, -281, -281, 0, 0, -281, 0, -281, 0, 0, 0, 0, 0, 0, 0,
        // State 278
        -278, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -278, 0, 0, 0, 0, 0, -278, 0, 0, 0, 0, -278, 0, 0, 0, 0, 0, 0, -278, -278, 0, 0, -278, 0, -278, 0, 0, 0, 0, 0, 0, 0,
        // State 279
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -33, 0, 0, 0, 0, 0, 0, 0, 0, -33, -33, 0, 0, 0, 0, 0, 0, 0, 0, 0, -33, 0, 0,
        // State 280
        -366, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -366, 0, 0, 0, 0, 0, -366, 0, 0, 0, 0, -366, 0, 0, 0, 0, 0, 0, -366, -366, 0, 0, -366, 0, -366, 0, 0, 0, 0, 0, 0, 0,
        // State 281
        280, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 326, 0, 0,
        // State 282
        -363, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -363, 0, 0, 0, 0, 0, -363, 0, 0, 0, 0, -363, 0, 0, 0, 0, 0, 0, -363, -363, 0, 0, -363, 0, -363, 0, 0, 0, 0, 0, 0, 0,
        // State 283
        -360, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -360, 0, 0, 0, 0, 0, -360, 0, 0, 0, 0, -360, 0, 0, 0, 0, 0, 0, -360, -360, 0, 0, -360, 0, -360, 0, 0, 0, 0, 0, 0, 0,
        // State 284
        -389, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -389, 0, 0, 0, 0, 0, -389, 0, 0, 0, 0, -389, 0, 0, 0, 0, 0, 0, -389, -389, 0, 0, -389, 0, -389, 0, 0, 0, 0, 0, 0, 0,
        // State 285
        -386, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -386, 0, 0, 0, 0, 0, -386, 0, 0, 0, 0, -386, 0, 0, 0, 0, 0, 0, -386, -386, 0, 0, -386, 0, -386, 0, 0, 0, 0, 0, 0, 0,
        // State 286
        243, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 330, 0, 0,
        // State 287
        -138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -138, 0, 0, 0, 0, 0, -138, 0, 0, 0, 0, -138, 0, 0, 0, 0, 0, 0, -138, -138, 0, 0, -138, 0, -138, 0, 0, 0, 0, 0, 0, 0,
        // State 288
        299, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 333, 0, 0,
        // State 289
        -147, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -147, 0, 0, 0, 0, 0, -147, 0, 0, 0, 0, -147, 0, 0, 0, 0, 0, 0, -147, -147, 0, 0, -147, 0, -147, 0, 0, 0, 0, 0, 0, 0,
        // State 290
        -135, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -135, 0, 0, 0, 0, 0, -135, 0, 0, 0, 0, -135, 0, 0, 0, 0, 0, 0, -135, -135, 0, 0, -135, 0, -135, 0, 0, 0, 0, 0, 0, 0,
        // State 291
        243, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 336, 0, 0,
        // State 292
        -123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -123, 0, 0, 0, 0, 0, -123, 0, 0, 0, 0, -123, 0, 0, 0, 0, 0, 0, -123, -123, 0, 0, -123, 0, -123, 0, 0, 0, 0, 0, 0, 0,
        // State 293
        299, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 337, 0, 0,
        // State 294
        -144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -144, 0, 0, 0, 0, 0, -144, 0, 0, 0, 0, -144, 0, 0, 0, 0, 0, 0, -144, -144, 0, 0, -144, 0, -144, 0, 0, 0, 0, 0, 0, 0,
        // State 295
        -132, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -132, 0, 0, 0, 0, 0, -132, 0, 0, 0, 0, -132, 0, 0, 0, 0, 0, 0, -132, -132, 0, 0, -132, 0, -132, 0, 0, 0, 0, 0, 0, 0,
        // State 296
        243, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 340, 0, 0,
        // State 297
        -120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -120, 0, 0, 0, 0, 0, -120, 0, 0, 0, 0, -120, 0, 0, 0, 0, 0, 0, -120, -120, 0, 0, -120, 0, -120, 0, 0, 0, 0, 0, 0, 0,
        // State 298
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -58, 0, 0, 0, 0, 0, 0, 0, 0, -58, 0, 0,
        // State 299
        -141, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -141, 0, 0, 0, 0, 0, -141, 0, 0, 0, 0, -141, 0, 0, 0, 0, 0, 0, -141, -141, 0, 0, -141, 0, -141, 0, 0, 0, 0, 0, 0, 0,
        // State 300
        299, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 341, 0, 0,
        // State 301
        -129, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -129, 0, 0, 0, 0, 0, -129, 0, 0, 0, 0, -129, 0, 0, 0, 0, 0, 0, -129, -129, 0, 0, -129, 0, -129, 0, 0, 0, 0, 0, 0, 0,
        // State 302
        -117, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -117, 0, 0, 0, 0, 0, -117, 0, 0, 0, 0, -117, 0, 0, 0, 0, 0, 0, -117, -117, 0, 0, -117, 0, -117, 0, 0, 0, 0, 0, 0, 0,
        // State 303
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 346, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 304
        -342, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 86, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -342, 0, -342, 0, 0,
        // State 305
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 349, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 306
        -330, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -330, 0, -330, 0, 0,
        // State 307
        -159, 0, 0, 0, 0, 0, 0, -159, 0, 0, -159, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -159, 0, 0,
        // State 308
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 234, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 350, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 309
        -336, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 88, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -336, 0, -336, 0, 0,
        // State 310
        -333, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 89, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -333, 0, -333, 0, 0,
        // State 311
        0, 0, 0, 0, 0, 0, 0, 352, 0, 76, 353, 77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 312
        -172, 0, 0, 0, 0, 0, 0, -172, -172, -172, -172, -172, 0, -172, -172, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -172, 0, -172, 0, 0,
        // State 313
        -169, 0, 0, 0, 0, 0, 0, -169, -169, -169, -169, -169, 0, -169, -169, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -169, 0, -169, 0, 0,
        // State 314
        0, 0, 0, 0, 0, 0, -27, -27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -27, 0, 0, 0, 0, -27, 0, 0, 0, -27, 0, 0, 0, 0, 0, 0, -27, -27, 0, -27, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 315
        0, 0, 0, 0, 0, 0, 0, 358, 0, 76, 0, 77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 316
        215, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 91, 0, 0,
        // State 317
        -353, 0, 0, 0, 0, 0, 0, 0, 0, 76, 0, 77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -353, 0, -353, 0, 0,
        // State 318
        -175, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -175, 0, 0, 0, 0, 0, -175, 0, 0, 0, 0, -175, 0, 0, 0, 0, 0, 0, -175, -175, 0, 0, -175, 0, -175, 0, 0, 0, 0, -175, 0, 0,
        // State 319
        275, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 363, 0, 0,
        // State 320
        -277, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -277, 0, 0, 0, 0, 0, -277, 0, 0, 0, 0, -277, 0, 0, 0, 0, 0, 0, -277, -277, 0, 0, -277, 0, -277, 0, 0, 0, 0, 0, 0, 0,
        // State 321
        -274, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -274, 0, 0, 0, 0, 0, -274, 0, 0, 0, 0, -274, 0, 0, 0, 0, 0, 0, -274, -274, 0, 0, -274, 0, -274, 0, 0, 0, 0, 0, 0, 0,
        // State 322
        224, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 366, 0, 0,
        // State 323
        -271, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -271, 0, 0, 0, 0, 0, -271, 0, 0, 0, 0, -271, 0, 0, 0, 0, 0, 0, -271, -271, 0, 0, -271, 0, -271, 0, 0, 0, 0, 0, 0, 0,
        // State 324
        -280, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -280, 0, 0, 0, 0, 0, -280, 0, 0, 0, 0, -280, 0, 0, 0, 0, 0, 0, -280, -280, 0, 0, -280, 0, -280, 0, 0, 0, 0, 0, 0, 0,
        // State 325
        -362, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -362, 0, 0, 0, 0, 0, -362, 0, 0, 0, 0, -362, 0, 0, 0, 0, 0, 0, -362, -362, 0, 0, -362, 0, -362, 0, 0, 0, 0, 0, 0, 0,
        // State 326
        -388, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -388, 0, 0, 0, 0, 0, -388, 0, 0, 0, 0, -388, 0, 0, 0, 0, 0, 0, -388, -388, 0, 0, -388, 0, -388, 0, 0, 0, 0, 0, 0, 0,
        // State 327
        299, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 367, 0, 0,
        // State 328
        -146, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -146, 0, 0, 0, 0, 0, -146, 0, 0, 0, 0, -146, 0, 0, 0, 0, 0, 0, -146, -146, 0, 0, -146, 0, -146, 0, 0, 0, 0, 0, 0, 0,
        // State 329
        -134, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -134, 0, 0, 0, 0, 0, -134, 0, 0, 0, 0, -134, 0, 0, 0, 0, 0, 0, -134, -134, 0, 0, -134, 0, -134, 0, 0, 0, 0, 0, 0, 0,
        // State 330
        243, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 370, 0, 0,
        // State 331
        -122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -122, 0, 0, 0, 0, 0, -122, 0, 0, 0, 0, -122, 0, 0, 0, 0, 0, 0, -122, -122, 0, 0, -122, 0, -122, 0, 0, 0, 0, 0, 0, 0,
        // State 332
        -143, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -143, 0, 0, 0, 0, 0, -143, 0, 0, 0, 0, -143, 0, 0, 0, 0, 0, 0, -143, -143, 0, 0, -143, 0, -143, 0, 0, 0, 0, 0, 0, 0,
        // State 333
        299, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 371, 0, 0,
        // State 334
        -131, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -131, 0, 0, 0, 0, 0, -131, 0, 0, 0, 0, -131, 0, 0, 0, 0, 0, 0, -131, -131, 0, 0, -131, 0, -131, 0, 0, 0, 0, 0, 0, 0,
        // State 335
        -119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -119, 0, 0, 0, 0, 0, -119, 0, 0, 0, 0, -119, 0, 0, 0, 0, 0, 0, -119, -119, 0, 0, -119, 0, -119, 0, 0, 0, 0, 0, 0, 0,
        // State 336
        -140, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -140, 0, 0, 0, 0, 0, -140, 0, 0, 0, 0, -140, 0, 0, 0, 0, 0, 0, -140, -140, 0, 0, -140, 0, -140, 0, 0, 0, 0, 0, 0, 0,
        // State 337
        299, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 372, 0, 0,
        // State 338
        -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128, 0, 0, 0, 0, 0, -128, 0, 0, 0, 0, -128, 0, 0, 0, 0, 0, 0, -128, -128, 0, 0, -128, 0, -128, 0, 0, 0, 0, 0, 0, 0,
        // State 339
        -116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -116, 0, 0, 0, 0, 0, -116, 0, 0, 0, 0, -116, 0, 0, 0, 0, 0, 0, -116, -116, 0, 0, -116, 0, -116, 0, 0, 0, 0, 0, 0, 0,
        // State 340
        -125, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -125, 0, 0, 0, 0, 0, -125, 0, 0, 0, 0, -125, 0, 0, 0, 0, 0, 0, -125, -125, 0, 0, -125, 0, -125, 0, 0, 0, 0, 0, 0, 0,
        // State 341
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 375, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 342
        -338, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 94, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -338, 0, -338, 0, 0,
        // State 343
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 234, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 376, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 344
        -344, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 95, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -344, 0, -344, 0, 0,
        // State 345
        -341, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -341, 0, -341, 0, 0,
        // State 346
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 234, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 378, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 347
        -332, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -332, 0, -332, 0, 0,
        // State 348
        -329, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 98, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -329, 0, -329, 0, 0,
        // State 349
        -335, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -335, 0, -335, 0, 0,
        // State 350
        -318, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -318, 0, -318, 0, 0,
        // State 351
        -171, 0, 0, 0, 0, 0, 0, -171, -171, -171, -171, -171, 0, -171, -171, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -171, 0, -171, 0, 0,
        // State 352
        0, 0, 0, 0, 0, 0, -28, -28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -28, 0, 0, 0, 0, -28, 0, 0, 0, -28, 0, 0, 0, 0, 0, 0, -28, -28, 0, -28, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 353
        -149, 0, 0, 0, 0, 0, 0, -149, 78, -149, -149, -149, 0, 0, 79, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -149, 0, -149, 0, 0,
        // State 354
        -150, 0, 0, 0, 0, 0, 0, -150, 78, -150, -150, -150, 0, 0, 79, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -150, 0, -150, 0, 0,
        // State 355
        -153, 0, 0, 0, 0, 0, 0, -153, -153, -153, -153, -153, 0, 0, -153, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -153, 0, -153, 0, 0,
        // State 356
        -154, 0, 0, 0, 0, 0, 0, -154, -154, -154, -154, -154, 0, 0, -154, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -154, 0, -154, 0, 0,
        // State 357
        -374, 0, 0, 0, 0, 0, 0, -374, -374, -374, -374, -374, 0, 0, -374, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -374, 0, -374, 0, 0,
        // State 358
        251, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 0, 0,
        // State 359
        215, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 102, 0, 0,
        // State 360
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 103, 0, 0, 0, 0,
        // State 361
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -148, 0, 0, 0, 0,
        // State 362
        -276, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -276, 0, 0, 0, 0, 0, -276, 0, 0, 0, 0, -276, 0, 0, 0, 0, 0, 0, -276, -276, 0, 0, -276, 0, -276, 0, 0, 0, 0, 0, 0, 0,
        // State 363
        275, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 386, 0, 0,
        // State 364
        -273, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -273, 0, 0, 0, 0, 0, -273, 0, 0, 0, 0, -273, 0, 0, 0, 0, 0, 0, -273, -273, 0, 0, -273, 0, -273, 0, 0, 0, 0, 0, 0, 0,
        // State 365
        -270, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -270, 0, 0, 0, 0, 0, -270, 0, 0, 0, 0, -270, 0, 0, 0, 0, 0, 0, -270, -270, 0, 0, -270, 0, -270, 0, 0, 0, 0, 0, 0, 0,
        // State 366
        -142, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -142, 0, 0, 0, 0, 0, -142, 0, 0, 0, 0, -142, 0, 0, 0, 0, 0, 0, -142, -142, 0, 0, -142, 0, -142, 0, 0, 0, 0, 0, 0, 0,
        // State 367
        299, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 387, 0, 0,
        // State 368
        -130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -130, 0, 0, 0, 0, 0, -130, 0, 0, 0, 0, -130, 0, 0, 0, 0, 0, 0, -130, -130, 0, 0, -130, 0, -130, 0, 0, 0, 0, 0, 0, 0,
        // State 369
        -118, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -118, 0, 0, 0, 0, 0, -118, 0, 0, 0, 0, -118, 0, 0, 0, 0, 0, 0, -118, -118, 0, 0, -118, 0, -118, 0, 0, 0, 0, 0, 0, 0,
        // State 370
        -127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -127, 0, 0, 0, 0, 0, -127, 0, 0, 0, 0, -127, 0, 0, 0, 0, 0, 0, -127, -127, 0, 0, -127, 0, -127, 0, 0, 0, 0, 0, 0, 0,
        // State 371
        -124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -124, 0, 0, 0, 0, 0, -124, 0, 0, 0, 0, -124, 0, 0, 0, 0, 0, 0, -124, -124, 0, 0, -124, 0, -124, 0, 0, 0, 0, 0, 0, 0,
        // State 372
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 234, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 388, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 373
        -340, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -340, 0, -340, 0, 0,
        // State 374
        -337, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -337, 0, -337, 0, 0,
        // State 375
        -343, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -343, 0, -343, 0, 0,
        // State 376
        -326, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -326, 0, -326, 0, 0,
        // State 377
        -331, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 107, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -331, 0, -331, 0, 0,
        // State 378
        -314, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -314, 0, -314, 0, 0,
        // State 379
        -320, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -320, 0, -320, 0, 0,
        // State 380
        -317, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -317, 0, -317, 0, 0,
        // State 381
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 108, 0, 0, 0, 0,
        // State 382
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 109, 0, 0, 0, 0,
        // State 383
        251, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 110, 0, 0,
        // State 384
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 111, 0, 0, 0, 0,
        // State 385
        -272, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -272, 0, 0, 0, 0, 0, -272, 0, 0, 0, 0, -272, 0, 0, 0, 0, 0, 0, -272, -272, 0, 0, -272, 0, -272, 0, 0, 0, 0, 0, 0, 0,
        // State 386
        -126, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -126, 0, 0, 0, 0, 0, -126, 0, 0, 0, 0, -126, 0, 0, 0, 0, 0, 0, -126, -126, 0, 0, -126, 0, -126, 0, 0, 0, 0, 0, 0, 0,
        // State 387
        -339, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -339, 0, -339, 0, 0,
        // State 388
        -322, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -322, 0, -322, 0, 0,
        // State 389
        -328, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -328, 0, -328, 0, 0,
        // State 390
        -325, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -325, 0, -325, 0, 0,
        // State 391
        -316, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -316, 0, -316, 0, 0,
        // State 392
        -313, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -313, 0, -313, 0, 0,
        // State 393
        -319, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -319, 0, -319, 0, 0,
        // State 394
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 115, 0, 0, 0, 0,
        // State 395
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 0, 0, 0, 0,
        // State 396
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 121, 0, 0, 0, 0,
        // State 397
        215, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 413, 0, 0,
        // State 398
        -250, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -250, 0, -250, 0, 0,
        // State 399
        -324, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -324, 0, -324, 0, 0,
        // State 400
        -321, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -321, 0, -321, 0, 0,
        // State 401
        -327, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -327, 0, -327, 0, 0,
        // State 402
        -315, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -315, 0, -315, 0, 0,
        // State 403
        215, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 421, 0, 0,
        // State 404
        -266, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -266, 0, -266, 0, 0,
        // State 405
        215, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 426, 0, 0,
        // State 406
        -242, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -242, 0, -242, 0, 0,
        // State 407
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 129, 0, 0, 0, 0,
        // State 408
        215, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 435, 0, 0,
        // State 409
        -218, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -218, 0, -218, 0, 0,
        // State 410
        251, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 438, 0, 0,
        // State 411
        -252, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -252, 0, -252, 0, 0,
        // State 412
        -249, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -249, 0, -249, 0, 0,
        // State 413
        215, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 441, 0, 0,
        // State 414
        -246, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -246, 0, -246, 0, 0,
        // State 415
        -323, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -323, 0, -323, 0, 0,
        // State 416
        215, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 444, 0, 0,
        // State 417
        -258, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -258, 0, -258, 0, 0,
        // State 418
        251, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 447, 0, 0,
        // State 419
        -268, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -268, 0, -268, 0, 0,
        // State 420
        -265, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -265, 0, -265, 0, 0,
        // State 421
        215, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 450, 0, 0,
        // State 422
        -262, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -262, 0, -262, 0, 0,
        // State 423
        251, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 451, 0, 0,
        // State 424
        -244, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -244, 0, -244, 0, 0,
        // State 425
        -241, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -241, 0, -241, 0, 0,
        // State 426
        215, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 454, 0, 0,
        // State 427
        -238, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -238, 0, -238, 0, 0,
        // State 428
        215, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 459, 0, 0,
        // State 429
        -234, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -234, 0, -234, 0, 0,
        // State 430
        215, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 464, 0, 0,
        // State 431
        -210, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -210, 0, -210, 0, 0,
        // State 432
        251, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 467, 0, 0,
        // State 433
        -220, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -220, 0, -220, 0, 0,
        // State 434
        -217, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -217, 0, -217, 0, 0,
        // State 435
        215, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 470, 0, 0,
        // State 436
        -214, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -214, 0, -214, 0, 0,
        // State 437
        -251, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -251, 0, -251, 0, 0,
        // State 438
        251, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 471, 0, 0,
        // State 439
        -248, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -248, 0, -248, 0, 0,
        // State 440
        -245, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -245, 0, -245, 0, 0,
        // State 441
        251, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 472, 0, 0,
        // State 442
        -260, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -260, 0, -260, 0, 0,
        // State 443
        -257, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -257, 0, -257, 0, 0,
        // State 444
        215, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 475, 0, 0,
        // State 445
        -254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -254, 0, -254, 0, 0,
        // State 446
        -267, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -267, 0, -267, 0, 0,
        // State 447
        251, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 476, 0, 0,
        // State 448
        -264, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -264, 0, -264, 0, 0,
        // State 449
        -261, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -261, 0, -261, 0, 0,
        // State 450
        -243, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -243, 0, -243, 0, 0,
        // State 451
        251, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 477, 0, 0,
        // State 452
        -240, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -240, 0, -240, 0, 0,
        // State 453
        -237, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -237, 0, -237, 0, 0,
        // State 454
        215, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 480, 0, 0,
        // State 455
        -226, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -226, 0, -226, 0, 0,
        // State 456
        251, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 483, 0, 0,
        // State 457
        -236, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -236, 0, -236, 0, 0,
        // State 458
        -233, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -233, 0, -233, 0, 0,
        // State 459
        215, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 486, 0, 0,
        // State 460
        -230, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -230, 0, -230, 0, 0,
        // State 461
        251, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 487, 0, 0,
        // State 462
        -212, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -212, 0, -212, 0, 0,
        // State 463
        -209, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -209, 0, -209, 0, 0,
        // State 464
        215, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 490, 0, 0,
        // State 465
        -206, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -206, 0, -206, 0, 0,
        // State 466
        -219, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -219, 0, -219, 0, 0,
        // State 467
        251, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 491, 0, 0,
        // State 468
        -216, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -216, 0, -216, 0, 0,
        // State 469
        -213, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -213, 0, -213, 0, 0,
        // State 470
        -247, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -247, 0, -247, 0, 0,
        // State 471
        -259, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -259, 0, -259, 0, 0,
        // State 472
        251, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 492, 0, 0,
        // State 473
        -256, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -256, 0, -256, 0, 0,
        // State 474
        -253, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -253, 0, -253, 0, 0,
        // State 475
        -263, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -263, 0, -263, 0, 0,
        // State 476
        -239, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -239, 0, -239, 0, 0,
        // State 477
        251, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 493, 0, 0,
        // State 478
        -228, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -228, 0, -228, 0, 0,
        // State 479
        -225, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -225, 0, -225, 0, 0,
        // State 480
        215, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 496, 0, 0,
        // State 481
        -222, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -222, 0, -222, 0, 0,
        // State 482
        -235, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -235, 0, -235, 0, 0,
        // State 483
        251, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 497, 0, 0,
        // State 484
        -232, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -232, 0, -232, 0, 0,
        // State 485
        -229, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -229, 0, -229, 0, 0,
        // State 486
        -211, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -211, 0, -211, 0, 0,
        // State 487
        251, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 498, 0, 0,
        // State 488
        -208, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -208, 0, -208, 0, 0,
        // State 489
        -205, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -205, 0, -205, 0, 0,
        // State 490
        -215, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -215, 0, -215, 0, 0,
        // State 491
        -255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -255, 0, -255, 0, 0,
        // State 492
        -227, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -227, 0, -227, 0, 0,
        // State 493
        251, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 499, 0, 0,
        // State 494
        -224, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -224, 0, -224, 0, 0,
        // State 495
        -221, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -221, 0, -221, 0, 0,
        // State 496
        -231, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -231, 0, -231, 0, 0,
        // State 497
        -207, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -207, 0, -207, 0, 0,
        // State 498
        -223, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -223, 0, -223, 0, 0,
    ];
    fn __action(state: i16, integer: usize) -> i16 {
        __ACTION[(state as usize) * 60 + integer]
    }
    const __EOF_ACTION: &[i16] = &[
        // State 0
        -347,
        // State 1
        0,
        // State 2
        -348,
        // State 3
        0,
        // State 4
        0,
        // State 5
        0,
        // State 6
        0,
        // State 7
        0,
        // State 8
        0,
        // State 9
        0,
        // State 10
        0,
        // State 11
        0,
        // State 12
        0,
        // State 13
        0,
        // State 14
        0,
        // State 15
        0,
        // State 16
        0,
        // State 17
        0,
        // State 18
        0,
        // State 19
        0,
        // State 20
        0,
        // State 21
        0,
        // State 22
        0,
        // State 23
        0,
        // State 24
        0,
        // State 25
        0,
        // State 26
        0,
        // State 27
        0,
        // State 28
        0,
        // State 29
        0,
        // State 30
        0,
        // State 31
        0,
        // State 32
        0,
        // State 33
        0,
        // State 34
        0,
        // State 35
        0,
        // State 36
        0,
        // State 37
        0,
        // State 38
        0,
        // State 39
        0,
        // State 40
        0,
        // State 41
        0,
        // State 42
        0,
        // State 43
        0,
        // State 44
        0,
        // State 45
        0,
        // State 46
        0,
        // State 47
        0,
        // State 48
        0,
        // State 49
        0,
        // State 50
        0,
        // State 51
        0,
        // State 52
        0,
        // State 53
        0,
        // State 54
        0,
        // State 55
        0,
        // State 56
        0,
        // State 57
        0,
        // State 58
        0,
        // State 59
        0,
        // State 60
        0,
        // State 61
        0,
        // State 62
        0,
        // State 63
        0,
        // State 64
        0,
        // State 65
        0,
        // State 66
        0,
        // State 67
        0,
        // State 68
        0,
        // State 69
        0,
        // State 70
        0,
        // State 71
        0,
        // State 72
        0,
        // State 73
        0,
        // State 74
        0,
        // State 75
        0,
        // State 76
        0,
        // State 77
        0,
        // State 78
        0,
        // State 79
        0,
        // State 80
        0,
        // State 81
        0,
        // State 82
        0,
        // State 83
        0,
        // State 84
        0,
        // State 85
        0,
        // State 86
        0,
        // State 87
        0,
        // State 88
        0,
        // State 89
        0,
        // State 90
        0,
        // State 91
        0,
        // State 92
        0,
        // State 93
        0,
        // State 94
        0,
        // State 95
        0,
        // State 96
        0,
        // State 97
        0,
        // State 98
        0,
        // State 99
        0,
        // State 100
        0,
        // State 101
        0,
        // State 102
        0,
        // State 103
        0,
        // State 104
        0,
        // State 105
        0,
        // State 106
        0,
        // State 107
        0,
        // State 108
        0,
        // State 109
        0,
        // State 110
        0,
        // State 111
        0,
        // State 112
        0,
        // State 113
        0,
        // State 114
        0,
        // State 115
        0,
        // State 116
        0,
        // State 117
        0,
        // State 118
        0,
        // State 119
        0,
        // State 120
        0,
        // State 121
        0,
        // State 122
        0,
        // State 123
        0,
        // State 124
        0,
        // State 125
        0,
        // State 126
        0,
        // State 127
        0,
        // State 128
        0,
        // State 129
        0,
        // State 130
        0,
        // State 131
        0,
        // State 132
        0,
        // State 133
        0,
        // State 134
        0,
        // State 135
        0,
        // State 136
        0,
        // State 137
        0,
        // State 138
        0,
        // State 139
        0,
        // State 140
        -376,
        // State 141
        -375,
        // State 142
        -379,
        // State 143
        0,
        // State 144
        -402,
        // State 145
        -377,
        // State 146
        -14,
        // State 147
        -378,
        // State 148
        0,
        // State 149
        0,
        // State 150
        0,
        // State 151
        -349,
        // State 152
        -15,
        // State 153
        0,
        // State 154
        -16,
        // State 155
        0,
        // State 156
        -184,
        // State 157
        0,
        // State 158
        0,
        // State 159
        0,
        // State 160
        0,
        // State 161
        0,
        // State 162
        0,
        // State 163
        0,
        // State 164
        0,
        // State 165
        0,
        // State 166
        0,
        // State 167
        0,
        // State 168
        0,
        // State 169
        0,
        // State 170
        0,
        // State 171
        0,
        // State 172
        0,
        // State 173
        0,
        // State 174
        0,
        // State 175
        -17,
        // State 176
        0,
        // State 177
        0,
        // State 178
        0,
        // State 179
        0,
        // State 180
        0,
        // State 181
        0,
        // State 182
        0,
        // State 183
        0,
        // State 184
        0,
        // State 185
        0,
        // State 186
        0,
        // State 187
        0,
        // State 188
        0,
        // State 189
        0,
        // State 190
        -178,
        // State 191
        0,
        // State 192
        0,
        // State 193
        0,
        // State 194
        0,
        // State 195
        -283,
        // State 196
        0,
        // State 197
        -365,
        // State 198
        0,
        // State 199
        0,
        // State 200
        0,
        // State 201
        0,
        // State 202
        0,
        // State 203
        0,
        // State 204
        -137,
        // State 205
        0,
        // State 206
        0,
        // State 207
        0,
        // State 208
        0,
        // State 209
        0,
        // State 210
        0,
        // State 211
        -180,
        // State 212
        0,
        // State 213
        0,
        // State 214
        0,
        // State 215
        -177,
        // State 216
        0,
        // State 217
        -174,
        // State 218
        0,
        // State 219
        0,
        // State 220
        0,
        // State 221
        0,
        // State 222
        -285,
        // State 223
        0,
        // State 224
        -282,
        // State 225
        0,
        // State 226
        -279,
        // State 227
        0,
        // State 228
        -367,
        // State 229
        0,
        // State 230
        -364,
        // State 231
        0,
        // State 232
        -361,
        // State 233
        0,
        // State 234
        -387,
        // State 235
        0,
        // State 236
        0,
        // State 237
        -139,
        // State 238
        0,
        // State 239
        -136,
        // State 240
        0,
        // State 241
        -145,
        // State 242
        0,
        // State 243
        -133,
        // State 244
        0,
        // State 245
        -121,
        // State 246
        0,
        // State 247
        0,
        // State 248
        0,
        // State 249
        0,
        // State 250
        0,
        // State 251
        -179,
        // State 252
        0,
        // State 253
        0,
        // State 254
        0,
        // State 255
        0,
        // State 256
        0,
        // State 257
        0,
        // State 258
        0,
        // State 259
        0,
        // State 260
        0,
        // State 261
        0,
        // State 262
        0,
        // State 263
        0,
        // State 264
        0,
        // State 265
        0,
        // State 266
        0,
        // State 267
        0,
        // State 268
        0,
        // State 269
        -176,
        // State 270
        -173,
        // State 271
        0,
        // State 272
        0,
        // State 273
        -275,
        // State 274
        0,
        // State 275
        -284,
        // State 276
        0,
        // State 277
        -281,
        // State 278
        -278,
        // State 279
        0,
        // State 280
        -366,
        // State 281
        0,
        // State 282
        -363,
        // State 283
        -360,
        // State 284
        -389,
        // State 285
        -386,
        // State 286
        0,
        // State 287
        -138,
        // State 288
        0,
        // State 289
        -147,
        // State 290
        -135,
        // State 291
        0,
        // State 292
        -123,
        // State 293
        0,
        // State 294
        -144,
        // State 295
        -132,
        // State 296
        0,
        // State 297
        -120,
        // State 298
        0,
        // State 299
        -141,
        // State 300
        0,
        // State 301
        -129,
        // State 302
        -117,
        // State 303
        0,
        // State 304
        0,
        // State 305
        0,
        // State 306
        0,
        // State 307
        0,
        // State 308
        0,
        // State 309
        0,
        // State 310
        0,
        // State 311
        0,
        // State 312
        0,
        // State 313
        0,
        // State 314
        0,
        // State 315
        0,
        // State 316
        0,
        // State 317
        0,
        // State 318
        -175,
        // State 319
        0,
        // State 320
        -277,
        // State 321
        -274,
        // State 322
        0,
        // State 323
        -271,
        // State 324
        -280,
        // State 325
        -362,
        // State 326
        -388,
        // State 327
        0,
        // State 328
        -146,
        // State 329
        -134,
        // State 330
        0,
        // State 331
        -122,
        // State 332
        -143,
        // State 333
        0,
        // State 334
        -131,
        // State 335
        -119,
        // State 336
        -140,
        // State 337
        0,
        // State 338
        -128,
        // State 339
        -116,
        // State 340
        -125,
        // State 341
        0,
        // State 342
        0,
        // State 343
        0,
        // State 344
        0,
        // State 345
        0,
        // State 346
        0,
        // State 347
        0,
        // State 348
        0,
        // State 349
        0,
        // State 350
        0,
        // State 351
        0,
        // State 352
        0,
        // State 353
        0,
        // State 354
        0,
        // State 355
        0,
        // State 356
        0,
        // State 357
        0,
        // State 358
        0,
        // State 359
        0,
        // State 360
        0,
        // State 361
        0,
        // State 362
        -276,
        // State 363
        0,
        // State 364
        -273,
        // State 365
        -270,
        // State 366
        -142,
        // State 367
        0,
        // State 368
        -130,
        // State 369
        -118,
        // State 370
        -127,
        // State 371
        -124,
        // State 372
        0,
        // State 373
        0,
        // State 374
        0,
        // State 375
        0,
        // State 376
        0,
        // State 377
        0,
        // State 378
        0,
        // State 379
        0,
        // State 380
        0,
        // State 381
        0,
        // State 382
        0,
        // State 383
        0,
        // State 384
        0,
        // State 385
        -272,
        // State 386
        -126,
        // State 387
        0,
        // State 388
        0,
        // State 389
        0,
        // State 390
        0,
        // State 391
        0,
        // State 392
        0,
        // State 393
        0,
        // State 394
        0,
        // State 395
        0,
        // State 396
        0,
        // State 397
        0,
        // State 398
        0,
        // State 399
        0,
        // State 400
        0,
        // State 401
        0,
        // State 402
        0,
        // State 403
        0,
        // State 404
        0,
        // State 405
        0,
        // State 406
        0,
        // State 407
        0,
        // State 408
        0,
        // State 409
        0,
        // State 410
        0,
        // State 411
        0,
        // State 412
        0,
        // State 413
        0,
        // State 414
        0,
        // State 415
        0,
        // State 416
        0,
        // State 417
        0,
        // State 418
        0,
        // State 419
        0,
        // State 420
        0,
        // State 421
        0,
        // State 422
        0,
        // State 423
        0,
        // State 424
        0,
        // State 425
        0,
        // State 426
        0,
        // State 427
        0,
        // State 428
        0,
        // State 429
        0,
        // State 430
        0,
        // State 431
        0,
        // State 432
        0,
        // State 433
        0,
        // State 434
        0,
        // State 435
        0,
        // State 436
        0,
        // State 437
        0,
        // State 438
        0,
        // State 439
        0,
        // State 440
        0,
        // State 441
        0,
        // State 442
        0,
        // State 443
        0,
        // State 444
        0,
        // State 445
        0,
        // State 446
        0,
        // State 447
        0,
        // State 448
        0,
        // State 449
        0,
        // State 450
        0,
        // State 451
        0,
        // State 452
        0,
        // State 453
        0,
        // State 454
        0,
        // State 455
        0,
        // State 456
        0,
        // State 457
        0,
        // State 458
        0,
        // State 459
        0,
        // State 460
        0,
        // State 461
        0,
        // State 462
        0,
        // State 463
        0,
        // State 464
        0,
        // State 465
        0,
        // State 466
        0,
        // State 467
        0,
        // State 468
        0,
        // State 469
        0,
        // State 470
        0,
        // State 471
        0,
        // State 472
        0,
        // State 473
        0,
        // State 474
        0,
        // State 475
        0,
        // State 476
        0,
        // State 477
        0,
        // State 478
        0,
        // State 479
        0,
        // State 480
        0,
        // State 481
        0,
        // State 482
        0,
        // State 483
        0,
        // State 484
        0,
        // State 485
        0,
        // State 486
        0,
        // State 487
        0,
        // State 488
        0,
        // State 489
        0,
        // State 490
        0,
        // State 491
        0,
        // State 492
        0,
        // State 493
        0,
        // State 494
        0,
        // State 495
        0,
        // State 496
        0,
        // State 497
        0,
        // State 498
        0,
    ];
    fn __goto(state: i16, nt: usize) -> i16 {
        match nt {
            1 => match state {
                2 => 8,
                _ => 1,
            },
            7 => 2,
            14 => 60,
            17 => match state {
                32 => 46,
                _ => 31,
            },
            20 => 21,
            23 => match state {
                30 => 45,
                44 => 64,
                65 => 82,
                _ => 28,
            },
            26 => 19,
            29 => match state {
                13 => 27,
                40 => 59,
                56 => 72,
                57 => 73,
                71 => 84,
                _ => 17,
            },
            32 => match state {
                36 => 51,
                37 => 53,
                39 => 55,
                50 => 67,
                52 => 69,
                54 => 70,
                68 => 83,
                _ => 38,
            },
            35 => match state {
                26 => 43,
                62 => 79,
                80 => 91,
                102 => 111,
                107 => 115,
                108 => 117,
                110 => 121,
                112 => 123,
                114 => 124,
                116 => 126,
                118 => 127,
                119 => 129,
                120 => 131,
                122 => 133,
                125 => 134,
                128 => 135,
                130 => 137,
                132 => 138,
                136 => 139,
                _ => 23,
            },
            47 => 165,
            48 => 140,
            49 => match state {
                89 => 381,
                90 => 382,
                92 => 384,
                99 => 394,
                100 => 395,
                101 => 396,
                109 => 407,
                _ => 360,
            },
            50 => match state {
                60 => 311,
                61 => 315,
                63 => 317,
                _ => 253,
            },
            51 => match state {
                77 => 355,
                78 => 356,
                _ => 254,
            },
            52 => match state {
                75 => 353,
                76 => 354,
                _ => 255,
            },
            54 => 256,
            55 => match state {
                16 => 196,
                31 => 227,
                32 => 231,
                46 => 281,
                _ => 178,
            },
            57 => 182,
            58 => 166,
            59 => match state {
                21 => 205,
                _ => 179,
            },
            61 => match state {
                42 | 60..=61 | 63 | 75..=78 => 257,
                _ => 183,
            },
            62 => match state {
                15 => 194,
                28 => 221,
                30 => 225,
                44 => 272,
                45 => 276,
                64 => 319,
                65 => 322,
                82 => 363,
                _ => 141,
            },
            64 => match state {
                33 => 48,
                34 => 49,
                47 => 66,
                _ => 35,
            },
            65 => match state {
                3 => 155,
                5 => 163,
                6 => 164,
                9 => 176,
                10 => 177,
                13 => 191,
                14 => 193,
                17 => 198,
                19 => 201,
                22 => 209,
                25 => 213,
                27 => 218,
                35 => 234,
                40 => 248,
                42 | 60..=61 | 63 | 75..=78 => 258,
                48 => 284,
                49 => 285,
                56 => 303,
                57 => 305,
                59 => 308,
                66 => 326,
                71 => 341,
                72 => 343,
                73 => 346,
                74 => 350,
                84 => 372,
                85 => 376,
                86 => 378,
                87 => 379,
                88 => 380,
                93 => 388,
                94 => 389,
                95 => 390,
                96 => 391,
                97 => 392,
                98 => 393,
                103 => 399,
                104 => 400,
                105 => 401,
                106 => 402,
                113 => 415,
                _ => 157,
            },
            67 => match state {
                4 | 20 | 36..=39 | 50..=55 | 67..=70 | 83 => 158,
                42 | 60..=61 | 63 | 75..=78 => 259,
                58 => 307,
                _ => 184,
            },
            68 => match state {
                41 => 252,
                _ => 185,
            },
            69 => 159,
            70 => 24,
            71 => 186,
            72 => 167,
            73 => 142,
            74 => 3,
            75 => 4,
            76 => 5,
            77 => 6,
            78 => 143,
            79 => 25,
            86 => match state {
                20 => 203,
                36 => 236,
                37 => 238,
                38 => 240,
                39 => 244,
                50 => 286,
                51 => 288,
                52 => 291,
                53 => 293,
                54 => 296,
                55 => 300,
                67 => 327,
                68 => 330,
                69 => 333,
                70 => 337,
                83 => 367,
                _ => 160,
            },
            88 => 144,
            92 => match state {
                23 => 210,
                24 => 212,
                26 => 216,
                43 => 268,
                62 => 316,
                79 => 358,
                80 => 359,
                91 => 383,
                102 => 397,
                107 => 403,
                108 => 405,
                110 => 408,
                111 => 410,
                112 => 413,
                114 => 416,
                115 => 418,
                116 => 421,
                117 => 423,
                118 => 426,
                119 => 428,
                120 => 430,
                121 => 432,
                122 => 435,
                123 => 438,
                124 => 441,
                125 => 444,
                126 => 447,
                127 => 451,
                128 => 454,
                129 => 456,
                130 => 459,
                131 => 461,
                132 => 464,
                133 => 467,
                134 => 472,
                135 => 477,
                136 => 480,
                137 => 483,
                138 => 487,
                139 => 493,
                _ => 187,
            },
            94 => 260,
            95 => 168,
            96 => 145,
            97 => 261,
            98 => match state {
                1 => 152,
                2 => 154,
                8 => 175,
                _ => 146,
            },
            99 => 262,
            101 => 169,
            102 => 147,
            103 => match state {
                0..=2 | 8 => 7,
                11 | 16 | 21 | 31..=32 | 46 => 22,
                _ => 29,
            },
            _ => 0,
        }
    }
    const __TERMINAL: &[&str] = &[
        r###""\n""###,
        r###""!""###,
        r###""#!""###,
        r###""$""###,
        r###""%""###,
        r###""&""###,
        r###""(""###,
        r###"")""###,
        r###""*""###,
        r###""+""###,
        r###"",""###,
        r###""-""###,
        r###""->""###,
        r###"".""###,
        r###""/""###,
        r###"":""###,
        r###"";""###,
        r###""<""###,
        r###""=""###,
        r###""=>""###,
        r###"">""###,
        r###""?""###,
        r###""@""###,
        r###""[""###,
        r###""]""###,
        r###""^""###,
        r###""action""###,
        r###""comment""###,
        r###""effect""###,
        r###""else""###,
        r###""enum""###,
        r###""eof""###,
        r###""false""###,
        r###""float""###,
        r###""fn""###,
        r###""for""###,
        r###""from""###,
        r###""ident""###,
        r###""if""###,
        r###""impl""###,
        r###""import""###,
        r###""int""###,
        r###""let""###,
        r###""match""###,
        r###""none""###,
        r###""null""###,
        r###""priv""###,
        r###""pub""###,
        r###""self""###,
        r###""string""###,
        r###""struct""###,
        r###""true""###,
        r###""use""###,
        r###""when""###,
        r###""where""###,
        r###""{""###,
        r###""|""###,
        r###""}""###,
        r###""~""###,
    ];
    fn __expected_tokens(__state: i16) -> alloc::vec::Vec<alloc::string::String> {
        __TERMINAL.iter().enumerate().filter_map(|(index, terminal)| {
            let next_state = __action(__state, index);
            if next_state == 0 {
                None
            } else {
                Some(alloc::string::ToString::to_string(terminal))
            }
        }).collect()
    }
    fn __expected_tokens_from_states<
        'input,
        'err,
        '__2,
    >(
        __states: &[i16],
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> alloc::vec::Vec<alloc::string::String>
    where
        'input: 'err,
        'static: 'err,
    {
        __TERMINAL.iter().enumerate().filter_map(|(index, terminal)| {
            if __accepts(None, __states, Some(index), core::marker::PhantomData::<(&(), &())>) {
                Some(alloc::string::ToString::to_string(terminal))
            } else {
                None
            }
        }).collect()
    }
    struct __StateMachine<'input, 'err, '__2>
    where 'input: 'err, 'static: 'err
    {
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &'__2 dyn Db,
        __phantom: core::marker::PhantomData<(&'input (), &'err ())>,
    }
    impl<'input, 'err, '__2> __state_machine::ParserDefinition for __StateMachine<'input, 'err, '__2>
    where 'input: 'err, 'static: 'err
    {
        type Location = Location;
        type Error = &'static str;
        type Token = Token<'input>;
        type TokenIndex = usize;
        type Symbol = __Symbol<'input>;
        type Success = Module;
        type StateIndex = i16;
        type Action = i16;
        type ReduceIndex = i16;
        type NonterminalIndex = usize;

        #[inline]
        fn start_location(&self) -> Self::Location {
              Default::default()
        }

        #[inline]
        fn start_state(&self) -> Self::StateIndex {
              0
        }

        #[inline]
        fn token_to_index(&self, token: &Self::Token) -> Option<usize> {
            __token_to_integer(token, core::marker::PhantomData::<(&(), &())>)
        }

        #[inline]
        fn action(&self, state: i16, integer: usize) -> i16 {
            __action(state, integer)
        }

        #[inline]
        fn error_action(&self, state: i16) -> i16 {
            __action(state, 60 - 1)
        }

        #[inline]
        fn eof_action(&self, state: i16) -> i16 {
            __EOF_ACTION[state as usize]
        }

        #[inline]
        fn goto(&self, state: i16, nt: usize) -> i16 {
            __goto(state, nt)
        }

        fn token_to_symbol(&self, token_index: usize, token: Self::Token) -> Self::Symbol {
            __token_to_symbol(token_index, token, core::marker::PhantomData::<(&(), &())>)
        }

        fn expected_tokens(&self, state: i16) -> alloc::vec::Vec<alloc::string::String> {
            __expected_tokens(state)
        }

        fn expected_tokens_from_states(&self, states: &[i16]) -> alloc::vec::Vec<alloc::string::String> {
            __expected_tokens_from_states(states, core::marker::PhantomData::<(&(), &())>)
        }

        #[inline]
        fn uses_error_recovery(&self) -> bool {
            true
        }

        #[inline]
        fn error_recovery_symbol(
            &self,
            recovery: __state_machine::ErrorRecovery<Self>,
        ) -> Self::Symbol {
            __Symbol::Variant4(recovery)
        }

        fn reduce(
            &mut self,
            action: i16,
            start_location: Option<&Self::Location>,
            states: &mut alloc::vec::Vec<i16>,
            symbols: &mut alloc::vec::Vec<__state_machine::SymbolTriple<Self>>,
        ) -> Option<__state_machine::ParseResult<Self>> {
            __reduce(
                self.errors,
                self.db,
                action,
                start_location,
                states,
                symbols,
                core::marker::PhantomData::<(&(), &())>,
            )
        }

        fn simulate_reduce(&self, action: i16) -> __state_machine::SimulatedReduce<Self> {
            __simulate_reduce(action, core::marker::PhantomData::<(&(), &())>)
        }
    }
    fn __token_to_integer<
        'input,
        'err,
    >(
        __token: &Token<'input>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> Option<usize>
    {
        match *__token {
            Token::NewLine if true => Some(0),
            Token::Exclamation if true => Some(1),
            Token::Shebang if true => Some(2),
            Token::Dollar if true => Some(3),
            Token::Percent if true => Some(4),
            Token::Ampersand if true => Some(5),
            Token::LeftParen if true => Some(6),
            Token::RightParen if true => Some(7),
            Token::Multiply if true => Some(8),
            Token::Plus if true => Some(9),
            Token::Comma if true => Some(10),
            Token::Minus if true => Some(11),
            Token::Arrow if true => Some(12),
            Token::Dot if true => Some(13),
            Token::Divide if true => Some(14),
            Token::Colon if true => Some(15),
            Token::Semicolon if true => Some(16),
            Token::LessThan if true => Some(17),
            Token::Equals if true => Some(18),
            Token::FatArrow if true => Some(19),
            Token::GreaterThan if true => Some(20),
            Token::Question if true => Some(21),
            Token::At if true => Some(22),
            Token::LeftBracket if true => Some(23),
            Token::RightBracket if true => Some(24),
            Token::Caret if true => Some(25),
            Token::Word(Word::Action) if true => Some(26),
            Token::Comment(_) if true => Some(27),
            Token::Word(Word::Effect) if true => Some(28),
            Token::Word(Word::Else) if true => Some(29),
            Token::Word(Word::Enum) if true => Some(30),
            Token::Eof if true => Some(31),
            Token::Word(Word::False) if true => Some(32),
            Token::Float(_) if true => Some(33),
            Token::Word(Word::Fn) if true => Some(34),
            Token::Word(Word::For) if true => Some(35),
            Token::Word(Word::From) if true => Some(36),
            Token::Word(Word::Ident(_)) if true => Some(37),
            Token::Word(Word::If) if true => Some(38),
            Token::Word(Word::Impl) if true => Some(39),
            Token::Word(Word::Import) if true => Some(40),
            Token::Integer(_) if true => Some(41),
            Token::Word(Word::Let) if true => Some(42),
            Token::Word(Word::Match) if true => Some(43),
            Token::Word(Word::None) if true => Some(44),
            Token::Word(Word::Null) if true => Some(45),
            Token::Word(Word::Priv) if true => Some(46),
            Token::Word(Word::Pub) if true => Some(47),
            Token::Word(Word::Self_) if true => Some(48),
            Token::String(_) if true => Some(49),
            Token::Word(Word::Struct) if true => Some(50),
            Token::Word(Word::True) if true => Some(51),
            Token::Word(Word::Use) if true => Some(52),
            Token::Word(Word::When) if true => Some(53),
            Token::Word(Word::Where) if true => Some(54),
            Token::LeftBrace if true => Some(55),
            Token::Pipe if true => Some(56),
            Token::RightBrace if true => Some(57),
            Token::Tilde if true => Some(58),
            _ => None,
        }
    }
    fn __token_to_symbol<
        'input,
        'err,
    >(
        __token_index: usize,
        __token: Token<'input>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> __Symbol<'input>
    {
        #[allow(clippy::manual_range_patterns)]match __token_index {
            0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 28 | 29 | 30 | 31 | 32 | 34 | 35 | 36 | 38 | 39 | 40 | 42 | 43 | 44 | 45 | 46 | 47 | 48 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 | 58 => __Symbol::Variant0(__token),
            27 | 37 | 49 => match __token {
                Token::Comment(__tok0) | Token::Word(Word::Ident(__tok0)) | Token::String(__tok0) if true => __Symbol::Variant1(__tok0),
                _ => unreachable!(),
            },
            33 => match __token {
                Token::Float(__tok0) if true => __Symbol::Variant2(__tok0),
                _ => unreachable!(),
            },
            41 => match __token {
                Token::Integer(__tok0) if true => __Symbol::Variant3(__tok0),
                _ => unreachable!(),
            },
            _ => unreachable!(),
        }
    }
    fn __simulate_reduce<
        'input,
        'err,
        '__2,
    >(
        __reduce_index: i16,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> __state_machine::SimulatedReduce<__StateMachine<'input, 'err, '__2>>
    where
        'input: 'err,
        'static: 'err,
    {
        match __reduce_index {
            0 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 0,
                }
            }
            1 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 0,
                }
            }
            2 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 1,
                }
            }
            3 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 1,
                }
            }
            4 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 2,
                }
            }
            5 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 2,
                }
            }
            6 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 3,
                }
            }
            7 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 4,
                }
            }
            8 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 4,
                }
            }
            9 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 5,
                }
            }
            10 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 5,
                }
            }
            11 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 6,
                }
            }
            12 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 6,
                }
            }
            13 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 7,
                }
            }
            14 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 7,
                }
            }
            15 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 7,
                }
            }
            16 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 7,
                }
            }
            17 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 8,
                }
            }
            18 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 8,
                }
            }
            19 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 9,
                }
            }
            20 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 10,
                }
            }
            21 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 10,
                }
            }
            22 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 11,
                }
            }
            23 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 12,
                }
            }
            24 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 13,
                }
            }
            25 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 13,
                }
            }
            26 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 14,
                }
            }
            27 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 14,
                }
            }
            28 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 15,
                }
            }
            29 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 16,
                }
            }
            30 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 16,
                }
            }
            31 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 17,
                }
            }
            32 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 17,
                }
            }
            33 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 18,
                }
            }
            34 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 19,
                }
            }
            35 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 19,
                }
            }
            36 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 20,
                }
            }
            37 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 20,
                }
            }
            38 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 21,
                }
            }
            39 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 22,
                }
            }
            40 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 22,
                }
            }
            41 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 23,
                }
            }
            42 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 23,
                }
            }
            43 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 24,
                }
            }
            44 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 25,
                }
            }
            45 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 25,
                }
            }
            46 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 26,
                }
            }
            47 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 26,
                }
            }
            48 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 27,
                }
            }
            49 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 28,
                }
            }
            50 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 28,
                }
            }
            51 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 29,
                }
            }
            52 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 29,
                }
            }
            53 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 30,
                }
            }
            54 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 31,
                }
            }
            55 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 31,
                }
            }
            56 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 32,
                }
            }
            57 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 32,
                }
            }
            58 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 33,
                }
            }
            59 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 34,
                }
            }
            60 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 34,
                }
            }
            61 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 35,
                }
            }
            62 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 35,
                }
            }
            63 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 36,
                }
            }
            64 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 37,
                }
            }
            65 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 38,
                }
            }
            66 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 38,
                }
            }
            67 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 39,
                }
            }
            68 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 39,
                }
            }
            69 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 39,
                }
            }
            70 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 40,
                }
            }
            71 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 40,
                }
            }
            72 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 40,
                }
            }
            73 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 40,
                }
            }
            74 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 40,
                }
            }
            75 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 40,
                }
            }
            76 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 40,
                }
            }
            77 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 40,
                }
            }
            78 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 41,
                }
            }
            79 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 41,
                }
            }
            80 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 41,
                }
            }
            81 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 41,
                }
            }
            82 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 41,
                }
            }
            83 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 41,
                }
            }
            84 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 41,
                }
            }
            85 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 41,
                }
            }
            86 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 42,
                }
            }
            87 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 42,
                }
            }
            88 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 42,
                }
            }
            89 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 42,
                }
            }
            90 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 42,
                }
            }
            91 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 42,
                }
            }
            92 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 42,
                }
            }
            93 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 42,
                }
            }
            94 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 43,
                }
            }
            95 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 43,
                }
            }
            96 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 43,
                }
            }
            97 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 43,
                }
            }
            98 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 43,
                }
            }
            99 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 43,
                }
            }
            100 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 43,
                }
            }
            101 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 43,
                }
            }
            102 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 44,
                }
            }
            103 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 44,
                }
            }
            104 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 44,
                }
            }
            105 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 44,
                }
            }
            106 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 45,
                }
            }
            107 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 45,
                }
            }
            108 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 45,
                }
            }
            109 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 45,
                }
            }
            110 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 46,
                }
            }
            111 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 46,
                }
            }
            112 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 46,
                }
            }
            113 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 46,
                }
            }
            114 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 47,
                }
            }
            115 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 8,
                    nonterminal_produced: 48,
                }
            }
            116 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 7,
                    nonterminal_produced: 48,
                }
            }
            117 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 9,
                    nonterminal_produced: 48,
                }
            }
            118 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 8,
                    nonterminal_produced: 48,
                }
            }
            119 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 7,
                    nonterminal_produced: 48,
                }
            }
            120 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 6,
                    nonterminal_produced: 48,
                }
            }
            121 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 8,
                    nonterminal_produced: 48,
                }
            }
            122 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 7,
                    nonterminal_produced: 48,
                }
            }
            123 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 9,
                    nonterminal_produced: 48,
                }
            }
            124 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 8,
                    nonterminal_produced: 48,
                }
            }
            125 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 10,
                    nonterminal_produced: 48,
                }
            }
            126 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 9,
                    nonterminal_produced: 48,
                }
            }
            127 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 8,
                    nonterminal_produced: 48,
                }
            }
            128 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 7,
                    nonterminal_produced: 48,
                }
            }
            129 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 9,
                    nonterminal_produced: 48,
                }
            }
            130 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 8,
                    nonterminal_produced: 48,
                }
            }
            131 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 7,
                    nonterminal_produced: 48,
                }
            }
            132 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 6,
                    nonterminal_produced: 48,
                }
            }
            133 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 8,
                    nonterminal_produced: 48,
                }
            }
            134 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 7,
                    nonterminal_produced: 48,
                }
            }
            135 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 6,
                    nonterminal_produced: 48,
                }
            }
            136 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 48,
                }
            }
            137 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 7,
                    nonterminal_produced: 48,
                }
            }
            138 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 6,
                    nonterminal_produced: 48,
                }
            }
            139 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 8,
                    nonterminal_produced: 48,
                }
            }
            140 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 7,
                    nonterminal_produced: 48,
                }
            }
            141 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 9,
                    nonterminal_produced: 48,
                }
            }
            142 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 8,
                    nonterminal_produced: 48,
                }
            }
            143 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 7,
                    nonterminal_produced: 48,
                }
            }
            144 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 6,
                    nonterminal_produced: 48,
                }
            }
            145 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 8,
                    nonterminal_produced: 48,
                }
            }
            146 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 7,
                    nonterminal_produced: 48,
                }
            }
            147 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 49,
                }
            }
            148 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 50,
                }
            }
            149 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 50,
                }
            }
            150 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 50,
                }
            }
            151 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 51,
                }
            }
            152 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 52,
                }
            }
            153 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 52,
                }
            }
            154 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 52,
                }
            }
            155 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 53,
                }
            }
            156 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 53,
                }
            }
            157 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 54,
                }
            }
            158 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 55,
                }
            }
            159 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 56,
                }
            }
            160 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 56,
                }
            }
            161 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 57,
                }
            }
            162 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 57,
                }
            }
            163 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 58,
                }
            }
            164 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 59,
                }
            }
            165 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 59,
                }
            }
            166 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 60,
                }
            }
            167 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 60,
                }
            }
            168 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 61,
                }
            }
            169 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 61,
                }
            }
            170 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 61,
                }
            }
            171 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 61,
                }
            }
            172 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 6,
                    nonterminal_produced: 62,
                }
            }
            173 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 62,
                }
            }
            174 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 7,
                    nonterminal_produced: 62,
                }
            }
            175 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 6,
                    nonterminal_produced: 62,
                }
            }
            176 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 62,
                }
            }
            177 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 62,
                }
            }
            178 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 6,
                    nonterminal_produced: 62,
                }
            }
            179 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 62,
                }
            }
            180 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 63,
                }
            }
            181 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 63,
                }
            }
            182 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 64,
                }
            }
            183 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 65,
                }
            }
            184 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 66,
                }
            }
            185 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 66,
                }
            }
            186 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 67,
                }
            }
            187 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 67,
                }
            }
            188 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 67,
                }
            }
            189 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 68,
                }
            }
            190 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 68,
                }
            }
            191 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 69,
                }
            }
            192 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 69,
                }
            }
            193 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 69,
                }
            }
            194 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 69,
                }
            }
            195 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 70,
                }
            }
            196 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 6,
                    nonterminal_produced: 71,
                }
            }
            197 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 71,
                }
            }
            198 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 7,
                    nonterminal_produced: 71,
                }
            }
            199 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 6,
                    nonterminal_produced: 71,
                }
            }
            200 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 71,
                }
            }
            201 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 71,
                }
            }
            202 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 6,
                    nonterminal_produced: 71,
                }
            }
            203 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 71,
                }
            }
            204 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 11,
                    nonterminal_produced: 71,
                }
            }
            205 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 10,
                    nonterminal_produced: 71,
                }
            }
            206 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 12,
                    nonterminal_produced: 71,
                }
            }
            207 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 11,
                    nonterminal_produced: 71,
                }
            }
            208 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 10,
                    nonterminal_produced: 71,
                }
            }
            209 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 9,
                    nonterminal_produced: 71,
                }
            }
            210 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 11,
                    nonterminal_produced: 71,
                }
            }
            211 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 10,
                    nonterminal_produced: 71,
                }
            }
            212 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 10,
                    nonterminal_produced: 71,
                }
            }
            213 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 9,
                    nonterminal_produced: 71,
                }
            }
            214 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 11,
                    nonterminal_produced: 71,
                }
            }
            215 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 10,
                    nonterminal_produced: 71,
                }
            }
            216 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 9,
                    nonterminal_produced: 71,
                }
            }
            217 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 8,
                    nonterminal_produced: 71,
                }
            }
            218 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 10,
                    nonterminal_produced: 71,
                }
            }
            219 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 9,
                    nonterminal_produced: 71,
                }
            }
            220 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 12,
                    nonterminal_produced: 71,
                }
            }
            221 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 11,
                    nonterminal_produced: 71,
                }
            }
            222 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 13,
                    nonterminal_produced: 71,
                }
            }
            223 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 12,
                    nonterminal_produced: 71,
                }
            }
            224 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 11,
                    nonterminal_produced: 71,
                }
            }
            225 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 10,
                    nonterminal_produced: 71,
                }
            }
            226 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 12,
                    nonterminal_produced: 71,
                }
            }
            227 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 11,
                    nonterminal_produced: 71,
                }
            }
            228 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 11,
                    nonterminal_produced: 71,
                }
            }
            229 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 10,
                    nonterminal_produced: 71,
                }
            }
            230 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 12,
                    nonterminal_produced: 71,
                }
            }
            231 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 11,
                    nonterminal_produced: 71,
                }
            }
            232 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 10,
                    nonterminal_produced: 71,
                }
            }
            233 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 9,
                    nonterminal_produced: 71,
                }
            }
            234 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 11,
                    nonterminal_produced: 71,
                }
            }
            235 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 10,
                    nonterminal_produced: 71,
                }
            }
            236 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 10,
                    nonterminal_produced: 71,
                }
            }
            237 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 9,
                    nonterminal_produced: 71,
                }
            }
            238 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 11,
                    nonterminal_produced: 71,
                }
            }
            239 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 10,
                    nonterminal_produced: 71,
                }
            }
            240 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 9,
                    nonterminal_produced: 71,
                }
            }
            241 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 8,
                    nonterminal_produced: 71,
                }
            }
            242 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 10,
                    nonterminal_produced: 71,
                }
            }
            243 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 9,
                    nonterminal_produced: 71,
                }
            }
            244 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 9,
                    nonterminal_produced: 71,
                }
            }
            245 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 8,
                    nonterminal_produced: 71,
                }
            }
            246 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 10,
                    nonterminal_produced: 71,
                }
            }
            247 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 9,
                    nonterminal_produced: 71,
                }
            }
            248 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 8,
                    nonterminal_produced: 71,
                }
            }
            249 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 7,
                    nonterminal_produced: 71,
                }
            }
            250 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 9,
                    nonterminal_produced: 71,
                }
            }
            251 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 8,
                    nonterminal_produced: 71,
                }
            }
            252 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 11,
                    nonterminal_produced: 71,
                }
            }
            253 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 10,
                    nonterminal_produced: 71,
                }
            }
            254 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 12,
                    nonterminal_produced: 71,
                }
            }
            255 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 11,
                    nonterminal_produced: 71,
                }
            }
            256 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 10,
                    nonterminal_produced: 71,
                }
            }
            257 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 9,
                    nonterminal_produced: 71,
                }
            }
            258 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 11,
                    nonterminal_produced: 71,
                }
            }
            259 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 10,
                    nonterminal_produced: 71,
                }
            }
            260 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 10,
                    nonterminal_produced: 71,
                }
            }
            261 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 9,
                    nonterminal_produced: 71,
                }
            }
            262 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 11,
                    nonterminal_produced: 71,
                }
            }
            263 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 10,
                    nonterminal_produced: 71,
                }
            }
            264 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 9,
                    nonterminal_produced: 71,
                }
            }
            265 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 8,
                    nonterminal_produced: 71,
                }
            }
            266 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 10,
                    nonterminal_produced: 71,
                }
            }
            267 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 9,
                    nonterminal_produced: 71,
                }
            }
            268 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 72,
                }
            }
            269 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 8,
                    nonterminal_produced: 73,
                }
            }
            270 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 7,
                    nonterminal_produced: 73,
                }
            }
            271 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 9,
                    nonterminal_produced: 73,
                }
            }
            272 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 8,
                    nonterminal_produced: 73,
                }
            }
            273 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 7,
                    nonterminal_produced: 73,
                }
            }
            274 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 6,
                    nonterminal_produced: 73,
                }
            }
            275 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 8,
                    nonterminal_produced: 73,
                }
            }
            276 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 7,
                    nonterminal_produced: 73,
                }
            }
            277 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 6,
                    nonterminal_produced: 73,
                }
            }
            278 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 73,
                }
            }
            279 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 7,
                    nonterminal_produced: 73,
                }
            }
            280 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 6,
                    nonterminal_produced: 73,
                }
            }
            281 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 73,
                }
            }
            282 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 73,
                }
            }
            283 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 6,
                    nonterminal_produced: 73,
                }
            }
            284 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 73,
                }
            }
            285 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 74,
                }
            }
            286 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 75,
                }
            }
            287 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 76,
                }
            }
            288 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 77,
                }
            }
            289 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 78,
                }
            }
            290 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 79,
                }
            }
            291 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 80,
                }
            }
            292 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 80,
                }
            }
            293 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 80,
                }
            }
            294 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 80,
                }
            }
            295 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 81,
                }
            }
            296 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 81,
                }
            }
            297 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 81,
                }
            }
            298 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 81,
                }
            }
            299 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 82,
                }
            }
            300 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 82,
                }
            }
            301 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 82,
                }
            }
            302 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 82,
                }
            }
            303 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 83,
                }
            }
            304 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 83,
                }
            }
            305 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 83,
                }
            }
            306 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 83,
                }
            }
            307 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 84,
                }
            }
            308 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 85,
                }
            }
            309 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 85,
                }
            }
            310 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 85,
                }
            }
            311 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 85,
                }
            }
            312 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 9,
                    nonterminal_produced: 86,
                }
            }
            313 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 8,
                    nonterminal_produced: 86,
                }
            }
            314 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 10,
                    nonterminal_produced: 86,
                }
            }
            315 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 9,
                    nonterminal_produced: 86,
                }
            }
            316 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 8,
                    nonterminal_produced: 86,
                }
            }
            317 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 7,
                    nonterminal_produced: 86,
                }
            }
            318 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 9,
                    nonterminal_produced: 86,
                }
            }
            319 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 8,
                    nonterminal_produced: 86,
                }
            }
            320 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 10,
                    nonterminal_produced: 86,
                }
            }
            321 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 9,
                    nonterminal_produced: 86,
                }
            }
            322 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 11,
                    nonterminal_produced: 86,
                }
            }
            323 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 10,
                    nonterminal_produced: 86,
                }
            }
            324 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 9,
                    nonterminal_produced: 86,
                }
            }
            325 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 8,
                    nonterminal_produced: 86,
                }
            }
            326 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 10,
                    nonterminal_produced: 86,
                }
            }
            327 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 9,
                    nonterminal_produced: 86,
                }
            }
            328 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 7,
                    nonterminal_produced: 86,
                }
            }
            329 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 6,
                    nonterminal_produced: 86,
                }
            }
            330 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 8,
                    nonterminal_produced: 86,
                }
            }
            331 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 7,
                    nonterminal_produced: 86,
                }
            }
            332 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 6,
                    nonterminal_produced: 86,
                }
            }
            333 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 86,
                }
            }
            334 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 7,
                    nonterminal_produced: 86,
                }
            }
            335 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 6,
                    nonterminal_produced: 86,
                }
            }
            336 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 8,
                    nonterminal_produced: 86,
                }
            }
            337 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 7,
                    nonterminal_produced: 86,
                }
            }
            338 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 9,
                    nonterminal_produced: 86,
                }
            }
            339 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 8,
                    nonterminal_produced: 86,
                }
            }
            340 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 7,
                    nonterminal_produced: 86,
                }
            }
            341 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 6,
                    nonterminal_produced: 86,
                }
            }
            342 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 8,
                    nonterminal_produced: 86,
                }
            }
            343 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 7,
                    nonterminal_produced: 86,
                }
            }
            344 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 87,
                }
            }
            345 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 87,
                }
            }
            346 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 88,
                }
            }
            347 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 88,
                }
            }
            348 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 88,
                }
            }
            349 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 89,
                }
            }
            350 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 90,
                }
            }
            351 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 91,
                }
            }
            352 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 92,
                }
            }
            353 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 92,
                }
            }
            354 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 92,
                }
            }
            355 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 93,
                }
            }
            356 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 93,
                }
            }
            357 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 94,
                }
            }
            358 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 95,
                }
            }
            359 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 6,
                    nonterminal_produced: 96,
                }
            }
            360 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 96,
                }
            }
            361 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 7,
                    nonterminal_produced: 96,
                }
            }
            362 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 6,
                    nonterminal_produced: 96,
                }
            }
            363 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 96,
                }
            }
            364 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 96,
                }
            }
            365 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 6,
                    nonterminal_produced: 96,
                }
            }
            366 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 96,
                }
            }
            367 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 97,
                }
            }
            368 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 97,
                }
            }
            369 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 97,
                }
            }
            370 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 97,
                }
            }
            371 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 97,
                }
            }
            372 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 97,
                }
            }
            373 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 97,
                }
            }
            374 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 98,
                }
            }
            375 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 98,
                }
            }
            376 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 98,
                }
            }
            377 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 98,
                }
            }
            378 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 98,
                }
            }
            379 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 99,
                }
            }
            380 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 100,
                }
            }
            381 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 100,
                }
            }
            382 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 100,
                }
            }
            383 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 100,
                }
            }
            384 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 101,
                }
            }
            385 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 6,
                    nonterminal_produced: 102,
                }
            }
            386 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 102,
                }
            }
            387 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 7,
                    nonterminal_produced: 102,
                }
            }
            388 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 6,
                    nonterminal_produced: 102,
                }
            }
            389 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 103,
                }
            }
            390 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 103,
                }
            }
            391 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 103,
                }
            }
            392 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 104,
                }
            }
            393 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 6,
                    nonterminal_produced: 105,
                }
            }
            394 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 105,
                }
            }
            395 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 7,
                    nonterminal_produced: 105,
                }
            }
            396 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 6,
                    nonterminal_produced: 105,
                }
            }
            397 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 105,
                }
            }
            398 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 105,
                }
            }
            399 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 6,
                    nonterminal_produced: 105,
                }
            }
            400 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 105,
                }
            }
            401 => __state_machine::SimulatedReduce::Accept,
            _ => panic!("invalid reduction index {}", __reduce_index)
        }
    }
    pub struct SourceParser {
        _priv: (),
    }

    impl Default for SourceParser { fn default() -> Self { Self::new() } }
    impl SourceParser {
        pub fn new() -> SourceParser {
            SourceParser {
                _priv: (),
            }
        }

        #[allow(dead_code)]
        pub fn parse<
            'input,
            'err,
            __TOKEN: __ToTriple<'input, 'err, >,
            __TOKENS: IntoIterator<Item=__TOKEN>,
        >(
            &self,
            errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
            db: &dyn Db,
            __tokens0: __TOKENS,
        ) -> Result<Module, __lalrpop_util::ParseError<Location, Token<'input>, &'static str>>
        {
            let __tokens = __tokens0.into_iter();
            let mut __tokens = __tokens.map(|t| __ToTriple::to_triple(t));
            __state_machine::Parser::drive(
                __StateMachine {
                    errors,
                    db,
                    __phantom: core::marker::PhantomData::<(&(), &())>,
                },
                __tokens,
            )
        }
    }
    fn __accepts<
        'input,
        'err,
        '__2,
    >(
        __error_state: Option<i16>,
        __states: &[i16],
        __opt_integer: Option<usize>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> bool
    where
        'input: 'err,
        'static: 'err,
    {
        let mut __states = __states.to_vec();
        __states.extend(__error_state);
        loop {
            let mut __states_len = __states.len();
            let __top = __states[__states_len - 1];
            let __action = match __opt_integer {
                None => __EOF_ACTION[__top as usize],
                Some(__integer) => __action(__top, __integer),
            };
            if __action == 0 { return false; }
            if __action > 0 { return true; }
            let (__to_pop, __nt) = match __simulate_reduce(-(__action + 1), core::marker::PhantomData::<(&(), &())>) {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop, nonterminal_produced
                } => (states_to_pop, nonterminal_produced),
                __state_machine::SimulatedReduce::Accept => return true,
            };
            __states_len -= __to_pop;
            __states.truncate(__states_len);
            let __top = __states[__states_len - 1];
            let __next_state = __goto(__top, __nt);
            __states.push(__next_state);
        }
    }
    fn __reduce<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __action: i16,
        __lookahead_start: Option<&Location>,
        __states: &mut alloc::vec::Vec<i16>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> Option<Result<Module,__lalrpop_util::ParseError<Location, Token<'input>, &'static str>>>
    {
        let (__pop_states, __nonterminal) = match __action {
            0 => {
                __reduce0(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            1 => {
                __reduce1(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            2 => {
                __reduce2(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            3 => {
                __reduce3(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            4 => {
                __reduce4(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            5 => {
                __reduce5(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            6 => {
                __reduce6(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            7 => {
                __reduce7(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            8 => {
                __reduce8(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            9 => {
                __reduce9(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            10 => {
                __reduce10(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            11 => {
                __reduce11(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            12 => {
                __reduce12(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            13 => {
                __reduce13(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            14 => {
                __reduce14(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            15 => {
                __reduce15(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            16 => {
                __reduce16(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            17 => {
                __reduce17(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            18 => {
                __reduce18(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            19 => {
                __reduce19(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            20 => {
                __reduce20(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            21 => {
                __reduce21(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            22 => {
                __reduce22(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            23 => {
                __reduce23(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            24 => {
                __reduce24(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            25 => {
                __reduce25(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            26 => {
                __reduce26(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            27 => {
                __reduce27(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            28 => {
                __reduce28(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            29 => {
                __reduce29(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            30 => {
                __reduce30(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            31 => {
                __reduce31(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            32 => {
                __reduce32(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            33 => {
                __reduce33(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            34 => {
                __reduce34(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            35 => {
                __reduce35(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            36 => {
                __reduce36(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            37 => {
                __reduce37(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            38 => {
                __reduce38(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            39 => {
                __reduce39(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            40 => {
                __reduce40(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            41 => {
                __reduce41(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            42 => {
                __reduce42(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            43 => {
                __reduce43(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            44 => {
                __reduce44(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            45 => {
                __reduce45(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            46 => {
                __reduce46(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            47 => {
                __reduce47(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            48 => {
                __reduce48(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            49 => {
                __reduce49(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            50 => {
                __reduce50(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            51 => {
                __reduce51(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            52 => {
                __reduce52(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            53 => {
                __reduce53(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            54 => {
                __reduce54(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            55 => {
                __reduce55(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            56 => {
                __reduce56(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            57 => {
                __reduce57(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            58 => {
                __reduce58(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            59 => {
                __reduce59(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            60 => {
                __reduce60(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            61 => {
                __reduce61(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            62 => {
                __reduce62(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            63 => {
                __reduce63(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            64 => {
                __reduce64(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            65 => {
                __reduce65(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            66 => {
                __reduce66(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            67 => {
                __reduce67(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            68 => {
                __reduce68(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            69 => {
                __reduce69(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            70 => {
                __reduce70(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            71 => {
                __reduce71(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            72 => {
                __reduce72(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            73 => {
                __reduce73(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            74 => {
                __reduce74(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            75 => {
                __reduce75(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            76 => {
                __reduce76(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            77 => {
                __reduce77(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            78 => {
                __reduce78(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            79 => {
                __reduce79(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            80 => {
                __reduce80(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            81 => {
                __reduce81(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            82 => {
                __reduce82(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            83 => {
                __reduce83(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            84 => {
                __reduce84(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            85 => {
                __reduce85(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            86 => {
                __reduce86(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            87 => {
                __reduce87(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            88 => {
                __reduce88(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            89 => {
                __reduce89(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            90 => {
                __reduce90(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            91 => {
                __reduce91(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            92 => {
                __reduce92(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            93 => {
                __reduce93(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            94 => {
                __reduce94(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            95 => {
                __reduce95(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            96 => {
                __reduce96(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            97 => {
                __reduce97(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            98 => {
                __reduce98(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            99 => {
                __reduce99(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            100 => {
                __reduce100(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            101 => {
                __reduce101(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            102 => {
                __reduce102(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            103 => {
                __reduce103(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            104 => {
                __reduce104(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            105 => {
                __reduce105(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            106 => {
                __reduce106(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            107 => {
                __reduce107(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            108 => {
                __reduce108(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            109 => {
                __reduce109(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            110 => {
                __reduce110(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            111 => {
                __reduce111(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            112 => {
                __reduce112(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            113 => {
                __reduce113(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            114 => {
                __reduce114(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            115 => {
                __reduce115(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            116 => {
                __reduce116(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            117 => {
                __reduce117(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            118 => {
                __reduce118(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            119 => {
                __reduce119(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            120 => {
                __reduce120(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            121 => {
                __reduce121(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            122 => {
                __reduce122(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            123 => {
                __reduce123(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            124 => {
                __reduce124(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            125 => {
                __reduce125(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            126 => {
                __reduce126(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            127 => {
                __reduce127(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            128 => {
                __reduce128(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            129 => {
                __reduce129(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            130 => {
                __reduce130(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            131 => {
                __reduce131(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            132 => {
                __reduce132(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            133 => {
                __reduce133(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            134 => {
                __reduce134(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            135 => {
                __reduce135(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            136 => {
                __reduce136(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            137 => {
                __reduce137(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            138 => {
                __reduce138(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            139 => {
                __reduce139(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            140 => {
                __reduce140(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            141 => {
                __reduce141(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            142 => {
                __reduce142(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            143 => {
                __reduce143(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            144 => {
                __reduce144(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            145 => {
                __reduce145(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            146 => {
                __reduce146(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            147 => {
                __reduce147(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            148 => {
                __reduce148(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            149 => {
                __reduce149(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            150 => {
                __reduce150(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            151 => {
                __reduce151(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            152 => {
                __reduce152(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            153 => {
                __reduce153(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            154 => {
                __reduce154(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            155 => {
                __reduce155(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            156 => {
                __reduce156(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            157 => {
                __reduce157(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            158 => {
                __reduce158(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            159 => {
                __reduce159(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            160 => {
                __reduce160(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            161 => {
                __reduce161(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            162 => {
                __reduce162(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            163 => {
                __reduce163(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            164 => {
                __reduce164(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            165 => {
                __reduce165(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            166 => {
                __reduce166(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            167 => {
                __reduce167(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            168 => {
                __reduce168(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            169 => {
                __reduce169(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            170 => {
                __reduce170(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            171 => {
                __reduce171(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            172 => {
                __reduce172(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            173 => {
                __reduce173(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            174 => {
                __reduce174(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            175 => {
                __reduce175(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            176 => {
                __reduce176(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            177 => {
                __reduce177(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            178 => {
                __reduce178(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            179 => {
                __reduce179(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            180 => {
                __reduce180(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            181 => {
                __reduce181(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            182 => {
                __reduce182(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            183 => {
                __reduce183(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            184 => {
                __reduce184(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            185 => {
                __reduce185(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            186 => {
                __reduce186(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            187 => {
                __reduce187(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            188 => {
                __reduce188(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            189 => {
                __reduce189(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            190 => {
                __reduce190(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            191 => {
                __reduce191(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            192 => {
                __reduce192(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            193 => {
                __reduce193(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            194 => {
                __reduce194(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            195 => {
                __reduce195(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            196 => {
                __reduce196(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            197 => {
                __reduce197(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            198 => {
                __reduce198(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            199 => {
                __reduce199(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            200 => {
                __reduce200(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            201 => {
                __reduce201(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            202 => {
                __reduce202(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            203 => {
                __reduce203(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            204 => {
                __reduce204(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            205 => {
                __reduce205(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            206 => {
                __reduce206(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            207 => {
                __reduce207(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            208 => {
                __reduce208(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            209 => {
                __reduce209(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            210 => {
                __reduce210(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            211 => {
                __reduce211(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            212 => {
                __reduce212(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            213 => {
                __reduce213(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            214 => {
                __reduce214(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            215 => {
                __reduce215(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            216 => {
                __reduce216(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            217 => {
                __reduce217(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            218 => {
                __reduce218(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            219 => {
                __reduce219(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            220 => {
                __reduce220(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            221 => {
                __reduce221(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            222 => {
                __reduce222(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            223 => {
                __reduce223(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            224 => {
                __reduce224(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            225 => {
                __reduce225(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            226 => {
                __reduce226(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            227 => {
                __reduce227(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            228 => {
                __reduce228(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            229 => {
                __reduce229(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            230 => {
                __reduce230(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            231 => {
                __reduce231(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            232 => {
                __reduce232(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            233 => {
                __reduce233(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            234 => {
                __reduce234(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            235 => {
                __reduce235(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            236 => {
                __reduce236(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            237 => {
                __reduce237(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            238 => {
                __reduce238(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            239 => {
                __reduce239(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            240 => {
                __reduce240(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            241 => {
                __reduce241(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            242 => {
                __reduce242(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            243 => {
                __reduce243(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            244 => {
                __reduce244(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            245 => {
                __reduce245(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            246 => {
                __reduce246(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            247 => {
                __reduce247(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            248 => {
                __reduce248(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            249 => {
                __reduce249(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            250 => {
                __reduce250(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            251 => {
                __reduce251(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            252 => {
                __reduce252(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            253 => {
                __reduce253(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            254 => {
                __reduce254(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            255 => {
                __reduce255(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            256 => {
                __reduce256(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            257 => {
                __reduce257(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            258 => {
                __reduce258(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            259 => {
                __reduce259(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            260 => {
                __reduce260(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            261 => {
                __reduce261(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            262 => {
                __reduce262(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            263 => {
                __reduce263(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            264 => {
                __reduce264(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            265 => {
                __reduce265(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            266 => {
                __reduce266(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            267 => {
                __reduce267(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            268 => {
                __reduce268(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            269 => {
                __reduce269(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            270 => {
                __reduce270(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            271 => {
                __reduce271(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            272 => {
                __reduce272(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            273 => {
                __reduce273(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            274 => {
                __reduce274(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            275 => {
                __reduce275(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            276 => {
                __reduce276(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            277 => {
                __reduce277(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            278 => {
                __reduce278(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            279 => {
                __reduce279(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            280 => {
                __reduce280(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            281 => {
                __reduce281(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            282 => {
                __reduce282(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            283 => {
                __reduce283(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            284 => {
                __reduce284(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            285 => {
                __reduce285(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            286 => {
                __reduce286(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            287 => {
                __reduce287(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            288 => {
                __reduce288(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            289 => {
                __reduce289(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            290 => {
                __reduce290(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            291 => {
                __reduce291(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            292 => {
                __reduce292(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            293 => {
                __reduce293(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            294 => {
                __reduce294(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            295 => {
                __reduce295(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            296 => {
                __reduce296(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            297 => {
                __reduce297(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            298 => {
                __reduce298(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            299 => {
                __reduce299(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            300 => {
                __reduce300(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            301 => {
                __reduce301(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            302 => {
                __reduce302(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            303 => {
                __reduce303(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            304 => {
                __reduce304(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            305 => {
                __reduce305(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            306 => {
                __reduce306(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            307 => {
                __reduce307(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            308 => {
                __reduce308(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            309 => {
                __reduce309(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            310 => {
                __reduce310(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            311 => {
                __reduce311(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            312 => {
                __reduce312(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            313 => {
                __reduce313(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            314 => {
                __reduce314(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            315 => {
                __reduce315(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            316 => {
                __reduce316(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            317 => {
                __reduce317(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            318 => {
                __reduce318(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            319 => {
                __reduce319(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            320 => {
                __reduce320(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            321 => {
                __reduce321(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            322 => {
                __reduce322(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            323 => {
                __reduce323(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            324 => {
                __reduce324(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            325 => {
                __reduce325(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            326 => {
                __reduce326(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            327 => {
                __reduce327(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            328 => {
                __reduce328(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            329 => {
                __reduce329(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            330 => {
                __reduce330(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            331 => {
                __reduce331(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            332 => {
                __reduce332(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            333 => {
                __reduce333(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            334 => {
                __reduce334(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            335 => {
                __reduce335(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            336 => {
                __reduce336(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            337 => {
                __reduce337(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            338 => {
                __reduce338(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            339 => {
                __reduce339(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            340 => {
                __reduce340(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            341 => {
                __reduce341(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            342 => {
                __reduce342(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            343 => {
                __reduce343(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            344 => {
                __reduce344(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            345 => {
                __reduce345(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            346 => {
                __reduce346(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            347 => {
                __reduce347(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            348 => {
                __reduce348(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            349 => {
                __reduce349(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            350 => {
                __reduce350(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            351 => {
                __reduce351(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            352 => {
                __reduce352(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            353 => {
                __reduce353(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            354 => {
                __reduce354(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            355 => {
                __reduce355(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            356 => {
                __reduce356(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            357 => {
                __reduce357(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            358 => {
                __reduce358(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            359 => {
                __reduce359(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            360 => {
                __reduce360(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            361 => {
                __reduce361(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            362 => {
                __reduce362(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            363 => {
                __reduce363(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            364 => {
                __reduce364(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            365 => {
                __reduce365(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            366 => {
                __reduce366(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            367 => {
                __reduce367(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            368 => {
                __reduce368(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            369 => {
                __reduce369(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            370 => {
                __reduce370(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            371 => {
                __reduce371(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            372 => {
                __reduce372(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            373 => {
                __reduce373(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            374 => {
                __reduce374(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            375 => {
                __reduce375(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            376 => {
                __reduce376(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            377 => {
                __reduce377(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            378 => {
                __reduce378(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            379 => {
                __reduce379(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            380 => {
                __reduce380(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            381 => {
                __reduce381(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            382 => {
                __reduce382(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            383 => {
                __reduce383(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            384 => {
                __reduce384(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            385 => {
                __reduce385(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            386 => {
                __reduce386(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            387 => {
                __reduce387(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            388 => {
                __reduce388(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            389 => {
                __reduce389(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            390 => {
                __reduce390(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            391 => {
                __reduce391(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            392 => {
                __reduce392(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            393 => {
                __reduce393(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            394 => {
                __reduce394(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            395 => {
                __reduce395(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            396 => {
                __reduce396(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            397 => {
                __reduce397(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            398 => {
                __reduce398(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            399 => {
                __reduce399(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            400 => {
                __reduce400(errors, db, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            401 => {
                // __Source = Source => ActionFn(0);
                let __sym0 = __pop_Variant40(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action0::<>(errors, db, __sym0);
                return Some(Ok(__nt));
            }
            _ => panic!("invalid action code {}", __action)
        };
        let __states_len = __states.len();
        __states.truncate(__states_len - __pop_states);
        let __state = *__states.last().unwrap();
        let __next_state = __goto(__state, __nonterminal);
        __states.push(__next_state);
        None
    }
    #[inline(never)]
    fn __symbol_type_mismatch() -> ! {
        panic!("symbol type mismatch")
    }
    fn __pop_Variant11<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>
    ) -> (Location, (), Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant11(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant46<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>
    ) -> (Location, (Spanned<Ident>, Block<Spanned<Node>>), Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant46(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant7<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>
    ) -> (Location, (Token<'input>, Spanned<Ident>), Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant7(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant9<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>
    ) -> (Location, (alloc::vec::Vec<Token<'input>>, Spanned<Node>), Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant9(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant24<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>
    ) -> (Location, Block<Spanned<FieldDef>>, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant24(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant25<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>
    ) -> (Location, Block<Spanned<Node>>, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant25(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant26<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>
    ) -> (Location, Block<Spanned<Prototype>>, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant26(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant22<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>
    ) -> (Location, Location, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant22(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant40<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>
    ) -> (Location, Module, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant40(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant32<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>
    ) -> (Location, Node, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant32(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant14<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>
    ) -> (Location, Spanned<FieldDef>, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant14(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant16<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>
    ) -> (Location, Spanned<FnArg>, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant16(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant18<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>
    ) -> (Location, Spanned<Ident>, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant18(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant30<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>
    ) -> (Location, Spanned<Keyword>, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant30(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant36<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>
    ) -> (Location, Spanned<KeywordAndVisibility>, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant36(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant12<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>
    ) -> (Location, Spanned<Node>, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant12(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant20<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>
    ) -> (Location, Spanned<Prototype>, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant20(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant42<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>
    ) -> (Location, Spanned<Spanned<FieldDef>>, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant42(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant43<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>
    ) -> (Location, Spanned<Spanned<Node>>, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant43(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant41<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>
    ) -> (Location, Spanned<Token<'input>>, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant41(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant23<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>
    ) -> (Location, Spanned<Value>, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant23(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant44<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>
    ) -> (Location, Spanned<Vec<Spanned<Ident>>>, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant44(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant45<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>
    ) -> (Location, Spanned<Visibility>, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant45(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant0<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>
    ) -> (Location, Token<'input>, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant0(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant37<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>
    ) -> (Location, Vec<Spanned<FieldDef>>, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant37(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant28<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>
    ) -> (Location, Vec<Spanned<FnArg>>, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant28(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant29<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>
    ) -> (Location, Vec<Spanned<Ident>>, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant29(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant27<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>
    ) -> (Location, Vec<Spanned<Node>>, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant27(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant38<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>
    ) -> (Location, Vec<Spanned<Prototype>>, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant38(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant4<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>
    ) -> (Location, __lalrpop_util::ErrorRecovery<Location, Token<'input>, &'static str>, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant4(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant10<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>
    ) -> (Location, alloc::vec::Vec<(alloc::vec::Vec<Token<'input>>, Spanned<Node>)>, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant10(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant15<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>
    ) -> (Location, alloc::vec::Vec<Spanned<FieldDef>>, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant15(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant17<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>
    ) -> (Location, alloc::vec::Vec<Spanned<FnArg>>, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant17(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant19<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>
    ) -> (Location, alloc::vec::Vec<Spanned<Ident>>, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant19(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant13<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>
    ) -> (Location, alloc::vec::Vec<Spanned<Node>>, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant13(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant21<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>
    ) -> (Location, alloc::vec::Vec<Spanned<Prototype>>, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant21(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant5<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>
    ) -> (Location, alloc::vec::Vec<Token<'input>>, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant5(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant8<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>
    ) -> (Location, core::option::Option<(Token<'input>, Spanned<Ident>)>, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant8(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant33<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>
    ) -> (Location, core::option::Option<Spanned<FieldDef>>, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant33(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant34<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>
    ) -> (Location, core::option::Option<Spanned<FnArg>>, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant34(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant35<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>
    ) -> (Location, core::option::Option<Spanned<Ident>>, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant35(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant31<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>
    ) -> (Location, core::option::Option<Spanned<Node>>, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant31(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant39<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>
    ) -> (Location, core::option::Option<Spanned<Prototype>>, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant39(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant6<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>
    ) -> (Location, core::option::Option<Token<'input>>, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant6(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant2<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>
    ) -> (Location, f64, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant2(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant3<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>
    ) -> (Location, i64, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant3(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant1<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>
    ) -> (Location, &'input str, Location)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant1(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __reduce0<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // "\n"* =  => ActionFn(73);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action73::<>(errors, db, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (0, 0)
    }
    fn __reduce1<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // "\n"* = "\n"+ => ActionFn(74);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action74::<>(errors, db, __sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 0)
    }
    fn __reduce2<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // "\n"+ = "\n" => ActionFn(125);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action125::<>(errors, db, __sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 1)
    }
    fn __reduce3<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // "\n"+ = "\n"+, "\n" => ActionFn(126);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action126::<>(errors, db, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (2, 1)
    }
    fn __reduce4<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // "\n"? = "\n" => ActionFn(123);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action123::<>(errors, db, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 2)
    }
    fn __reduce5<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // "\n"? =  => ActionFn(124);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action124::<>(errors, db, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (0, 2)
    }
    fn __reduce6<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // ("->" Ident) = "->", Ident => ActionFn(91);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant18(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action91::<>(errors, db, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (2, 3)
    }
    fn __reduce7<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // ("->" Ident)? = "->", Ident => ActionFn(169);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant18(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action169::<>(errors, db, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (2, 4)
    }
    fn __reduce8<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // ("->" Ident)? =  => ActionFn(90);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action90::<>(errors, db, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (0, 4)
    }
    fn __reduce9<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // ("\n"* TopLevel) = TopLevel => ActionFn(165);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action165::<>(errors, db, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 5)
    }
    fn __reduce10<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // ("\n"* TopLevel) = "\n"+, TopLevel => ActionFn(166);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action166::<>(errors, db, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (2, 5)
    }
    fn __reduce11<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // ("\n"* TopLevel)* =  => ActionFn(70);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action70::<>(errors, db, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (0, 6)
    }
    fn __reduce12<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // ("\n"* TopLevel)* = ("\n"* TopLevel)+ => ActionFn(71);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action71::<>(errors, db, __sym0);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (1, 6)
    }
    fn __reduce13<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // ("\n"* TopLevel)+ = TopLevel => ActionFn(172);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action172::<>(errors, db, __sym0);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (1, 7)
    }
    fn __reduce14<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // ("\n"* TopLevel)+ = "\n"+, TopLevel => ActionFn(173);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action173::<>(errors, db, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (2, 7)
    }
    fn __reduce15<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // ("\n"* TopLevel)+ = ("\n"* TopLevel)+, TopLevel => ActionFn(174);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action174::<>(errors, db, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (2, 7)
    }
    fn __reduce16<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // ("\n"* TopLevel)+ = ("\n"* TopLevel)+, "\n"+, TopLevel => ActionFn(175);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant12(__symbols);
        let __sym1 = __pop_Variant5(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action175::<>(errors, db, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (3, 7)
    }
    fn __reduce17<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // ("\n"?) = "\n" => ActionFn(167);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action167::<>(errors, db, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 8)
    }
    fn __reduce18<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // ("\n"?) =  => ActionFn(168);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action168::<>(errors, db, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (0, 8)
    }
    fn __reduce19<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // ("for" Ident) = "for", Ident => ActionFn(78);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant18(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action78::<>(errors, db, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (2, 9)
    }
    fn __reduce20<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // ("for" Ident)? = "for", Ident => ActionFn(186);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant18(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action186::<>(errors, db, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (2, 10)
    }
    fn __reduce21<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // ("for" Ident)? =  => ActionFn(77);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action77::<>(errors, db, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (0, 10)
    }
    fn __reduce22<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // () =  => ActionFn(88);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action88::<>(errors, db, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (0, 11)
    }
    fn __reduce23<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<Expression> ",") = Expression, "," => ActionFn(107);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action107::<>(errors, db, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (2, 12)
    }
    fn __reduce24<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<Expression> ",")* =  => ActionFn(105);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action105::<>(errors, db, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (0, 13)
    }
    fn __reduce25<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<Expression> ",")* = (<Expression> ",")+ => ActionFn(106);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action106::<>(errors, db, __sym0);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (1, 13)
    }
    fn __reduce26<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<Expression> ",")+ = Expression, "," => ActionFn(190);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action190::<>(errors, db, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (2, 14)
    }
    fn __reduce27<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<Expression> ",")+ = (<Expression> ",")+, Expression, "," => ActionFn(191);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action191::<>(errors, db, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (3, 14)
    }
    fn __reduce28<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<Field> "\n") = Field, "\n" => ActionFn(138);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant14(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action138::<>(errors, db, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (2, 15)
    }
    fn __reduce29<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<Field> "\n")* =  => ActionFn(136);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action136::<>(errors, db, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (0, 16)
    }
    fn __reduce30<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<Field> "\n")* = (<Field> "\n")+ => ActionFn(137);
        let __sym0 = __pop_Variant15(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action137::<>(errors, db, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 16)
    }
    fn __reduce31<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<Field> "\n")+ = Field, "\n" => ActionFn(194);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant14(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action194::<>(errors, db, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (2, 17)
    }
    fn __reduce32<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<Field> "\n")+ = (<Field> "\n")+, Field, "\n" => ActionFn(195);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant14(__symbols);
        let __sym0 = __pop_Variant15(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action195::<>(errors, db, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (3, 17)
    }
    fn __reduce33<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<FnArg> ",") = FnArg, "," => ActionFn(112);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant16(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action112::<>(errors, db, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (2, 18)
    }
    fn __reduce34<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<FnArg> ",")* =  => ActionFn(110);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action110::<>(errors, db, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (0, 19)
    }
    fn __reduce35<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<FnArg> ",")* = (<FnArg> ",")+ => ActionFn(111);
        let __sym0 = __pop_Variant17(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action111::<>(errors, db, __sym0);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (1, 19)
    }
    fn __reduce36<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<FnArg> ",")+ = FnArg, "," => ActionFn(198);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant16(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action198::<>(errors, db, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (2, 20)
    }
    fn __reduce37<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<FnArg> ",")+ = (<FnArg> ",")+, FnArg, "," => ActionFn(199);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant16(__symbols);
        let __sym0 = __pop_Variant17(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action199::<>(errors, db, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (3, 20)
    }
    fn __reduce38<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<FnDef> "\n") = FnDef, "\n" => ActionFn(133);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action133::<>(errors, db, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (2, 21)
    }
    fn __reduce39<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<FnDef> "\n")* =  => ActionFn(131);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action131::<>(errors, db, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (0, 22)
    }
    fn __reduce40<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<FnDef> "\n")* = (<FnDef> "\n")+ => ActionFn(132);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action132::<>(errors, db, __sym0);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (1, 22)
    }
    fn __reduce41<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<FnDef> "\n")+ = FnDef, "\n" => ActionFn(202);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action202::<>(errors, db, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (2, 23)
    }
    fn __reduce42<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<FnDef> "\n")+ = (<FnDef> "\n")+, FnDef, "\n" => ActionFn(203);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action203::<>(errors, db, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (3, 23)
    }
    fn __reduce43<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<Ident> "+") = Ident, "+" => ActionFn(118);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action118::<>(errors, db, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (2, 24)
    }
    fn __reduce44<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<Ident> "+")* =  => ActionFn(116);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action116::<>(errors, db, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (0, 25)
    }
    fn __reduce45<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<Ident> "+")* = (<Ident> "+")+ => ActionFn(117);
        let __sym0 = __pop_Variant19(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action117::<>(errors, db, __sym0);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (1, 25)
    }
    fn __reduce46<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<Ident> "+")+ = Ident, "+" => ActionFn(206);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action206::<>(errors, db, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (2, 26)
    }
    fn __reduce47<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<Ident> "+")+ = (<Ident> "+")+, Ident, "+" => ActionFn(207);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant18(__symbols);
        let __sym0 = __pop_Variant19(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action207::<>(errors, db, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (3, 26)
    }
    fn __reduce48<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<Ident> ",") = Ident, "," => ActionFn(102);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action102::<>(errors, db, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (2, 27)
    }
    fn __reduce49<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<Ident> ",")* =  => ActionFn(100);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action100::<>(errors, db, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (0, 28)
    }
    fn __reduce50<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<Ident> ",")* = (<Ident> ",")+ => ActionFn(101);
        let __sym0 = __pop_Variant19(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action101::<>(errors, db, __sym0);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (1, 28)
    }
    fn __reduce51<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<Ident> ",")+ = Ident, "," => ActionFn(210);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action210::<>(errors, db, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (2, 29)
    }
    fn __reduce52<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<Ident> ",")+ = (<Ident> ",")+, Ident, "," => ActionFn(211);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant18(__symbols);
        let __sym0 = __pop_Variant19(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action211::<>(errors, db, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (3, 29)
    }
    fn __reduce53<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<Prototype> "\n") = Prototype, "\n" => ActionFn(143);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant20(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action143::<>(errors, db, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (2, 30)
    }
    fn __reduce54<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<Prototype> "\n")* =  => ActionFn(141);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action141::<>(errors, db, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (0, 31)
    }
    fn __reduce55<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<Prototype> "\n")* = (<Prototype> "\n")+ => ActionFn(142);
        let __sym0 = __pop_Variant21(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action142::<>(errors, db, __sym0);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (1, 31)
    }
    fn __reduce56<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<Prototype> "\n")+ = Prototype, "\n" => ActionFn(214);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant20(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action214::<>(errors, db, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (2, 32)
    }
    fn __reduce57<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<Prototype> "\n")+ = (<Prototype> "\n")+, Prototype, "\n" => ActionFn(215);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant20(__symbols);
        let __sym0 = __pop_Variant21(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action215::<>(errors, db, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (3, 32)
    }
    fn __reduce58<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<Statement> "\n") = Statement, "\n" => ActionFn(150);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action150::<>(errors, db, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (2, 33)
    }
    fn __reduce59<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<Statement> "\n")* =  => ActionFn(148);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action148::<>(errors, db, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (0, 34)
    }
    fn __reduce60<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<Statement> "\n")* = (<Statement> "\n")+ => ActionFn(149);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action149::<>(errors, db, __sym0);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (1, 34)
    }
    fn __reduce61<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<Statement> "\n")+ = Statement, "\n" => ActionFn(218);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action218::<>(errors, db, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (2, 35)
    }
    fn __reduce62<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<Statement> "\n")+ = (<Statement> "\n")+, Statement, "\n" => ActionFn(219);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action219::<>(errors, db, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (3, 35)
    }
    fn __reduce63<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // @L =  => ActionFn(99);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action99::<>(errors, db, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (0, 36)
    }
    fn __reduce64<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // @R =  => ActionFn(98);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action98::<>(errors, db, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (0, 37)
    }
    fn __reduce65<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Atom = Ident => ActionFn(22);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action22::<>(errors, db, __sym0);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (1, 38)
    }
    fn __reduce66<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Atom = Atom0 => ActionFn(23);
        let __sym0 = __pop_Variant23(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action23::<>(errors, db, __sym0);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (1, 38)
    }
    fn __reduce67<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Atom0 = "int" => ActionFn(268);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action268::<>(errors, db, __sym0);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (1, 39)
    }
    fn __reduce68<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Atom0 = "float" => ActionFn(269);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action269::<>(errors, db, __sym0);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (1, 39)
    }
    fn __reduce69<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Atom0 = "string" => ActionFn(270);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action270::<>(errors, db, __sym0);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (1, 39)
    }
    fn __reduce70<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Block<Field> = "{", "\n", Field, "}" => ActionFn(319);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant14(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action319::<>(errors, db, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (4, 40)
    }
    fn __reduce71<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Block<Field> = "{", "\n", "}" => ActionFn(320);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action320::<>(errors, db, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (3, 40)
    }
    fn __reduce72<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Block<Field> = "{", "\n", (<Field> "\n")+, Field, "}" => ActionFn(321);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant14(__symbols);
        let __sym2 = __pop_Variant15(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action321::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (5, 40)
    }
    fn __reduce73<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Block<Field> = "{", "\n", (<Field> "\n")+, "}" => ActionFn(322);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant15(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action322::<>(errors, db, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (4, 40)
    }
    fn __reduce74<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Block<Field> = "{", Field, "}" => ActionFn(323);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant14(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action323::<>(errors, db, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (3, 40)
    }
    fn __reduce75<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Block<Field> = "{", "}" => ActionFn(324);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action324::<>(errors, db, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (2, 40)
    }
    fn __reduce76<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Block<Field> = "{", (<Field> "\n")+, Field, "}" => ActionFn(325);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant14(__symbols);
        let __sym1 = __pop_Variant15(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action325::<>(errors, db, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (4, 40)
    }
    fn __reduce77<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Block<Field> = "{", (<Field> "\n")+, "}" => ActionFn(326);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant15(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action326::<>(errors, db, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (3, 40)
    }
    fn __reduce78<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Block<FnDef> = "{", "\n", FnDef, "}" => ActionFn(339);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant12(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action339::<>(errors, db, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (4, 41)
    }
    fn __reduce79<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Block<FnDef> = "{", "\n", "}" => ActionFn(340);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action340::<>(errors, db, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (3, 41)
    }
    fn __reduce80<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Block<FnDef> = "{", "\n", (<FnDef> "\n")+, FnDef, "}" => ActionFn(341);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant12(__symbols);
        let __sym2 = __pop_Variant13(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action341::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (5, 41)
    }
    fn __reduce81<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Block<FnDef> = "{", "\n", (<FnDef> "\n")+, "}" => ActionFn(342);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant13(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action342::<>(errors, db, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (4, 41)
    }
    fn __reduce82<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Block<FnDef> = "{", FnDef, "}" => ActionFn(343);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action343::<>(errors, db, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (3, 41)
    }
    fn __reduce83<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Block<FnDef> = "{", "}" => ActionFn(344);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action344::<>(errors, db, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (2, 41)
    }
    fn __reduce84<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Block<FnDef> = "{", (<FnDef> "\n")+, FnDef, "}" => ActionFn(345);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant12(__symbols);
        let __sym1 = __pop_Variant13(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action345::<>(errors, db, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (4, 41)
    }
    fn __reduce85<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Block<FnDef> = "{", (<FnDef> "\n")+, "}" => ActionFn(346);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant13(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action346::<>(errors, db, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (3, 41)
    }
    fn __reduce86<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Block<Prototype> = "{", "\n", Prototype, "}" => ActionFn(367);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant20(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action367::<>(errors, db, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (4, 42)
    }
    fn __reduce87<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Block<Prototype> = "{", "\n", "}" => ActionFn(368);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action368::<>(errors, db, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (3, 42)
    }
    fn __reduce88<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Block<Prototype> = "{", "\n", (<Prototype> "\n")+, Prototype, "}" => ActionFn(369);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant20(__symbols);
        let __sym2 = __pop_Variant21(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action369::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (5, 42)
    }
    fn __reduce89<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Block<Prototype> = "{", "\n", (<Prototype> "\n")+, "}" => ActionFn(370);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant21(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action370::<>(errors, db, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (4, 42)
    }
    fn __reduce90<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Block<Prototype> = "{", Prototype, "}" => ActionFn(371);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant20(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action371::<>(errors, db, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (3, 42)
    }
    fn __reduce91<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Block<Prototype> = "{", "}" => ActionFn(372);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action372::<>(errors, db, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (2, 42)
    }
    fn __reduce92<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Block<Prototype> = "{", (<Prototype> "\n")+, Prototype, "}" => ActionFn(373);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant20(__symbols);
        let __sym1 = __pop_Variant21(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action373::<>(errors, db, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (4, 42)
    }
    fn __reduce93<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Block<Prototype> = "{", (<Prototype> "\n")+, "}" => ActionFn(374);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant21(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action374::<>(errors, db, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (3, 42)
    }
    fn __reduce94<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Block<Statement> = "{", "\n", Statement, "}" => ActionFn(387);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant12(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action387::<>(errors, db, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (4, 43)
    }
    fn __reduce95<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Block<Statement> = "{", "\n", "}" => ActionFn(388);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action388::<>(errors, db, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (3, 43)
    }
    fn __reduce96<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Block<Statement> = "{", "\n", (<Statement> "\n")+, Statement, "}" => ActionFn(389);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant12(__symbols);
        let __sym2 = __pop_Variant13(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action389::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (5, 43)
    }
    fn __reduce97<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Block<Statement> = "{", "\n", (<Statement> "\n")+, "}" => ActionFn(390);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant13(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action390::<>(errors, db, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (4, 43)
    }
    fn __reduce98<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Block<Statement> = "{", Statement, "}" => ActionFn(391);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action391::<>(errors, db, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (3, 43)
    }
    fn __reduce99<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Block<Statement> = "{", "}" => ActionFn(392);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action392::<>(errors, db, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (2, 43)
    }
    fn __reduce100<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Block<Statement> = "{", (<Statement> "\n")+, Statement, "}" => ActionFn(393);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant12(__symbols);
        let __sym1 = __pop_Variant13(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action393::<>(errors, db, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (4, 43)
    }
    fn __reduce101<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Block<Statement> = "{", (<Statement> "\n")+, "}" => ActionFn(394);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant13(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action394::<>(errors, db, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (3, 43)
    }
    fn __reduce102<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Comma<Expression> = Expression => ActionFn(483);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action483::<>(errors, db, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 44)
    }
    fn __reduce103<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Comma<Expression> =  => ActionFn(484);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action484::<>(errors, db, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (0, 44)
    }
    fn __reduce104<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Comma<Expression> = (<Expression> ",")+, Expression => ActionFn(485);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action485::<>(errors, db, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 44)
    }
    fn __reduce105<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Comma<Expression> = (<Expression> ",")+ => ActionFn(486);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action486::<>(errors, db, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 44)
    }
    fn __reduce106<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Comma<FnArg> = FnArg => ActionFn(491);
        let __sym0 = __pop_Variant16(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action491::<>(errors, db, __sym0);
        __symbols.push((__start, __Symbol::Variant28(__nt), __end));
        (1, 45)
    }
    fn __reduce107<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Comma<FnArg> =  => ActionFn(492);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action492::<>(errors, db, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant28(__nt), __end));
        (0, 45)
    }
    fn __reduce108<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Comma<FnArg> = (<FnArg> ",")+, FnArg => ActionFn(493);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant16(__symbols);
        let __sym0 = __pop_Variant17(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action493::<>(errors, db, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant28(__nt), __end));
        (2, 45)
    }
    fn __reduce109<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Comma<FnArg> = (<FnArg> ",")+ => ActionFn(494);
        let __sym0 = __pop_Variant17(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action494::<>(errors, db, __sym0);
        __symbols.push((__start, __Symbol::Variant28(__nt), __end));
        (1, 45)
    }
    fn __reduce110<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Comma<Ident> = Ident => ActionFn(503);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action503::<>(errors, db, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 46)
    }
    fn __reduce111<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Comma<Ident> =  => ActionFn(504);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action504::<>(errors, db, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (0, 46)
    }
    fn __reduce112<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Comma<Ident> = (<Ident> ",")+, Ident => ActionFn(505);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant18(__symbols);
        let __sym0 = __pop_Variant19(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action505::<>(errors, db, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (2, 46)
    }
    fn __reduce113<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Comma<Ident> = (<Ident> ",")+ => ActionFn(506);
        let __sym0 = __pop_Variant19(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action506::<>(errors, db, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 46)
    }
    fn __reduce114<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Effect = "effect" => ActionFn(271);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action271::<>(errors, db, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 47)
    }
    fn __reduce115<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // EffectDef = KeywordAndVisibility<Effect>, Ident, ":", Ident, "{", "\n", Prototype, "}" => ActionFn(555);
        assert!(__symbols.len() >= 8);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant20(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant18(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant18(__symbols);
        let __sym0 = __pop_Variant36(__symbols);
        let __start = __sym0.0;
        let __end = __sym7.2;
        let __nt = super::__action555::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (8, 48)
    }
    fn __reduce116<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // EffectDef = KeywordAndVisibility<Effect>, Ident, ":", "{", "\n", Prototype, "}" => ActionFn(556);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant20(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant18(__symbols);
        let __sym0 = __pop_Variant36(__symbols);
        let __start = __sym0.0;
        let __end = __sym6.2;
        let __nt = super::__action556::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (7, 48)
    }
    fn __reduce117<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // EffectDef = KeywordAndVisibility<Effect>, Ident, ":", (<Ident> "+")+, Ident, "{", "\n", Prototype, "}" => ActionFn(557);
        assert!(__symbols.len() >= 9);
        let __sym8 = __pop_Variant0(__symbols);
        let __sym7 = __pop_Variant20(__symbols);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant18(__symbols);
        let __sym3 = __pop_Variant19(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant18(__symbols);
        let __sym0 = __pop_Variant36(__symbols);
        let __start = __sym0.0;
        let __end = __sym8.2;
        let __nt = super::__action557::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (9, 48)
    }
    fn __reduce118<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // EffectDef = KeywordAndVisibility<Effect>, Ident, ":", (<Ident> "+")+, "{", "\n", Prototype, "}" => ActionFn(558);
        assert!(__symbols.len() >= 8);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant20(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant19(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant18(__symbols);
        let __sym0 = __pop_Variant36(__symbols);
        let __start = __sym0.0;
        let __end = __sym7.2;
        let __nt = super::__action558::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (8, 48)
    }
    fn __reduce119<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // EffectDef = KeywordAndVisibility<Effect>, Ident, ":", Ident, "{", "\n", "}" => ActionFn(559);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant18(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant18(__symbols);
        let __sym0 = __pop_Variant36(__symbols);
        let __start = __sym0.0;
        let __end = __sym6.2;
        let __nt = super::__action559::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (7, 48)
    }
    fn __reduce120<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // EffectDef = KeywordAndVisibility<Effect>, Ident, ":", "{", "\n", "}" => ActionFn(560);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant18(__symbols);
        let __sym0 = __pop_Variant36(__symbols);
        let __start = __sym0.0;
        let __end = __sym5.2;
        let __nt = super::__action560::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (6, 48)
    }
    fn __reduce121<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // EffectDef = KeywordAndVisibility<Effect>, Ident, ":", (<Ident> "+")+, Ident, "{", "\n", "}" => ActionFn(561);
        assert!(__symbols.len() >= 8);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant18(__symbols);
        let __sym3 = __pop_Variant19(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant18(__symbols);
        let __sym0 = __pop_Variant36(__symbols);
        let __start = __sym0.0;
        let __end = __sym7.2;
        let __nt = super::__action561::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (8, 48)
    }
    fn __reduce122<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // EffectDef = KeywordAndVisibility<Effect>, Ident, ":", (<Ident> "+")+, "{", "\n", "}" => ActionFn(562);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant19(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant18(__symbols);
        let __sym0 = __pop_Variant36(__symbols);
        let __start = __sym0.0;
        let __end = __sym6.2;
        let __nt = super::__action562::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (7, 48)
    }
    fn __reduce123<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // EffectDef = KeywordAndVisibility<Effect>, Ident, ":", Ident, "{", "\n", (<Prototype> "\n")+, Prototype, "}" => ActionFn(563);
        assert!(__symbols.len() >= 9);
        let __sym8 = __pop_Variant0(__symbols);
        let __sym7 = __pop_Variant20(__symbols);
        let __sym6 = __pop_Variant21(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant18(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant18(__symbols);
        let __sym0 = __pop_Variant36(__symbols);
        let __start = __sym0.0;
        let __end = __sym8.2;
        let __nt = super::__action563::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (9, 48)
    }
    fn __reduce124<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // EffectDef = KeywordAndVisibility<Effect>, Ident, ":", "{", "\n", (<Prototype> "\n")+, Prototype, "}" => ActionFn(564);
        assert!(__symbols.len() >= 8);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant20(__symbols);
        let __sym5 = __pop_Variant21(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant18(__symbols);
        let __sym0 = __pop_Variant36(__symbols);
        let __start = __sym0.0;
        let __end = __sym7.2;
        let __nt = super::__action564::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (8, 48)
    }
    fn __reduce125<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // EffectDef = KeywordAndVisibility<Effect>, Ident, ":", (<Ident> "+")+, Ident, "{", "\n", (<Prototype> "\n")+, Prototype, "}" => ActionFn(565);
        assert!(__symbols.len() >= 10);
        let __sym9 = __pop_Variant0(__symbols);
        let __sym8 = __pop_Variant20(__symbols);
        let __sym7 = __pop_Variant21(__symbols);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant18(__symbols);
        let __sym3 = __pop_Variant19(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant18(__symbols);
        let __sym0 = __pop_Variant36(__symbols);
        let __start = __sym0.0;
        let __end = __sym9.2;
        let __nt = super::__action565::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, __sym9);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (10, 48)
    }
    fn __reduce126<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // EffectDef = KeywordAndVisibility<Effect>, Ident, ":", (<Ident> "+")+, "{", "\n", (<Prototype> "\n")+, Prototype, "}" => ActionFn(566);
        assert!(__symbols.len() >= 9);
        let __sym8 = __pop_Variant0(__symbols);
        let __sym7 = __pop_Variant20(__symbols);
        let __sym6 = __pop_Variant21(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant19(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant18(__symbols);
        let __sym0 = __pop_Variant36(__symbols);
        let __start = __sym0.0;
        let __end = __sym8.2;
        let __nt = super::__action566::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (9, 48)
    }
    fn __reduce127<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // EffectDef = KeywordAndVisibility<Effect>, Ident, ":", Ident, "{", "\n", (<Prototype> "\n")+, "}" => ActionFn(567);
        assert!(__symbols.len() >= 8);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant21(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant18(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant18(__symbols);
        let __sym0 = __pop_Variant36(__symbols);
        let __start = __sym0.0;
        let __end = __sym7.2;
        let __nt = super::__action567::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (8, 48)
    }
    fn __reduce128<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // EffectDef = KeywordAndVisibility<Effect>, Ident, ":", "{", "\n", (<Prototype> "\n")+, "}" => ActionFn(568);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant21(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant18(__symbols);
        let __sym0 = __pop_Variant36(__symbols);
        let __start = __sym0.0;
        let __end = __sym6.2;
        let __nt = super::__action568::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (7, 48)
    }
    fn __reduce129<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // EffectDef = KeywordAndVisibility<Effect>, Ident, ":", (<Ident> "+")+, Ident, "{", "\n", (<Prototype> "\n")+, "}" => ActionFn(569);
        assert!(__symbols.len() >= 9);
        let __sym8 = __pop_Variant0(__symbols);
        let __sym7 = __pop_Variant21(__symbols);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant18(__symbols);
        let __sym3 = __pop_Variant19(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant18(__symbols);
        let __sym0 = __pop_Variant36(__symbols);
        let __start = __sym0.0;
        let __end = __sym8.2;
        let __nt = super::__action569::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (9, 48)
    }
    fn __reduce130<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // EffectDef = KeywordAndVisibility<Effect>, Ident, ":", (<Ident> "+")+, "{", "\n", (<Prototype> "\n")+, "}" => ActionFn(570);
        assert!(__symbols.len() >= 8);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant21(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant19(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant18(__symbols);
        let __sym0 = __pop_Variant36(__symbols);
        let __start = __sym0.0;
        let __end = __sym7.2;
        let __nt = super::__action570::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (8, 48)
    }
    fn __reduce131<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // EffectDef = KeywordAndVisibility<Effect>, Ident, ":", Ident, "{", Prototype, "}" => ActionFn(571);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant20(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant18(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant18(__symbols);
        let __sym0 = __pop_Variant36(__symbols);
        let __start = __sym0.0;
        let __end = __sym6.2;
        let __nt = super::__action571::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (7, 48)
    }
    fn __reduce132<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // EffectDef = KeywordAndVisibility<Effect>, Ident, ":", "{", Prototype, "}" => ActionFn(572);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant20(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant18(__symbols);
        let __sym0 = __pop_Variant36(__symbols);
        let __start = __sym0.0;
        let __end = __sym5.2;
        let __nt = super::__action572::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (6, 48)
    }
    fn __reduce133<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // EffectDef = KeywordAndVisibility<Effect>, Ident, ":", (<Ident> "+")+, Ident, "{", Prototype, "}" => ActionFn(573);
        assert!(__symbols.len() >= 8);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant20(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant18(__symbols);
        let __sym3 = __pop_Variant19(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant18(__symbols);
        let __sym0 = __pop_Variant36(__symbols);
        let __start = __sym0.0;
        let __end = __sym7.2;
        let __nt = super::__action573::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (8, 48)
    }
    fn __reduce134<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // EffectDef = KeywordAndVisibility<Effect>, Ident, ":", (<Ident> "+")+, "{", Prototype, "}" => ActionFn(574);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant20(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant19(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant18(__symbols);
        let __sym0 = __pop_Variant36(__symbols);
        let __start = __sym0.0;
        let __end = __sym6.2;
        let __nt = super::__action574::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (7, 48)
    }
    fn __reduce135<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // EffectDef = KeywordAndVisibility<Effect>, Ident, ":", Ident, "{", "}" => ActionFn(575);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant18(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant18(__symbols);
        let __sym0 = __pop_Variant36(__symbols);
        let __start = __sym0.0;
        let __end = __sym5.2;
        let __nt = super::__action575::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (6, 48)
    }
    fn __reduce136<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // EffectDef = KeywordAndVisibility<Effect>, Ident, ":", "{", "}" => ActionFn(576);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant18(__symbols);
        let __sym0 = __pop_Variant36(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action576::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (5, 48)
    }
    fn __reduce137<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // EffectDef = KeywordAndVisibility<Effect>, Ident, ":", (<Ident> "+")+, Ident, "{", "}" => ActionFn(577);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant18(__symbols);
        let __sym3 = __pop_Variant19(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant18(__symbols);
        let __sym0 = __pop_Variant36(__symbols);
        let __start = __sym0.0;
        let __end = __sym6.2;
        let __nt = super::__action577::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (7, 48)
    }
    fn __reduce138<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // EffectDef = KeywordAndVisibility<Effect>, Ident, ":", (<Ident> "+")+, "{", "}" => ActionFn(578);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant19(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant18(__symbols);
        let __sym0 = __pop_Variant36(__symbols);
        let __start = __sym0.0;
        let __end = __sym5.2;
        let __nt = super::__action578::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (6, 48)
    }
    fn __reduce139<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // EffectDef = KeywordAndVisibility<Effect>, Ident, ":", Ident, "{", (<Prototype> "\n")+, Prototype, "}" => ActionFn(579);
        assert!(__symbols.len() >= 8);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant20(__symbols);
        let __sym5 = __pop_Variant21(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant18(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant18(__symbols);
        let __sym0 = __pop_Variant36(__symbols);
        let __start = __sym0.0;
        let __end = __sym7.2;
        let __nt = super::__action579::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (8, 48)
    }
    fn __reduce140<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // EffectDef = KeywordAndVisibility<Effect>, Ident, ":", "{", (<Prototype> "\n")+, Prototype, "}" => ActionFn(580);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant20(__symbols);
        let __sym4 = __pop_Variant21(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant18(__symbols);
        let __sym0 = __pop_Variant36(__symbols);
        let __start = __sym0.0;
        let __end = __sym6.2;
        let __nt = super::__action580::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (7, 48)
    }
    fn __reduce141<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // EffectDef = KeywordAndVisibility<Effect>, Ident, ":", (<Ident> "+")+, Ident, "{", (<Prototype> "\n")+, Prototype, "}" => ActionFn(581);
        assert!(__symbols.len() >= 9);
        let __sym8 = __pop_Variant0(__symbols);
        let __sym7 = __pop_Variant20(__symbols);
        let __sym6 = __pop_Variant21(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant18(__symbols);
        let __sym3 = __pop_Variant19(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant18(__symbols);
        let __sym0 = __pop_Variant36(__symbols);
        let __start = __sym0.0;
        let __end = __sym8.2;
        let __nt = super::__action581::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (9, 48)
    }
    fn __reduce142<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // EffectDef = KeywordAndVisibility<Effect>, Ident, ":", (<Ident> "+")+, "{", (<Prototype> "\n")+, Prototype, "}" => ActionFn(582);
        assert!(__symbols.len() >= 8);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant20(__symbols);
        let __sym5 = __pop_Variant21(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant19(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant18(__symbols);
        let __sym0 = __pop_Variant36(__symbols);
        let __start = __sym0.0;
        let __end = __sym7.2;
        let __nt = super::__action582::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (8, 48)
    }
    fn __reduce143<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // EffectDef = KeywordAndVisibility<Effect>, Ident, ":", Ident, "{", (<Prototype> "\n")+, "}" => ActionFn(583);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant21(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant18(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant18(__symbols);
        let __sym0 = __pop_Variant36(__symbols);
        let __start = __sym0.0;
        let __end = __sym6.2;
        let __nt = super::__action583::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (7, 48)
    }
    fn __reduce144<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // EffectDef = KeywordAndVisibility<Effect>, Ident, ":", "{", (<Prototype> "\n")+, "}" => ActionFn(584);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant21(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant18(__symbols);
        let __sym0 = __pop_Variant36(__symbols);
        let __start = __sym0.0;
        let __end = __sym5.2;
        let __nt = super::__action584::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (6, 48)
    }
    fn __reduce145<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // EffectDef = KeywordAndVisibility<Effect>, Ident, ":", (<Ident> "+")+, Ident, "{", (<Prototype> "\n")+, "}" => ActionFn(585);
        assert!(__symbols.len() >= 8);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant21(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant18(__symbols);
        let __sym3 = __pop_Variant19(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant18(__symbols);
        let __sym0 = __pop_Variant36(__symbols);
        let __start = __sym0.0;
        let __end = __sym7.2;
        let __nt = super::__action585::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (8, 48)
    }
    fn __reduce146<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // EffectDef = KeywordAndVisibility<Effect>, Ident, ":", (<Ident> "+")+, "{", (<Prototype> "\n")+, "}" => ActionFn(586);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant21(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant19(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant18(__symbols);
        let __sym0 = __pop_Variant36(__symbols);
        let __start = __sym0.0;
        let __end = __sym6.2;
        let __nt = super::__action586::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (7, 48)
    }
    fn __reduce147<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Else = "else" => ActionFn(273);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action273::<>(errors, db, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 49)
    }
    fn __reduce148<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Expression = Expression, "+", Expression2 => ActionFn(29);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant12(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action29::<>(errors, db, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (3, 50)
    }
    fn __reduce149<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Expression = Expression, "-", Expression2 => ActionFn(30);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant12(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action30::<>(errors, db, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (3, 50)
    }
    fn __reduce150<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Expression = Expression2 => ActionFn(31);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action31::<>(errors, db, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 50)
    }
    fn __reduce151<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Expression1 = Term => ActionFn(25);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action25::<>(errors, db, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 51)
    }
    fn __reduce152<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Expression2 = Expression2, "*", Expression1 => ActionFn(26);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant12(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action26::<>(errors, db, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (3, 52)
    }
    fn __reduce153<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Expression2 = Expression2, "/", Expression1 => ActionFn(274);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant12(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action274::<>(errors, db, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (3, 52)
    }
    fn __reduce154<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Expression2 = Expression1 => ActionFn(28);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action28::<>(errors, db, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 52)
    }
    fn __reduce155<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Expression? = Expression => ActionFn(103);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action103::<>(errors, db, __sym0);
        __symbols.push((__start, __Symbol::Variant31(__nt), __end));
        (1, 53)
    }
    fn __reduce156<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Expression? =  => ActionFn(104);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action104::<>(errors, db, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant31(__nt), __end));
        (0, 53)
    }
    fn __reduce157<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // False = "false" => ActionFn(13);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action13::<>(errors, db, __sym0);
        __symbols.push((__start, __Symbol::Variant32(__nt), __end));
        (1, 54)
    }
    fn __reduce158<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Field = Visibility, Ident, ":", IdentOrIdentWithGenerics => ActionFn(44);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant18(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant18(__symbols);
        let __sym0 = __pop_Variant45(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action44::<>(errors, db, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (4, 55)
    }
    fn __reduce159<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Field? = Field => ActionFn(134);
        let __sym0 = __pop_Variant14(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action134::<>(errors, db, __sym0);
        __symbols.push((__start, __Symbol::Variant33(__nt), __end));
        (1, 56)
    }
    fn __reduce160<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Field? =  => ActionFn(135);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action135::<>(errors, db, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant33(__nt), __end));
        (0, 56)
    }
    fn __reduce161<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // FieldAccess = FieldAccess, ".", IdentOrIdentWithGenericsOrFnCall => ActionFn(42);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant12(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action42::<>(errors, db, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (3, 57)
    }
    fn __reduce162<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // FieldAccess = IdentOrIdentWithGenericsOrFnCall => ActionFn(43);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action43::<>(errors, db, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 57)
    }
    fn __reduce163<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Fn = "fn" => ActionFn(275);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action275::<>(errors, db, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 58)
    }
    fn __reduce164<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // FnArg = "self" => ActionFn(587);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action587::<>(errors, db, __sym0);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (1, 59)
    }
    fn __reduce165<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // FnArg = Field => ActionFn(588);
        let __sym0 = __pop_Variant14(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action588::<>(errors, db, __sym0);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (1, 59)
    }
    fn __reduce166<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // FnArg? = FnArg => ActionFn(108);
        let __sym0 = __pop_Variant16(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action108::<>(errors, db, __sym0);
        __symbols.push((__start, __Symbol::Variant34(__nt), __end));
        (1, 60)
    }
    fn __reduce167<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // FnArg? =  => ActionFn(109);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action109::<>(errors, db, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant34(__nt), __end));
        (0, 60)
    }
    fn __reduce168<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // FnCall = IdentOrIdentWithGenerics, "(", Expression, ")" => ActionFn(487);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant12(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action487::<>(errors, db, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (4, 61)
    }
    fn __reduce169<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // FnCall = IdentOrIdentWithGenerics, "(", ")" => ActionFn(488);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action488::<>(errors, db, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (3, 61)
    }
    fn __reduce170<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // FnCall = IdentOrIdentWithGenerics, "(", (<Expression> ",")+, Expression, ")" => ActionFn(489);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant12(__symbols);
        let __sym2 = __pop_Variant13(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action489::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (5, 61)
    }
    fn __reduce171<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // FnCall = IdentOrIdentWithGenerics, "(", (<Expression> ",")+, ")" => ActionFn(490);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant13(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action490::<>(errors, db, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (4, 61)
    }
    fn __reduce172<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // FnDef = KeywordAndVisibility<Fn>, Prototype, "{", "\n", Statement, "}" => ActionFn(395);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant12(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant20(__symbols);
        let __sym0 = __pop_Variant36(__symbols);
        let __start = __sym0.0;
        let __end = __sym5.2;
        let __nt = super::__action395::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (6, 62)
    }
    fn __reduce173<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // FnDef = KeywordAndVisibility<Fn>, Prototype, "{", "\n", "}" => ActionFn(396);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant20(__symbols);
        let __sym0 = __pop_Variant36(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action396::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (5, 62)
    }
    fn __reduce174<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // FnDef = KeywordAndVisibility<Fn>, Prototype, "{", "\n", (<Statement> "\n")+, Statement, "}" => ActionFn(397);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant12(__symbols);
        let __sym4 = __pop_Variant13(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant20(__symbols);
        let __sym0 = __pop_Variant36(__symbols);
        let __start = __sym0.0;
        let __end = __sym6.2;
        let __nt = super::__action397::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (7, 62)
    }
    fn __reduce175<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // FnDef = KeywordAndVisibility<Fn>, Prototype, "{", "\n", (<Statement> "\n")+, "}" => ActionFn(398);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant13(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant20(__symbols);
        let __sym0 = __pop_Variant36(__symbols);
        let __start = __sym0.0;
        let __end = __sym5.2;
        let __nt = super::__action398::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (6, 62)
    }
    fn __reduce176<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // FnDef = KeywordAndVisibility<Fn>, Prototype, "{", Statement, "}" => ActionFn(399);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant12(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant20(__symbols);
        let __sym0 = __pop_Variant36(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action399::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (5, 62)
    }
    fn __reduce177<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // FnDef = KeywordAndVisibility<Fn>, Prototype, "{", "}" => ActionFn(400);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant20(__symbols);
        let __sym0 = __pop_Variant36(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action400::<>(errors, db, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (4, 62)
    }
    fn __reduce178<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // FnDef = KeywordAndVisibility<Fn>, Prototype, "{", (<Statement> "\n")+, Statement, "}" => ActionFn(401);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant12(__symbols);
        let __sym3 = __pop_Variant13(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant20(__symbols);
        let __sym0 = __pop_Variant36(__symbols);
        let __start = __sym0.0;
        let __end = __sym5.2;
        let __nt = super::__action401::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (6, 62)
    }
    fn __reduce179<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // FnDef = KeywordAndVisibility<Fn>, Prototype, "{", (<Statement> "\n")+, "}" => ActionFn(402);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant13(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant20(__symbols);
        let __sym0 = __pop_Variant36(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action402::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (5, 62)
    }
    fn __reduce180<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // FnDef? = FnDef => ActionFn(129);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action129::<>(errors, db, __sym0);
        __symbols.push((__start, __Symbol::Variant31(__nt), __end));
        (1, 63)
    }
    fn __reduce181<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // FnDef? =  => ActionFn(130);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action130::<>(errors, db, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant31(__nt), __end));
        (0, 63)
    }
    fn __reduce182<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // From = "from" => ActionFn(278);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action278::<>(errors, db, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 64)
    }
    fn __reduce183<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Ident = "ident" => ActionFn(279);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action279::<>(errors, db, __sym0);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (1, 65)
    }
    fn __reduce184<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Ident? = Ident => ActionFn(114);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action114::<>(errors, db, __sym0);
        __symbols.push((__start, __Symbol::Variant35(__nt), __end));
        (1, 66)
    }
    fn __reduce185<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Ident? =  => ActionFn(115);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action115::<>(errors, db, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant35(__nt), __end));
        (0, 66)
    }
    fn __reduce186<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // IdentOrIdentWithGenerics = Ident => ActionFn(16);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action16::<>(errors, db, __sym0);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (1, 67)
    }
    fn __reduce187<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // IdentOrIdentWithGenerics = IdentWithGenerics => ActionFn(17);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action17::<>(errors, db, __sym0);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (1, 67)
    }
    fn __reduce188<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // IdentOrIdentWithGenerics = "self" => ActionFn(280);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action280::<>(errors, db, __sym0);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (1, 67)
    }
    fn __reduce189<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // IdentOrIdentWithGenericsOrFnCall = IdentOrIdentWithGenerics => ActionFn(40);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action40::<>(errors, db, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 68)
    }
    fn __reduce190<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // IdentOrIdentWithGenericsOrFnCall = FnCall => ActionFn(41);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action41::<>(errors, db, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 68)
    }
    fn __reduce191<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // IdentWithGenerics = "ident", "<", Ident, ">" => ActionFn(511);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant18(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action511::<>(errors, db, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (4, 69)
    }
    fn __reduce192<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // IdentWithGenerics = "ident", "<", ">" => ActionFn(512);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action512::<>(errors, db, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (3, 69)
    }
    fn __reduce193<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // IdentWithGenerics = "ident", "<", (<Ident> ",")+, Ident, ">" => ActionFn(513);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant18(__symbols);
        let __sym2 = __pop_Variant19(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action513::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (5, 69)
    }
    fn __reduce194<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // IdentWithGenerics = "ident", "<", (<Ident> ",")+, ">" => ActionFn(514);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant19(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action514::<>(errors, db, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (4, 69)
    }
    fn __reduce195<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // If = "if" => ActionFn(282);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action282::<>(errors, db, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 70)
    }
    fn __reduce196<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // IfDef = If, Statement, "{", "\n", Statement, "}" => ActionFn(403);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant12(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0;
        let __end = __sym5.2;
        let __nt = super::__action403::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (6, 71)
    }
    fn __reduce197<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // IfDef = If, Statement, "{", "\n", "}" => ActionFn(404);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action404::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (5, 71)
    }
    fn __reduce198<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // IfDef = If, Statement, "{", "\n", (<Statement> "\n")+, Statement, "}" => ActionFn(405);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant12(__symbols);
        let __sym4 = __pop_Variant13(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0;
        let __end = __sym6.2;
        let __nt = super::__action405::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (7, 71)
    }
    fn __reduce199<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // IfDef = If, Statement, "{", "\n", (<Statement> "\n")+, "}" => ActionFn(406);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant13(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0;
        let __end = __sym5.2;
        let __nt = super::__action406::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (6, 71)
    }
    fn __reduce200<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // IfDef = If, Statement, "{", Statement, "}" => ActionFn(407);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant12(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action407::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (5, 71)
    }
    fn __reduce201<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // IfDef = If, Statement, "{", "}" => ActionFn(408);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action408::<>(errors, db, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (4, 71)
    }
    fn __reduce202<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // IfDef = If, Statement, "{", (<Statement> "\n")+, Statement, "}" => ActionFn(409);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant12(__symbols);
        let __sym3 = __pop_Variant13(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0;
        let __end = __sym5.2;
        let __nt = super::__action409::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (6, 71)
    }
    fn __reduce203<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // IfDef = If, Statement, "{", (<Statement> "\n")+, "}" => ActionFn(410);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant13(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action410::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (5, 71)
    }
    fn __reduce204<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // IfDef = If, Statement, "{", "\n", Statement, "}", Else, "{", "\n", Statement, "}" => ActionFn(411);
        assert!(__symbols.len() >= 11);
        let __sym10 = __pop_Variant0(__symbols);
        let __sym9 = __pop_Variant12(__symbols);
        let __sym8 = __pop_Variant0(__symbols);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant30(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant12(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0;
        let __end = __sym10.2;
        let __nt = super::__action411::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, __sym9, __sym10);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (11, 71)
    }
    fn __reduce205<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // IfDef = If, Statement, "{", "\n", Statement, "}", Else, "{", "\n", "}" => ActionFn(412);
        assert!(__symbols.len() >= 10);
        let __sym9 = __pop_Variant0(__symbols);
        let __sym8 = __pop_Variant0(__symbols);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant30(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant12(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0;
        let __end = __sym9.2;
        let __nt = super::__action412::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, __sym9);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (10, 71)
    }
    fn __reduce206<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // IfDef = If, Statement, "{", "\n", Statement, "}", Else, "{", "\n", (<Statement> "\n")+, Statement, "}" => ActionFn(413);
        assert!(__symbols.len() >= 12);
        let __sym11 = __pop_Variant0(__symbols);
        let __sym10 = __pop_Variant12(__symbols);
        let __sym9 = __pop_Variant13(__symbols);
        let __sym8 = __pop_Variant0(__symbols);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant30(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant12(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0;
        let __end = __sym11.2;
        let __nt = super::__action413::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, __sym9, __sym10, __sym11);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (12, 71)
    }
    fn __reduce207<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // IfDef = If, Statement, "{", "\n", Statement, "}", Else, "{", "\n", (<Statement> "\n")+, "}" => ActionFn(414);
        assert!(__symbols.len() >= 11);
        let __sym10 = __pop_Variant0(__symbols);
        let __sym9 = __pop_Variant13(__symbols);
        let __sym8 = __pop_Variant0(__symbols);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant30(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant12(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0;
        let __end = __sym10.2;
        let __nt = super::__action414::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, __sym9, __sym10);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (11, 71)
    }
    fn __reduce208<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // IfDef = If, Statement, "{", "\n", Statement, "}", Else, "{", Statement, "}" => ActionFn(415);
        assert!(__symbols.len() >= 10);
        let __sym9 = __pop_Variant0(__symbols);
        let __sym8 = __pop_Variant12(__symbols);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant30(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant12(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0;
        let __end = __sym9.2;
        let __nt = super::__action415::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, __sym9);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (10, 71)
    }
    fn __reduce209<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // IfDef = If, Statement, "{", "\n", Statement, "}", Else, "{", "}" => ActionFn(416);
        assert!(__symbols.len() >= 9);
        let __sym8 = __pop_Variant0(__symbols);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant30(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant12(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0;
        let __end = __sym8.2;
        let __nt = super::__action416::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (9, 71)
    }
    fn __reduce210<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // IfDef = If, Statement, "{", "\n", Statement, "}", Else, "{", (<Statement> "\n")+, Statement, "}" => ActionFn(417);
        assert!(__symbols.len() >= 11);
        let __sym10 = __pop_Variant0(__symbols);
        let __sym9 = __pop_Variant12(__symbols);
        let __sym8 = __pop_Variant13(__symbols);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant30(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant12(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0;
        let __end = __sym10.2;
        let __nt = super::__action417::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, __sym9, __sym10);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (11, 71)
    }
    fn __reduce211<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // IfDef = If, Statement, "{", "\n", Statement, "}", Else, "{", (<Statement> "\n")+, "}" => ActionFn(418);
        assert!(__symbols.len() >= 10);
        let __sym9 = __pop_Variant0(__symbols);
        let __sym8 = __pop_Variant13(__symbols);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant30(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant12(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0;
        let __end = __sym9.2;
        let __nt = super::__action418::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, __sym9);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (10, 71)
    }
    fn __reduce212<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // IfDef = If, Statement, "{", "\n", "}", Else, "{", "\n", Statement, "}" => ActionFn(419);
        assert!(__symbols.len() >= 10);
        let __sym9 = __pop_Variant0(__symbols);
        let __sym8 = __pop_Variant12(__symbols);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant30(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0;
        let __end = __sym9.2;
        let __nt = super::__action419::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, __sym9);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (10, 71)
    }
    fn __reduce213<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // IfDef = If, Statement, "{", "\n", "}", Else, "{", "\n", "}" => ActionFn(420);
        assert!(__symbols.len() >= 9);
        let __sym8 = __pop_Variant0(__symbols);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant30(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0;
        let __end = __sym8.2;
        let __nt = super::__action420::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (9, 71)
    }
    fn __reduce214<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // IfDef = If, Statement, "{", "\n", "}", Else, "{", "\n", (<Statement> "\n")+, Statement, "}" => ActionFn(421);
        assert!(__symbols.len() >= 11);
        let __sym10 = __pop_Variant0(__symbols);
        let __sym9 = __pop_Variant12(__symbols);
        let __sym8 = __pop_Variant13(__symbols);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant30(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0;
        let __end = __sym10.2;
        let __nt = super::__action421::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, __sym9, __sym10);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (11, 71)
    }
    fn __reduce215<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // IfDef = If, Statement, "{", "\n", "}", Else, "{", "\n", (<Statement> "\n")+, "}" => ActionFn(422);
        assert!(__symbols.len() >= 10);
        let __sym9 = __pop_Variant0(__symbols);
        let __sym8 = __pop_Variant13(__symbols);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant30(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0;
        let __end = __sym9.2;
        let __nt = super::__action422::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, __sym9);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (10, 71)
    }
    fn __reduce216<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // IfDef = If, Statement, "{", "\n", "}", Else, "{", Statement, "}" => ActionFn(423);
        assert!(__symbols.len() >= 9);
        let __sym8 = __pop_Variant0(__symbols);
        let __sym7 = __pop_Variant12(__symbols);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant30(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0;
        let __end = __sym8.2;
        let __nt = super::__action423::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (9, 71)
    }
    fn __reduce217<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // IfDef = If, Statement, "{", "\n", "}", Else, "{", "}" => ActionFn(424);
        assert!(__symbols.len() >= 8);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant30(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0;
        let __end = __sym7.2;
        let __nt = super::__action424::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (8, 71)
    }
    fn __reduce218<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // IfDef = If, Statement, "{", "\n", "}", Else, "{", (<Statement> "\n")+, Statement, "}" => ActionFn(425);
        assert!(__symbols.len() >= 10);
        let __sym9 = __pop_Variant0(__symbols);
        let __sym8 = __pop_Variant12(__symbols);
        let __sym7 = __pop_Variant13(__symbols);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant30(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0;
        let __end = __sym9.2;
        let __nt = super::__action425::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, __sym9);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (10, 71)
    }
    fn __reduce219<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // IfDef = If, Statement, "{", "\n", "}", Else, "{", (<Statement> "\n")+, "}" => ActionFn(426);
        assert!(__symbols.len() >= 9);
        let __sym8 = __pop_Variant0(__symbols);
        let __sym7 = __pop_Variant13(__symbols);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant30(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0;
        let __end = __sym8.2;
        let __nt = super::__action426::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (9, 71)
    }
    fn __reduce220<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // IfDef = If, Statement, "{", "\n", (<Statement> "\n")+, Statement, "}", Else, "{", "\n", Statement, "}" => ActionFn(427);
        assert!(__symbols.len() >= 12);
        let __sym11 = __pop_Variant0(__symbols);
        let __sym10 = __pop_Variant12(__symbols);
        let __sym9 = __pop_Variant0(__symbols);
        let __sym8 = __pop_Variant0(__symbols);
        let __sym7 = __pop_Variant30(__symbols);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant12(__symbols);
        let __sym4 = __pop_Variant13(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0;
        let __end = __sym11.2;
        let __nt = super::__action427::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, __sym9, __sym10, __sym11);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (12, 71)
    }
    fn __reduce221<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // IfDef = If, Statement, "{", "\n", (<Statement> "\n")+, Statement, "}", Else, "{", "\n", "}" => ActionFn(428);
        assert!(__symbols.len() >= 11);
        let __sym10 = __pop_Variant0(__symbols);
        let __sym9 = __pop_Variant0(__symbols);
        let __sym8 = __pop_Variant0(__symbols);
        let __sym7 = __pop_Variant30(__symbols);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant12(__symbols);
        let __sym4 = __pop_Variant13(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0;
        let __end = __sym10.2;
        let __nt = super::__action428::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, __sym9, __sym10);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (11, 71)
    }
    fn __reduce222<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // IfDef = If, Statement, "{", "\n", (<Statement> "\n")+, Statement, "}", Else, "{", "\n", (<Statement> "\n")+, Statement, "}" => ActionFn(429);
        assert!(__symbols.len() >= 13);
        let __sym12 = __pop_Variant0(__symbols);
        let __sym11 = __pop_Variant12(__symbols);
        let __sym10 = __pop_Variant13(__symbols);
        let __sym9 = __pop_Variant0(__symbols);
        let __sym8 = __pop_Variant0(__symbols);
        let __sym7 = __pop_Variant30(__symbols);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant12(__symbols);
        let __sym4 = __pop_Variant13(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0;
        let __end = __sym12.2;
        let __nt = super::__action429::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, __sym9, __sym10, __sym11, __sym12);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (13, 71)
    }
    fn __reduce223<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // IfDef = If, Statement, "{", "\n", (<Statement> "\n")+, Statement, "}", Else, "{", "\n", (<Statement> "\n")+, "}" => ActionFn(430);
        assert!(__symbols.len() >= 12);
        let __sym11 = __pop_Variant0(__symbols);
        let __sym10 = __pop_Variant13(__symbols);
        let __sym9 = __pop_Variant0(__symbols);
        let __sym8 = __pop_Variant0(__symbols);
        let __sym7 = __pop_Variant30(__symbols);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant12(__symbols);
        let __sym4 = __pop_Variant13(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0;
        let __end = __sym11.2;
        let __nt = super::__action430::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, __sym9, __sym10, __sym11);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (12, 71)
    }
    fn __reduce224<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // IfDef = If, Statement, "{", "\n", (<Statement> "\n")+, Statement, "}", Else, "{", Statement, "}" => ActionFn(431);
        assert!(__symbols.len() >= 11);
        let __sym10 = __pop_Variant0(__symbols);
        let __sym9 = __pop_Variant12(__symbols);
        let __sym8 = __pop_Variant0(__symbols);
        let __sym7 = __pop_Variant30(__symbols);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant12(__symbols);
        let __sym4 = __pop_Variant13(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0;
        let __end = __sym10.2;
        let __nt = super::__action431::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, __sym9, __sym10);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (11, 71)
    }
    fn __reduce225<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // IfDef = If, Statement, "{", "\n", (<Statement> "\n")+, Statement, "}", Else, "{", "}" => ActionFn(432);
        assert!(__symbols.len() >= 10);
        let __sym9 = __pop_Variant0(__symbols);
        let __sym8 = __pop_Variant0(__symbols);
        let __sym7 = __pop_Variant30(__symbols);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant12(__symbols);
        let __sym4 = __pop_Variant13(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0;
        let __end = __sym9.2;
        let __nt = super::__action432::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, __sym9);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (10, 71)
    }
    fn __reduce226<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // IfDef = If, Statement, "{", "\n", (<Statement> "\n")+, Statement, "}", Else, "{", (<Statement> "\n")+, Statement, "}" => ActionFn(433);
        assert!(__symbols.len() >= 12);
        let __sym11 = __pop_Variant0(__symbols);
        let __sym10 = __pop_Variant12(__symbols);
        let __sym9 = __pop_Variant13(__symbols);
        let __sym8 = __pop_Variant0(__symbols);
        let __sym7 = __pop_Variant30(__symbols);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant12(__symbols);
        let __sym4 = __pop_Variant13(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0;
        let __end = __sym11.2;
        let __nt = super::__action433::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, __sym9, __sym10, __sym11);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (12, 71)
    }
    fn __reduce227<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // IfDef = If, Statement, "{", "\n", (<Statement> "\n")+, Statement, "}", Else, "{", (<Statement> "\n")+, "}" => ActionFn(434);
        assert!(__symbols.len() >= 11);
        let __sym10 = __pop_Variant0(__symbols);
        let __sym9 = __pop_Variant13(__symbols);
        let __sym8 = __pop_Variant0(__symbols);
        let __sym7 = __pop_Variant30(__symbols);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant12(__symbols);
        let __sym4 = __pop_Variant13(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0;
        let __end = __sym10.2;
        let __nt = super::__action434::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, __sym9, __sym10);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (11, 71)
    }
    fn __reduce228<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // IfDef = If, Statement, "{", "\n", (<Statement> "\n")+, "}", Else, "{", "\n", Statement, "}" => ActionFn(435);
        assert!(__symbols.len() >= 11);
        let __sym10 = __pop_Variant0(__symbols);
        let __sym9 = __pop_Variant12(__symbols);
        let __sym8 = __pop_Variant0(__symbols);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant30(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant13(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0;
        let __end = __sym10.2;
        let __nt = super::__action435::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, __sym9, __sym10);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (11, 71)
    }
    fn __reduce229<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // IfDef = If, Statement, "{", "\n", (<Statement> "\n")+, "}", Else, "{", "\n", "}" => ActionFn(436);
        assert!(__symbols.len() >= 10);
        let __sym9 = __pop_Variant0(__symbols);
        let __sym8 = __pop_Variant0(__symbols);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant30(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant13(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0;
        let __end = __sym9.2;
        let __nt = super::__action436::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, __sym9);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (10, 71)
    }
    fn __reduce230<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // IfDef = If, Statement, "{", "\n", (<Statement> "\n")+, "}", Else, "{", "\n", (<Statement> "\n")+, Statement, "}" => ActionFn(437);
        assert!(__symbols.len() >= 12);
        let __sym11 = __pop_Variant0(__symbols);
        let __sym10 = __pop_Variant12(__symbols);
        let __sym9 = __pop_Variant13(__symbols);
        let __sym8 = __pop_Variant0(__symbols);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant30(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant13(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0;
        let __end = __sym11.2;
        let __nt = super::__action437::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, __sym9, __sym10, __sym11);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (12, 71)
    }
    fn __reduce231<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // IfDef = If, Statement, "{", "\n", (<Statement> "\n")+, "}", Else, "{", "\n", (<Statement> "\n")+, "}" => ActionFn(438);
        assert!(__symbols.len() >= 11);
        let __sym10 = __pop_Variant0(__symbols);
        let __sym9 = __pop_Variant13(__symbols);
        let __sym8 = __pop_Variant0(__symbols);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant30(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant13(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0;
        let __end = __sym10.2;
        let __nt = super::__action438::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, __sym9, __sym10);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (11, 71)
    }
    fn __reduce232<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // IfDef = If, Statement, "{", "\n", (<Statement> "\n")+, "}", Else, "{", Statement, "}" => ActionFn(439);
        assert!(__symbols.len() >= 10);
        let __sym9 = __pop_Variant0(__symbols);
        let __sym8 = __pop_Variant12(__symbols);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant30(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant13(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0;
        let __end = __sym9.2;
        let __nt = super::__action439::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, __sym9);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (10, 71)
    }
    fn __reduce233<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // IfDef = If, Statement, "{", "\n", (<Statement> "\n")+, "}", Else, "{", "}" => ActionFn(440);
        assert!(__symbols.len() >= 9);
        let __sym8 = __pop_Variant0(__symbols);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant30(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant13(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0;
        let __end = __sym8.2;
        let __nt = super::__action440::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (9, 71)
    }
    fn __reduce234<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // IfDef = If, Statement, "{", "\n", (<Statement> "\n")+, "}", Else, "{", (<Statement> "\n")+, Statement, "}" => ActionFn(441);
        assert!(__symbols.len() >= 11);
        let __sym10 = __pop_Variant0(__symbols);
        let __sym9 = __pop_Variant12(__symbols);
        let __sym8 = __pop_Variant13(__symbols);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant30(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant13(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0;
        let __end = __sym10.2;
        let __nt = super::__action441::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, __sym9, __sym10);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (11, 71)
    }
    fn __reduce235<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // IfDef = If, Statement, "{", "\n", (<Statement> "\n")+, "}", Else, "{", (<Statement> "\n")+, "}" => ActionFn(442);
        assert!(__symbols.len() >= 10);
        let __sym9 = __pop_Variant0(__symbols);
        let __sym8 = __pop_Variant13(__symbols);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant30(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant13(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0;
        let __end = __sym9.2;
        let __nt = super::__action442::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, __sym9);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (10, 71)
    }
    fn __reduce236<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // IfDef = If, Statement, "{", Statement, "}", Else, "{", "\n", Statement, "}" => ActionFn(443);
        assert!(__symbols.len() >= 10);
        let __sym9 = __pop_Variant0(__symbols);
        let __sym8 = __pop_Variant12(__symbols);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant30(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant12(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0;
        let __end = __sym9.2;
        let __nt = super::__action443::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, __sym9);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (10, 71)
    }
    fn __reduce237<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // IfDef = If, Statement, "{", Statement, "}", Else, "{", "\n", "}" => ActionFn(444);
        assert!(__symbols.len() >= 9);
        let __sym8 = __pop_Variant0(__symbols);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant30(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant12(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0;
        let __end = __sym8.2;
        let __nt = super::__action444::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (9, 71)
    }
    fn __reduce238<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // IfDef = If, Statement, "{", Statement, "}", Else, "{", "\n", (<Statement> "\n")+, Statement, "}" => ActionFn(445);
        assert!(__symbols.len() >= 11);
        let __sym10 = __pop_Variant0(__symbols);
        let __sym9 = __pop_Variant12(__symbols);
        let __sym8 = __pop_Variant13(__symbols);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant30(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant12(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0;
        let __end = __sym10.2;
        let __nt = super::__action445::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, __sym9, __sym10);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (11, 71)
    }
    fn __reduce239<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // IfDef = If, Statement, "{", Statement, "}", Else, "{", "\n", (<Statement> "\n")+, "}" => ActionFn(446);
        assert!(__symbols.len() >= 10);
        let __sym9 = __pop_Variant0(__symbols);
        let __sym8 = __pop_Variant13(__symbols);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant30(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant12(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0;
        let __end = __sym9.2;
        let __nt = super::__action446::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, __sym9);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (10, 71)
    }
    fn __reduce240<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // IfDef = If, Statement, "{", Statement, "}", Else, "{", Statement, "}" => ActionFn(447);
        assert!(__symbols.len() >= 9);
        let __sym8 = __pop_Variant0(__symbols);
        let __sym7 = __pop_Variant12(__symbols);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant30(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant12(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0;
        let __end = __sym8.2;
        let __nt = super::__action447::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (9, 71)
    }
    fn __reduce241<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // IfDef = If, Statement, "{", Statement, "}", Else, "{", "}" => ActionFn(448);
        assert!(__symbols.len() >= 8);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant30(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant12(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0;
        let __end = __sym7.2;
        let __nt = super::__action448::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (8, 71)
    }
    fn __reduce242<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // IfDef = If, Statement, "{", Statement, "}", Else, "{", (<Statement> "\n")+, Statement, "}" => ActionFn(449);
        assert!(__symbols.len() >= 10);
        let __sym9 = __pop_Variant0(__symbols);
        let __sym8 = __pop_Variant12(__symbols);
        let __sym7 = __pop_Variant13(__symbols);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant30(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant12(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0;
        let __end = __sym9.2;
        let __nt = super::__action449::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, __sym9);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (10, 71)
    }
    fn __reduce243<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // IfDef = If, Statement, "{", Statement, "}", Else, "{", (<Statement> "\n")+, "}" => ActionFn(450);
        assert!(__symbols.len() >= 9);
        let __sym8 = __pop_Variant0(__symbols);
        let __sym7 = __pop_Variant13(__symbols);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant30(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant12(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0;
        let __end = __sym8.2;
        let __nt = super::__action450::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (9, 71)
    }
    fn __reduce244<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // IfDef = If, Statement, "{", "}", Else, "{", "\n", Statement, "}" => ActionFn(451);
        assert!(__symbols.len() >= 9);
        let __sym8 = __pop_Variant0(__symbols);
        let __sym7 = __pop_Variant12(__symbols);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant30(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0;
        let __end = __sym8.2;
        let __nt = super::__action451::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (9, 71)
    }
    fn __reduce245<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // IfDef = If, Statement, "{", "}", Else, "{", "\n", "}" => ActionFn(452);
        assert!(__symbols.len() >= 8);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant30(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0;
        let __end = __sym7.2;
        let __nt = super::__action452::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (8, 71)
    }
    fn __reduce246<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // IfDef = If, Statement, "{", "}", Else, "{", "\n", (<Statement> "\n")+, Statement, "}" => ActionFn(453);
        assert!(__symbols.len() >= 10);
        let __sym9 = __pop_Variant0(__symbols);
        let __sym8 = __pop_Variant12(__symbols);
        let __sym7 = __pop_Variant13(__symbols);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant30(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0;
        let __end = __sym9.2;
        let __nt = super::__action453::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, __sym9);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (10, 71)
    }
    fn __reduce247<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // IfDef = If, Statement, "{", "}", Else, "{", "\n", (<Statement> "\n")+, "}" => ActionFn(454);
        assert!(__symbols.len() >= 9);
        let __sym8 = __pop_Variant0(__symbols);
        let __sym7 = __pop_Variant13(__symbols);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant30(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0;
        let __end = __sym8.2;
        let __nt = super::__action454::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (9, 71)
    }
    fn __reduce248<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // IfDef = If, Statement, "{", "}", Else, "{", Statement, "}" => ActionFn(455);
        assert!(__symbols.len() >= 8);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant12(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant30(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0;
        let __end = __sym7.2;
        let __nt = super::__action455::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (8, 71)
    }
    fn __reduce249<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // IfDef = If, Statement, "{", "}", Else, "{", "}" => ActionFn(456);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant30(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0;
        let __end = __sym6.2;
        let __nt = super::__action456::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (7, 71)
    }
    fn __reduce250<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // IfDef = If, Statement, "{", "}", Else, "{", (<Statement> "\n")+, Statement, "}" => ActionFn(457);
        assert!(__symbols.len() >= 9);
        let __sym8 = __pop_Variant0(__symbols);
        let __sym7 = __pop_Variant12(__symbols);
        let __sym6 = __pop_Variant13(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant30(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0;
        let __end = __sym8.2;
        let __nt = super::__action457::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (9, 71)
    }
    fn __reduce251<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // IfDef = If, Statement, "{", "}", Else, "{", (<Statement> "\n")+, "}" => ActionFn(458);
        assert!(__symbols.len() >= 8);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant13(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant30(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0;
        let __end = __sym7.2;
        let __nt = super::__action458::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (8, 71)
    }
    fn __reduce252<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // IfDef = If, Statement, "{", (<Statement> "\n")+, Statement, "}", Else, "{", "\n", Statement, "}" => ActionFn(459);
        assert!(__symbols.len() >= 11);
        let __sym10 = __pop_Variant0(__symbols);
        let __sym9 = __pop_Variant12(__symbols);
        let __sym8 = __pop_Variant0(__symbols);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant30(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant12(__symbols);
        let __sym3 = __pop_Variant13(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0;
        let __end = __sym10.2;
        let __nt = super::__action459::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, __sym9, __sym10);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (11, 71)
    }
    fn __reduce253<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // IfDef = If, Statement, "{", (<Statement> "\n")+, Statement, "}", Else, "{", "\n", "}" => ActionFn(460);
        assert!(__symbols.len() >= 10);
        let __sym9 = __pop_Variant0(__symbols);
        let __sym8 = __pop_Variant0(__symbols);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant30(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant12(__symbols);
        let __sym3 = __pop_Variant13(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0;
        let __end = __sym9.2;
        let __nt = super::__action460::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, __sym9);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (10, 71)
    }
    fn __reduce254<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // IfDef = If, Statement, "{", (<Statement> "\n")+, Statement, "}", Else, "{", "\n", (<Statement> "\n")+, Statement, "}" => ActionFn(461);
        assert!(__symbols.len() >= 12);
        let __sym11 = __pop_Variant0(__symbols);
        let __sym10 = __pop_Variant12(__symbols);
        let __sym9 = __pop_Variant13(__symbols);
        let __sym8 = __pop_Variant0(__symbols);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant30(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant12(__symbols);
        let __sym3 = __pop_Variant13(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0;
        let __end = __sym11.2;
        let __nt = super::__action461::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, __sym9, __sym10, __sym11);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (12, 71)
    }
    fn __reduce255<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // IfDef = If, Statement, "{", (<Statement> "\n")+, Statement, "}", Else, "{", "\n", (<Statement> "\n")+, "}" => ActionFn(462);
        assert!(__symbols.len() >= 11);
        let __sym10 = __pop_Variant0(__symbols);
        let __sym9 = __pop_Variant13(__symbols);
        let __sym8 = __pop_Variant0(__symbols);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant30(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant12(__symbols);
        let __sym3 = __pop_Variant13(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0;
        let __end = __sym10.2;
        let __nt = super::__action462::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, __sym9, __sym10);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (11, 71)
    }
    fn __reduce256<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // IfDef = If, Statement, "{", (<Statement> "\n")+, Statement, "}", Else, "{", Statement, "}" => ActionFn(463);
        assert!(__symbols.len() >= 10);
        let __sym9 = __pop_Variant0(__symbols);
        let __sym8 = __pop_Variant12(__symbols);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant30(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant12(__symbols);
        let __sym3 = __pop_Variant13(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0;
        let __end = __sym9.2;
        let __nt = super::__action463::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, __sym9);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (10, 71)
    }
    fn __reduce257<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // IfDef = If, Statement, "{", (<Statement> "\n")+, Statement, "}", Else, "{", "}" => ActionFn(464);
        assert!(__symbols.len() >= 9);
        let __sym8 = __pop_Variant0(__symbols);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant30(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant12(__symbols);
        let __sym3 = __pop_Variant13(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0;
        let __end = __sym8.2;
        let __nt = super::__action464::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (9, 71)
    }
    fn __reduce258<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // IfDef = If, Statement, "{", (<Statement> "\n")+, Statement, "}", Else, "{", (<Statement> "\n")+, Statement, "}" => ActionFn(465);
        assert!(__symbols.len() >= 11);
        let __sym10 = __pop_Variant0(__symbols);
        let __sym9 = __pop_Variant12(__symbols);
        let __sym8 = __pop_Variant13(__symbols);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant30(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant12(__symbols);
        let __sym3 = __pop_Variant13(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0;
        let __end = __sym10.2;
        let __nt = super::__action465::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, __sym9, __sym10);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (11, 71)
    }
    fn __reduce259<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // IfDef = If, Statement, "{", (<Statement> "\n")+, Statement, "}", Else, "{", (<Statement> "\n")+, "}" => ActionFn(466);
        assert!(__symbols.len() >= 10);
        let __sym9 = __pop_Variant0(__symbols);
        let __sym8 = __pop_Variant13(__symbols);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant30(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant12(__symbols);
        let __sym3 = __pop_Variant13(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0;
        let __end = __sym9.2;
        let __nt = super::__action466::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, __sym9);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (10, 71)
    }
    fn __reduce260<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // IfDef = If, Statement, "{", (<Statement> "\n")+, "}", Else, "{", "\n", Statement, "}" => ActionFn(467);
        assert!(__symbols.len() >= 10);
        let __sym9 = __pop_Variant0(__symbols);
        let __sym8 = __pop_Variant12(__symbols);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant30(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant13(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0;
        let __end = __sym9.2;
        let __nt = super::__action467::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, __sym9);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (10, 71)
    }
    fn __reduce261<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // IfDef = If, Statement, "{", (<Statement> "\n")+, "}", Else, "{", "\n", "}" => ActionFn(468);
        assert!(__symbols.len() >= 9);
        let __sym8 = __pop_Variant0(__symbols);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant30(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant13(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0;
        let __end = __sym8.2;
        let __nt = super::__action468::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (9, 71)
    }
    fn __reduce262<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // IfDef = If, Statement, "{", (<Statement> "\n")+, "}", Else, "{", "\n", (<Statement> "\n")+, Statement, "}" => ActionFn(469);
        assert!(__symbols.len() >= 11);
        let __sym10 = __pop_Variant0(__symbols);
        let __sym9 = __pop_Variant12(__symbols);
        let __sym8 = __pop_Variant13(__symbols);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant30(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant13(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0;
        let __end = __sym10.2;
        let __nt = super::__action469::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, __sym9, __sym10);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (11, 71)
    }
    fn __reduce263<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // IfDef = If, Statement, "{", (<Statement> "\n")+, "}", Else, "{", "\n", (<Statement> "\n")+, "}" => ActionFn(470);
        assert!(__symbols.len() >= 10);
        let __sym9 = __pop_Variant0(__symbols);
        let __sym8 = __pop_Variant13(__symbols);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant30(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant13(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0;
        let __end = __sym9.2;
        let __nt = super::__action470::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, __sym9);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (10, 71)
    }
    fn __reduce264<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // IfDef = If, Statement, "{", (<Statement> "\n")+, "}", Else, "{", Statement, "}" => ActionFn(471);
        assert!(__symbols.len() >= 9);
        let __sym8 = __pop_Variant0(__symbols);
        let __sym7 = __pop_Variant12(__symbols);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant30(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant13(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0;
        let __end = __sym8.2;
        let __nt = super::__action471::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (9, 71)
    }
    fn __reduce265<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // IfDef = If, Statement, "{", (<Statement> "\n")+, "}", Else, "{", "}" => ActionFn(472);
        assert!(__symbols.len() >= 8);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant30(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant13(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0;
        let __end = __sym7.2;
        let __nt = super::__action472::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (8, 71)
    }
    fn __reduce266<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // IfDef = If, Statement, "{", (<Statement> "\n")+, "}", Else, "{", (<Statement> "\n")+, Statement, "}" => ActionFn(473);
        assert!(__symbols.len() >= 10);
        let __sym9 = __pop_Variant0(__symbols);
        let __sym8 = __pop_Variant12(__symbols);
        let __sym7 = __pop_Variant13(__symbols);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant30(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant13(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0;
        let __end = __sym9.2;
        let __nt = super::__action473::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, __sym9);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (10, 71)
    }
    fn __reduce267<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // IfDef = If, Statement, "{", (<Statement> "\n")+, "}", Else, "{", (<Statement> "\n")+, "}" => ActionFn(474);
        assert!(__symbols.len() >= 9);
        let __sym8 = __pop_Variant0(__symbols);
        let __sym7 = __pop_Variant13(__symbols);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant30(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant13(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0;
        let __end = __sym8.2;
        let __nt = super::__action474::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (9, 71)
    }
    fn __reduce268<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Impl = "impl" => ActionFn(285);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action285::<>(errors, db, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 72)
    }
    fn __reduce269<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // ImplDef = KeywordAndVisibility<Impl>, Ident, "for", Ident, "{", "\n", FnDef, "}" => ActionFn(347);
        assert!(__symbols.len() >= 8);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant12(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant18(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant18(__symbols);
        let __sym0 = __pop_Variant36(__symbols);
        let __start = __sym0.0;
        let __end = __sym7.2;
        let __nt = super::__action347::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (8, 73)
    }
    fn __reduce270<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // ImplDef = KeywordAndVisibility<Impl>, Ident, "for", Ident, "{", "\n", "}" => ActionFn(348);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant18(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant18(__symbols);
        let __sym0 = __pop_Variant36(__symbols);
        let __start = __sym0.0;
        let __end = __sym6.2;
        let __nt = super::__action348::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (7, 73)
    }
    fn __reduce271<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // ImplDef = KeywordAndVisibility<Impl>, Ident, "for", Ident, "{", "\n", (<FnDef> "\n")+, FnDef, "}" => ActionFn(349);
        assert!(__symbols.len() >= 9);
        let __sym8 = __pop_Variant0(__symbols);
        let __sym7 = __pop_Variant12(__symbols);
        let __sym6 = __pop_Variant13(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant18(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant18(__symbols);
        let __sym0 = __pop_Variant36(__symbols);
        let __start = __sym0.0;
        let __end = __sym8.2;
        let __nt = super::__action349::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (9, 73)
    }
    fn __reduce272<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // ImplDef = KeywordAndVisibility<Impl>, Ident, "for", Ident, "{", "\n", (<FnDef> "\n")+, "}" => ActionFn(350);
        assert!(__symbols.len() >= 8);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant13(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant18(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant18(__symbols);
        let __sym0 = __pop_Variant36(__symbols);
        let __start = __sym0.0;
        let __end = __sym7.2;
        let __nt = super::__action350::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (8, 73)
    }
    fn __reduce273<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // ImplDef = KeywordAndVisibility<Impl>, Ident, "for", Ident, "{", FnDef, "}" => ActionFn(351);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant12(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant18(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant18(__symbols);
        let __sym0 = __pop_Variant36(__symbols);
        let __start = __sym0.0;
        let __end = __sym6.2;
        let __nt = super::__action351::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (7, 73)
    }
    fn __reduce274<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // ImplDef = KeywordAndVisibility<Impl>, Ident, "for", Ident, "{", "}" => ActionFn(352);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant18(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant18(__symbols);
        let __sym0 = __pop_Variant36(__symbols);
        let __start = __sym0.0;
        let __end = __sym5.2;
        let __nt = super::__action352::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (6, 73)
    }
    fn __reduce275<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // ImplDef = KeywordAndVisibility<Impl>, Ident, "for", Ident, "{", (<FnDef> "\n")+, FnDef, "}" => ActionFn(353);
        assert!(__symbols.len() >= 8);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant12(__symbols);
        let __sym5 = __pop_Variant13(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant18(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant18(__symbols);
        let __sym0 = __pop_Variant36(__symbols);
        let __start = __sym0.0;
        let __end = __sym7.2;
        let __nt = super::__action353::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (8, 73)
    }
    fn __reduce276<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // ImplDef = KeywordAndVisibility<Impl>, Ident, "for", Ident, "{", (<FnDef> "\n")+, "}" => ActionFn(354);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant13(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant18(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant18(__symbols);
        let __sym0 = __pop_Variant36(__symbols);
        let __start = __sym0.0;
        let __end = __sym6.2;
        let __nt = super::__action354::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (7, 73)
    }
    fn __reduce277<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // ImplDef = KeywordAndVisibility<Impl>, Ident, "{", "\n", FnDef, "}" => ActionFn(355);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant12(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant18(__symbols);
        let __sym0 = __pop_Variant36(__symbols);
        let __start = __sym0.0;
        let __end = __sym5.2;
        let __nt = super::__action355::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (6, 73)
    }
    fn __reduce278<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // ImplDef = KeywordAndVisibility<Impl>, Ident, "{", "\n", "}" => ActionFn(356);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant18(__symbols);
        let __sym0 = __pop_Variant36(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action356::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (5, 73)
    }
    fn __reduce279<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // ImplDef = KeywordAndVisibility<Impl>, Ident, "{", "\n", (<FnDef> "\n")+, FnDef, "}" => ActionFn(357);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant12(__symbols);
        let __sym4 = __pop_Variant13(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant18(__symbols);
        let __sym0 = __pop_Variant36(__symbols);
        let __start = __sym0.0;
        let __end = __sym6.2;
        let __nt = super::__action357::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (7, 73)
    }
    fn __reduce280<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // ImplDef = KeywordAndVisibility<Impl>, Ident, "{", "\n", (<FnDef> "\n")+, "}" => ActionFn(358);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant13(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant18(__symbols);
        let __sym0 = __pop_Variant36(__symbols);
        let __start = __sym0.0;
        let __end = __sym5.2;
        let __nt = super::__action358::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (6, 73)
    }
    fn __reduce281<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // ImplDef = KeywordAndVisibility<Impl>, Ident, "{", FnDef, "}" => ActionFn(359);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant12(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant18(__symbols);
        let __sym0 = __pop_Variant36(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action359::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (5, 73)
    }
    fn __reduce282<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // ImplDef = KeywordAndVisibility<Impl>, Ident, "{", "}" => ActionFn(360);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant18(__symbols);
        let __sym0 = __pop_Variant36(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action360::<>(errors, db, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (4, 73)
    }
    fn __reduce283<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // ImplDef = KeywordAndVisibility<Impl>, Ident, "{", (<FnDef> "\n")+, FnDef, "}" => ActionFn(361);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant12(__symbols);
        let __sym3 = __pop_Variant13(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant18(__symbols);
        let __sym0 = __pop_Variant36(__symbols);
        let __start = __sym0.0;
        let __end = __sym5.2;
        let __nt = super::__action361::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (6, 73)
    }
    fn __reduce284<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // ImplDef = KeywordAndVisibility<Impl>, Ident, "{", (<FnDef> "\n")+, "}" => ActionFn(362);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant13(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant18(__symbols);
        let __sym0 = __pop_Variant36(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action362::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (5, 73)
    }
    fn __reduce285<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // KeywordAndVisibility<Effect> = Visibility, Effect => ActionFn(288);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant30(__symbols);
        let __sym0 = __pop_Variant45(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action288::<>(errors, db, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (2, 74)
    }
    fn __reduce286<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // KeywordAndVisibility<Fn> = Visibility, Fn => ActionFn(289);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant30(__symbols);
        let __sym0 = __pop_Variant45(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action289::<>(errors, db, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (2, 75)
    }
    fn __reduce287<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // KeywordAndVisibility<Impl> = Visibility, Impl => ActionFn(290);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant30(__symbols);
        let __sym0 = __pop_Variant45(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action290::<>(errors, db, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (2, 76)
    }
    fn __reduce288<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // KeywordAndVisibility<Struct> = Visibility, Struct => ActionFn(291);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant30(__symbols);
        let __sym0 = __pop_Variant45(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action291::<>(errors, db, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (2, 77)
    }
    fn __reduce289<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // KeywordAndVisibility<Use> = Visibility, Use => ActionFn(292);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant30(__symbols);
        let __sym0 = __pop_Variant45(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action292::<>(errors, db, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (2, 78)
    }
    fn __reduce290<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Let = "let" => ActionFn(293);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action293::<>(errors, db, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 79)
    }
    fn __reduce291<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Lines<Field> = Field => ActionFn(315);
        let __sym0 = __pop_Variant14(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action315::<>(errors, db, __sym0);
        __symbols.push((__start, __Symbol::Variant37(__nt), __end));
        (1, 80)
    }
    fn __reduce292<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Lines<Field> =  => ActionFn(316);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action316::<>(errors, db, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant37(__nt), __end));
        (0, 80)
    }
    fn __reduce293<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Lines<Field> = (<Field> "\n")+, Field => ActionFn(317);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant14(__symbols);
        let __sym0 = __pop_Variant15(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action317::<>(errors, db, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant37(__nt), __end));
        (2, 80)
    }
    fn __reduce294<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Lines<Field> = (<Field> "\n")+ => ActionFn(318);
        let __sym0 = __pop_Variant15(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action318::<>(errors, db, __sym0);
        __symbols.push((__start, __Symbol::Variant37(__nt), __end));
        (1, 80)
    }
    fn __reduce295<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Lines<FnDef> = FnDef => ActionFn(335);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action335::<>(errors, db, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 81)
    }
    fn __reduce296<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Lines<FnDef> =  => ActionFn(336);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action336::<>(errors, db, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (0, 81)
    }
    fn __reduce297<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Lines<FnDef> = (<FnDef> "\n")+, FnDef => ActionFn(337);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action337::<>(errors, db, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 81)
    }
    fn __reduce298<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Lines<FnDef> = (<FnDef> "\n")+ => ActionFn(338);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action338::<>(errors, db, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 81)
    }
    fn __reduce299<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Lines<Prototype> = Prototype => ActionFn(363);
        let __sym0 = __pop_Variant20(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action363::<>(errors, db, __sym0);
        __symbols.push((__start, __Symbol::Variant38(__nt), __end));
        (1, 82)
    }
    fn __reduce300<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Lines<Prototype> =  => ActionFn(364);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action364::<>(errors, db, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant38(__nt), __end));
        (0, 82)
    }
    fn __reduce301<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Lines<Prototype> = (<Prototype> "\n")+, Prototype => ActionFn(365);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant20(__symbols);
        let __sym0 = __pop_Variant21(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action365::<>(errors, db, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant38(__nt), __end));
        (2, 82)
    }
    fn __reduce302<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Lines<Prototype> = (<Prototype> "\n")+ => ActionFn(366);
        let __sym0 = __pop_Variant21(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action366::<>(errors, db, __sym0);
        __symbols.push((__start, __Symbol::Variant38(__nt), __end));
        (1, 82)
    }
    fn __reduce303<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Lines<Statement> = Statement => ActionFn(383);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action383::<>(errors, db, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 83)
    }
    fn __reduce304<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Lines<Statement> =  => ActionFn(384);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action384::<>(errors, db, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (0, 83)
    }
    fn __reduce305<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Lines<Statement> = (<Statement> "\n")+, Statement => ActionFn(385);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action385::<>(errors, db, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 83)
    }
    fn __reduce306<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Lines<Statement> = (<Statement> "\n")+ => ActionFn(386);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action386::<>(errors, db, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 83)
    }
    fn __reduce307<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // None = "none" => ActionFn(294);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action294::<>(errors, db, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 84)
    }
    fn __reduce308<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Plus<Ident> = Ident => ActionFn(507);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action507::<>(errors, db, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 85)
    }
    fn __reduce309<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Plus<Ident> =  => ActionFn(508);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action508::<>(errors, db, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (0, 85)
    }
    fn __reduce310<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Plus<Ident> = (<Ident> "+")+, Ident => ActionFn(509);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant18(__symbols);
        let __sym0 = __pop_Variant19(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action509::<>(errors, db, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (2, 85)
    }
    fn __reduce311<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Plus<Ident> = (<Ident> "+")+ => ActionFn(510);
        let __sym0 = __pop_Variant19(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action510::<>(errors, db, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 85)
    }
    fn __reduce312<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Prototype = IdentOrIdentWithGenerics, "(", FnArg, ")", "[", Ident, "]", "->", Ident => ActionFn(515);
        assert!(__symbols.len() >= 9);
        let __sym8 = __pop_Variant18(__symbols);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant18(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant16(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0;
        let __end = __sym8.2;
        let __nt = super::__action515::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (9, 86)
    }
    fn __reduce313<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Prototype = IdentOrIdentWithGenerics, "(", FnArg, ")", "[", "]", "->", Ident => ActionFn(516);
        assert!(__symbols.len() >= 8);
        let __sym7 = __pop_Variant18(__symbols);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant16(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0;
        let __end = __sym7.2;
        let __nt = super::__action516::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (8, 86)
    }
    fn __reduce314<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Prototype = IdentOrIdentWithGenerics, "(", FnArg, ")", "[", (<Ident> ",")+, Ident, "]", "->", Ident => ActionFn(517);
        assert!(__symbols.len() >= 10);
        let __sym9 = __pop_Variant18(__symbols);
        let __sym8 = __pop_Variant0(__symbols);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant18(__symbols);
        let __sym5 = __pop_Variant19(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant16(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0;
        let __end = __sym9.2;
        let __nt = super::__action517::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, __sym9);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (10, 86)
    }
    fn __reduce315<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Prototype = IdentOrIdentWithGenerics, "(", FnArg, ")", "[", (<Ident> ",")+, "]", "->", Ident => ActionFn(518);
        assert!(__symbols.len() >= 9);
        let __sym8 = __pop_Variant18(__symbols);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant19(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant16(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0;
        let __end = __sym8.2;
        let __nt = super::__action518::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (9, 86)
    }
    fn __reduce316<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Prototype = IdentOrIdentWithGenerics, "(", ")", "[", Ident, "]", "->", Ident => ActionFn(519);
        assert!(__symbols.len() >= 8);
        let __sym7 = __pop_Variant18(__symbols);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant18(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0;
        let __end = __sym7.2;
        let __nt = super::__action519::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (8, 86)
    }
    fn __reduce317<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Prototype = IdentOrIdentWithGenerics, "(", ")", "[", "]", "->", Ident => ActionFn(520);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant18(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0;
        let __end = __sym6.2;
        let __nt = super::__action520::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (7, 86)
    }
    fn __reduce318<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Prototype = IdentOrIdentWithGenerics, "(", ")", "[", (<Ident> ",")+, Ident, "]", "->", Ident => ActionFn(521);
        assert!(__symbols.len() >= 9);
        let __sym8 = __pop_Variant18(__symbols);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant18(__symbols);
        let __sym4 = __pop_Variant19(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0;
        let __end = __sym8.2;
        let __nt = super::__action521::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (9, 86)
    }
    fn __reduce319<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Prototype = IdentOrIdentWithGenerics, "(", ")", "[", (<Ident> ",")+, "]", "->", Ident => ActionFn(522);
        assert!(__symbols.len() >= 8);
        let __sym7 = __pop_Variant18(__symbols);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant19(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0;
        let __end = __sym7.2;
        let __nt = super::__action522::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (8, 86)
    }
    fn __reduce320<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Prototype = IdentOrIdentWithGenerics, "(", (<FnArg> ",")+, FnArg, ")", "[", Ident, "]", "->", Ident => ActionFn(523);
        assert!(__symbols.len() >= 10);
        let __sym9 = __pop_Variant18(__symbols);
        let __sym8 = __pop_Variant0(__symbols);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant18(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant16(__symbols);
        let __sym2 = __pop_Variant17(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0;
        let __end = __sym9.2;
        let __nt = super::__action523::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, __sym9);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (10, 86)
    }
    fn __reduce321<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Prototype = IdentOrIdentWithGenerics, "(", (<FnArg> ",")+, FnArg, ")", "[", "]", "->", Ident => ActionFn(524);
        assert!(__symbols.len() >= 9);
        let __sym8 = __pop_Variant18(__symbols);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant16(__symbols);
        let __sym2 = __pop_Variant17(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0;
        let __end = __sym8.2;
        let __nt = super::__action524::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (9, 86)
    }
    fn __reduce322<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Prototype = IdentOrIdentWithGenerics, "(", (<FnArg> ",")+, FnArg, ")", "[", (<Ident> ",")+, Ident, "]", "->", Ident => ActionFn(525);
        assert!(__symbols.len() >= 11);
        let __sym10 = __pop_Variant18(__symbols);
        let __sym9 = __pop_Variant0(__symbols);
        let __sym8 = __pop_Variant0(__symbols);
        let __sym7 = __pop_Variant18(__symbols);
        let __sym6 = __pop_Variant19(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant16(__symbols);
        let __sym2 = __pop_Variant17(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0;
        let __end = __sym10.2;
        let __nt = super::__action525::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, __sym9, __sym10);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (11, 86)
    }
    fn __reduce323<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Prototype = IdentOrIdentWithGenerics, "(", (<FnArg> ",")+, FnArg, ")", "[", (<Ident> ",")+, "]", "->", Ident => ActionFn(526);
        assert!(__symbols.len() >= 10);
        let __sym9 = __pop_Variant18(__symbols);
        let __sym8 = __pop_Variant0(__symbols);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant19(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant16(__symbols);
        let __sym2 = __pop_Variant17(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0;
        let __end = __sym9.2;
        let __nt = super::__action526::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, __sym9);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (10, 86)
    }
    fn __reduce324<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Prototype = IdentOrIdentWithGenerics, "(", (<FnArg> ",")+, ")", "[", Ident, "]", "->", Ident => ActionFn(527);
        assert!(__symbols.len() >= 9);
        let __sym8 = __pop_Variant18(__symbols);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant18(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant17(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0;
        let __end = __sym8.2;
        let __nt = super::__action527::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (9, 86)
    }
    fn __reduce325<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Prototype = IdentOrIdentWithGenerics, "(", (<FnArg> ",")+, ")", "[", "]", "->", Ident => ActionFn(528);
        assert!(__symbols.len() >= 8);
        let __sym7 = __pop_Variant18(__symbols);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant17(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0;
        let __end = __sym7.2;
        let __nt = super::__action528::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (8, 86)
    }
    fn __reduce326<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Prototype = IdentOrIdentWithGenerics, "(", (<FnArg> ",")+, ")", "[", (<Ident> ",")+, Ident, "]", "->", Ident => ActionFn(529);
        assert!(__symbols.len() >= 10);
        let __sym9 = __pop_Variant18(__symbols);
        let __sym8 = __pop_Variant0(__symbols);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant18(__symbols);
        let __sym5 = __pop_Variant19(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant17(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0;
        let __end = __sym9.2;
        let __nt = super::__action529::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, __sym9);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (10, 86)
    }
    fn __reduce327<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Prototype = IdentOrIdentWithGenerics, "(", (<FnArg> ",")+, ")", "[", (<Ident> ",")+, "]", "->", Ident => ActionFn(530);
        assert!(__symbols.len() >= 9);
        let __sym8 = __pop_Variant18(__symbols);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant19(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant17(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0;
        let __end = __sym8.2;
        let __nt = super::__action530::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (9, 86)
    }
    fn __reduce328<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Prototype = IdentOrIdentWithGenerics, "(", FnArg, ")", "[", Ident, "]" => ActionFn(531);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant18(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant16(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0;
        let __end = __sym6.2;
        let __nt = super::__action531::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (7, 86)
    }
    fn __reduce329<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Prototype = IdentOrIdentWithGenerics, "(", FnArg, ")", "[", "]" => ActionFn(532);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant16(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0;
        let __end = __sym5.2;
        let __nt = super::__action532::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (6, 86)
    }
    fn __reduce330<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Prototype = IdentOrIdentWithGenerics, "(", FnArg, ")", "[", (<Ident> ",")+, Ident, "]" => ActionFn(533);
        assert!(__symbols.len() >= 8);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant18(__symbols);
        let __sym5 = __pop_Variant19(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant16(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0;
        let __end = __sym7.2;
        let __nt = super::__action533::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (8, 86)
    }
    fn __reduce331<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Prototype = IdentOrIdentWithGenerics, "(", FnArg, ")", "[", (<Ident> ",")+, "]" => ActionFn(534);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant19(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant16(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0;
        let __end = __sym6.2;
        let __nt = super::__action534::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (7, 86)
    }
    fn __reduce332<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Prototype = IdentOrIdentWithGenerics, "(", ")", "[", Ident, "]" => ActionFn(535);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant18(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0;
        let __end = __sym5.2;
        let __nt = super::__action535::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (6, 86)
    }
    fn __reduce333<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Prototype = IdentOrIdentWithGenerics, "(", ")", "[", "]" => ActionFn(536);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action536::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (5, 86)
    }
    fn __reduce334<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Prototype = IdentOrIdentWithGenerics, "(", ")", "[", (<Ident> ",")+, Ident, "]" => ActionFn(537);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant18(__symbols);
        let __sym4 = __pop_Variant19(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0;
        let __end = __sym6.2;
        let __nt = super::__action537::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (7, 86)
    }
    fn __reduce335<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Prototype = IdentOrIdentWithGenerics, "(", ")", "[", (<Ident> ",")+, "]" => ActionFn(538);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant19(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0;
        let __end = __sym5.2;
        let __nt = super::__action538::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (6, 86)
    }
    fn __reduce336<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Prototype = IdentOrIdentWithGenerics, "(", (<FnArg> ",")+, FnArg, ")", "[", Ident, "]" => ActionFn(539);
        assert!(__symbols.len() >= 8);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant18(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant16(__symbols);
        let __sym2 = __pop_Variant17(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0;
        let __end = __sym7.2;
        let __nt = super::__action539::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (8, 86)
    }
    fn __reduce337<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Prototype = IdentOrIdentWithGenerics, "(", (<FnArg> ",")+, FnArg, ")", "[", "]" => ActionFn(540);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant16(__symbols);
        let __sym2 = __pop_Variant17(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0;
        let __end = __sym6.2;
        let __nt = super::__action540::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (7, 86)
    }
    fn __reduce338<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Prototype = IdentOrIdentWithGenerics, "(", (<FnArg> ",")+, FnArg, ")", "[", (<Ident> ",")+, Ident, "]" => ActionFn(541);
        assert!(__symbols.len() >= 9);
        let __sym8 = __pop_Variant0(__symbols);
        let __sym7 = __pop_Variant18(__symbols);
        let __sym6 = __pop_Variant19(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant16(__symbols);
        let __sym2 = __pop_Variant17(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0;
        let __end = __sym8.2;
        let __nt = super::__action541::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (9, 86)
    }
    fn __reduce339<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Prototype = IdentOrIdentWithGenerics, "(", (<FnArg> ",")+, FnArg, ")", "[", (<Ident> ",")+, "]" => ActionFn(542);
        assert!(__symbols.len() >= 8);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant19(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant16(__symbols);
        let __sym2 = __pop_Variant17(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0;
        let __end = __sym7.2;
        let __nt = super::__action542::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (8, 86)
    }
    fn __reduce340<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Prototype = IdentOrIdentWithGenerics, "(", (<FnArg> ",")+, ")", "[", Ident, "]" => ActionFn(543);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant18(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant17(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0;
        let __end = __sym6.2;
        let __nt = super::__action543::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (7, 86)
    }
    fn __reduce341<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Prototype = IdentOrIdentWithGenerics, "(", (<FnArg> ",")+, ")", "[", "]" => ActionFn(544);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant17(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0;
        let __end = __sym5.2;
        let __nt = super::__action544::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (6, 86)
    }
    fn __reduce342<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Prototype = IdentOrIdentWithGenerics, "(", (<FnArg> ",")+, ")", "[", (<Ident> ",")+, Ident, "]" => ActionFn(545);
        assert!(__symbols.len() >= 8);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant18(__symbols);
        let __sym5 = __pop_Variant19(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant17(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0;
        let __end = __sym7.2;
        let __nt = super::__action545::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (8, 86)
    }
    fn __reduce343<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Prototype = IdentOrIdentWithGenerics, "(", (<FnArg> ",")+, ")", "[", (<Ident> ",")+, "]" => ActionFn(546);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant19(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant17(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0;
        let __end = __sym6.2;
        let __nt = super::__action546::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (7, 86)
    }
    fn __reduce344<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Prototype? = Prototype => ActionFn(139);
        let __sym0 = __pop_Variant20(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action139::<>(errors, db, __sym0);
        __symbols.push((__start, __Symbol::Variant39(__nt), __end));
        (1, 87)
    }
    fn __reduce345<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Prototype? =  => ActionFn(140);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action140::<>(errors, db, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant39(__nt), __end));
        (0, 87)
    }
    fn __reduce346<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Source =  => ActionFn(176);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action176::<>(errors, db, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant40(__nt), __end));
        (0, 88)
    }
    fn __reduce347<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Source = ("\n"* TopLevel)+ => ActionFn(177);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action177::<>(errors, db, __sym0);
        __symbols.push((__start, __Symbol::Variant40(__nt), __end));
        (1, 88)
    }
    fn __reduce348<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Source = error => ActionFn(69);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action69::<>(errors, db, __sym0);
        __symbols.push((__start, __Symbol::Variant40(__nt), __end));
        (1, 88)
    }
    fn __reduce349<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Span<"self"> = "self" => ActionFn(297);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action297::<>(errors, db, __sym0);
        __symbols.push((__start, __Symbol::Variant41(__nt), __end));
        (1, 89)
    }
    fn __reduce350<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Span<Field> = Field => ActionFn(298);
        let __sym0 = __pop_Variant14(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action298::<>(errors, db, __sym0);
        __symbols.push((__start, __Symbol::Variant42(__nt), __end));
        (1, 90)
    }
    fn __reduce351<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Span<String> = String => ActionFn(299);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action299::<>(errors, db, __sym0);
        __symbols.push((__start, __Symbol::Variant43(__nt), __end));
        (1, 91)
    }
    fn __reduce352<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Statement = Let, Ident, "=", Expression => ActionFn(300);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant12(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant18(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action300::<>(errors, db, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (4, 92)
    }
    fn __reduce353<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Statement = IfDef => ActionFn(50);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action50::<>(errors, db, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 92)
    }
    fn __reduce354<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Statement = FieldAccess => ActionFn(51);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action51::<>(errors, db, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 92)
    }
    fn __reduce355<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Statement? = Statement => ActionFn(146);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action146::<>(errors, db, __sym0);
        __symbols.push((__start, __Symbol::Variant31(__nt), __end));
        (1, 93)
    }
    fn __reduce356<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Statement? =  => ActionFn(147);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action147::<>(errors, db, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant31(__nt), __end));
        (0, 93)
    }
    fn __reduce357<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // String = "string" => ActionFn(301);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action301::<>(errors, db, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 94)
    }
    fn __reduce358<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Struct = "struct" => ActionFn(302);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action302::<>(errors, db, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 95)
    }
    fn __reduce359<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // StructDef = KeywordAndVisibility<Struct>, Ident, "{", "\n", Field, "}" => ActionFn(327);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant14(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant18(__symbols);
        let __sym0 = __pop_Variant36(__symbols);
        let __start = __sym0.0;
        let __end = __sym5.2;
        let __nt = super::__action327::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (6, 96)
    }
    fn __reduce360<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // StructDef = KeywordAndVisibility<Struct>, Ident, "{", "\n", "}" => ActionFn(328);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant18(__symbols);
        let __sym0 = __pop_Variant36(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action328::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (5, 96)
    }
    fn __reduce361<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // StructDef = KeywordAndVisibility<Struct>, Ident, "{", "\n", (<Field> "\n")+, Field, "}" => ActionFn(329);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant14(__symbols);
        let __sym4 = __pop_Variant15(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant18(__symbols);
        let __sym0 = __pop_Variant36(__symbols);
        let __start = __sym0.0;
        let __end = __sym6.2;
        let __nt = super::__action329::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (7, 96)
    }
    fn __reduce362<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // StructDef = KeywordAndVisibility<Struct>, Ident, "{", "\n", (<Field> "\n")+, "}" => ActionFn(330);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant15(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant18(__symbols);
        let __sym0 = __pop_Variant36(__symbols);
        let __start = __sym0.0;
        let __end = __sym5.2;
        let __nt = super::__action330::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (6, 96)
    }
    fn __reduce363<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // StructDef = KeywordAndVisibility<Struct>, Ident, "{", Field, "}" => ActionFn(331);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant14(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant18(__symbols);
        let __sym0 = __pop_Variant36(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action331::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (5, 96)
    }
    fn __reduce364<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // StructDef = KeywordAndVisibility<Struct>, Ident, "{", "}" => ActionFn(332);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant18(__symbols);
        let __sym0 = __pop_Variant36(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action332::<>(errors, db, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (4, 96)
    }
    fn __reduce365<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // StructDef = KeywordAndVisibility<Struct>, Ident, "{", (<Field> "\n")+, Field, "}" => ActionFn(333);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant14(__symbols);
        let __sym3 = __pop_Variant15(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant18(__symbols);
        let __sym0 = __pop_Variant36(__symbols);
        let __start = __sym0.0;
        let __end = __sym5.2;
        let __nt = super::__action333::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (6, 96)
    }
    fn __reduce366<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // StructDef = KeywordAndVisibility<Struct>, Ident, "{", (<Field> "\n")+, "}" => ActionFn(334);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant15(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant18(__symbols);
        let __sym0 = __pop_Variant36(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action334::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (5, 96)
    }
    fn __reduce367<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Term = String => ActionFn(589);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action589::<>(errors, db, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 97)
    }
    fn __reduce368<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Term = "int" => ActionFn(304);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action304::<>(errors, db, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 97)
    }
    fn __reduce369<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Term = Ident => ActionFn(35);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action35::<>(errors, db, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 97)
    }
    fn __reduce370<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Term = FnCall => ActionFn(36);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action36::<>(errors, db, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 97)
    }
    fn __reduce371<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Term = True => ActionFn(305);
        let __sym0 = __pop_Variant32(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action305::<>(errors, db, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 97)
    }
    fn __reduce372<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Term = False => ActionFn(306);
        let __sym0 = __pop_Variant32(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action306::<>(errors, db, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 97)
    }
    fn __reduce373<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Term = "(", Expression, ")" => ActionFn(39);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant12(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action39::<>(errors, db, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (3, 97)
    }
    fn __reduce374<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // TopLevel = FnDef => ActionFn(63);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action63::<>(errors, db, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 98)
    }
    fn __reduce375<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // TopLevel = EffectDef => ActionFn(64);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action64::<>(errors, db, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 98)
    }
    fn __reduce376<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // TopLevel = StructDef => ActionFn(65);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action65::<>(errors, db, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 98)
    }
    fn __reduce377<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // TopLevel = UseDef => ActionFn(66);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action66::<>(errors, db, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 98)
    }
    fn __reduce378<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // TopLevel = ImplDef => ActionFn(67);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action67::<>(errors, db, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 98)
    }
    fn __reduce379<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // True = "true" => ActionFn(12);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action12::<>(errors, db, __sym0);
        __symbols.push((__start, __Symbol::Variant32(__nt), __end));
        (1, 99)
    }
    fn __reduce380<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // TypeParameters = "<", Ident, ">" => ActionFn(547);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant18(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action547::<>(errors, db, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant44(__nt), __end));
        (3, 100)
    }
    fn __reduce381<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // TypeParameters = "<", ">" => ActionFn(548);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action548::<>(errors, db, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant44(__nt), __end));
        (2, 100)
    }
    fn __reduce382<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // TypeParameters = "<", (<Ident> ",")+, Ident, ">" => ActionFn(549);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant18(__symbols);
        let __sym1 = __pop_Variant19(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action549::<>(errors, db, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant44(__nt), __end));
        (4, 100)
    }
    fn __reduce383<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // TypeParameters = "<", (<Ident> ",")+, ">" => ActionFn(550);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant19(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action550::<>(errors, db, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant44(__nt), __end));
        (3, 100)
    }
    fn __reduce384<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Use = "use" => ActionFn(308);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action308::<>(errors, db, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 101)
    }
    fn __reduce385<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // UseDef = KeywordAndVisibility<Use>, "{", Ident, "}", From, Ident => ActionFn(551);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant18(__symbols);
        let __sym4 = __pop_Variant30(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant18(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant36(__symbols);
        let __start = __sym0.0;
        let __end = __sym5.2;
        let __nt = super::__action551::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (6, 102)
    }
    fn __reduce386<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // UseDef = KeywordAndVisibility<Use>, "{", "}", From, Ident => ActionFn(552);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant18(__symbols);
        let __sym3 = __pop_Variant30(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant36(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action552::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (5, 102)
    }
    fn __reduce387<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // UseDef = KeywordAndVisibility<Use>, "{", (<Ident> ",")+, Ident, "}", From, Ident => ActionFn(553);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant18(__symbols);
        let __sym5 = __pop_Variant30(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant18(__symbols);
        let __sym2 = __pop_Variant19(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant36(__symbols);
        let __start = __sym0.0;
        let __end = __sym6.2;
        let __nt = super::__action553::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (7, 102)
    }
    fn __reduce388<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // UseDef = KeywordAndVisibility<Use>, "{", (<Ident> ",")+, "}", From, Ident => ActionFn(554);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant18(__symbols);
        let __sym4 = __pop_Variant30(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant19(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant36(__symbols);
        let __start = __sym0.0;
        let __end = __sym5.2;
        let __nt = super::__action554::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (6, 102)
    }
    fn __reduce389<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Visibility = "pub" => ActionFn(310);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action310::<>(errors, db, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 103)
    }
    fn __reduce390<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Visibility = "priv" => ActionFn(311);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action311::<>(errors, db, __sym0);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (1, 103)
    }
    fn __reduce391<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Visibility =  => ActionFn(312);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action312::<>(errors, db, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant45(__nt), __end));
        (0, 103)
    }
    fn __reduce392<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // When = "when" => ActionFn(313);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action313::<>(errors, db, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 104)
    }
    fn __reduce393<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // WhenBlock = When, Ident, "{", "\n", Statement, "}" => ActionFn(475);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant12(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant18(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0;
        let __end = __sym5.2;
        let __nt = super::__action475::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant46(__nt), __end));
        (6, 105)
    }
    fn __reduce394<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // WhenBlock = When, Ident, "{", "\n", "}" => ActionFn(476);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant18(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action476::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant46(__nt), __end));
        (5, 105)
    }
    fn __reduce395<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // WhenBlock = When, Ident, "{", "\n", (<Statement> "\n")+, Statement, "}" => ActionFn(477);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant12(__symbols);
        let __sym4 = __pop_Variant13(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant18(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0;
        let __end = __sym6.2;
        let __nt = super::__action477::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant46(__nt), __end));
        (7, 105)
    }
    fn __reduce396<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // WhenBlock = When, Ident, "{", "\n", (<Statement> "\n")+, "}" => ActionFn(478);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant13(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant18(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0;
        let __end = __sym5.2;
        let __nt = super::__action478::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant46(__nt), __end));
        (6, 105)
    }
    fn __reduce397<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // WhenBlock = When, Ident, "{", Statement, "}" => ActionFn(479);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant12(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant18(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action479::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant46(__nt), __end));
        (5, 105)
    }
    fn __reduce398<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // WhenBlock = When, Ident, "{", "}" => ActionFn(480);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant18(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action480::<>(errors, db, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant46(__nt), __end));
        (4, 105)
    }
    fn __reduce399<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // WhenBlock = When, Ident, "{", (<Statement> "\n")+, Statement, "}" => ActionFn(481);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant12(__symbols);
        let __sym3 = __pop_Variant13(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant18(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0;
        let __end = __sym5.2;
        let __nt = super::__action481::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant46(__nt), __end));
        (6, 105)
    }
    fn __reduce400<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
        db: &dyn Db,
        __lookahead_start: Option<&Location>,
        __symbols: &mut alloc::vec::Vec<(Location,__Symbol<'input>,Location)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // WhenBlock = When, Ident, "{", (<Statement> "\n")+, "}" => ActionFn(482);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant13(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant18(__symbols);
        let __sym0 = __pop_Variant30(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action482::<>(errors, db, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant46(__nt), __end));
        (5, 105)
    }
}
#[allow(unused_imports)]
pub use self::__parse__Source::SourceParser;

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action0<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, __0, _): (Location, Module, Location),
) -> Module
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action1<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, lo, _): (Location, Location, Location),
    (_, _, _): (Location, Token<'input>, Location),
    (_, hi, _): (Location, Location, Location),
) -> Spanned<Keyword>
{
    span!(lo, Keyword::None, hi)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action2<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, lo, _): (Location, Location, Location),
    (_, _, _): (Location, Token<'input>, Location),
    (_, hi, _): (Location, Location, Location),
) -> Spanned<Keyword>
{
    span!(lo, Keyword::Fn, hi)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action3<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, lo, _): (Location, Location, Location),
    (_, _, _): (Location, Token<'input>, Location),
    (_, hi, _): (Location, Location, Location),
) -> Spanned<Keyword>
{
    span!(lo, Keyword::Effect, hi)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action4<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, lo, _): (Location, Location, Location),
    (_, _, _): (Location, Token<'input>, Location),
    (_, hi, _): (Location, Location, Location),
) -> Spanned<Keyword>
{
    span!(lo, Keyword::Struct, hi)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action5<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, lo, _): (Location, Location, Location),
    (_, _, _): (Location, Token<'input>, Location),
    (_, hi, _): (Location, Location, Location),
) -> Spanned<Keyword>
{
    span!(lo, Keyword::If, hi)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action6<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, lo, _): (Location, Location, Location),
    (_, _, _): (Location, Token<'input>, Location),
    (_, hi, _): (Location, Location, Location),
) -> Spanned<Keyword>
{
    span!(lo, Keyword::Else, hi)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action7<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, lo, _): (Location, Location, Location),
    (_, _, _): (Location, Token<'input>, Location),
    (_, hi, _): (Location, Location, Location),
) -> Spanned<Keyword>
{
    span!(lo, Keyword::When, hi)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action8<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, lo, _): (Location, Location, Location),
    (_, _, _): (Location, Token<'input>, Location),
    (_, hi, _): (Location, Location, Location),
) -> Spanned<Keyword>
{
    span!(lo, Keyword::Use, hi)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action9<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, lo, _): (Location, Location, Location),
    (_, _, _): (Location, Token<'input>, Location),
    (_, hi, _): (Location, Location, Location),
) -> Spanned<Keyword>
{
    span!(lo, Keyword::From, hi)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action10<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, lo, _): (Location, Location, Location),
    (_, _, _): (Location, Token<'input>, Location),
    (_, hi, _): (Location, Location, Location),
) -> Spanned<Keyword>
{
    span!(lo, Keyword::Impl, hi)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action11<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, lo, _): (Location, Location, Location),
    (_, _, _): (Location, Token<'input>, Location),
    (_, hi, _): (Location, Location, Location),
) -> Spanned<Keyword>
{
    span!(lo, Keyword::Let, hi)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action12<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, __0, _): (Location, Token<'input>, Location),
) -> Node
{
    Node::Bool(true)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action13<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, __0, _): (Location, Token<'input>, Location),
) -> Node
{
    Node::Bool(false)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action14<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, l, _): (Location, Location, Location),
    (_, i, _): (Location, &'input str, Location),
    (_, r, _): (Location, Location, Location),
) -> Spanned<Ident>
{
    span!(l,Ident(i.to_string(), None),r)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action15<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, l, _): (Location, Location, Location),
    (_, i, _): (Location, &'input str, Location),
    (_, _, _): (Location, Token<'input>, Location),
    (_, g, _): (Location, Vec<Spanned<Ident>>, Location),
    (_, _, _): (Location, Token<'input>, Location),
    (_, r, _): (Location, Location, Location),
) -> Spanned<Ident>
{
    span!(l,Ident(i.to_string(), Some(g)),r)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action16<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, i, _): (Location, Spanned<Ident>, Location),
) -> Spanned<Ident>
{
    i
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action17<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, i, _): (Location, Spanned<Ident>, Location),
) -> Spanned<Ident>
{
    i
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action18<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, l, _): (Location, Location, Location),
    (_, _, _): (Location, Token<'input>, Location),
    (_, r, _): (Location, Location, Location),
) -> Spanned<Ident>
{
    span!(l, Ident("self".to_string(), None),r)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action19<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, l, _): (Location, Location, Location),
    (_, i, _): (Location, i64, Location),
    (_, r, _): (Location, Location, Location),
) -> Spanned<Value>
{
    span!(l, Value::Literal(Literal::Integer(i)),r)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action20<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, l, _): (Location, Location, Location),
    (_, f, _): (Location, f64, Location),
    (_, r, _): (Location, Location, Location),
) -> Spanned<Value>
{
    span!(l, Value::Literal(Literal::Float(f)),r)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action21<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, l, _): (Location, Location, Location),
    (_, s, _): (Location, &'input str, Location),
    (_, r, _): (Location, Location, Location),
) -> Spanned<Value>
{
    {
        let start = 1;
        let end = s.len() - 1;
        span!(l, Value::Literal(Literal::String(s.get(start..end).expect(format!("malformed string {s}, strings must be quoted").as_str()).to_string())), r)
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action22<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, i, _): (Location, Spanned<Ident>, Location),
) -> Spanned<Value>
{
    span!(i.0, Value::Ident(i.1), i.2)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action23<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, __0, _): (Location, Spanned<Value>, Location),
) -> Spanned<Value>
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action24<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, l, _): (Location, Location, Location),
    (_, s, _): (Location, &'input str, Location),
    (_, r, _): (Location, Location, Location),
) -> Spanned<Node>
{
    {
        let start = 1;
        let end = s.len() - 1;
        span!(l, Node::String(s.get(start..end).expect(format!("malformed string {s}, strings must be quoted").as_str()).to_string()),r)
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action25<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, __0, _): (Location, Spanned<Node>, Location),
) -> Spanned<Node>
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action26<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, lhs, _): (Location, Spanned<Node>, Location),
    (_, _, _): (Location, Token<'input>, Location),
    (_, rhs, _): (Location, Spanned<Node>, Location),
) -> Spanned<Node>
{
    {
        let (l, r) = (lhs.2, rhs.0);
        span!(l,Node::BinaryExpression(BinaryOperation {
            lhs: Box::new(lhs),
            op: Operator::Mul,
            rhs: Box::new(rhs)
        }),r)
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action27<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, l, _): (Location, Location, Location),
    (_, lhs, _): (Location, Spanned<Node>, Location),
    (_, _, _): (Location, Token<'input>, Location),
    (_, rhs, _): (Location, Spanned<Node>, Location),
    (_, r, _): (Location, Location, Location),
) -> Spanned<Node>
{
    {
        let (l, r) = (lhs.2, rhs.0);
        span!(l,Node::BinaryExpression(BinaryOperation {
            lhs: Box::new(lhs),
            op: Operator::Div,
            rhs: Box::new(rhs)
        }),r)
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action28<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, __0, _): (Location, Spanned<Node>, Location),
) -> Spanned<Node>
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action29<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, lhs, _): (Location, Spanned<Node>, Location),
    (_, _, _): (Location, Token<'input>, Location),
    (_, rhs, _): (Location, Spanned<Node>, Location),
) -> Spanned<Node>
{
    {
        let (l, r) = (lhs.2, rhs.0);
        span!(l,Node::BinaryExpression(BinaryOperation {
            lhs: Box::new(lhs),
            op: Operator::Add,
            rhs: Box::new(rhs)
        }),r)
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action30<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, lhs, _): (Location, Spanned<Node>, Location),
    (_, _, _): (Location, Token<'input>, Location),
    (_, rhs, _): (Location, Spanned<Node>, Location),
) -> Spanned<Node>
{
    {
        let (l, r) = (lhs.2, rhs.0);
        span!(l, Node::BinaryExpression(BinaryOperation {
            lhs: Box::new(lhs),
            op: Operator::Sub,
            rhs: Box::new(rhs)
        }),r)
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action31<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, __0, _): (Location, Spanned<Node>, Location),
) -> Spanned<Node>
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action32<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, name, _): (Location, Spanned<Ident>, Location),
    (_, _, _): (Location, Token<'input>, Location),
    (_, args, _): (Location, Vec<Spanned<Node>>, Location),
    (_, _, _): (Location, Token<'input>, Location),
    (_, r, _): (Location, Location, Location),
) -> Spanned<Node>
{
    span!(name.0, Node::FnCall(FnCall(name, args)) ,r)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action33<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, s, _): (Location, Spanned<Spanned<Node>>, Location),
) -> Spanned<Node>
{
    s.1
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action34<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, l, _): (Location, Location, Location),
    (_, val, _): (Location, i64, Location),
    (_, r, _): (Location, Location, Location),
) -> Spanned<Node>
{
    span!(l, Node::Integer(val),r)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action35<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, i, _): (Location, Spanned<Ident>, Location),
) -> Spanned<Node>
{
    {
        let (l, r) = (i.0, i.2);
        span!(l, Node::Ident(i), r)}
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action36<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, f, _): (Location, Spanned<Node>, Location),
) -> Spanned<Node>
{
    f
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action37<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, l, _): (Location, Location, Location),
    (_, true_, _): (Location, Node, Location),
    (_, r, _): (Location, Location, Location),
) -> Spanned<Node>
{
    span!(l,true_, r)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action38<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, l, _): (Location, Location, Location),
    (_, false_, _): (Location, Node, Location),
    (_, r, _): (Location, Location, Location),
) -> Spanned<Node>
{
    span!(l,false_, r)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action39<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, _, _): (Location, Token<'input>, Location),
    (_, __0, _): (Location, Spanned<Node>, Location),
    (_, _, _): (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action40<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, i, _): (Location, Spanned<Ident>, Location),
) -> Spanned<Node>
{
    {
        let (l, r) = (i.0, i.2);
        span!(l, Node::Ident(i), r)
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action41<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, f, _): (Location, Spanned<Node>, Location),
) -> Spanned<Node>
{
    f
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action42<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, lhs, _): (Location, Spanned<Node>, Location),
    (_, _, _): (Location, Token<'input>, Location),
    (_, rhs, _): (Location, Spanned<Node>, Location),
) -> Spanned<Node>
{
    {
        let (l, r) = (lhs.0, rhs.2);
        span!(l,Node::FieldAccess(FieldAccess(Box::new(lhs), Box::new(rhs))),r)
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action43<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, lhs, _): (Location, Spanned<Node>, Location),
) -> Spanned<Node>
{
    lhs
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action44<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, vis, _): (Location, Spanned<Visibility>, Location),
    (_, name, _): (Location, Spanned<Ident>, Location),
    (_, _, _): (Location, Token<'input>, Location),
    (_, ty, _): (Location, Spanned<Ident>, Location),
) -> Spanned<FieldDef>
{
    {
        let (l, r) = (name.0, ty.2);
        span!(l, FieldDef(vis, name, ty), r)
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action45<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, l, _): (Location, Location, Location),
    (_, _, _): (Location, Token<'input>, Location),
    (_, is, _): (Location, Vec<Spanned<Ident>>, Location),
    (_, _, _): (Location, Token<'input>, Location),
    (_, r, _): (Location, Location, Location),
) -> Spanned<Vec<Spanned<Ident>>>
{
    span!(l,is ,r)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action46<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, self_, _): (Location, Spanned<Token<'input>>, Location),
) -> Spanned<FnArg>
{
    span!(self_.0, FnArg::Reciever, self_.2)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action47<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, field, _): (Location, Spanned<Spanned<FieldDef>>, Location),
) -> Spanned<FnArg>
{
    {
        let (l, r) = (field.0, field.2);
        span!(l, FnArg::Field(field.1), r)
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action48<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, l, _): (Location, Location, Location),
    (_, name, _): (Location, Spanned<Ident>, Location),
    (_, _, _): (Location, Token<'input>, Location),
    (_, args, _): (Location, Vec<Spanned<FnArg>>, Location),
    (_, _, _): (Location, Token<'input>, Location),
    (_, _, _): (Location, Token<'input>, Location),
    (_, effects, _): (Location, Vec<Spanned<Ident>>, Location),
    (_, _, _): (Location, Token<'input>, Location),
    (_, ret, _): (Location, core::option::Option<(Token<'input>, Spanned<Ident>)>, Location),
    (_, r, _): (Location, Location, Location),
) -> Spanned<Prototype>
{
    {
        let ret = match ret {
            None => None,
            Some(r) => Some(r.1),
        };
        span!(l, Prototype{name, args, ret, effects},r)
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action49<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, l, _): (Location, Location, Location),
    (_, _, _): (Location, Spanned<Keyword>, Location),
    (_, name, _): (Location, Spanned<Ident>, Location),
    (_, _, _): (Location, Token<'input>, Location),
    (_, value, _): (Location, Spanned<Node>, Location),
    (_, r, _): (Location, Location, Location),
) -> Spanned<Node>
{
    span!(l, Node::Binding(Binding(name, Box::new(value))),r)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action50<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, __0, _): (Location, Spanned<Node>, Location),
) -> Spanned<Node>
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action51<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, __0, _): (Location, Spanned<Node>, Location),
) -> Spanned<Node>
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action52<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, l, _): (Location, Location, Location),
    (_, _, _): (Location, Token<'input>, Location),
    (_, r, _): (Location, Location, Location),
) -> Spanned<Visibility>
{
    span!(l, Visibility::Public, r)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action53<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, l, _): (Location, Location, Location),
    (_, _, _): (Location, Token<'input>, Location),
    (_, r, _): (Location, Location, Location),
) -> Spanned<Visibility>
{
    span!(l, Visibility::Private, r)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action54<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, l, _): (Location, Location, Location),
    (_, _, _): (Location, (), Location),
    (_, r, _): (Location, Location, Location),
) -> Spanned<Visibility>
{
    span!(l, Visibility::Private, r)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action55<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, l, _): (Location, Location, Location),
    (_, _, _): (Location, Spanned<Keyword>, Location),
    (_, i, _): (Location, Spanned<Ident>, Location),
    (_, lines, _): (Location, Block<Spanned<Node>>, Location),
    (_, r, _): (Location, Location, Location),
) -> (Spanned<Ident>, Block<Spanned<Node>>)
{
    (i, lines)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action56<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, l, _): (Location, Location, Location),
    (_, kwv, _): (Location, Spanned<KeywordAndVisibility>, Location),
    (_, proto, _): (Location, Spanned<Prototype>, Location),
    (_, block, _): (Location, Block<Spanned<Node>>, Location),
    (_, r, _): (Location, Location, Location),
) -> Spanned<Node>
{
    span!(l, Node::FnDef(FnDef(kwv,proto, block)), r)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action57<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, l, _): (Location, Location, Location),
    (_, kwv, _): (Location, Spanned<KeywordAndVisibility>, Location),
    (_, i, _): (Location, Spanned<Ident>, Location),
    (_, _, _): (Location, Token<'input>, Location),
    (_, effects, _): (Location, Vec<Spanned<Ident>>, Location),
    (_, block, _): (Location, Block<Spanned<Prototype>>, Location),
    (_, r, _): (Location, Location, Location),
) -> Spanned<Node>
{
    span!(l,Node::EffectDef(EffectDef(kwv, i, effects,block)), r)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action58<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, l, _): (Location, Location, Location),
    (_, kwv, _): (Location, Spanned<KeywordAndVisibility>, Location),
    (_, i, _): (Location, Spanned<Ident>, Location),
    (_, fields, _): (Location, Block<Spanned<FieldDef>>, Location),
    (_, r, _): (Location, Location, Location),
) -> Spanned<Node>
{
    span!(l, Node::StructDef(StructDef(kwv, i, fields)),r)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action59<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, l, _): (Location, Location, Location),
    (_, _, _): (Location, Spanned<Keyword>, Location),
    (_, cl, _): (Location, Location, Location),
    (_, cond, _): (Location, Spanned<Node>, Location),
    (_, cr, _): (Location, Location, Location),
    (_, if_, _): (Location, Block<Spanned<Node>>, Location),
    (_, r, _): (Location, Location, Location),
) -> Spanned<Node>
{
    {
        let branch = BranchDef (
            Box::new(cond),
            vec![
                (span!(l, Node::Bool(true), cl), if_),
            ]
        );
        span!(l, Node::Branch(branch), r)
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action60<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, l, _): (Location, Location, Location),
    (_, _, _): (Location, Spanned<Keyword>, Location),
    (_, cl, _): (Location, Location, Location),
    (_, cond, _): (Location, Spanned<Node>, Location),
    (_, cr, _): (Location, Location, Location),
    (_, if_, _): (Location, Block<Spanned<Node>>, Location),
    (_, el, _): (Location, Location, Location),
    (_, _, _): (Location, Spanned<Keyword>, Location),
    (_, er, _): (Location, Location, Location),
    (_, else_, _): (Location, Block<Spanned<Node>>, Location),
    (_, r, _): (Location, Location, Location),
) -> Spanned<Node>
{
    {
        let branch = BranchDef (
            Box::new(cond),
            vec![
                (span!(l,Node::Bool(true),cl), if_),
                (span!(el, Node::Bool(false), er), else_),
            ]
        );
        span!(l, Node::Branch(branch), r)
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action61<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, l, _): (Location, Location, Location),
    (_, kwv, _): (Location, Spanned<KeywordAndVisibility>, Location),
    (_, _, _): (Location, Token<'input>, Location),
    (_, imports, _): (Location, Vec<Spanned<Ident>>, Location),
    (_, _, _): (Location, Token<'input>, Location),
    (_, _, _): (Location, Spanned<Keyword>, Location),
    (_, i, _): (Location, Spanned<Ident>, Location),
    (_, r, _): (Location, Location, Location),
) -> Spanned<Node>
{
    {
        span!(l, Node::UseDef(UseDef(kwv,imports, i)), r)
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action62<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, l, _): (Location, Location, Location),
    (_, kwv, _): (Location, Spanned<KeywordAndVisibility>, Location),
    (_, i, _): (Location, Spanned<Ident>, Location),
    (_, t, _): (Location, core::option::Option<(Token<'input>, Spanned<Ident>)>, Location),
    (_, lines, _): (Location, Block<Spanned<Node>>, Location),
    (_, r, _): (Location, Location, Location),
) -> Spanned<Node>
{
    span!(l,Node::ImplDef(ImplDef(kwv, i, t.map(|t| t.1), lines)),r)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action63<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, __0, _): (Location, Spanned<Node>, Location),
) -> Spanned<Node>
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action64<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, __0, _): (Location, Spanned<Node>, Location),
) -> Spanned<Node>
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action65<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, __0, _): (Location, Spanned<Node>, Location),
) -> Spanned<Node>
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action66<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, __0, _): (Location, Spanned<Node>, Location),
) -> Spanned<Node>
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action67<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, __0, _): (Location, Spanned<Node>, Location),
) -> Spanned<Node>
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action68<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, expr, _): (Location, alloc::vec::Vec<(alloc::vec::Vec<Token<'input>>, Spanned<Node>)>, Location),
) -> Module
{
    Module(expr.into_iter().map(|e| e.1).collect())
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action69<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, __0, _): (Location, __lalrpop_util::ErrorRecovery<Location, Token<'input>, &'static str>, Location),
) -> Module
{
    {
        errors.push(__0);
        Module(vec![])
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action70<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __lookbehind: &Location,
    __lookahead: &Location,
) -> alloc::vec::Vec<(alloc::vec::Vec<Token<'input>>, Spanned<Node>)>
{
    alloc::vec![]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action71<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, v, _): (Location, alloc::vec::Vec<(alloc::vec::Vec<Token<'input>>, Spanned<Node>)>, Location),
) -> alloc::vec::Vec<(alloc::vec::Vec<Token<'input>>, Spanned<Node>)>
{
    v
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action72<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, __0, _): (Location, alloc::vec::Vec<Token<'input>>, Location),
    (_, __1, _): (Location, Spanned<Node>, Location),
) -> (alloc::vec::Vec<Token<'input>>, Spanned<Node>)
{
    (__0, __1)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action73<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __lookbehind: &Location,
    __lookahead: &Location,
) -> alloc::vec::Vec<Token<'input>>
{
    alloc::vec![]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action74<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, v, _): (Location, alloc::vec::Vec<Token<'input>>, Location),
) -> alloc::vec::Vec<Token<'input>>
{
    v
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action75<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, _, _): (Location, Token<'input>, Location),
    (_, _, _): (Location, core::option::Option<Token<'input>>, Location),
    (_, lines, _): (Location, Vec<Spanned<Node>>, Location),
    (_, _, _): (Location, Token<'input>, Location),
) -> Block<Spanned<Node>>
{
    Block(lines)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action76<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, __0, _): (Location, (Token<'input>, Spanned<Ident>), Location),
) -> core::option::Option<(Token<'input>, Spanned<Ident>)>
{
    Some(__0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action77<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __lookbehind: &Location,
    __lookahead: &Location,
) -> core::option::Option<(Token<'input>, Spanned<Ident>)>
{
    None
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action78<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, __0, _): (Location, Token<'input>, Location),
    (_, __1, _): (Location, Spanned<Ident>, Location),
) -> (Token<'input>, Spanned<Ident>)
{
    (__0, __1)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action79<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, lo, _): (Location, Location, Location),
    (_, v, _): (Location, Spanned<Visibility>, Location),
    (_, k, _): (Location, Spanned<Keyword>, Location),
    (_, hi, _): (Location, Location, Location),
) -> Spanned<KeywordAndVisibility>
{
    span!(lo, KeywordAndVisibility(k, v), hi)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action80<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, lo, _): (Location, Location, Location),
    (_, v, _): (Location, Spanned<Visibility>, Location),
    (_, k, _): (Location, Spanned<Keyword>, Location),
    (_, hi, _): (Location, Location, Location),
) -> Spanned<KeywordAndVisibility>
{
    span!(lo, KeywordAndVisibility(k, v), hi)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action81<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, _, _): (Location, Token<'input>, Location),
    (_, _, _): (Location, core::option::Option<Token<'input>>, Location),
    (_, lines, _): (Location, Vec<Spanned<FieldDef>>, Location),
    (_, _, _): (Location, Token<'input>, Location),
) -> Block<Spanned<FieldDef>>
{
    Block(lines)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action82<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, lo, _): (Location, Location, Location),
    (_, v, _): (Location, Spanned<Visibility>, Location),
    (_, k, _): (Location, Spanned<Keyword>, Location),
    (_, hi, _): (Location, Location, Location),
) -> Spanned<KeywordAndVisibility>
{
    span!(lo, KeywordAndVisibility(k, v), hi)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action83<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, _, _): (Location, Token<'input>, Location),
    (_, _, _): (Location, core::option::Option<Token<'input>>, Location),
    (_, lines, _): (Location, Vec<Spanned<Prototype>>, Location),
    (_, _, _): (Location, Token<'input>, Location),
) -> Block<Spanned<Prototype>>
{
    Block(lines)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action84<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, mut v, _): (Location, alloc::vec::Vec<Spanned<Ident>>, Location),
    (_, e, _): (Location, core::option::Option<Spanned<Ident>>, Location),
) -> Vec<Spanned<Ident>>
{
    match e { // (1)
        None=> v,
        Some(e) => {
            v.push(e);
            v
        }
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action85<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, lo, _): (Location, Location, Location),
    (_, v, _): (Location, Spanned<Visibility>, Location),
    (_, k, _): (Location, Spanned<Keyword>, Location),
    (_, hi, _): (Location, Location, Location),
) -> Spanned<KeywordAndVisibility>
{
    span!(lo, KeywordAndVisibility(k, v), hi)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action86<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, lo, _): (Location, Location, Location),
    (_, v, _): (Location, Spanned<Visibility>, Location),
    (_, k, _): (Location, Spanned<Keyword>, Location),
    (_, hi, _): (Location, Location, Location),
) -> Spanned<KeywordAndVisibility>
{
    span!(lo, KeywordAndVisibility(k, v), hi)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action87<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, _, _): (Location, Token<'input>, Location),
    (_, _, _): (Location, core::option::Option<Token<'input>>, Location),
    (_, lines, _): (Location, Vec<Spanned<Node>>, Location),
    (_, _, _): (Location, Token<'input>, Location),
) -> Block<Spanned<Node>>
{
    Block(lines)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action88<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __lookbehind: &Location,
    __lookahead: &Location,
)
{
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action89<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, __0, _): (Location, (Token<'input>, Spanned<Ident>), Location),
) -> core::option::Option<(Token<'input>, Spanned<Ident>)>
{
    Some(__0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action90<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __lookbehind: &Location,
    __lookahead: &Location,
) -> core::option::Option<(Token<'input>, Spanned<Ident>)>
{
    None
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action91<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, __0, _): (Location, Token<'input>, Location),
    (_, __1, _): (Location, Spanned<Ident>, Location),
) -> (Token<'input>, Spanned<Ident>)
{
    (__0, __1)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action92<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, mut v, _): (Location, alloc::vec::Vec<Spanned<FnArg>>, Location),
    (_, e, _): (Location, core::option::Option<Spanned<FnArg>>, Location),
) -> Vec<Spanned<FnArg>>
{
    match e { // (1)
        None=> v,
        Some(e) => {
            v.push(e);
            v
        }
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action93<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, __0, _): (Location, Location, Location),
    (_, __1, _): (Location, Spanned<FieldDef>, Location),
    (_, __2, _): (Location, Location, Location),
) -> Spanned<Spanned<FieldDef>>
{
    span!(__0, __1, __2)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action94<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, __0, _): (Location, Location, Location),
    (_, __1, _): (Location, Token<'input>, Location),
    (_, __2, _): (Location, Location, Location),
) -> Spanned<Token<'input>>
{
    span!(__0, __1, __2)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action95<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, __0, _): (Location, Location, Location),
    (_, __1, _): (Location, Spanned<Node>, Location),
    (_, __2, _): (Location, Location, Location),
) -> Spanned<Spanned<Node>>
{
    span!(__0, __1, __2)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action96<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, mut v, _): (Location, alloc::vec::Vec<Spanned<Node>>, Location),
    (_, e, _): (Location, core::option::Option<Spanned<Node>>, Location),
) -> Vec<Spanned<Node>>
{
    match e { // (1)
        None=> v,
        Some(e) => {
            v.push(e);
            v
        }
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action97<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, mut v, _): (Location, alloc::vec::Vec<Spanned<Ident>>, Location),
    (_, e, _): (Location, core::option::Option<Spanned<Ident>>, Location),
) -> Vec<Spanned<Ident>>
{
    match e { // (1)
        None=> v,
        Some(e) => {
            v.push(e);
            v
        }
    }
}

#[allow(unused_variables)]
fn __action98<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __lookbehind: &Location,
    __lookahead: &Location,
) -> Location
{
    *__lookbehind
}

#[allow(unused_variables)]
fn __action99<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __lookbehind: &Location,
    __lookahead: &Location,
) -> Location
{
    *__lookahead
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action100<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __lookbehind: &Location,
    __lookahead: &Location,
) -> alloc::vec::Vec<Spanned<Ident>>
{
    alloc::vec![]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action101<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, v, _): (Location, alloc::vec::Vec<Spanned<Ident>>, Location),
) -> alloc::vec::Vec<Spanned<Ident>>
{
    v
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action102<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, __0, _): (Location, Spanned<Ident>, Location),
    (_, _, _): (Location, Token<'input>, Location),
) -> Spanned<Ident>
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action103<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, __0, _): (Location, Spanned<Node>, Location),
) -> core::option::Option<Spanned<Node>>
{
    Some(__0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action104<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __lookbehind: &Location,
    __lookahead: &Location,
) -> core::option::Option<Spanned<Node>>
{
    None
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action105<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __lookbehind: &Location,
    __lookahead: &Location,
) -> alloc::vec::Vec<Spanned<Node>>
{
    alloc::vec![]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action106<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, v, _): (Location, alloc::vec::Vec<Spanned<Node>>, Location),
) -> alloc::vec::Vec<Spanned<Node>>
{
    v
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action107<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, __0, _): (Location, Spanned<Node>, Location),
    (_, _, _): (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action108<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, __0, _): (Location, Spanned<FnArg>, Location),
) -> core::option::Option<Spanned<FnArg>>
{
    Some(__0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action109<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __lookbehind: &Location,
    __lookahead: &Location,
) -> core::option::Option<Spanned<FnArg>>
{
    None
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action110<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __lookbehind: &Location,
    __lookahead: &Location,
) -> alloc::vec::Vec<Spanned<FnArg>>
{
    alloc::vec![]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action111<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, v, _): (Location, alloc::vec::Vec<Spanned<FnArg>>, Location),
) -> alloc::vec::Vec<Spanned<FnArg>>
{
    v
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action112<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, __0, _): (Location, Spanned<FnArg>, Location),
    (_, _, _): (Location, Token<'input>, Location),
) -> Spanned<FnArg>
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action113<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, mut v, _): (Location, alloc::vec::Vec<Spanned<Node>>, Location),
    (_, e, _): (Location, core::option::Option<Spanned<Node>>, Location),
) -> Vec<Spanned<Node>>
{
    match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action114<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, __0, _): (Location, Spanned<Ident>, Location),
) -> core::option::Option<Spanned<Ident>>
{
    Some(__0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action115<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __lookbehind: &Location,
    __lookahead: &Location,
) -> core::option::Option<Spanned<Ident>>
{
    None
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action116<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __lookbehind: &Location,
    __lookahead: &Location,
) -> alloc::vec::Vec<Spanned<Ident>>
{
    alloc::vec![]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action117<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, v, _): (Location, alloc::vec::Vec<Spanned<Ident>>, Location),
) -> alloc::vec::Vec<Spanned<Ident>>
{
    v
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action118<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, __0, _): (Location, Spanned<Ident>, Location),
    (_, _, _): (Location, Token<'input>, Location),
) -> Spanned<Ident>
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action119<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, mut v, _): (Location, alloc::vec::Vec<Spanned<Prototype>>, Location),
    (_, e, _): (Location, core::option::Option<Spanned<Prototype>>, Location),
) -> Vec<Spanned<Prototype>>
{
    match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action120<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, mut v, _): (Location, alloc::vec::Vec<Spanned<FieldDef>>, Location),
    (_, e, _): (Location, core::option::Option<Spanned<FieldDef>>, Location),
) -> Vec<Spanned<FieldDef>>
{
    match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action121<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, mut v, _): (Location, alloc::vec::Vec<Spanned<Node>>, Location),
    (_, e, _): (Location, core::option::Option<Spanned<Node>>, Location),
) -> Vec<Spanned<Node>>
{
    match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action122<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, __0, _): (Location, core::option::Option<Token<'input>>, Location),
) -> core::option::Option<Token<'input>>
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action123<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, __0, _): (Location, Token<'input>, Location),
) -> core::option::Option<Token<'input>>
{
    Some(__0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action124<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __lookbehind: &Location,
    __lookahead: &Location,
) -> core::option::Option<Token<'input>>
{
    None
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action125<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, __0, _): (Location, Token<'input>, Location),
) -> alloc::vec::Vec<Token<'input>>
{
    alloc::vec![__0]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action126<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, v, _): (Location, alloc::vec::Vec<Token<'input>>, Location),
    (_, e, _): (Location, Token<'input>, Location),
) -> alloc::vec::Vec<Token<'input>>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action127<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, __0, _): (Location, (alloc::vec::Vec<Token<'input>>, Spanned<Node>), Location),
) -> alloc::vec::Vec<(alloc::vec::Vec<Token<'input>>, Spanned<Node>)>
{
    alloc::vec![__0]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action128<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, v, _): (Location, alloc::vec::Vec<(alloc::vec::Vec<Token<'input>>, Spanned<Node>)>, Location),
    (_, e, _): (Location, (alloc::vec::Vec<Token<'input>>, Spanned<Node>), Location),
) -> alloc::vec::Vec<(alloc::vec::Vec<Token<'input>>, Spanned<Node>)>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action129<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, __0, _): (Location, Spanned<Node>, Location),
) -> core::option::Option<Spanned<Node>>
{
    Some(__0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action130<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __lookbehind: &Location,
    __lookahead: &Location,
) -> core::option::Option<Spanned<Node>>
{
    None
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action131<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __lookbehind: &Location,
    __lookahead: &Location,
) -> alloc::vec::Vec<Spanned<Node>>
{
    alloc::vec![]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action132<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, v, _): (Location, alloc::vec::Vec<Spanned<Node>>, Location),
) -> alloc::vec::Vec<Spanned<Node>>
{
    v
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action133<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, __0, _): (Location, Spanned<Node>, Location),
    (_, _, _): (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action134<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, __0, _): (Location, Spanned<FieldDef>, Location),
) -> core::option::Option<Spanned<FieldDef>>
{
    Some(__0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action135<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __lookbehind: &Location,
    __lookahead: &Location,
) -> core::option::Option<Spanned<FieldDef>>
{
    None
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action136<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __lookbehind: &Location,
    __lookahead: &Location,
) -> alloc::vec::Vec<Spanned<FieldDef>>
{
    alloc::vec![]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action137<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, v, _): (Location, alloc::vec::Vec<Spanned<FieldDef>>, Location),
) -> alloc::vec::Vec<Spanned<FieldDef>>
{
    v
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action138<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, __0, _): (Location, Spanned<FieldDef>, Location),
    (_, _, _): (Location, Token<'input>, Location),
) -> Spanned<FieldDef>
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action139<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, __0, _): (Location, Spanned<Prototype>, Location),
) -> core::option::Option<Spanned<Prototype>>
{
    Some(__0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action140<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __lookbehind: &Location,
    __lookahead: &Location,
) -> core::option::Option<Spanned<Prototype>>
{
    None
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action141<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __lookbehind: &Location,
    __lookahead: &Location,
) -> alloc::vec::Vec<Spanned<Prototype>>
{
    alloc::vec![]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action142<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, v, _): (Location, alloc::vec::Vec<Spanned<Prototype>>, Location),
) -> alloc::vec::Vec<Spanned<Prototype>>
{
    v
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action143<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, __0, _): (Location, Spanned<Prototype>, Location),
    (_, _, _): (Location, Token<'input>, Location),
) -> Spanned<Prototype>
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action144<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, __0, _): (Location, Spanned<Ident>, Location),
) -> alloc::vec::Vec<Spanned<Ident>>
{
    alloc::vec![__0]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action145<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, v, _): (Location, alloc::vec::Vec<Spanned<Ident>>, Location),
    (_, e, _): (Location, Spanned<Ident>, Location),
) -> alloc::vec::Vec<Spanned<Ident>>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action146<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, __0, _): (Location, Spanned<Node>, Location),
) -> core::option::Option<Spanned<Node>>
{
    Some(__0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action147<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __lookbehind: &Location,
    __lookahead: &Location,
) -> core::option::Option<Spanned<Node>>
{
    None
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action148<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __lookbehind: &Location,
    __lookahead: &Location,
) -> alloc::vec::Vec<Spanned<Node>>
{
    alloc::vec![]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action149<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, v, _): (Location, alloc::vec::Vec<Spanned<Node>>, Location),
) -> alloc::vec::Vec<Spanned<Node>>
{
    v
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action150<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, __0, _): (Location, Spanned<Node>, Location),
    (_, _, _): (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action151<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, __0, _): (Location, Spanned<FnArg>, Location),
) -> alloc::vec::Vec<Spanned<FnArg>>
{
    alloc::vec![__0]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action152<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, v, _): (Location, alloc::vec::Vec<Spanned<FnArg>>, Location),
    (_, e, _): (Location, Spanned<FnArg>, Location),
) -> alloc::vec::Vec<Spanned<FnArg>>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action153<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, __0, _): (Location, Spanned<Node>, Location),
) -> alloc::vec::Vec<Spanned<Node>>
{
    alloc::vec![__0]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action154<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, v, _): (Location, alloc::vec::Vec<Spanned<Node>>, Location),
    (_, e, _): (Location, Spanned<Node>, Location),
) -> alloc::vec::Vec<Spanned<Node>>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action155<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, __0, _): (Location, Spanned<Ident>, Location),
) -> alloc::vec::Vec<Spanned<Ident>>
{
    alloc::vec![__0]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action156<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, v, _): (Location, alloc::vec::Vec<Spanned<Ident>>, Location),
    (_, e, _): (Location, Spanned<Ident>, Location),
) -> alloc::vec::Vec<Spanned<Ident>>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action157<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, __0, _): (Location, Spanned<Node>, Location),
) -> alloc::vec::Vec<Spanned<Node>>
{
    alloc::vec![__0]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action158<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, v, _): (Location, alloc::vec::Vec<Spanned<Node>>, Location),
    (_, e, _): (Location, Spanned<Node>, Location),
) -> alloc::vec::Vec<Spanned<Node>>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action159<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, __0, _): (Location, Spanned<Prototype>, Location),
) -> alloc::vec::Vec<Spanned<Prototype>>
{
    alloc::vec![__0]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action160<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, v, _): (Location, alloc::vec::Vec<Spanned<Prototype>>, Location),
    (_, e, _): (Location, Spanned<Prototype>, Location),
) -> alloc::vec::Vec<Spanned<Prototype>>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action161<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, __0, _): (Location, Spanned<FieldDef>, Location),
) -> alloc::vec::Vec<Spanned<FieldDef>>
{
    alloc::vec![__0]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action162<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, v, _): (Location, alloc::vec::Vec<Spanned<FieldDef>>, Location),
    (_, e, _): (Location, Spanned<FieldDef>, Location),
) -> alloc::vec::Vec<Spanned<FieldDef>>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action163<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, __0, _): (Location, Spanned<Node>, Location),
) -> alloc::vec::Vec<Spanned<Node>>
{
    alloc::vec![__0]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action164<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    (_, v, _): (Location, alloc::vec::Vec<Spanned<Node>>, Location),
    (_, e, _): (Location, Spanned<Node>, Location),
) -> alloc::vec::Vec<Spanned<Node>>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action165<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Node>, Location),
) -> (alloc::vec::Vec<Token<'input>>, Spanned<Node>)
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action73(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action72(
        errors,
        db,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action166<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, alloc::vec::Vec<Token<'input>>, Location),
    __1: (Location, Spanned<Node>, Location),
) -> (alloc::vec::Vec<Token<'input>>, Spanned<Node>)
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action74(
        errors,
        db,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action72(
        errors,
        db,
        __temp0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action167<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Token<'input>, Location),
) -> core::option::Option<Token<'input>>
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action123(
        errors,
        db,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action122(
        errors,
        db,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action168<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __lookbehind: &Location,
    __lookahead: &Location,
) -> core::option::Option<Token<'input>>
{
    let __start0 = *__lookbehind;
    let __end0 = *__lookahead;
    let __temp0 = __action124(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action122(
        errors,
        db,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action169<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Token<'input>, Location),
    __1: (Location, Spanned<Ident>, Location),
) -> core::option::Option<(Token<'input>, Spanned<Ident>)>
{
    let __start0 = __0.0;
    let __end0 = __1.2;
    let __temp0 = __action91(
        errors,
        db,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action89(
        errors,
        db,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action170<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Location, Location),
    __1: (Location, Spanned<Ident>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Vec<Spanned<FnArg>>, Location),
    __4: (Location, Token<'input>, Location),
    __5: (Location, Token<'input>, Location),
    __6: (Location, Vec<Spanned<Ident>>, Location),
    __7: (Location, Token<'input>, Location),
    __8: (Location, Token<'input>, Location),
    __9: (Location, Spanned<Ident>, Location),
    __10: (Location, Location, Location),
) -> Spanned<Prototype>
{
    let __start0 = __8.0;
    let __end0 = __9.2;
    let __temp0 = __action169(
        errors,
        db,
        __8,
        __9,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action48(
        errors,
        db,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __7,
        __temp0,
        __10,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action171<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Location, Location),
    __1: (Location, Spanned<Ident>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Vec<Spanned<FnArg>>, Location),
    __4: (Location, Token<'input>, Location),
    __5: (Location, Token<'input>, Location),
    __6: (Location, Vec<Spanned<Ident>>, Location),
    __7: (Location, Token<'input>, Location),
    __8: (Location, Location, Location),
) -> Spanned<Prototype>
{
    let __start0 = __7.2;
    let __end0 = __8.0;
    let __temp0 = __action90(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action48(
        errors,
        db,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __7,
        __temp0,
        __8,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action172<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Node>, Location),
) -> alloc::vec::Vec<(alloc::vec::Vec<Token<'input>>, Spanned<Node>)>
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action165(
        errors,
        db,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action127(
        errors,
        db,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action173<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, alloc::vec::Vec<Token<'input>>, Location),
    __1: (Location, Spanned<Node>, Location),
) -> alloc::vec::Vec<(alloc::vec::Vec<Token<'input>>, Spanned<Node>)>
{
    let __start0 = __0.0;
    let __end0 = __1.2;
    let __temp0 = __action166(
        errors,
        db,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action127(
        errors,
        db,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action174<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, alloc::vec::Vec<(alloc::vec::Vec<Token<'input>>, Spanned<Node>)>, Location),
    __1: (Location, Spanned<Node>, Location),
) -> alloc::vec::Vec<(alloc::vec::Vec<Token<'input>>, Spanned<Node>)>
{
    let __start0 = __1.0;
    let __end0 = __1.2;
    let __temp0 = __action165(
        errors,
        db,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action128(
        errors,
        db,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action175<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, alloc::vec::Vec<(alloc::vec::Vec<Token<'input>>, Spanned<Node>)>, Location),
    __1: (Location, alloc::vec::Vec<Token<'input>>, Location),
    __2: (Location, Spanned<Node>, Location),
) -> alloc::vec::Vec<(alloc::vec::Vec<Token<'input>>, Spanned<Node>)>
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action166(
        errors,
        db,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action128(
        errors,
        db,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action176<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __lookbehind: &Location,
    __lookahead: &Location,
) -> Module
{
    let __start0 = *__lookbehind;
    let __end0 = *__lookahead;
    let __temp0 = __action70(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action68(
        errors,
        db,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action177<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, alloc::vec::Vec<(alloc::vec::Vec<Token<'input>>, Spanned<Node>)>, Location),
) -> Module
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action71(
        errors,
        db,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action68(
        errors,
        db,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action178<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Token<'input>, Location),
    __1: (Location, Token<'input>, Location),
    __2: (Location, Vec<Spanned<FieldDef>>, Location),
    __3: (Location, Token<'input>, Location),
) -> Block<Spanned<FieldDef>>
{
    let __start0 = __1.0;
    let __end0 = __1.2;
    let __temp0 = __action167(
        errors,
        db,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action81(
        errors,
        db,
        __0,
        __temp0,
        __2,
        __3,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action179<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Token<'input>, Location),
    __1: (Location, Vec<Spanned<FieldDef>>, Location),
    __2: (Location, Token<'input>, Location),
) -> Block<Spanned<FieldDef>>
{
    let __start0 = __0.2;
    let __end0 = __1.0;
    let __temp0 = __action168(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action81(
        errors,
        db,
        __0,
        __temp0,
        __1,
        __2,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action180<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Token<'input>, Location),
    __1: (Location, Token<'input>, Location),
    __2: (Location, Vec<Spanned<Node>>, Location),
    __3: (Location, Token<'input>, Location),
) -> Block<Spanned<Node>>
{
    let __start0 = __1.0;
    let __end0 = __1.2;
    let __temp0 = __action167(
        errors,
        db,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action75(
        errors,
        db,
        __0,
        __temp0,
        __2,
        __3,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action181<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Token<'input>, Location),
    __1: (Location, Vec<Spanned<Node>>, Location),
    __2: (Location, Token<'input>, Location),
) -> Block<Spanned<Node>>
{
    let __start0 = __0.2;
    let __end0 = __1.0;
    let __temp0 = __action168(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action75(
        errors,
        db,
        __0,
        __temp0,
        __1,
        __2,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action182<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Token<'input>, Location),
    __1: (Location, Token<'input>, Location),
    __2: (Location, Vec<Spanned<Prototype>>, Location),
    __3: (Location, Token<'input>, Location),
) -> Block<Spanned<Prototype>>
{
    let __start0 = __1.0;
    let __end0 = __1.2;
    let __temp0 = __action167(
        errors,
        db,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action83(
        errors,
        db,
        __0,
        __temp0,
        __2,
        __3,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action183<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Token<'input>, Location),
    __1: (Location, Vec<Spanned<Prototype>>, Location),
    __2: (Location, Token<'input>, Location),
) -> Block<Spanned<Prototype>>
{
    let __start0 = __0.2;
    let __end0 = __1.0;
    let __temp0 = __action168(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action83(
        errors,
        db,
        __0,
        __temp0,
        __1,
        __2,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action184<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Token<'input>, Location),
    __1: (Location, Token<'input>, Location),
    __2: (Location, Vec<Spanned<Node>>, Location),
    __3: (Location, Token<'input>, Location),
) -> Block<Spanned<Node>>
{
    let __start0 = __1.0;
    let __end0 = __1.2;
    let __temp0 = __action167(
        errors,
        db,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action87(
        errors,
        db,
        __0,
        __temp0,
        __2,
        __3,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action185<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Token<'input>, Location),
    __1: (Location, Vec<Spanned<Node>>, Location),
    __2: (Location, Token<'input>, Location),
) -> Block<Spanned<Node>>
{
    let __start0 = __0.2;
    let __end0 = __1.0;
    let __temp0 = __action168(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action87(
        errors,
        db,
        __0,
        __temp0,
        __1,
        __2,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action186<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Token<'input>, Location),
    __1: (Location, Spanned<Ident>, Location),
) -> core::option::Option<(Token<'input>, Spanned<Ident>)>
{
    let __start0 = __0.0;
    let __end0 = __1.2;
    let __temp0 = __action78(
        errors,
        db,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action76(
        errors,
        db,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action187<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Location, Location),
    __1: (Location, Spanned<KeywordAndVisibility>, Location),
    __2: (Location, Spanned<Ident>, Location),
    __3: (Location, Token<'input>, Location),
    __4: (Location, Spanned<Ident>, Location),
    __5: (Location, Block<Spanned<Node>>, Location),
    __6: (Location, Location, Location),
) -> Spanned<Node>
{
    let __start0 = __3.0;
    let __end0 = __4.2;
    let __temp0 = __action186(
        errors,
        db,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action62(
        errors,
        db,
        __0,
        __1,
        __2,
        __temp0,
        __5,
        __6,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action188<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Location, Location),
    __1: (Location, Spanned<KeywordAndVisibility>, Location),
    __2: (Location, Spanned<Ident>, Location),
    __3: (Location, Block<Spanned<Node>>, Location),
    __4: (Location, Location, Location),
) -> Spanned<Node>
{
    let __start0 = __2.2;
    let __end0 = __3.0;
    let __temp0 = __action77(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action62(
        errors,
        db,
        __0,
        __1,
        __2,
        __temp0,
        __3,
        __4,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action189<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Location, Location),
    __1: (Location, Location, Location),
) -> Spanned<Visibility>
{
    let __start0 = __0.2;
    let __end0 = __1.0;
    let __temp0 = __action88(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action54(
        errors,
        db,
        __0,
        __temp0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action190<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Node>, Location),
    __1: (Location, Token<'input>, Location),
) -> alloc::vec::Vec<Spanned<Node>>
{
    let __start0 = __0.0;
    let __end0 = __1.2;
    let __temp0 = __action107(
        errors,
        db,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action153(
        errors,
        db,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action191<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
    __1: (Location, Spanned<Node>, Location),
    __2: (Location, Token<'input>, Location),
) -> alloc::vec::Vec<Spanned<Node>>
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action107(
        errors,
        db,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action154(
        errors,
        db,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action192<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, core::option::Option<Spanned<Node>>, Location),
) -> Vec<Spanned<Node>>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action105(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action96(
        errors,
        db,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action193<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
    __1: (Location, core::option::Option<Spanned<Node>>, Location),
) -> Vec<Spanned<Node>>
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action106(
        errors,
        db,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action96(
        errors,
        db,
        __temp0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action194<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<FieldDef>, Location),
    __1: (Location, Token<'input>, Location),
) -> alloc::vec::Vec<Spanned<FieldDef>>
{
    let __start0 = __0.0;
    let __end0 = __1.2;
    let __temp0 = __action138(
        errors,
        db,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action161(
        errors,
        db,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action195<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, alloc::vec::Vec<Spanned<FieldDef>>, Location),
    __1: (Location, Spanned<FieldDef>, Location),
    __2: (Location, Token<'input>, Location),
) -> alloc::vec::Vec<Spanned<FieldDef>>
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action138(
        errors,
        db,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action162(
        errors,
        db,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action196<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, core::option::Option<Spanned<FieldDef>>, Location),
) -> Vec<Spanned<FieldDef>>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action136(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action120(
        errors,
        db,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action197<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, alloc::vec::Vec<Spanned<FieldDef>>, Location),
    __1: (Location, core::option::Option<Spanned<FieldDef>>, Location),
) -> Vec<Spanned<FieldDef>>
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action137(
        errors,
        db,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action120(
        errors,
        db,
        __temp0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action198<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<FnArg>, Location),
    __1: (Location, Token<'input>, Location),
) -> alloc::vec::Vec<Spanned<FnArg>>
{
    let __start0 = __0.0;
    let __end0 = __1.2;
    let __temp0 = __action112(
        errors,
        db,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action151(
        errors,
        db,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action199<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, alloc::vec::Vec<Spanned<FnArg>>, Location),
    __1: (Location, Spanned<FnArg>, Location),
    __2: (Location, Token<'input>, Location),
) -> alloc::vec::Vec<Spanned<FnArg>>
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action112(
        errors,
        db,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action152(
        errors,
        db,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action200<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, core::option::Option<Spanned<FnArg>>, Location),
) -> Vec<Spanned<FnArg>>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action110(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action92(
        errors,
        db,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action201<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, alloc::vec::Vec<Spanned<FnArg>>, Location),
    __1: (Location, core::option::Option<Spanned<FnArg>>, Location),
) -> Vec<Spanned<FnArg>>
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action111(
        errors,
        db,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action92(
        errors,
        db,
        __temp0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action202<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Node>, Location),
    __1: (Location, Token<'input>, Location),
) -> alloc::vec::Vec<Spanned<Node>>
{
    let __start0 = __0.0;
    let __end0 = __1.2;
    let __temp0 = __action133(
        errors,
        db,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action163(
        errors,
        db,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action203<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
    __1: (Location, Spanned<Node>, Location),
    __2: (Location, Token<'input>, Location),
) -> alloc::vec::Vec<Spanned<Node>>
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action133(
        errors,
        db,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action164(
        errors,
        db,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action204<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, core::option::Option<Spanned<Node>>, Location),
) -> Vec<Spanned<Node>>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action131(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action121(
        errors,
        db,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action205<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
    __1: (Location, core::option::Option<Spanned<Node>>, Location),
) -> Vec<Spanned<Node>>
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action132(
        errors,
        db,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action121(
        errors,
        db,
        __temp0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action206<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Ident>, Location),
    __1: (Location, Token<'input>, Location),
) -> alloc::vec::Vec<Spanned<Ident>>
{
    let __start0 = __0.0;
    let __end0 = __1.2;
    let __temp0 = __action118(
        errors,
        db,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action144(
        errors,
        db,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action207<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, alloc::vec::Vec<Spanned<Ident>>, Location),
    __1: (Location, Spanned<Ident>, Location),
    __2: (Location, Token<'input>, Location),
) -> alloc::vec::Vec<Spanned<Ident>>
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action118(
        errors,
        db,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action145(
        errors,
        db,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action208<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, core::option::Option<Spanned<Ident>>, Location),
) -> Vec<Spanned<Ident>>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action116(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action84(
        errors,
        db,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action209<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, alloc::vec::Vec<Spanned<Ident>>, Location),
    __1: (Location, core::option::Option<Spanned<Ident>>, Location),
) -> Vec<Spanned<Ident>>
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action117(
        errors,
        db,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action84(
        errors,
        db,
        __temp0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action210<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Ident>, Location),
    __1: (Location, Token<'input>, Location),
) -> alloc::vec::Vec<Spanned<Ident>>
{
    let __start0 = __0.0;
    let __end0 = __1.2;
    let __temp0 = __action102(
        errors,
        db,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action155(
        errors,
        db,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action211<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, alloc::vec::Vec<Spanned<Ident>>, Location),
    __1: (Location, Spanned<Ident>, Location),
    __2: (Location, Token<'input>, Location),
) -> alloc::vec::Vec<Spanned<Ident>>
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action102(
        errors,
        db,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action156(
        errors,
        db,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action212<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, core::option::Option<Spanned<Ident>>, Location),
) -> Vec<Spanned<Ident>>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action100(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action97(
        errors,
        db,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action213<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, alloc::vec::Vec<Spanned<Ident>>, Location),
    __1: (Location, core::option::Option<Spanned<Ident>>, Location),
) -> Vec<Spanned<Ident>>
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action101(
        errors,
        db,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action97(
        errors,
        db,
        __temp0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action214<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Prototype>, Location),
    __1: (Location, Token<'input>, Location),
) -> alloc::vec::Vec<Spanned<Prototype>>
{
    let __start0 = __0.0;
    let __end0 = __1.2;
    let __temp0 = __action143(
        errors,
        db,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action159(
        errors,
        db,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action215<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, alloc::vec::Vec<Spanned<Prototype>>, Location),
    __1: (Location, Spanned<Prototype>, Location),
    __2: (Location, Token<'input>, Location),
) -> alloc::vec::Vec<Spanned<Prototype>>
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action143(
        errors,
        db,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action160(
        errors,
        db,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action216<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, core::option::Option<Spanned<Prototype>>, Location),
) -> Vec<Spanned<Prototype>>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action141(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action119(
        errors,
        db,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action217<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, alloc::vec::Vec<Spanned<Prototype>>, Location),
    __1: (Location, core::option::Option<Spanned<Prototype>>, Location),
) -> Vec<Spanned<Prototype>>
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action142(
        errors,
        db,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action119(
        errors,
        db,
        __temp0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action218<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Node>, Location),
    __1: (Location, Token<'input>, Location),
) -> alloc::vec::Vec<Spanned<Node>>
{
    let __start0 = __0.0;
    let __end0 = __1.2;
    let __temp0 = __action150(
        errors,
        db,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action157(
        errors,
        db,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action219<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
    __1: (Location, Spanned<Node>, Location),
    __2: (Location, Token<'input>, Location),
) -> alloc::vec::Vec<Spanned<Node>>
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action150(
        errors,
        db,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action158(
        errors,
        db,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action220<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, core::option::Option<Spanned<Node>>, Location),
) -> Vec<Spanned<Node>>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action148(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action113(
        errors,
        db,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action221<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
    __1: (Location, core::option::Option<Spanned<Node>>, Location),
) -> Vec<Spanned<Node>>
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action149(
        errors,
        db,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action113(
        errors,
        db,
        __temp0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action222<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, i64, Location),
    __1: (Location, Location, Location),
) -> Spanned<Value>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action99(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action19(
        errors,
        db,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action223<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, f64, Location),
    __1: (Location, Location, Location),
) -> Spanned<Value>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action99(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action20(
        errors,
        db,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action224<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, &'input str, Location),
    __1: (Location, Location, Location),
) -> Spanned<Value>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action99(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action21(
        errors,
        db,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action225<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Token<'input>, Location),
    __1: (Location, Location, Location),
) -> Spanned<Keyword>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action99(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action3(
        errors,
        db,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action226<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<KeywordAndVisibility>, Location),
    __1: (Location, Spanned<Ident>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Vec<Spanned<Ident>>, Location),
    __4: (Location, Block<Spanned<Prototype>>, Location),
    __5: (Location, Location, Location),
) -> Spanned<Node>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action99(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action57(
        errors,
        db,
        __temp0,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action227<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Token<'input>, Location),
    __1: (Location, Location, Location),
) -> Spanned<Keyword>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action99(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action6(
        errors,
        db,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action228<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Node>, Location),
    __1: (Location, Token<'input>, Location),
    __2: (Location, Spanned<Node>, Location),
    __3: (Location, Location, Location),
) -> Spanned<Node>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action99(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action27(
        errors,
        db,
        __temp0,
        __0,
        __1,
        __2,
        __3,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action229<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Token<'input>, Location),
    __1: (Location, Location, Location),
) -> Spanned<Keyword>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action99(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action2(
        errors,
        db,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action230<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<KeywordAndVisibility>, Location),
    __1: (Location, Spanned<Prototype>, Location),
    __2: (Location, Block<Spanned<Node>>, Location),
    __3: (Location, Location, Location),
) -> Spanned<Node>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action99(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action56(
        errors,
        db,
        __temp0,
        __0,
        __1,
        __2,
        __3,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action231<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Token<'input>, Location),
    __1: (Location, Location, Location),
) -> Spanned<Keyword>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action99(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action9(
        errors,
        db,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action232<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, &'input str, Location),
    __1: (Location, Location, Location),
) -> Spanned<Ident>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action99(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action14(
        errors,
        db,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action233<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Token<'input>, Location),
    __1: (Location, Location, Location),
) -> Spanned<Ident>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action99(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action18(
        errors,
        db,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action234<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, &'input str, Location),
    __1: (Location, Token<'input>, Location),
    __2: (Location, Vec<Spanned<Ident>>, Location),
    __3: (Location, Token<'input>, Location),
    __4: (Location, Location, Location),
) -> Spanned<Ident>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action99(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action15(
        errors,
        db,
        __temp0,
        __0,
        __1,
        __2,
        __3,
        __4,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action235<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Token<'input>, Location),
    __1: (Location, Location, Location),
) -> Spanned<Keyword>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action99(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action5(
        errors,
        db,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action236<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Keyword>, Location),
    __1: (Location, Spanned<Node>, Location),
    __2: (Location, Location, Location),
    __3: (Location, Block<Spanned<Node>>, Location),
    __4: (Location, Location, Location),
) -> Spanned<Node>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __start1 = __0.2;
    let __end1 = __1.0;
    let __temp0 = __action99(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action99(
        errors,
        db,
        &__start1,
        &__end1,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action59(
        errors,
        db,
        __temp0,
        __0,
        __temp1,
        __1,
        __2,
        __3,
        __4,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action237<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Keyword>, Location),
    __1: (Location, Spanned<Node>, Location),
    __2: (Location, Location, Location),
    __3: (Location, Block<Spanned<Node>>, Location),
    __4: (Location, Spanned<Keyword>, Location),
    __5: (Location, Location, Location),
    __6: (Location, Block<Spanned<Node>>, Location),
    __7: (Location, Location, Location),
) -> Spanned<Node>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __start1 = __0.2;
    let __end1 = __1.0;
    let __start2 = __3.2;
    let __end2 = __4.0;
    let __temp0 = __action99(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action99(
        errors,
        db,
        &__start1,
        &__end1,
    );
    let __temp1 = (__start1, __temp1, __end1);
    let __temp2 = __action99(
        errors,
        db,
        &__start2,
        &__end2,
    );
    let __temp2 = (__start2, __temp2, __end2);
    __action60(
        errors,
        db,
        __temp0,
        __0,
        __temp1,
        __1,
        __2,
        __3,
        __temp2,
        __4,
        __5,
        __6,
        __7,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action238<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Token<'input>, Location),
    __1: (Location, Location, Location),
) -> Spanned<Keyword>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action99(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action10(
        errors,
        db,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action239<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<KeywordAndVisibility>, Location),
    __1: (Location, Spanned<Ident>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Spanned<Ident>, Location),
    __4: (Location, Block<Spanned<Node>>, Location),
    __5: (Location, Location, Location),
) -> Spanned<Node>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action99(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action187(
        errors,
        db,
        __temp0,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action240<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<KeywordAndVisibility>, Location),
    __1: (Location, Spanned<Ident>, Location),
    __2: (Location, Block<Spanned<Node>>, Location),
    __3: (Location, Location, Location),
) -> Spanned<Node>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action99(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action188(
        errors,
        db,
        __temp0,
        __0,
        __1,
        __2,
        __3,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action241<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Visibility>, Location),
    __1: (Location, Spanned<Keyword>, Location),
    __2: (Location, Location, Location),
) -> Spanned<KeywordAndVisibility>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action99(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action85(
        errors,
        db,
        __temp0,
        __0,
        __1,
        __2,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action242<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Visibility>, Location),
    __1: (Location, Spanned<Keyword>, Location),
    __2: (Location, Location, Location),
) -> Spanned<KeywordAndVisibility>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action99(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action86(
        errors,
        db,
        __temp0,
        __0,
        __1,
        __2,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action243<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Visibility>, Location),
    __1: (Location, Spanned<Keyword>, Location),
    __2: (Location, Location, Location),
) -> Spanned<KeywordAndVisibility>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action99(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action79(
        errors,
        db,
        __temp0,
        __0,
        __1,
        __2,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action244<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Visibility>, Location),
    __1: (Location, Spanned<Keyword>, Location),
    __2: (Location, Location, Location),
) -> Spanned<KeywordAndVisibility>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action99(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action82(
        errors,
        db,
        __temp0,
        __0,
        __1,
        __2,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action245<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Visibility>, Location),
    __1: (Location, Spanned<Keyword>, Location),
    __2: (Location, Location, Location),
) -> Spanned<KeywordAndVisibility>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action99(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action80(
        errors,
        db,
        __temp0,
        __0,
        __1,
        __2,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action246<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Token<'input>, Location),
    __1: (Location, Location, Location),
) -> Spanned<Keyword>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action99(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action11(
        errors,
        db,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action247<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Token<'input>, Location),
    __1: (Location, Location, Location),
) -> Spanned<Keyword>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action99(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action1(
        errors,
        db,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action248<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Ident>, Location),
    __1: (Location, Token<'input>, Location),
    __2: (Location, Vec<Spanned<FnArg>>, Location),
    __3: (Location, Token<'input>, Location),
    __4: (Location, Token<'input>, Location),
    __5: (Location, Vec<Spanned<Ident>>, Location),
    __6: (Location, Token<'input>, Location),
    __7: (Location, Token<'input>, Location),
    __8: (Location, Spanned<Ident>, Location),
    __9: (Location, Location, Location),
) -> Spanned<Prototype>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action99(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action170(
        errors,
        db,
        __temp0,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __7,
        __8,
        __9,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action249<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Ident>, Location),
    __1: (Location, Token<'input>, Location),
    __2: (Location, Vec<Spanned<FnArg>>, Location),
    __3: (Location, Token<'input>, Location),
    __4: (Location, Token<'input>, Location),
    __5: (Location, Vec<Spanned<Ident>>, Location),
    __6: (Location, Token<'input>, Location),
    __7: (Location, Location, Location),
) -> Spanned<Prototype>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action99(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action171(
        errors,
        db,
        __temp0,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __7,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action250<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Token<'input>, Location),
    __1: (Location, Location, Location),
) -> Spanned<Token<'input>>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action99(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action94(
        errors,
        db,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action251<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<FieldDef>, Location),
    __1: (Location, Location, Location),
) -> Spanned<Spanned<FieldDef>>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action99(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action93(
        errors,
        db,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action252<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Node>, Location),
    __1: (Location, Location, Location),
) -> Spanned<Spanned<Node>>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action99(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action95(
        errors,
        db,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action253<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Keyword>, Location),
    __1: (Location, Spanned<Ident>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Spanned<Node>, Location),
    __4: (Location, Location, Location),
) -> Spanned<Node>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action99(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action49(
        errors,
        db,
        __temp0,
        __0,
        __1,
        __2,
        __3,
        __4,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action254<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, &'input str, Location),
    __1: (Location, Location, Location),
) -> Spanned<Node>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action99(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action24(
        errors,
        db,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action255<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Token<'input>, Location),
    __1: (Location, Location, Location),
) -> Spanned<Keyword>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action99(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action4(
        errors,
        db,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action256<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<KeywordAndVisibility>, Location),
    __1: (Location, Spanned<Ident>, Location),
    __2: (Location, Block<Spanned<FieldDef>>, Location),
    __3: (Location, Location, Location),
) -> Spanned<Node>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action99(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action58(
        errors,
        db,
        __temp0,
        __0,
        __1,
        __2,
        __3,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action257<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, i64, Location),
    __1: (Location, Location, Location),
) -> Spanned<Node>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action99(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action34(
        errors,
        db,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action258<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Node, Location),
    __1: (Location, Location, Location),
) -> Spanned<Node>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action99(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action37(
        errors,
        db,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action259<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Node, Location),
    __1: (Location, Location, Location),
) -> Spanned<Node>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action99(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action38(
        errors,
        db,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action260<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Token<'input>, Location),
    __1: (Location, Vec<Spanned<Ident>>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Location, Location),
) -> Spanned<Vec<Spanned<Ident>>>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action99(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action45(
        errors,
        db,
        __temp0,
        __0,
        __1,
        __2,
        __3,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action261<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Token<'input>, Location),
    __1: (Location, Location, Location),
) -> Spanned<Keyword>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action99(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action8(
        errors,
        db,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action262<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<KeywordAndVisibility>, Location),
    __1: (Location, Token<'input>, Location),
    __2: (Location, Vec<Spanned<Ident>>, Location),
    __3: (Location, Token<'input>, Location),
    __4: (Location, Spanned<Keyword>, Location),
    __5: (Location, Spanned<Ident>, Location),
    __6: (Location, Location, Location),
) -> Spanned<Node>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action99(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action61(
        errors,
        db,
        __temp0,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action263<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Token<'input>, Location),
    __1: (Location, Location, Location),
) -> Spanned<Visibility>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action99(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action52(
        errors,
        db,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action264<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Token<'input>, Location),
    __1: (Location, Location, Location),
) -> Spanned<Visibility>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action99(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action53(
        errors,
        db,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action265<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Location, Location),
) -> Spanned<Visibility>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action99(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action189(
        errors,
        db,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action266<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Token<'input>, Location),
    __1: (Location, Location, Location),
) -> Spanned<Keyword>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action99(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action7(
        errors,
        db,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action267<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Keyword>, Location),
    __1: (Location, Spanned<Ident>, Location),
    __2: (Location, Block<Spanned<Node>>, Location),
    __3: (Location, Location, Location),
) -> (Spanned<Ident>, Block<Spanned<Node>>)
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action99(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action55(
        errors,
        db,
        __temp0,
        __0,
        __1,
        __2,
        __3,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action268<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, i64, Location),
) -> Spanned<Value>
{
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action98(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action222(
        errors,
        db,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action269<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, f64, Location),
) -> Spanned<Value>
{
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action98(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action223(
        errors,
        db,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action270<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, &'input str, Location),
) -> Spanned<Value>
{
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action98(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action224(
        errors,
        db,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action271<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Token<'input>, Location),
) -> Spanned<Keyword>
{
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action98(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action225(
        errors,
        db,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action272<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<KeywordAndVisibility>, Location),
    __1: (Location, Spanned<Ident>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Vec<Spanned<Ident>>, Location),
    __4: (Location, Block<Spanned<Prototype>>, Location),
) -> Spanned<Node>
{
    let __start0 = __4.2;
    let __end0 = __4.2;
    let __temp0 = __action98(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action226(
        errors,
        db,
        __0,
        __1,
        __2,
        __3,
        __4,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action273<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Token<'input>, Location),
) -> Spanned<Keyword>
{
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action98(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action227(
        errors,
        db,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action274<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Node>, Location),
    __1: (Location, Token<'input>, Location),
    __2: (Location, Spanned<Node>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.2;
    let __end0 = __2.2;
    let __temp0 = __action98(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action228(
        errors,
        db,
        __0,
        __1,
        __2,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action275<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Token<'input>, Location),
) -> Spanned<Keyword>
{
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action98(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action229(
        errors,
        db,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action276<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Ident>, Location),
    __1: (Location, Token<'input>, Location),
    __2: (Location, Vec<Spanned<Node>>, Location),
    __3: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __3.2;
    let __end0 = __3.2;
    let __temp0 = __action98(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action32(
        errors,
        db,
        __0,
        __1,
        __2,
        __3,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action277<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<KeywordAndVisibility>, Location),
    __1: (Location, Spanned<Prototype>, Location),
    __2: (Location, Block<Spanned<Node>>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.2;
    let __end0 = __2.2;
    let __temp0 = __action98(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action230(
        errors,
        db,
        __0,
        __1,
        __2,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action278<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Token<'input>, Location),
) -> Spanned<Keyword>
{
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action98(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action231(
        errors,
        db,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action279<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, &'input str, Location),
) -> Spanned<Ident>
{
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action98(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action232(
        errors,
        db,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action280<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Token<'input>, Location),
) -> Spanned<Ident>
{
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action98(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action233(
        errors,
        db,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action281<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, &'input str, Location),
    __1: (Location, Token<'input>, Location),
    __2: (Location, Vec<Spanned<Ident>>, Location),
    __3: (Location, Token<'input>, Location),
) -> Spanned<Ident>
{
    let __start0 = __3.2;
    let __end0 = __3.2;
    let __temp0 = __action98(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action234(
        errors,
        db,
        __0,
        __1,
        __2,
        __3,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action282<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Token<'input>, Location),
) -> Spanned<Keyword>
{
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action98(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action235(
        errors,
        db,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action283<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Keyword>, Location),
    __1: (Location, Spanned<Node>, Location),
    __2: (Location, Block<Spanned<Node>>, Location),
) -> Spanned<Node>
{
    let __start0 = __1.2;
    let __end0 = __2.0;
    let __start1 = __2.2;
    let __end1 = __2.2;
    let __temp0 = __action98(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action98(
        errors,
        db,
        &__start1,
        &__end1,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action236(
        errors,
        db,
        __0,
        __1,
        __temp0,
        __2,
        __temp1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action284<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Keyword>, Location),
    __1: (Location, Spanned<Node>, Location),
    __2: (Location, Block<Spanned<Node>>, Location),
    __3: (Location, Spanned<Keyword>, Location),
    __4: (Location, Block<Spanned<Node>>, Location),
) -> Spanned<Node>
{
    let __start0 = __1.2;
    let __end0 = __2.0;
    let __start1 = __3.2;
    let __end1 = __4.0;
    let __start2 = __4.2;
    let __end2 = __4.2;
    let __temp0 = __action98(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action98(
        errors,
        db,
        &__start1,
        &__end1,
    );
    let __temp1 = (__start1, __temp1, __end1);
    let __temp2 = __action98(
        errors,
        db,
        &__start2,
        &__end2,
    );
    let __temp2 = (__start2, __temp2, __end2);
    __action237(
        errors,
        db,
        __0,
        __1,
        __temp0,
        __2,
        __3,
        __temp1,
        __4,
        __temp2,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action285<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Token<'input>, Location),
) -> Spanned<Keyword>
{
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action98(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action238(
        errors,
        db,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action286<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<KeywordAndVisibility>, Location),
    __1: (Location, Spanned<Ident>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Spanned<Ident>, Location),
    __4: (Location, Block<Spanned<Node>>, Location),
) -> Spanned<Node>
{
    let __start0 = __4.2;
    let __end0 = __4.2;
    let __temp0 = __action98(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action239(
        errors,
        db,
        __0,
        __1,
        __2,
        __3,
        __4,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action287<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<KeywordAndVisibility>, Location),
    __1: (Location, Spanned<Ident>, Location),
    __2: (Location, Block<Spanned<Node>>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.2;
    let __end0 = __2.2;
    let __temp0 = __action98(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action240(
        errors,
        db,
        __0,
        __1,
        __2,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action288<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Visibility>, Location),
    __1: (Location, Spanned<Keyword>, Location),
) -> Spanned<KeywordAndVisibility>
{
    let __start0 = __1.2;
    let __end0 = __1.2;
    let __temp0 = __action98(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action241(
        errors,
        db,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action289<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Visibility>, Location),
    __1: (Location, Spanned<Keyword>, Location),
) -> Spanned<KeywordAndVisibility>
{
    let __start0 = __1.2;
    let __end0 = __1.2;
    let __temp0 = __action98(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action242(
        errors,
        db,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action290<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Visibility>, Location),
    __1: (Location, Spanned<Keyword>, Location),
) -> Spanned<KeywordAndVisibility>
{
    let __start0 = __1.2;
    let __end0 = __1.2;
    let __temp0 = __action98(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action243(
        errors,
        db,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action291<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Visibility>, Location),
    __1: (Location, Spanned<Keyword>, Location),
) -> Spanned<KeywordAndVisibility>
{
    let __start0 = __1.2;
    let __end0 = __1.2;
    let __temp0 = __action98(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action244(
        errors,
        db,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action292<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Visibility>, Location),
    __1: (Location, Spanned<Keyword>, Location),
) -> Spanned<KeywordAndVisibility>
{
    let __start0 = __1.2;
    let __end0 = __1.2;
    let __temp0 = __action98(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action245(
        errors,
        db,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action293<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Token<'input>, Location),
) -> Spanned<Keyword>
{
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action98(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action246(
        errors,
        db,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action294<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Token<'input>, Location),
) -> Spanned<Keyword>
{
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action98(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action247(
        errors,
        db,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action295<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Ident>, Location),
    __1: (Location, Token<'input>, Location),
    __2: (Location, Vec<Spanned<FnArg>>, Location),
    __3: (Location, Token<'input>, Location),
    __4: (Location, Token<'input>, Location),
    __5: (Location, Vec<Spanned<Ident>>, Location),
    __6: (Location, Token<'input>, Location),
    __7: (Location, Token<'input>, Location),
    __8: (Location, Spanned<Ident>, Location),
) -> Spanned<Prototype>
{
    let __start0 = __8.2;
    let __end0 = __8.2;
    let __temp0 = __action98(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action248(
        errors,
        db,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __7,
        __8,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action296<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Ident>, Location),
    __1: (Location, Token<'input>, Location),
    __2: (Location, Vec<Spanned<FnArg>>, Location),
    __3: (Location, Token<'input>, Location),
    __4: (Location, Token<'input>, Location),
    __5: (Location, Vec<Spanned<Ident>>, Location),
    __6: (Location, Token<'input>, Location),
) -> Spanned<Prototype>
{
    let __start0 = __6.2;
    let __end0 = __6.2;
    let __temp0 = __action98(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action249(
        errors,
        db,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action297<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Token<'input>, Location),
) -> Spanned<Token<'input>>
{
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action98(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action250(
        errors,
        db,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action298<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<FieldDef>, Location),
) -> Spanned<Spanned<FieldDef>>
{
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action98(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action251(
        errors,
        db,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action299<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Node>, Location),
) -> Spanned<Spanned<Node>>
{
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action98(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action252(
        errors,
        db,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action300<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Keyword>, Location),
    __1: (Location, Spanned<Ident>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Spanned<Node>, Location),
) -> Spanned<Node>
{
    let __start0 = __3.2;
    let __end0 = __3.2;
    let __temp0 = __action98(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action253(
        errors,
        db,
        __0,
        __1,
        __2,
        __3,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action301<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, &'input str, Location),
) -> Spanned<Node>
{
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action98(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action254(
        errors,
        db,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action302<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Token<'input>, Location),
) -> Spanned<Keyword>
{
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action98(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action255(
        errors,
        db,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action303<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<KeywordAndVisibility>, Location),
    __1: (Location, Spanned<Ident>, Location),
    __2: (Location, Block<Spanned<FieldDef>>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.2;
    let __end0 = __2.2;
    let __temp0 = __action98(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action256(
        errors,
        db,
        __0,
        __1,
        __2,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action304<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, i64, Location),
) -> Spanned<Node>
{
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action98(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action257(
        errors,
        db,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action305<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Node, Location),
) -> Spanned<Node>
{
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action98(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action258(
        errors,
        db,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action306<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Node, Location),
) -> Spanned<Node>
{
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action98(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action259(
        errors,
        db,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action307<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Token<'input>, Location),
    __1: (Location, Vec<Spanned<Ident>>, Location),
    __2: (Location, Token<'input>, Location),
) -> Spanned<Vec<Spanned<Ident>>>
{
    let __start0 = __2.2;
    let __end0 = __2.2;
    let __temp0 = __action98(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action260(
        errors,
        db,
        __0,
        __1,
        __2,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action308<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Token<'input>, Location),
) -> Spanned<Keyword>
{
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action98(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action261(
        errors,
        db,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action309<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<KeywordAndVisibility>, Location),
    __1: (Location, Token<'input>, Location),
    __2: (Location, Vec<Spanned<Ident>>, Location),
    __3: (Location, Token<'input>, Location),
    __4: (Location, Spanned<Keyword>, Location),
    __5: (Location, Spanned<Ident>, Location),
) -> Spanned<Node>
{
    let __start0 = __5.2;
    let __end0 = __5.2;
    let __temp0 = __action98(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action262(
        errors,
        db,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action310<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Token<'input>, Location),
) -> Spanned<Visibility>
{
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action98(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action263(
        errors,
        db,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action311<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Token<'input>, Location),
) -> Spanned<Visibility>
{
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action98(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action264(
        errors,
        db,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action312<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __lookbehind: &Location,
    __lookahead: &Location,
) -> Spanned<Visibility>
{
    let __start0 = *__lookbehind;
    let __end0 = *__lookahead;
    let __temp0 = __action98(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action265(
        errors,
        db,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action313<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Token<'input>, Location),
) -> Spanned<Keyword>
{
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action98(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action266(
        errors,
        db,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action314<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Keyword>, Location),
    __1: (Location, Spanned<Ident>, Location),
    __2: (Location, Block<Spanned<Node>>, Location),
) -> (Spanned<Ident>, Block<Spanned<Node>>)
{
    let __start0 = __2.2;
    let __end0 = __2.2;
    let __temp0 = __action98(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action267(
        errors,
        db,
        __0,
        __1,
        __2,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action315<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<FieldDef>, Location),
) -> Vec<Spanned<FieldDef>>
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action134(
        errors,
        db,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action196(
        errors,
        db,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action316<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __lookbehind: &Location,
    __lookahead: &Location,
) -> Vec<Spanned<FieldDef>>
{
    let __start0 = *__lookbehind;
    let __end0 = *__lookahead;
    let __temp0 = __action135(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action196(
        errors,
        db,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action317<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, alloc::vec::Vec<Spanned<FieldDef>>, Location),
    __1: (Location, Spanned<FieldDef>, Location),
) -> Vec<Spanned<FieldDef>>
{
    let __start0 = __1.0;
    let __end0 = __1.2;
    let __temp0 = __action134(
        errors,
        db,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action197(
        errors,
        db,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action318<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, alloc::vec::Vec<Spanned<FieldDef>>, Location),
) -> Vec<Spanned<FieldDef>>
{
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action135(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action197(
        errors,
        db,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action319<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Token<'input>, Location),
    __1: (Location, Token<'input>, Location),
    __2: (Location, Spanned<FieldDef>, Location),
    __3: (Location, Token<'input>, Location),
) -> Block<Spanned<FieldDef>>
{
    let __start0 = __2.0;
    let __end0 = __2.2;
    let __temp0 = __action315(
        errors,
        db,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action178(
        errors,
        db,
        __0,
        __1,
        __temp0,
        __3,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action320<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Token<'input>, Location),
    __1: (Location, Token<'input>, Location),
    __2: (Location, Token<'input>, Location),
) -> Block<Spanned<FieldDef>>
{
    let __start0 = __1.2;
    let __end0 = __2.0;
    let __temp0 = __action316(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action178(
        errors,
        db,
        __0,
        __1,
        __temp0,
        __2,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action321<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Token<'input>, Location),
    __1: (Location, Token<'input>, Location),
    __2: (Location, alloc::vec::Vec<Spanned<FieldDef>>, Location),
    __3: (Location, Spanned<FieldDef>, Location),
    __4: (Location, Token<'input>, Location),
) -> Block<Spanned<FieldDef>>
{
    let __start0 = __2.0;
    let __end0 = __3.2;
    let __temp0 = __action317(
        errors,
        db,
        __2,
        __3,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action178(
        errors,
        db,
        __0,
        __1,
        __temp0,
        __4,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action322<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Token<'input>, Location),
    __1: (Location, Token<'input>, Location),
    __2: (Location, alloc::vec::Vec<Spanned<FieldDef>>, Location),
    __3: (Location, Token<'input>, Location),
) -> Block<Spanned<FieldDef>>
{
    let __start0 = __2.0;
    let __end0 = __2.2;
    let __temp0 = __action318(
        errors,
        db,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action178(
        errors,
        db,
        __0,
        __1,
        __temp0,
        __3,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action323<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Token<'input>, Location),
    __1: (Location, Spanned<FieldDef>, Location),
    __2: (Location, Token<'input>, Location),
) -> Block<Spanned<FieldDef>>
{
    let __start0 = __1.0;
    let __end0 = __1.2;
    let __temp0 = __action315(
        errors,
        db,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action179(
        errors,
        db,
        __0,
        __temp0,
        __2,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action324<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Token<'input>, Location),
    __1: (Location, Token<'input>, Location),
) -> Block<Spanned<FieldDef>>
{
    let __start0 = __0.2;
    let __end0 = __1.0;
    let __temp0 = __action316(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action179(
        errors,
        db,
        __0,
        __temp0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action325<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Token<'input>, Location),
    __1: (Location, alloc::vec::Vec<Spanned<FieldDef>>, Location),
    __2: (Location, Spanned<FieldDef>, Location),
    __3: (Location, Token<'input>, Location),
) -> Block<Spanned<FieldDef>>
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action317(
        errors,
        db,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action179(
        errors,
        db,
        __0,
        __temp0,
        __3,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action326<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Token<'input>, Location),
    __1: (Location, alloc::vec::Vec<Spanned<FieldDef>>, Location),
    __2: (Location, Token<'input>, Location),
) -> Block<Spanned<FieldDef>>
{
    let __start0 = __1.0;
    let __end0 = __1.2;
    let __temp0 = __action318(
        errors,
        db,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action179(
        errors,
        db,
        __0,
        __temp0,
        __2,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action327<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<KeywordAndVisibility>, Location),
    __1: (Location, Spanned<Ident>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Token<'input>, Location),
    __4: (Location, Spanned<FieldDef>, Location),
    __5: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.0;
    let __end0 = __5.2;
    let __temp0 = __action319(
        errors,
        db,
        __2,
        __3,
        __4,
        __5,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action303(
        errors,
        db,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action328<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<KeywordAndVisibility>, Location),
    __1: (Location, Spanned<Ident>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Token<'input>, Location),
    __4: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.0;
    let __end0 = __4.2;
    let __temp0 = __action320(
        errors,
        db,
        __2,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action303(
        errors,
        db,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action329<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<KeywordAndVisibility>, Location),
    __1: (Location, Spanned<Ident>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Token<'input>, Location),
    __4: (Location, alloc::vec::Vec<Spanned<FieldDef>>, Location),
    __5: (Location, Spanned<FieldDef>, Location),
    __6: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.0;
    let __end0 = __6.2;
    let __temp0 = __action321(
        errors,
        db,
        __2,
        __3,
        __4,
        __5,
        __6,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action303(
        errors,
        db,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action330<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<KeywordAndVisibility>, Location),
    __1: (Location, Spanned<Ident>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Token<'input>, Location),
    __4: (Location, alloc::vec::Vec<Spanned<FieldDef>>, Location),
    __5: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.0;
    let __end0 = __5.2;
    let __temp0 = __action322(
        errors,
        db,
        __2,
        __3,
        __4,
        __5,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action303(
        errors,
        db,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action331<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<KeywordAndVisibility>, Location),
    __1: (Location, Spanned<Ident>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Spanned<FieldDef>, Location),
    __4: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.0;
    let __end0 = __4.2;
    let __temp0 = __action323(
        errors,
        db,
        __2,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action303(
        errors,
        db,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action332<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<KeywordAndVisibility>, Location),
    __1: (Location, Spanned<Ident>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.0;
    let __end0 = __3.2;
    let __temp0 = __action324(
        errors,
        db,
        __2,
        __3,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action303(
        errors,
        db,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action333<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<KeywordAndVisibility>, Location),
    __1: (Location, Spanned<Ident>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, alloc::vec::Vec<Spanned<FieldDef>>, Location),
    __4: (Location, Spanned<FieldDef>, Location),
    __5: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.0;
    let __end0 = __5.2;
    let __temp0 = __action325(
        errors,
        db,
        __2,
        __3,
        __4,
        __5,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action303(
        errors,
        db,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action334<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<KeywordAndVisibility>, Location),
    __1: (Location, Spanned<Ident>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, alloc::vec::Vec<Spanned<FieldDef>>, Location),
    __4: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.0;
    let __end0 = __4.2;
    let __temp0 = __action326(
        errors,
        db,
        __2,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action303(
        errors,
        db,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action335<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Node>, Location),
) -> Vec<Spanned<Node>>
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action129(
        errors,
        db,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action204(
        errors,
        db,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action336<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __lookbehind: &Location,
    __lookahead: &Location,
) -> Vec<Spanned<Node>>
{
    let __start0 = *__lookbehind;
    let __end0 = *__lookahead;
    let __temp0 = __action130(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action204(
        errors,
        db,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action337<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
    __1: (Location, Spanned<Node>, Location),
) -> Vec<Spanned<Node>>
{
    let __start0 = __1.0;
    let __end0 = __1.2;
    let __temp0 = __action129(
        errors,
        db,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action205(
        errors,
        db,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action338<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
) -> Vec<Spanned<Node>>
{
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action130(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action205(
        errors,
        db,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action339<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Token<'input>, Location),
    __1: (Location, Token<'input>, Location),
    __2: (Location, Spanned<Node>, Location),
    __3: (Location, Token<'input>, Location),
) -> Block<Spanned<Node>>
{
    let __start0 = __2.0;
    let __end0 = __2.2;
    let __temp0 = __action335(
        errors,
        db,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action180(
        errors,
        db,
        __0,
        __1,
        __temp0,
        __3,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action340<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Token<'input>, Location),
    __1: (Location, Token<'input>, Location),
    __2: (Location, Token<'input>, Location),
) -> Block<Spanned<Node>>
{
    let __start0 = __1.2;
    let __end0 = __2.0;
    let __temp0 = __action336(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action180(
        errors,
        db,
        __0,
        __1,
        __temp0,
        __2,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action341<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Token<'input>, Location),
    __1: (Location, Token<'input>, Location),
    __2: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
    __3: (Location, Spanned<Node>, Location),
    __4: (Location, Token<'input>, Location),
) -> Block<Spanned<Node>>
{
    let __start0 = __2.0;
    let __end0 = __3.2;
    let __temp0 = __action337(
        errors,
        db,
        __2,
        __3,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action180(
        errors,
        db,
        __0,
        __1,
        __temp0,
        __4,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action342<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Token<'input>, Location),
    __1: (Location, Token<'input>, Location),
    __2: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
    __3: (Location, Token<'input>, Location),
) -> Block<Spanned<Node>>
{
    let __start0 = __2.0;
    let __end0 = __2.2;
    let __temp0 = __action338(
        errors,
        db,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action180(
        errors,
        db,
        __0,
        __1,
        __temp0,
        __3,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action343<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Token<'input>, Location),
    __1: (Location, Spanned<Node>, Location),
    __2: (Location, Token<'input>, Location),
) -> Block<Spanned<Node>>
{
    let __start0 = __1.0;
    let __end0 = __1.2;
    let __temp0 = __action335(
        errors,
        db,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action181(
        errors,
        db,
        __0,
        __temp0,
        __2,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action344<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Token<'input>, Location),
    __1: (Location, Token<'input>, Location),
) -> Block<Spanned<Node>>
{
    let __start0 = __0.2;
    let __end0 = __1.0;
    let __temp0 = __action336(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action181(
        errors,
        db,
        __0,
        __temp0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action345<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Token<'input>, Location),
    __1: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
    __2: (Location, Spanned<Node>, Location),
    __3: (Location, Token<'input>, Location),
) -> Block<Spanned<Node>>
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action337(
        errors,
        db,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action181(
        errors,
        db,
        __0,
        __temp0,
        __3,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action346<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Token<'input>, Location),
    __1: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
    __2: (Location, Token<'input>, Location),
) -> Block<Spanned<Node>>
{
    let __start0 = __1.0;
    let __end0 = __1.2;
    let __temp0 = __action338(
        errors,
        db,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action181(
        errors,
        db,
        __0,
        __temp0,
        __2,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action347<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<KeywordAndVisibility>, Location),
    __1: (Location, Spanned<Ident>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Spanned<Ident>, Location),
    __4: (Location, Token<'input>, Location),
    __5: (Location, Token<'input>, Location),
    __6: (Location, Spanned<Node>, Location),
    __7: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __4.0;
    let __end0 = __7.2;
    let __temp0 = __action339(
        errors,
        db,
        __4,
        __5,
        __6,
        __7,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action286(
        errors,
        db,
        __0,
        __1,
        __2,
        __3,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action348<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<KeywordAndVisibility>, Location),
    __1: (Location, Spanned<Ident>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Spanned<Ident>, Location),
    __4: (Location, Token<'input>, Location),
    __5: (Location, Token<'input>, Location),
    __6: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __4.0;
    let __end0 = __6.2;
    let __temp0 = __action340(
        errors,
        db,
        __4,
        __5,
        __6,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action286(
        errors,
        db,
        __0,
        __1,
        __2,
        __3,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action349<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<KeywordAndVisibility>, Location),
    __1: (Location, Spanned<Ident>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Spanned<Ident>, Location),
    __4: (Location, Token<'input>, Location),
    __5: (Location, Token<'input>, Location),
    __6: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
    __7: (Location, Spanned<Node>, Location),
    __8: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __4.0;
    let __end0 = __8.2;
    let __temp0 = __action341(
        errors,
        db,
        __4,
        __5,
        __6,
        __7,
        __8,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action286(
        errors,
        db,
        __0,
        __1,
        __2,
        __3,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action350<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<KeywordAndVisibility>, Location),
    __1: (Location, Spanned<Ident>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Spanned<Ident>, Location),
    __4: (Location, Token<'input>, Location),
    __5: (Location, Token<'input>, Location),
    __6: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
    __7: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __4.0;
    let __end0 = __7.2;
    let __temp0 = __action342(
        errors,
        db,
        __4,
        __5,
        __6,
        __7,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action286(
        errors,
        db,
        __0,
        __1,
        __2,
        __3,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action351<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<KeywordAndVisibility>, Location),
    __1: (Location, Spanned<Ident>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Spanned<Ident>, Location),
    __4: (Location, Token<'input>, Location),
    __5: (Location, Spanned<Node>, Location),
    __6: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __4.0;
    let __end0 = __6.2;
    let __temp0 = __action343(
        errors,
        db,
        __4,
        __5,
        __6,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action286(
        errors,
        db,
        __0,
        __1,
        __2,
        __3,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action352<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<KeywordAndVisibility>, Location),
    __1: (Location, Spanned<Ident>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Spanned<Ident>, Location),
    __4: (Location, Token<'input>, Location),
    __5: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __4.0;
    let __end0 = __5.2;
    let __temp0 = __action344(
        errors,
        db,
        __4,
        __5,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action286(
        errors,
        db,
        __0,
        __1,
        __2,
        __3,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action353<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<KeywordAndVisibility>, Location),
    __1: (Location, Spanned<Ident>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Spanned<Ident>, Location),
    __4: (Location, Token<'input>, Location),
    __5: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
    __6: (Location, Spanned<Node>, Location),
    __7: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __4.0;
    let __end0 = __7.2;
    let __temp0 = __action345(
        errors,
        db,
        __4,
        __5,
        __6,
        __7,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action286(
        errors,
        db,
        __0,
        __1,
        __2,
        __3,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action354<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<KeywordAndVisibility>, Location),
    __1: (Location, Spanned<Ident>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Spanned<Ident>, Location),
    __4: (Location, Token<'input>, Location),
    __5: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
    __6: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __4.0;
    let __end0 = __6.2;
    let __temp0 = __action346(
        errors,
        db,
        __4,
        __5,
        __6,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action286(
        errors,
        db,
        __0,
        __1,
        __2,
        __3,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action355<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<KeywordAndVisibility>, Location),
    __1: (Location, Spanned<Ident>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Token<'input>, Location),
    __4: (Location, Spanned<Node>, Location),
    __5: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.0;
    let __end0 = __5.2;
    let __temp0 = __action339(
        errors,
        db,
        __2,
        __3,
        __4,
        __5,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action287(
        errors,
        db,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action356<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<KeywordAndVisibility>, Location),
    __1: (Location, Spanned<Ident>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Token<'input>, Location),
    __4: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.0;
    let __end0 = __4.2;
    let __temp0 = __action340(
        errors,
        db,
        __2,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action287(
        errors,
        db,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action357<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<KeywordAndVisibility>, Location),
    __1: (Location, Spanned<Ident>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Token<'input>, Location),
    __4: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
    __5: (Location, Spanned<Node>, Location),
    __6: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.0;
    let __end0 = __6.2;
    let __temp0 = __action341(
        errors,
        db,
        __2,
        __3,
        __4,
        __5,
        __6,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action287(
        errors,
        db,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action358<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<KeywordAndVisibility>, Location),
    __1: (Location, Spanned<Ident>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Token<'input>, Location),
    __4: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
    __5: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.0;
    let __end0 = __5.2;
    let __temp0 = __action342(
        errors,
        db,
        __2,
        __3,
        __4,
        __5,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action287(
        errors,
        db,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action359<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<KeywordAndVisibility>, Location),
    __1: (Location, Spanned<Ident>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Spanned<Node>, Location),
    __4: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.0;
    let __end0 = __4.2;
    let __temp0 = __action343(
        errors,
        db,
        __2,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action287(
        errors,
        db,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action360<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<KeywordAndVisibility>, Location),
    __1: (Location, Spanned<Ident>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.0;
    let __end0 = __3.2;
    let __temp0 = __action344(
        errors,
        db,
        __2,
        __3,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action287(
        errors,
        db,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action361<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<KeywordAndVisibility>, Location),
    __1: (Location, Spanned<Ident>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
    __4: (Location, Spanned<Node>, Location),
    __5: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.0;
    let __end0 = __5.2;
    let __temp0 = __action345(
        errors,
        db,
        __2,
        __3,
        __4,
        __5,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action287(
        errors,
        db,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action362<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<KeywordAndVisibility>, Location),
    __1: (Location, Spanned<Ident>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
    __4: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.0;
    let __end0 = __4.2;
    let __temp0 = __action346(
        errors,
        db,
        __2,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action287(
        errors,
        db,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action363<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Prototype>, Location),
) -> Vec<Spanned<Prototype>>
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action139(
        errors,
        db,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action216(
        errors,
        db,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action364<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __lookbehind: &Location,
    __lookahead: &Location,
) -> Vec<Spanned<Prototype>>
{
    let __start0 = *__lookbehind;
    let __end0 = *__lookahead;
    let __temp0 = __action140(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action216(
        errors,
        db,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action365<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, alloc::vec::Vec<Spanned<Prototype>>, Location),
    __1: (Location, Spanned<Prototype>, Location),
) -> Vec<Spanned<Prototype>>
{
    let __start0 = __1.0;
    let __end0 = __1.2;
    let __temp0 = __action139(
        errors,
        db,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action217(
        errors,
        db,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action366<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, alloc::vec::Vec<Spanned<Prototype>>, Location),
) -> Vec<Spanned<Prototype>>
{
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action140(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action217(
        errors,
        db,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action367<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Token<'input>, Location),
    __1: (Location, Token<'input>, Location),
    __2: (Location, Spanned<Prototype>, Location),
    __3: (Location, Token<'input>, Location),
) -> Block<Spanned<Prototype>>
{
    let __start0 = __2.0;
    let __end0 = __2.2;
    let __temp0 = __action363(
        errors,
        db,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action182(
        errors,
        db,
        __0,
        __1,
        __temp0,
        __3,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action368<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Token<'input>, Location),
    __1: (Location, Token<'input>, Location),
    __2: (Location, Token<'input>, Location),
) -> Block<Spanned<Prototype>>
{
    let __start0 = __1.2;
    let __end0 = __2.0;
    let __temp0 = __action364(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action182(
        errors,
        db,
        __0,
        __1,
        __temp0,
        __2,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action369<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Token<'input>, Location),
    __1: (Location, Token<'input>, Location),
    __2: (Location, alloc::vec::Vec<Spanned<Prototype>>, Location),
    __3: (Location, Spanned<Prototype>, Location),
    __4: (Location, Token<'input>, Location),
) -> Block<Spanned<Prototype>>
{
    let __start0 = __2.0;
    let __end0 = __3.2;
    let __temp0 = __action365(
        errors,
        db,
        __2,
        __3,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action182(
        errors,
        db,
        __0,
        __1,
        __temp0,
        __4,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action370<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Token<'input>, Location),
    __1: (Location, Token<'input>, Location),
    __2: (Location, alloc::vec::Vec<Spanned<Prototype>>, Location),
    __3: (Location, Token<'input>, Location),
) -> Block<Spanned<Prototype>>
{
    let __start0 = __2.0;
    let __end0 = __2.2;
    let __temp0 = __action366(
        errors,
        db,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action182(
        errors,
        db,
        __0,
        __1,
        __temp0,
        __3,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action371<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Token<'input>, Location),
    __1: (Location, Spanned<Prototype>, Location),
    __2: (Location, Token<'input>, Location),
) -> Block<Spanned<Prototype>>
{
    let __start0 = __1.0;
    let __end0 = __1.2;
    let __temp0 = __action363(
        errors,
        db,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action183(
        errors,
        db,
        __0,
        __temp0,
        __2,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action372<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Token<'input>, Location),
    __1: (Location, Token<'input>, Location),
) -> Block<Spanned<Prototype>>
{
    let __start0 = __0.2;
    let __end0 = __1.0;
    let __temp0 = __action364(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action183(
        errors,
        db,
        __0,
        __temp0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action373<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Token<'input>, Location),
    __1: (Location, alloc::vec::Vec<Spanned<Prototype>>, Location),
    __2: (Location, Spanned<Prototype>, Location),
    __3: (Location, Token<'input>, Location),
) -> Block<Spanned<Prototype>>
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action365(
        errors,
        db,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action183(
        errors,
        db,
        __0,
        __temp0,
        __3,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action374<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Token<'input>, Location),
    __1: (Location, alloc::vec::Vec<Spanned<Prototype>>, Location),
    __2: (Location, Token<'input>, Location),
) -> Block<Spanned<Prototype>>
{
    let __start0 = __1.0;
    let __end0 = __1.2;
    let __temp0 = __action366(
        errors,
        db,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action183(
        errors,
        db,
        __0,
        __temp0,
        __2,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action375<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<KeywordAndVisibility>, Location),
    __1: (Location, Spanned<Ident>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Vec<Spanned<Ident>>, Location),
    __4: (Location, Token<'input>, Location),
    __5: (Location, Token<'input>, Location),
    __6: (Location, Spanned<Prototype>, Location),
    __7: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __4.0;
    let __end0 = __7.2;
    let __temp0 = __action367(
        errors,
        db,
        __4,
        __5,
        __6,
        __7,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action272(
        errors,
        db,
        __0,
        __1,
        __2,
        __3,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action376<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<KeywordAndVisibility>, Location),
    __1: (Location, Spanned<Ident>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Vec<Spanned<Ident>>, Location),
    __4: (Location, Token<'input>, Location),
    __5: (Location, Token<'input>, Location),
    __6: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __4.0;
    let __end0 = __6.2;
    let __temp0 = __action368(
        errors,
        db,
        __4,
        __5,
        __6,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action272(
        errors,
        db,
        __0,
        __1,
        __2,
        __3,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action377<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<KeywordAndVisibility>, Location),
    __1: (Location, Spanned<Ident>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Vec<Spanned<Ident>>, Location),
    __4: (Location, Token<'input>, Location),
    __5: (Location, Token<'input>, Location),
    __6: (Location, alloc::vec::Vec<Spanned<Prototype>>, Location),
    __7: (Location, Spanned<Prototype>, Location),
    __8: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __4.0;
    let __end0 = __8.2;
    let __temp0 = __action369(
        errors,
        db,
        __4,
        __5,
        __6,
        __7,
        __8,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action272(
        errors,
        db,
        __0,
        __1,
        __2,
        __3,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action378<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<KeywordAndVisibility>, Location),
    __1: (Location, Spanned<Ident>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Vec<Spanned<Ident>>, Location),
    __4: (Location, Token<'input>, Location),
    __5: (Location, Token<'input>, Location),
    __6: (Location, alloc::vec::Vec<Spanned<Prototype>>, Location),
    __7: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __4.0;
    let __end0 = __7.2;
    let __temp0 = __action370(
        errors,
        db,
        __4,
        __5,
        __6,
        __7,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action272(
        errors,
        db,
        __0,
        __1,
        __2,
        __3,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action379<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<KeywordAndVisibility>, Location),
    __1: (Location, Spanned<Ident>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Vec<Spanned<Ident>>, Location),
    __4: (Location, Token<'input>, Location),
    __5: (Location, Spanned<Prototype>, Location),
    __6: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __4.0;
    let __end0 = __6.2;
    let __temp0 = __action371(
        errors,
        db,
        __4,
        __5,
        __6,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action272(
        errors,
        db,
        __0,
        __1,
        __2,
        __3,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action380<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<KeywordAndVisibility>, Location),
    __1: (Location, Spanned<Ident>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Vec<Spanned<Ident>>, Location),
    __4: (Location, Token<'input>, Location),
    __5: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __4.0;
    let __end0 = __5.2;
    let __temp0 = __action372(
        errors,
        db,
        __4,
        __5,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action272(
        errors,
        db,
        __0,
        __1,
        __2,
        __3,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action381<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<KeywordAndVisibility>, Location),
    __1: (Location, Spanned<Ident>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Vec<Spanned<Ident>>, Location),
    __4: (Location, Token<'input>, Location),
    __5: (Location, alloc::vec::Vec<Spanned<Prototype>>, Location),
    __6: (Location, Spanned<Prototype>, Location),
    __7: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __4.0;
    let __end0 = __7.2;
    let __temp0 = __action373(
        errors,
        db,
        __4,
        __5,
        __6,
        __7,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action272(
        errors,
        db,
        __0,
        __1,
        __2,
        __3,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action382<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<KeywordAndVisibility>, Location),
    __1: (Location, Spanned<Ident>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Vec<Spanned<Ident>>, Location),
    __4: (Location, Token<'input>, Location),
    __5: (Location, alloc::vec::Vec<Spanned<Prototype>>, Location),
    __6: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __4.0;
    let __end0 = __6.2;
    let __temp0 = __action374(
        errors,
        db,
        __4,
        __5,
        __6,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action272(
        errors,
        db,
        __0,
        __1,
        __2,
        __3,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action383<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Node>, Location),
) -> Vec<Spanned<Node>>
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action146(
        errors,
        db,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action220(
        errors,
        db,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action384<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __lookbehind: &Location,
    __lookahead: &Location,
) -> Vec<Spanned<Node>>
{
    let __start0 = *__lookbehind;
    let __end0 = *__lookahead;
    let __temp0 = __action147(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action220(
        errors,
        db,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action385<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
    __1: (Location, Spanned<Node>, Location),
) -> Vec<Spanned<Node>>
{
    let __start0 = __1.0;
    let __end0 = __1.2;
    let __temp0 = __action146(
        errors,
        db,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action221(
        errors,
        db,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action386<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
) -> Vec<Spanned<Node>>
{
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action147(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action221(
        errors,
        db,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action387<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Token<'input>, Location),
    __1: (Location, Token<'input>, Location),
    __2: (Location, Spanned<Node>, Location),
    __3: (Location, Token<'input>, Location),
) -> Block<Spanned<Node>>
{
    let __start0 = __2.0;
    let __end0 = __2.2;
    let __temp0 = __action383(
        errors,
        db,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action184(
        errors,
        db,
        __0,
        __1,
        __temp0,
        __3,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action388<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Token<'input>, Location),
    __1: (Location, Token<'input>, Location),
    __2: (Location, Token<'input>, Location),
) -> Block<Spanned<Node>>
{
    let __start0 = __1.2;
    let __end0 = __2.0;
    let __temp0 = __action384(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action184(
        errors,
        db,
        __0,
        __1,
        __temp0,
        __2,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action389<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Token<'input>, Location),
    __1: (Location, Token<'input>, Location),
    __2: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
    __3: (Location, Spanned<Node>, Location),
    __4: (Location, Token<'input>, Location),
) -> Block<Spanned<Node>>
{
    let __start0 = __2.0;
    let __end0 = __3.2;
    let __temp0 = __action385(
        errors,
        db,
        __2,
        __3,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action184(
        errors,
        db,
        __0,
        __1,
        __temp0,
        __4,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action390<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Token<'input>, Location),
    __1: (Location, Token<'input>, Location),
    __2: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
    __3: (Location, Token<'input>, Location),
) -> Block<Spanned<Node>>
{
    let __start0 = __2.0;
    let __end0 = __2.2;
    let __temp0 = __action386(
        errors,
        db,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action184(
        errors,
        db,
        __0,
        __1,
        __temp0,
        __3,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action391<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Token<'input>, Location),
    __1: (Location, Spanned<Node>, Location),
    __2: (Location, Token<'input>, Location),
) -> Block<Spanned<Node>>
{
    let __start0 = __1.0;
    let __end0 = __1.2;
    let __temp0 = __action383(
        errors,
        db,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action185(
        errors,
        db,
        __0,
        __temp0,
        __2,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action392<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Token<'input>, Location),
    __1: (Location, Token<'input>, Location),
) -> Block<Spanned<Node>>
{
    let __start0 = __0.2;
    let __end0 = __1.0;
    let __temp0 = __action384(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action185(
        errors,
        db,
        __0,
        __temp0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action393<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Token<'input>, Location),
    __1: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
    __2: (Location, Spanned<Node>, Location),
    __3: (Location, Token<'input>, Location),
) -> Block<Spanned<Node>>
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action385(
        errors,
        db,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action185(
        errors,
        db,
        __0,
        __temp0,
        __3,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action394<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Token<'input>, Location),
    __1: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
    __2: (Location, Token<'input>, Location),
) -> Block<Spanned<Node>>
{
    let __start0 = __1.0;
    let __end0 = __1.2;
    let __temp0 = __action386(
        errors,
        db,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action185(
        errors,
        db,
        __0,
        __temp0,
        __2,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action395<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<KeywordAndVisibility>, Location),
    __1: (Location, Spanned<Prototype>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Token<'input>, Location),
    __4: (Location, Spanned<Node>, Location),
    __5: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.0;
    let __end0 = __5.2;
    let __temp0 = __action387(
        errors,
        db,
        __2,
        __3,
        __4,
        __5,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action277(
        errors,
        db,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action396<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<KeywordAndVisibility>, Location),
    __1: (Location, Spanned<Prototype>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Token<'input>, Location),
    __4: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.0;
    let __end0 = __4.2;
    let __temp0 = __action388(
        errors,
        db,
        __2,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action277(
        errors,
        db,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action397<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<KeywordAndVisibility>, Location),
    __1: (Location, Spanned<Prototype>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Token<'input>, Location),
    __4: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
    __5: (Location, Spanned<Node>, Location),
    __6: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.0;
    let __end0 = __6.2;
    let __temp0 = __action389(
        errors,
        db,
        __2,
        __3,
        __4,
        __5,
        __6,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action277(
        errors,
        db,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action398<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<KeywordAndVisibility>, Location),
    __1: (Location, Spanned<Prototype>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Token<'input>, Location),
    __4: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
    __5: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.0;
    let __end0 = __5.2;
    let __temp0 = __action390(
        errors,
        db,
        __2,
        __3,
        __4,
        __5,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action277(
        errors,
        db,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action399<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<KeywordAndVisibility>, Location),
    __1: (Location, Spanned<Prototype>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Spanned<Node>, Location),
    __4: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.0;
    let __end0 = __4.2;
    let __temp0 = __action391(
        errors,
        db,
        __2,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action277(
        errors,
        db,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action400<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<KeywordAndVisibility>, Location),
    __1: (Location, Spanned<Prototype>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.0;
    let __end0 = __3.2;
    let __temp0 = __action392(
        errors,
        db,
        __2,
        __3,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action277(
        errors,
        db,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action401<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<KeywordAndVisibility>, Location),
    __1: (Location, Spanned<Prototype>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
    __4: (Location, Spanned<Node>, Location),
    __5: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.0;
    let __end0 = __5.2;
    let __temp0 = __action393(
        errors,
        db,
        __2,
        __3,
        __4,
        __5,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action277(
        errors,
        db,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action402<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<KeywordAndVisibility>, Location),
    __1: (Location, Spanned<Prototype>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
    __4: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.0;
    let __end0 = __4.2;
    let __temp0 = __action394(
        errors,
        db,
        __2,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action277(
        errors,
        db,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action403<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Keyword>, Location),
    __1: (Location, Spanned<Node>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Token<'input>, Location),
    __4: (Location, Spanned<Node>, Location),
    __5: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.0;
    let __end0 = __5.2;
    let __temp0 = __action387(
        errors,
        db,
        __2,
        __3,
        __4,
        __5,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action283(
        errors,
        db,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action404<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Keyword>, Location),
    __1: (Location, Spanned<Node>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Token<'input>, Location),
    __4: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.0;
    let __end0 = __4.2;
    let __temp0 = __action388(
        errors,
        db,
        __2,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action283(
        errors,
        db,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action405<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Keyword>, Location),
    __1: (Location, Spanned<Node>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Token<'input>, Location),
    __4: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
    __5: (Location, Spanned<Node>, Location),
    __6: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.0;
    let __end0 = __6.2;
    let __temp0 = __action389(
        errors,
        db,
        __2,
        __3,
        __4,
        __5,
        __6,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action283(
        errors,
        db,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action406<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Keyword>, Location),
    __1: (Location, Spanned<Node>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Token<'input>, Location),
    __4: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
    __5: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.0;
    let __end0 = __5.2;
    let __temp0 = __action390(
        errors,
        db,
        __2,
        __3,
        __4,
        __5,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action283(
        errors,
        db,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action407<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Keyword>, Location),
    __1: (Location, Spanned<Node>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Spanned<Node>, Location),
    __4: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.0;
    let __end0 = __4.2;
    let __temp0 = __action391(
        errors,
        db,
        __2,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action283(
        errors,
        db,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action408<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Keyword>, Location),
    __1: (Location, Spanned<Node>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.0;
    let __end0 = __3.2;
    let __temp0 = __action392(
        errors,
        db,
        __2,
        __3,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action283(
        errors,
        db,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action409<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Keyword>, Location),
    __1: (Location, Spanned<Node>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
    __4: (Location, Spanned<Node>, Location),
    __5: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.0;
    let __end0 = __5.2;
    let __temp0 = __action393(
        errors,
        db,
        __2,
        __3,
        __4,
        __5,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action283(
        errors,
        db,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action410<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Keyword>, Location),
    __1: (Location, Spanned<Node>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
    __4: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.0;
    let __end0 = __4.2;
    let __temp0 = __action394(
        errors,
        db,
        __2,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action283(
        errors,
        db,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action411<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Keyword>, Location),
    __1: (Location, Spanned<Node>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Token<'input>, Location),
    __4: (Location, Spanned<Node>, Location),
    __5: (Location, Token<'input>, Location),
    __6: (Location, Spanned<Keyword>, Location),
    __7: (Location, Token<'input>, Location),
    __8: (Location, Token<'input>, Location),
    __9: (Location, Spanned<Node>, Location),
    __10: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.0;
    let __end0 = __5.2;
    let __start1 = __7.0;
    let __end1 = __10.2;
    let __temp0 = __action387(
        errors,
        db,
        __2,
        __3,
        __4,
        __5,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action387(
        errors,
        db,
        __7,
        __8,
        __9,
        __10,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action284(
        errors,
        db,
        __0,
        __1,
        __temp0,
        __6,
        __temp1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action412<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Keyword>, Location),
    __1: (Location, Spanned<Node>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Token<'input>, Location),
    __4: (Location, Spanned<Node>, Location),
    __5: (Location, Token<'input>, Location),
    __6: (Location, Spanned<Keyword>, Location),
    __7: (Location, Token<'input>, Location),
    __8: (Location, Token<'input>, Location),
    __9: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.0;
    let __end0 = __5.2;
    let __start1 = __7.0;
    let __end1 = __9.2;
    let __temp0 = __action387(
        errors,
        db,
        __2,
        __3,
        __4,
        __5,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action388(
        errors,
        db,
        __7,
        __8,
        __9,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action284(
        errors,
        db,
        __0,
        __1,
        __temp0,
        __6,
        __temp1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action413<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Keyword>, Location),
    __1: (Location, Spanned<Node>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Token<'input>, Location),
    __4: (Location, Spanned<Node>, Location),
    __5: (Location, Token<'input>, Location),
    __6: (Location, Spanned<Keyword>, Location),
    __7: (Location, Token<'input>, Location),
    __8: (Location, Token<'input>, Location),
    __9: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
    __10: (Location, Spanned<Node>, Location),
    __11: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.0;
    let __end0 = __5.2;
    let __start1 = __7.0;
    let __end1 = __11.2;
    let __temp0 = __action387(
        errors,
        db,
        __2,
        __3,
        __4,
        __5,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action389(
        errors,
        db,
        __7,
        __8,
        __9,
        __10,
        __11,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action284(
        errors,
        db,
        __0,
        __1,
        __temp0,
        __6,
        __temp1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action414<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Keyword>, Location),
    __1: (Location, Spanned<Node>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Token<'input>, Location),
    __4: (Location, Spanned<Node>, Location),
    __5: (Location, Token<'input>, Location),
    __6: (Location, Spanned<Keyword>, Location),
    __7: (Location, Token<'input>, Location),
    __8: (Location, Token<'input>, Location),
    __9: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
    __10: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.0;
    let __end0 = __5.2;
    let __start1 = __7.0;
    let __end1 = __10.2;
    let __temp0 = __action387(
        errors,
        db,
        __2,
        __3,
        __4,
        __5,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action390(
        errors,
        db,
        __7,
        __8,
        __9,
        __10,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action284(
        errors,
        db,
        __0,
        __1,
        __temp0,
        __6,
        __temp1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action415<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Keyword>, Location),
    __1: (Location, Spanned<Node>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Token<'input>, Location),
    __4: (Location, Spanned<Node>, Location),
    __5: (Location, Token<'input>, Location),
    __6: (Location, Spanned<Keyword>, Location),
    __7: (Location, Token<'input>, Location),
    __8: (Location, Spanned<Node>, Location),
    __9: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.0;
    let __end0 = __5.2;
    let __start1 = __7.0;
    let __end1 = __9.2;
    let __temp0 = __action387(
        errors,
        db,
        __2,
        __3,
        __4,
        __5,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action391(
        errors,
        db,
        __7,
        __8,
        __9,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action284(
        errors,
        db,
        __0,
        __1,
        __temp0,
        __6,
        __temp1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action416<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Keyword>, Location),
    __1: (Location, Spanned<Node>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Token<'input>, Location),
    __4: (Location, Spanned<Node>, Location),
    __5: (Location, Token<'input>, Location),
    __6: (Location, Spanned<Keyword>, Location),
    __7: (Location, Token<'input>, Location),
    __8: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.0;
    let __end0 = __5.2;
    let __start1 = __7.0;
    let __end1 = __8.2;
    let __temp0 = __action387(
        errors,
        db,
        __2,
        __3,
        __4,
        __5,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action392(
        errors,
        db,
        __7,
        __8,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action284(
        errors,
        db,
        __0,
        __1,
        __temp0,
        __6,
        __temp1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action417<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Keyword>, Location),
    __1: (Location, Spanned<Node>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Token<'input>, Location),
    __4: (Location, Spanned<Node>, Location),
    __5: (Location, Token<'input>, Location),
    __6: (Location, Spanned<Keyword>, Location),
    __7: (Location, Token<'input>, Location),
    __8: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
    __9: (Location, Spanned<Node>, Location),
    __10: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.0;
    let __end0 = __5.2;
    let __start1 = __7.0;
    let __end1 = __10.2;
    let __temp0 = __action387(
        errors,
        db,
        __2,
        __3,
        __4,
        __5,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action393(
        errors,
        db,
        __7,
        __8,
        __9,
        __10,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action284(
        errors,
        db,
        __0,
        __1,
        __temp0,
        __6,
        __temp1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action418<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Keyword>, Location),
    __1: (Location, Spanned<Node>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Token<'input>, Location),
    __4: (Location, Spanned<Node>, Location),
    __5: (Location, Token<'input>, Location),
    __6: (Location, Spanned<Keyword>, Location),
    __7: (Location, Token<'input>, Location),
    __8: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
    __9: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.0;
    let __end0 = __5.2;
    let __start1 = __7.0;
    let __end1 = __9.2;
    let __temp0 = __action387(
        errors,
        db,
        __2,
        __3,
        __4,
        __5,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action394(
        errors,
        db,
        __7,
        __8,
        __9,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action284(
        errors,
        db,
        __0,
        __1,
        __temp0,
        __6,
        __temp1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action419<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Keyword>, Location),
    __1: (Location, Spanned<Node>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Token<'input>, Location),
    __4: (Location, Token<'input>, Location),
    __5: (Location, Spanned<Keyword>, Location),
    __6: (Location, Token<'input>, Location),
    __7: (Location, Token<'input>, Location),
    __8: (Location, Spanned<Node>, Location),
    __9: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.0;
    let __end0 = __4.2;
    let __start1 = __6.0;
    let __end1 = __9.2;
    let __temp0 = __action388(
        errors,
        db,
        __2,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action387(
        errors,
        db,
        __6,
        __7,
        __8,
        __9,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action284(
        errors,
        db,
        __0,
        __1,
        __temp0,
        __5,
        __temp1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action420<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Keyword>, Location),
    __1: (Location, Spanned<Node>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Token<'input>, Location),
    __4: (Location, Token<'input>, Location),
    __5: (Location, Spanned<Keyword>, Location),
    __6: (Location, Token<'input>, Location),
    __7: (Location, Token<'input>, Location),
    __8: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.0;
    let __end0 = __4.2;
    let __start1 = __6.0;
    let __end1 = __8.2;
    let __temp0 = __action388(
        errors,
        db,
        __2,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action388(
        errors,
        db,
        __6,
        __7,
        __8,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action284(
        errors,
        db,
        __0,
        __1,
        __temp0,
        __5,
        __temp1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action421<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Keyword>, Location),
    __1: (Location, Spanned<Node>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Token<'input>, Location),
    __4: (Location, Token<'input>, Location),
    __5: (Location, Spanned<Keyword>, Location),
    __6: (Location, Token<'input>, Location),
    __7: (Location, Token<'input>, Location),
    __8: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
    __9: (Location, Spanned<Node>, Location),
    __10: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.0;
    let __end0 = __4.2;
    let __start1 = __6.0;
    let __end1 = __10.2;
    let __temp0 = __action388(
        errors,
        db,
        __2,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action389(
        errors,
        db,
        __6,
        __7,
        __8,
        __9,
        __10,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action284(
        errors,
        db,
        __0,
        __1,
        __temp0,
        __5,
        __temp1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action422<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Keyword>, Location),
    __1: (Location, Spanned<Node>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Token<'input>, Location),
    __4: (Location, Token<'input>, Location),
    __5: (Location, Spanned<Keyword>, Location),
    __6: (Location, Token<'input>, Location),
    __7: (Location, Token<'input>, Location),
    __8: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
    __9: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.0;
    let __end0 = __4.2;
    let __start1 = __6.0;
    let __end1 = __9.2;
    let __temp0 = __action388(
        errors,
        db,
        __2,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action390(
        errors,
        db,
        __6,
        __7,
        __8,
        __9,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action284(
        errors,
        db,
        __0,
        __1,
        __temp0,
        __5,
        __temp1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action423<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Keyword>, Location),
    __1: (Location, Spanned<Node>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Token<'input>, Location),
    __4: (Location, Token<'input>, Location),
    __5: (Location, Spanned<Keyword>, Location),
    __6: (Location, Token<'input>, Location),
    __7: (Location, Spanned<Node>, Location),
    __8: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.0;
    let __end0 = __4.2;
    let __start1 = __6.0;
    let __end1 = __8.2;
    let __temp0 = __action388(
        errors,
        db,
        __2,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action391(
        errors,
        db,
        __6,
        __7,
        __8,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action284(
        errors,
        db,
        __0,
        __1,
        __temp0,
        __5,
        __temp1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action424<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Keyword>, Location),
    __1: (Location, Spanned<Node>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Token<'input>, Location),
    __4: (Location, Token<'input>, Location),
    __5: (Location, Spanned<Keyword>, Location),
    __6: (Location, Token<'input>, Location),
    __7: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.0;
    let __end0 = __4.2;
    let __start1 = __6.0;
    let __end1 = __7.2;
    let __temp0 = __action388(
        errors,
        db,
        __2,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action392(
        errors,
        db,
        __6,
        __7,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action284(
        errors,
        db,
        __0,
        __1,
        __temp0,
        __5,
        __temp1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action425<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Keyword>, Location),
    __1: (Location, Spanned<Node>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Token<'input>, Location),
    __4: (Location, Token<'input>, Location),
    __5: (Location, Spanned<Keyword>, Location),
    __6: (Location, Token<'input>, Location),
    __7: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
    __8: (Location, Spanned<Node>, Location),
    __9: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.0;
    let __end0 = __4.2;
    let __start1 = __6.0;
    let __end1 = __9.2;
    let __temp0 = __action388(
        errors,
        db,
        __2,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action393(
        errors,
        db,
        __6,
        __7,
        __8,
        __9,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action284(
        errors,
        db,
        __0,
        __1,
        __temp0,
        __5,
        __temp1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action426<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Keyword>, Location),
    __1: (Location, Spanned<Node>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Token<'input>, Location),
    __4: (Location, Token<'input>, Location),
    __5: (Location, Spanned<Keyword>, Location),
    __6: (Location, Token<'input>, Location),
    __7: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
    __8: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.0;
    let __end0 = __4.2;
    let __start1 = __6.0;
    let __end1 = __8.2;
    let __temp0 = __action388(
        errors,
        db,
        __2,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action394(
        errors,
        db,
        __6,
        __7,
        __8,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action284(
        errors,
        db,
        __0,
        __1,
        __temp0,
        __5,
        __temp1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action427<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Keyword>, Location),
    __1: (Location, Spanned<Node>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Token<'input>, Location),
    __4: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
    __5: (Location, Spanned<Node>, Location),
    __6: (Location, Token<'input>, Location),
    __7: (Location, Spanned<Keyword>, Location),
    __8: (Location, Token<'input>, Location),
    __9: (Location, Token<'input>, Location),
    __10: (Location, Spanned<Node>, Location),
    __11: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.0;
    let __end0 = __6.2;
    let __start1 = __8.0;
    let __end1 = __11.2;
    let __temp0 = __action389(
        errors,
        db,
        __2,
        __3,
        __4,
        __5,
        __6,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action387(
        errors,
        db,
        __8,
        __9,
        __10,
        __11,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action284(
        errors,
        db,
        __0,
        __1,
        __temp0,
        __7,
        __temp1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action428<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Keyword>, Location),
    __1: (Location, Spanned<Node>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Token<'input>, Location),
    __4: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
    __5: (Location, Spanned<Node>, Location),
    __6: (Location, Token<'input>, Location),
    __7: (Location, Spanned<Keyword>, Location),
    __8: (Location, Token<'input>, Location),
    __9: (Location, Token<'input>, Location),
    __10: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.0;
    let __end0 = __6.2;
    let __start1 = __8.0;
    let __end1 = __10.2;
    let __temp0 = __action389(
        errors,
        db,
        __2,
        __3,
        __4,
        __5,
        __6,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action388(
        errors,
        db,
        __8,
        __9,
        __10,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action284(
        errors,
        db,
        __0,
        __1,
        __temp0,
        __7,
        __temp1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action429<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Keyword>, Location),
    __1: (Location, Spanned<Node>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Token<'input>, Location),
    __4: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
    __5: (Location, Spanned<Node>, Location),
    __6: (Location, Token<'input>, Location),
    __7: (Location, Spanned<Keyword>, Location),
    __8: (Location, Token<'input>, Location),
    __9: (Location, Token<'input>, Location),
    __10: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
    __11: (Location, Spanned<Node>, Location),
    __12: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.0;
    let __end0 = __6.2;
    let __start1 = __8.0;
    let __end1 = __12.2;
    let __temp0 = __action389(
        errors,
        db,
        __2,
        __3,
        __4,
        __5,
        __6,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action389(
        errors,
        db,
        __8,
        __9,
        __10,
        __11,
        __12,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action284(
        errors,
        db,
        __0,
        __1,
        __temp0,
        __7,
        __temp1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action430<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Keyword>, Location),
    __1: (Location, Spanned<Node>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Token<'input>, Location),
    __4: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
    __5: (Location, Spanned<Node>, Location),
    __6: (Location, Token<'input>, Location),
    __7: (Location, Spanned<Keyword>, Location),
    __8: (Location, Token<'input>, Location),
    __9: (Location, Token<'input>, Location),
    __10: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
    __11: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.0;
    let __end0 = __6.2;
    let __start1 = __8.0;
    let __end1 = __11.2;
    let __temp0 = __action389(
        errors,
        db,
        __2,
        __3,
        __4,
        __5,
        __6,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action390(
        errors,
        db,
        __8,
        __9,
        __10,
        __11,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action284(
        errors,
        db,
        __0,
        __1,
        __temp0,
        __7,
        __temp1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action431<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Keyword>, Location),
    __1: (Location, Spanned<Node>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Token<'input>, Location),
    __4: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
    __5: (Location, Spanned<Node>, Location),
    __6: (Location, Token<'input>, Location),
    __7: (Location, Spanned<Keyword>, Location),
    __8: (Location, Token<'input>, Location),
    __9: (Location, Spanned<Node>, Location),
    __10: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.0;
    let __end0 = __6.2;
    let __start1 = __8.0;
    let __end1 = __10.2;
    let __temp0 = __action389(
        errors,
        db,
        __2,
        __3,
        __4,
        __5,
        __6,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action391(
        errors,
        db,
        __8,
        __9,
        __10,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action284(
        errors,
        db,
        __0,
        __1,
        __temp0,
        __7,
        __temp1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action432<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Keyword>, Location),
    __1: (Location, Spanned<Node>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Token<'input>, Location),
    __4: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
    __5: (Location, Spanned<Node>, Location),
    __6: (Location, Token<'input>, Location),
    __7: (Location, Spanned<Keyword>, Location),
    __8: (Location, Token<'input>, Location),
    __9: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.0;
    let __end0 = __6.2;
    let __start1 = __8.0;
    let __end1 = __9.2;
    let __temp0 = __action389(
        errors,
        db,
        __2,
        __3,
        __4,
        __5,
        __6,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action392(
        errors,
        db,
        __8,
        __9,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action284(
        errors,
        db,
        __0,
        __1,
        __temp0,
        __7,
        __temp1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action433<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Keyword>, Location),
    __1: (Location, Spanned<Node>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Token<'input>, Location),
    __4: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
    __5: (Location, Spanned<Node>, Location),
    __6: (Location, Token<'input>, Location),
    __7: (Location, Spanned<Keyword>, Location),
    __8: (Location, Token<'input>, Location),
    __9: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
    __10: (Location, Spanned<Node>, Location),
    __11: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.0;
    let __end0 = __6.2;
    let __start1 = __8.0;
    let __end1 = __11.2;
    let __temp0 = __action389(
        errors,
        db,
        __2,
        __3,
        __4,
        __5,
        __6,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action393(
        errors,
        db,
        __8,
        __9,
        __10,
        __11,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action284(
        errors,
        db,
        __0,
        __1,
        __temp0,
        __7,
        __temp1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action434<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Keyword>, Location),
    __1: (Location, Spanned<Node>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Token<'input>, Location),
    __4: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
    __5: (Location, Spanned<Node>, Location),
    __6: (Location, Token<'input>, Location),
    __7: (Location, Spanned<Keyword>, Location),
    __8: (Location, Token<'input>, Location),
    __9: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
    __10: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.0;
    let __end0 = __6.2;
    let __start1 = __8.0;
    let __end1 = __10.2;
    let __temp0 = __action389(
        errors,
        db,
        __2,
        __3,
        __4,
        __5,
        __6,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action394(
        errors,
        db,
        __8,
        __9,
        __10,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action284(
        errors,
        db,
        __0,
        __1,
        __temp0,
        __7,
        __temp1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action435<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Keyword>, Location),
    __1: (Location, Spanned<Node>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Token<'input>, Location),
    __4: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
    __5: (Location, Token<'input>, Location),
    __6: (Location, Spanned<Keyword>, Location),
    __7: (Location, Token<'input>, Location),
    __8: (Location, Token<'input>, Location),
    __9: (Location, Spanned<Node>, Location),
    __10: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.0;
    let __end0 = __5.2;
    let __start1 = __7.0;
    let __end1 = __10.2;
    let __temp0 = __action390(
        errors,
        db,
        __2,
        __3,
        __4,
        __5,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action387(
        errors,
        db,
        __7,
        __8,
        __9,
        __10,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action284(
        errors,
        db,
        __0,
        __1,
        __temp0,
        __6,
        __temp1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action436<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Keyword>, Location),
    __1: (Location, Spanned<Node>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Token<'input>, Location),
    __4: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
    __5: (Location, Token<'input>, Location),
    __6: (Location, Spanned<Keyword>, Location),
    __7: (Location, Token<'input>, Location),
    __8: (Location, Token<'input>, Location),
    __9: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.0;
    let __end0 = __5.2;
    let __start1 = __7.0;
    let __end1 = __9.2;
    let __temp0 = __action390(
        errors,
        db,
        __2,
        __3,
        __4,
        __5,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action388(
        errors,
        db,
        __7,
        __8,
        __9,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action284(
        errors,
        db,
        __0,
        __1,
        __temp0,
        __6,
        __temp1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action437<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Keyword>, Location),
    __1: (Location, Spanned<Node>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Token<'input>, Location),
    __4: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
    __5: (Location, Token<'input>, Location),
    __6: (Location, Spanned<Keyword>, Location),
    __7: (Location, Token<'input>, Location),
    __8: (Location, Token<'input>, Location),
    __9: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
    __10: (Location, Spanned<Node>, Location),
    __11: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.0;
    let __end0 = __5.2;
    let __start1 = __7.0;
    let __end1 = __11.2;
    let __temp0 = __action390(
        errors,
        db,
        __2,
        __3,
        __4,
        __5,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action389(
        errors,
        db,
        __7,
        __8,
        __9,
        __10,
        __11,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action284(
        errors,
        db,
        __0,
        __1,
        __temp0,
        __6,
        __temp1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action438<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Keyword>, Location),
    __1: (Location, Spanned<Node>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Token<'input>, Location),
    __4: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
    __5: (Location, Token<'input>, Location),
    __6: (Location, Spanned<Keyword>, Location),
    __7: (Location, Token<'input>, Location),
    __8: (Location, Token<'input>, Location),
    __9: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
    __10: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.0;
    let __end0 = __5.2;
    let __start1 = __7.0;
    let __end1 = __10.2;
    let __temp0 = __action390(
        errors,
        db,
        __2,
        __3,
        __4,
        __5,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action390(
        errors,
        db,
        __7,
        __8,
        __9,
        __10,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action284(
        errors,
        db,
        __0,
        __1,
        __temp0,
        __6,
        __temp1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action439<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Keyword>, Location),
    __1: (Location, Spanned<Node>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Token<'input>, Location),
    __4: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
    __5: (Location, Token<'input>, Location),
    __6: (Location, Spanned<Keyword>, Location),
    __7: (Location, Token<'input>, Location),
    __8: (Location, Spanned<Node>, Location),
    __9: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.0;
    let __end0 = __5.2;
    let __start1 = __7.0;
    let __end1 = __9.2;
    let __temp0 = __action390(
        errors,
        db,
        __2,
        __3,
        __4,
        __5,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action391(
        errors,
        db,
        __7,
        __8,
        __9,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action284(
        errors,
        db,
        __0,
        __1,
        __temp0,
        __6,
        __temp1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action440<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Keyword>, Location),
    __1: (Location, Spanned<Node>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Token<'input>, Location),
    __4: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
    __5: (Location, Token<'input>, Location),
    __6: (Location, Spanned<Keyword>, Location),
    __7: (Location, Token<'input>, Location),
    __8: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.0;
    let __end0 = __5.2;
    let __start1 = __7.0;
    let __end1 = __8.2;
    let __temp0 = __action390(
        errors,
        db,
        __2,
        __3,
        __4,
        __5,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action392(
        errors,
        db,
        __7,
        __8,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action284(
        errors,
        db,
        __0,
        __1,
        __temp0,
        __6,
        __temp1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action441<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Keyword>, Location),
    __1: (Location, Spanned<Node>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Token<'input>, Location),
    __4: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
    __5: (Location, Token<'input>, Location),
    __6: (Location, Spanned<Keyword>, Location),
    __7: (Location, Token<'input>, Location),
    __8: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
    __9: (Location, Spanned<Node>, Location),
    __10: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.0;
    let __end0 = __5.2;
    let __start1 = __7.0;
    let __end1 = __10.2;
    let __temp0 = __action390(
        errors,
        db,
        __2,
        __3,
        __4,
        __5,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action393(
        errors,
        db,
        __7,
        __8,
        __9,
        __10,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action284(
        errors,
        db,
        __0,
        __1,
        __temp0,
        __6,
        __temp1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action442<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Keyword>, Location),
    __1: (Location, Spanned<Node>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Token<'input>, Location),
    __4: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
    __5: (Location, Token<'input>, Location),
    __6: (Location, Spanned<Keyword>, Location),
    __7: (Location, Token<'input>, Location),
    __8: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
    __9: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.0;
    let __end0 = __5.2;
    let __start1 = __7.0;
    let __end1 = __9.2;
    let __temp0 = __action390(
        errors,
        db,
        __2,
        __3,
        __4,
        __5,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action394(
        errors,
        db,
        __7,
        __8,
        __9,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action284(
        errors,
        db,
        __0,
        __1,
        __temp0,
        __6,
        __temp1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action443<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Keyword>, Location),
    __1: (Location, Spanned<Node>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Spanned<Node>, Location),
    __4: (Location, Token<'input>, Location),
    __5: (Location, Spanned<Keyword>, Location),
    __6: (Location, Token<'input>, Location),
    __7: (Location, Token<'input>, Location),
    __8: (Location, Spanned<Node>, Location),
    __9: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.0;
    let __end0 = __4.2;
    let __start1 = __6.0;
    let __end1 = __9.2;
    let __temp0 = __action391(
        errors,
        db,
        __2,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action387(
        errors,
        db,
        __6,
        __7,
        __8,
        __9,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action284(
        errors,
        db,
        __0,
        __1,
        __temp0,
        __5,
        __temp1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action444<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Keyword>, Location),
    __1: (Location, Spanned<Node>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Spanned<Node>, Location),
    __4: (Location, Token<'input>, Location),
    __5: (Location, Spanned<Keyword>, Location),
    __6: (Location, Token<'input>, Location),
    __7: (Location, Token<'input>, Location),
    __8: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.0;
    let __end0 = __4.2;
    let __start1 = __6.0;
    let __end1 = __8.2;
    let __temp0 = __action391(
        errors,
        db,
        __2,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action388(
        errors,
        db,
        __6,
        __7,
        __8,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action284(
        errors,
        db,
        __0,
        __1,
        __temp0,
        __5,
        __temp1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action445<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Keyword>, Location),
    __1: (Location, Spanned<Node>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Spanned<Node>, Location),
    __4: (Location, Token<'input>, Location),
    __5: (Location, Spanned<Keyword>, Location),
    __6: (Location, Token<'input>, Location),
    __7: (Location, Token<'input>, Location),
    __8: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
    __9: (Location, Spanned<Node>, Location),
    __10: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.0;
    let __end0 = __4.2;
    let __start1 = __6.0;
    let __end1 = __10.2;
    let __temp0 = __action391(
        errors,
        db,
        __2,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action389(
        errors,
        db,
        __6,
        __7,
        __8,
        __9,
        __10,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action284(
        errors,
        db,
        __0,
        __1,
        __temp0,
        __5,
        __temp1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action446<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Keyword>, Location),
    __1: (Location, Spanned<Node>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Spanned<Node>, Location),
    __4: (Location, Token<'input>, Location),
    __5: (Location, Spanned<Keyword>, Location),
    __6: (Location, Token<'input>, Location),
    __7: (Location, Token<'input>, Location),
    __8: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
    __9: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.0;
    let __end0 = __4.2;
    let __start1 = __6.0;
    let __end1 = __9.2;
    let __temp0 = __action391(
        errors,
        db,
        __2,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action390(
        errors,
        db,
        __6,
        __7,
        __8,
        __9,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action284(
        errors,
        db,
        __0,
        __1,
        __temp0,
        __5,
        __temp1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action447<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Keyword>, Location),
    __1: (Location, Spanned<Node>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Spanned<Node>, Location),
    __4: (Location, Token<'input>, Location),
    __5: (Location, Spanned<Keyword>, Location),
    __6: (Location, Token<'input>, Location),
    __7: (Location, Spanned<Node>, Location),
    __8: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.0;
    let __end0 = __4.2;
    let __start1 = __6.0;
    let __end1 = __8.2;
    let __temp0 = __action391(
        errors,
        db,
        __2,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action391(
        errors,
        db,
        __6,
        __7,
        __8,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action284(
        errors,
        db,
        __0,
        __1,
        __temp0,
        __5,
        __temp1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action448<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Keyword>, Location),
    __1: (Location, Spanned<Node>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Spanned<Node>, Location),
    __4: (Location, Token<'input>, Location),
    __5: (Location, Spanned<Keyword>, Location),
    __6: (Location, Token<'input>, Location),
    __7: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.0;
    let __end0 = __4.2;
    let __start1 = __6.0;
    let __end1 = __7.2;
    let __temp0 = __action391(
        errors,
        db,
        __2,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action392(
        errors,
        db,
        __6,
        __7,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action284(
        errors,
        db,
        __0,
        __1,
        __temp0,
        __5,
        __temp1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action449<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Keyword>, Location),
    __1: (Location, Spanned<Node>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Spanned<Node>, Location),
    __4: (Location, Token<'input>, Location),
    __5: (Location, Spanned<Keyword>, Location),
    __6: (Location, Token<'input>, Location),
    __7: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
    __8: (Location, Spanned<Node>, Location),
    __9: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.0;
    let __end0 = __4.2;
    let __start1 = __6.0;
    let __end1 = __9.2;
    let __temp0 = __action391(
        errors,
        db,
        __2,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action393(
        errors,
        db,
        __6,
        __7,
        __8,
        __9,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action284(
        errors,
        db,
        __0,
        __1,
        __temp0,
        __5,
        __temp1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action450<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Keyword>, Location),
    __1: (Location, Spanned<Node>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Spanned<Node>, Location),
    __4: (Location, Token<'input>, Location),
    __5: (Location, Spanned<Keyword>, Location),
    __6: (Location, Token<'input>, Location),
    __7: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
    __8: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.0;
    let __end0 = __4.2;
    let __start1 = __6.0;
    let __end1 = __8.2;
    let __temp0 = __action391(
        errors,
        db,
        __2,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action394(
        errors,
        db,
        __6,
        __7,
        __8,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action284(
        errors,
        db,
        __0,
        __1,
        __temp0,
        __5,
        __temp1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action451<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Keyword>, Location),
    __1: (Location, Spanned<Node>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Token<'input>, Location),
    __4: (Location, Spanned<Keyword>, Location),
    __5: (Location, Token<'input>, Location),
    __6: (Location, Token<'input>, Location),
    __7: (Location, Spanned<Node>, Location),
    __8: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.0;
    let __end0 = __3.2;
    let __start1 = __5.0;
    let __end1 = __8.2;
    let __temp0 = __action392(
        errors,
        db,
        __2,
        __3,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action387(
        errors,
        db,
        __5,
        __6,
        __7,
        __8,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action284(
        errors,
        db,
        __0,
        __1,
        __temp0,
        __4,
        __temp1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action452<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Keyword>, Location),
    __1: (Location, Spanned<Node>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Token<'input>, Location),
    __4: (Location, Spanned<Keyword>, Location),
    __5: (Location, Token<'input>, Location),
    __6: (Location, Token<'input>, Location),
    __7: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.0;
    let __end0 = __3.2;
    let __start1 = __5.0;
    let __end1 = __7.2;
    let __temp0 = __action392(
        errors,
        db,
        __2,
        __3,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action388(
        errors,
        db,
        __5,
        __6,
        __7,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action284(
        errors,
        db,
        __0,
        __1,
        __temp0,
        __4,
        __temp1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action453<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Keyword>, Location),
    __1: (Location, Spanned<Node>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Token<'input>, Location),
    __4: (Location, Spanned<Keyword>, Location),
    __5: (Location, Token<'input>, Location),
    __6: (Location, Token<'input>, Location),
    __7: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
    __8: (Location, Spanned<Node>, Location),
    __9: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.0;
    let __end0 = __3.2;
    let __start1 = __5.0;
    let __end1 = __9.2;
    let __temp0 = __action392(
        errors,
        db,
        __2,
        __3,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action389(
        errors,
        db,
        __5,
        __6,
        __7,
        __8,
        __9,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action284(
        errors,
        db,
        __0,
        __1,
        __temp0,
        __4,
        __temp1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action454<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Keyword>, Location),
    __1: (Location, Spanned<Node>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Token<'input>, Location),
    __4: (Location, Spanned<Keyword>, Location),
    __5: (Location, Token<'input>, Location),
    __6: (Location, Token<'input>, Location),
    __7: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
    __8: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.0;
    let __end0 = __3.2;
    let __start1 = __5.0;
    let __end1 = __8.2;
    let __temp0 = __action392(
        errors,
        db,
        __2,
        __3,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action390(
        errors,
        db,
        __5,
        __6,
        __7,
        __8,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action284(
        errors,
        db,
        __0,
        __1,
        __temp0,
        __4,
        __temp1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action455<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Keyword>, Location),
    __1: (Location, Spanned<Node>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Token<'input>, Location),
    __4: (Location, Spanned<Keyword>, Location),
    __5: (Location, Token<'input>, Location),
    __6: (Location, Spanned<Node>, Location),
    __7: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.0;
    let __end0 = __3.2;
    let __start1 = __5.0;
    let __end1 = __7.2;
    let __temp0 = __action392(
        errors,
        db,
        __2,
        __3,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action391(
        errors,
        db,
        __5,
        __6,
        __7,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action284(
        errors,
        db,
        __0,
        __1,
        __temp0,
        __4,
        __temp1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action456<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Keyword>, Location),
    __1: (Location, Spanned<Node>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Token<'input>, Location),
    __4: (Location, Spanned<Keyword>, Location),
    __5: (Location, Token<'input>, Location),
    __6: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.0;
    let __end0 = __3.2;
    let __start1 = __5.0;
    let __end1 = __6.2;
    let __temp0 = __action392(
        errors,
        db,
        __2,
        __3,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action392(
        errors,
        db,
        __5,
        __6,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action284(
        errors,
        db,
        __0,
        __1,
        __temp0,
        __4,
        __temp1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action457<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Keyword>, Location),
    __1: (Location, Spanned<Node>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Token<'input>, Location),
    __4: (Location, Spanned<Keyword>, Location),
    __5: (Location, Token<'input>, Location),
    __6: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
    __7: (Location, Spanned<Node>, Location),
    __8: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.0;
    let __end0 = __3.2;
    let __start1 = __5.0;
    let __end1 = __8.2;
    let __temp0 = __action392(
        errors,
        db,
        __2,
        __3,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action393(
        errors,
        db,
        __5,
        __6,
        __7,
        __8,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action284(
        errors,
        db,
        __0,
        __1,
        __temp0,
        __4,
        __temp1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action458<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Keyword>, Location),
    __1: (Location, Spanned<Node>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Token<'input>, Location),
    __4: (Location, Spanned<Keyword>, Location),
    __5: (Location, Token<'input>, Location),
    __6: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
    __7: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.0;
    let __end0 = __3.2;
    let __start1 = __5.0;
    let __end1 = __7.2;
    let __temp0 = __action392(
        errors,
        db,
        __2,
        __3,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action394(
        errors,
        db,
        __5,
        __6,
        __7,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action284(
        errors,
        db,
        __0,
        __1,
        __temp0,
        __4,
        __temp1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action459<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Keyword>, Location),
    __1: (Location, Spanned<Node>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
    __4: (Location, Spanned<Node>, Location),
    __5: (Location, Token<'input>, Location),
    __6: (Location, Spanned<Keyword>, Location),
    __7: (Location, Token<'input>, Location),
    __8: (Location, Token<'input>, Location),
    __9: (Location, Spanned<Node>, Location),
    __10: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.0;
    let __end0 = __5.2;
    let __start1 = __7.0;
    let __end1 = __10.2;
    let __temp0 = __action393(
        errors,
        db,
        __2,
        __3,
        __4,
        __5,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action387(
        errors,
        db,
        __7,
        __8,
        __9,
        __10,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action284(
        errors,
        db,
        __0,
        __1,
        __temp0,
        __6,
        __temp1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action460<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Keyword>, Location),
    __1: (Location, Spanned<Node>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
    __4: (Location, Spanned<Node>, Location),
    __5: (Location, Token<'input>, Location),
    __6: (Location, Spanned<Keyword>, Location),
    __7: (Location, Token<'input>, Location),
    __8: (Location, Token<'input>, Location),
    __9: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.0;
    let __end0 = __5.2;
    let __start1 = __7.0;
    let __end1 = __9.2;
    let __temp0 = __action393(
        errors,
        db,
        __2,
        __3,
        __4,
        __5,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action388(
        errors,
        db,
        __7,
        __8,
        __9,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action284(
        errors,
        db,
        __0,
        __1,
        __temp0,
        __6,
        __temp1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action461<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Keyword>, Location),
    __1: (Location, Spanned<Node>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
    __4: (Location, Spanned<Node>, Location),
    __5: (Location, Token<'input>, Location),
    __6: (Location, Spanned<Keyword>, Location),
    __7: (Location, Token<'input>, Location),
    __8: (Location, Token<'input>, Location),
    __9: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
    __10: (Location, Spanned<Node>, Location),
    __11: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.0;
    let __end0 = __5.2;
    let __start1 = __7.0;
    let __end1 = __11.2;
    let __temp0 = __action393(
        errors,
        db,
        __2,
        __3,
        __4,
        __5,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action389(
        errors,
        db,
        __7,
        __8,
        __9,
        __10,
        __11,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action284(
        errors,
        db,
        __0,
        __1,
        __temp0,
        __6,
        __temp1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action462<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Keyword>, Location),
    __1: (Location, Spanned<Node>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
    __4: (Location, Spanned<Node>, Location),
    __5: (Location, Token<'input>, Location),
    __6: (Location, Spanned<Keyword>, Location),
    __7: (Location, Token<'input>, Location),
    __8: (Location, Token<'input>, Location),
    __9: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
    __10: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.0;
    let __end0 = __5.2;
    let __start1 = __7.0;
    let __end1 = __10.2;
    let __temp0 = __action393(
        errors,
        db,
        __2,
        __3,
        __4,
        __5,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action390(
        errors,
        db,
        __7,
        __8,
        __9,
        __10,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action284(
        errors,
        db,
        __0,
        __1,
        __temp0,
        __6,
        __temp1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action463<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Keyword>, Location),
    __1: (Location, Spanned<Node>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
    __4: (Location, Spanned<Node>, Location),
    __5: (Location, Token<'input>, Location),
    __6: (Location, Spanned<Keyword>, Location),
    __7: (Location, Token<'input>, Location),
    __8: (Location, Spanned<Node>, Location),
    __9: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.0;
    let __end0 = __5.2;
    let __start1 = __7.0;
    let __end1 = __9.2;
    let __temp0 = __action393(
        errors,
        db,
        __2,
        __3,
        __4,
        __5,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action391(
        errors,
        db,
        __7,
        __8,
        __9,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action284(
        errors,
        db,
        __0,
        __1,
        __temp0,
        __6,
        __temp1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action464<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Keyword>, Location),
    __1: (Location, Spanned<Node>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
    __4: (Location, Spanned<Node>, Location),
    __5: (Location, Token<'input>, Location),
    __6: (Location, Spanned<Keyword>, Location),
    __7: (Location, Token<'input>, Location),
    __8: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.0;
    let __end0 = __5.2;
    let __start1 = __7.0;
    let __end1 = __8.2;
    let __temp0 = __action393(
        errors,
        db,
        __2,
        __3,
        __4,
        __5,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action392(
        errors,
        db,
        __7,
        __8,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action284(
        errors,
        db,
        __0,
        __1,
        __temp0,
        __6,
        __temp1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action465<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Keyword>, Location),
    __1: (Location, Spanned<Node>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
    __4: (Location, Spanned<Node>, Location),
    __5: (Location, Token<'input>, Location),
    __6: (Location, Spanned<Keyword>, Location),
    __7: (Location, Token<'input>, Location),
    __8: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
    __9: (Location, Spanned<Node>, Location),
    __10: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.0;
    let __end0 = __5.2;
    let __start1 = __7.0;
    let __end1 = __10.2;
    let __temp0 = __action393(
        errors,
        db,
        __2,
        __3,
        __4,
        __5,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action393(
        errors,
        db,
        __7,
        __8,
        __9,
        __10,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action284(
        errors,
        db,
        __0,
        __1,
        __temp0,
        __6,
        __temp1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action466<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Keyword>, Location),
    __1: (Location, Spanned<Node>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
    __4: (Location, Spanned<Node>, Location),
    __5: (Location, Token<'input>, Location),
    __6: (Location, Spanned<Keyword>, Location),
    __7: (Location, Token<'input>, Location),
    __8: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
    __9: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.0;
    let __end0 = __5.2;
    let __start1 = __7.0;
    let __end1 = __9.2;
    let __temp0 = __action393(
        errors,
        db,
        __2,
        __3,
        __4,
        __5,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action394(
        errors,
        db,
        __7,
        __8,
        __9,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action284(
        errors,
        db,
        __0,
        __1,
        __temp0,
        __6,
        __temp1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action467<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Keyword>, Location),
    __1: (Location, Spanned<Node>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
    __4: (Location, Token<'input>, Location),
    __5: (Location, Spanned<Keyword>, Location),
    __6: (Location, Token<'input>, Location),
    __7: (Location, Token<'input>, Location),
    __8: (Location, Spanned<Node>, Location),
    __9: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.0;
    let __end0 = __4.2;
    let __start1 = __6.0;
    let __end1 = __9.2;
    let __temp0 = __action394(
        errors,
        db,
        __2,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action387(
        errors,
        db,
        __6,
        __7,
        __8,
        __9,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action284(
        errors,
        db,
        __0,
        __1,
        __temp0,
        __5,
        __temp1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action468<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Keyword>, Location),
    __1: (Location, Spanned<Node>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
    __4: (Location, Token<'input>, Location),
    __5: (Location, Spanned<Keyword>, Location),
    __6: (Location, Token<'input>, Location),
    __7: (Location, Token<'input>, Location),
    __8: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.0;
    let __end0 = __4.2;
    let __start1 = __6.0;
    let __end1 = __8.2;
    let __temp0 = __action394(
        errors,
        db,
        __2,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action388(
        errors,
        db,
        __6,
        __7,
        __8,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action284(
        errors,
        db,
        __0,
        __1,
        __temp0,
        __5,
        __temp1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action469<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Keyword>, Location),
    __1: (Location, Spanned<Node>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
    __4: (Location, Token<'input>, Location),
    __5: (Location, Spanned<Keyword>, Location),
    __6: (Location, Token<'input>, Location),
    __7: (Location, Token<'input>, Location),
    __8: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
    __9: (Location, Spanned<Node>, Location),
    __10: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.0;
    let __end0 = __4.2;
    let __start1 = __6.0;
    let __end1 = __10.2;
    let __temp0 = __action394(
        errors,
        db,
        __2,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action389(
        errors,
        db,
        __6,
        __7,
        __8,
        __9,
        __10,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action284(
        errors,
        db,
        __0,
        __1,
        __temp0,
        __5,
        __temp1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action470<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Keyword>, Location),
    __1: (Location, Spanned<Node>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
    __4: (Location, Token<'input>, Location),
    __5: (Location, Spanned<Keyword>, Location),
    __6: (Location, Token<'input>, Location),
    __7: (Location, Token<'input>, Location),
    __8: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
    __9: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.0;
    let __end0 = __4.2;
    let __start1 = __6.0;
    let __end1 = __9.2;
    let __temp0 = __action394(
        errors,
        db,
        __2,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action390(
        errors,
        db,
        __6,
        __7,
        __8,
        __9,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action284(
        errors,
        db,
        __0,
        __1,
        __temp0,
        __5,
        __temp1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action471<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Keyword>, Location),
    __1: (Location, Spanned<Node>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
    __4: (Location, Token<'input>, Location),
    __5: (Location, Spanned<Keyword>, Location),
    __6: (Location, Token<'input>, Location),
    __7: (Location, Spanned<Node>, Location),
    __8: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.0;
    let __end0 = __4.2;
    let __start1 = __6.0;
    let __end1 = __8.2;
    let __temp0 = __action394(
        errors,
        db,
        __2,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action391(
        errors,
        db,
        __6,
        __7,
        __8,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action284(
        errors,
        db,
        __0,
        __1,
        __temp0,
        __5,
        __temp1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action472<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Keyword>, Location),
    __1: (Location, Spanned<Node>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
    __4: (Location, Token<'input>, Location),
    __5: (Location, Spanned<Keyword>, Location),
    __6: (Location, Token<'input>, Location),
    __7: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.0;
    let __end0 = __4.2;
    let __start1 = __6.0;
    let __end1 = __7.2;
    let __temp0 = __action394(
        errors,
        db,
        __2,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action392(
        errors,
        db,
        __6,
        __7,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action284(
        errors,
        db,
        __0,
        __1,
        __temp0,
        __5,
        __temp1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action473<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Keyword>, Location),
    __1: (Location, Spanned<Node>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
    __4: (Location, Token<'input>, Location),
    __5: (Location, Spanned<Keyword>, Location),
    __6: (Location, Token<'input>, Location),
    __7: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
    __8: (Location, Spanned<Node>, Location),
    __9: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.0;
    let __end0 = __4.2;
    let __start1 = __6.0;
    let __end1 = __9.2;
    let __temp0 = __action394(
        errors,
        db,
        __2,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action393(
        errors,
        db,
        __6,
        __7,
        __8,
        __9,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action284(
        errors,
        db,
        __0,
        __1,
        __temp0,
        __5,
        __temp1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action474<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Keyword>, Location),
    __1: (Location, Spanned<Node>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
    __4: (Location, Token<'input>, Location),
    __5: (Location, Spanned<Keyword>, Location),
    __6: (Location, Token<'input>, Location),
    __7: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
    __8: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.0;
    let __end0 = __4.2;
    let __start1 = __6.0;
    let __end1 = __8.2;
    let __temp0 = __action394(
        errors,
        db,
        __2,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    let __temp1 = __action394(
        errors,
        db,
        __6,
        __7,
        __8,
    );
    let __temp1 = (__start1, __temp1, __end1);
    __action284(
        errors,
        db,
        __0,
        __1,
        __temp0,
        __5,
        __temp1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action475<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Keyword>, Location),
    __1: (Location, Spanned<Ident>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Token<'input>, Location),
    __4: (Location, Spanned<Node>, Location),
    __5: (Location, Token<'input>, Location),
) -> (Spanned<Ident>, Block<Spanned<Node>>)
{
    let __start0 = __2.0;
    let __end0 = __5.2;
    let __temp0 = __action387(
        errors,
        db,
        __2,
        __3,
        __4,
        __5,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action314(
        errors,
        db,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action476<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Keyword>, Location),
    __1: (Location, Spanned<Ident>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Token<'input>, Location),
    __4: (Location, Token<'input>, Location),
) -> (Spanned<Ident>, Block<Spanned<Node>>)
{
    let __start0 = __2.0;
    let __end0 = __4.2;
    let __temp0 = __action388(
        errors,
        db,
        __2,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action314(
        errors,
        db,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action477<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Keyword>, Location),
    __1: (Location, Spanned<Ident>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Token<'input>, Location),
    __4: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
    __5: (Location, Spanned<Node>, Location),
    __6: (Location, Token<'input>, Location),
) -> (Spanned<Ident>, Block<Spanned<Node>>)
{
    let __start0 = __2.0;
    let __end0 = __6.2;
    let __temp0 = __action389(
        errors,
        db,
        __2,
        __3,
        __4,
        __5,
        __6,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action314(
        errors,
        db,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action478<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Keyword>, Location),
    __1: (Location, Spanned<Ident>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Token<'input>, Location),
    __4: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
    __5: (Location, Token<'input>, Location),
) -> (Spanned<Ident>, Block<Spanned<Node>>)
{
    let __start0 = __2.0;
    let __end0 = __5.2;
    let __temp0 = __action390(
        errors,
        db,
        __2,
        __3,
        __4,
        __5,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action314(
        errors,
        db,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action479<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Keyword>, Location),
    __1: (Location, Spanned<Ident>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Spanned<Node>, Location),
    __4: (Location, Token<'input>, Location),
) -> (Spanned<Ident>, Block<Spanned<Node>>)
{
    let __start0 = __2.0;
    let __end0 = __4.2;
    let __temp0 = __action391(
        errors,
        db,
        __2,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action314(
        errors,
        db,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action480<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Keyword>, Location),
    __1: (Location, Spanned<Ident>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Token<'input>, Location),
) -> (Spanned<Ident>, Block<Spanned<Node>>)
{
    let __start0 = __2.0;
    let __end0 = __3.2;
    let __temp0 = __action392(
        errors,
        db,
        __2,
        __3,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action314(
        errors,
        db,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action481<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Keyword>, Location),
    __1: (Location, Spanned<Ident>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
    __4: (Location, Spanned<Node>, Location),
    __5: (Location, Token<'input>, Location),
) -> (Spanned<Ident>, Block<Spanned<Node>>)
{
    let __start0 = __2.0;
    let __end0 = __5.2;
    let __temp0 = __action393(
        errors,
        db,
        __2,
        __3,
        __4,
        __5,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action314(
        errors,
        db,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action482<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Keyword>, Location),
    __1: (Location, Spanned<Ident>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
    __4: (Location, Token<'input>, Location),
) -> (Spanned<Ident>, Block<Spanned<Node>>)
{
    let __start0 = __2.0;
    let __end0 = __4.2;
    let __temp0 = __action394(
        errors,
        db,
        __2,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action314(
        errors,
        db,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action483<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Node>, Location),
) -> Vec<Spanned<Node>>
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action103(
        errors,
        db,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action192(
        errors,
        db,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action484<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __lookbehind: &Location,
    __lookahead: &Location,
) -> Vec<Spanned<Node>>
{
    let __start0 = *__lookbehind;
    let __end0 = *__lookahead;
    let __temp0 = __action104(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action192(
        errors,
        db,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action485<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
    __1: (Location, Spanned<Node>, Location),
) -> Vec<Spanned<Node>>
{
    let __start0 = __1.0;
    let __end0 = __1.2;
    let __temp0 = __action103(
        errors,
        db,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action193(
        errors,
        db,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action486<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
) -> Vec<Spanned<Node>>
{
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action104(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action193(
        errors,
        db,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action487<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Ident>, Location),
    __1: (Location, Token<'input>, Location),
    __2: (Location, Spanned<Node>, Location),
    __3: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.0;
    let __end0 = __2.2;
    let __temp0 = __action483(
        errors,
        db,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action276(
        errors,
        db,
        __0,
        __1,
        __temp0,
        __3,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action488<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Ident>, Location),
    __1: (Location, Token<'input>, Location),
    __2: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __1.2;
    let __end0 = __2.0;
    let __temp0 = __action484(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action276(
        errors,
        db,
        __0,
        __1,
        __temp0,
        __2,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action489<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Ident>, Location),
    __1: (Location, Token<'input>, Location),
    __2: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
    __3: (Location, Spanned<Node>, Location),
    __4: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.0;
    let __end0 = __3.2;
    let __temp0 = __action485(
        errors,
        db,
        __2,
        __3,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action276(
        errors,
        db,
        __0,
        __1,
        __temp0,
        __4,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action490<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Ident>, Location),
    __1: (Location, Token<'input>, Location),
    __2: (Location, alloc::vec::Vec<Spanned<Node>>, Location),
    __3: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.0;
    let __end0 = __2.2;
    let __temp0 = __action486(
        errors,
        db,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action276(
        errors,
        db,
        __0,
        __1,
        __temp0,
        __3,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action491<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<FnArg>, Location),
) -> Vec<Spanned<FnArg>>
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action108(
        errors,
        db,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action200(
        errors,
        db,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action492<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __lookbehind: &Location,
    __lookahead: &Location,
) -> Vec<Spanned<FnArg>>
{
    let __start0 = *__lookbehind;
    let __end0 = *__lookahead;
    let __temp0 = __action109(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action200(
        errors,
        db,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action493<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, alloc::vec::Vec<Spanned<FnArg>>, Location),
    __1: (Location, Spanned<FnArg>, Location),
) -> Vec<Spanned<FnArg>>
{
    let __start0 = __1.0;
    let __end0 = __1.2;
    let __temp0 = __action108(
        errors,
        db,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action201(
        errors,
        db,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action494<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, alloc::vec::Vec<Spanned<FnArg>>, Location),
) -> Vec<Spanned<FnArg>>
{
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action109(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action201(
        errors,
        db,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action495<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Ident>, Location),
    __1: (Location, Token<'input>, Location),
    __2: (Location, Spanned<FnArg>, Location),
    __3: (Location, Token<'input>, Location),
    __4: (Location, Token<'input>, Location),
    __5: (Location, Vec<Spanned<Ident>>, Location),
    __6: (Location, Token<'input>, Location),
    __7: (Location, Token<'input>, Location),
    __8: (Location, Spanned<Ident>, Location),
) -> Spanned<Prototype>
{
    let __start0 = __2.0;
    let __end0 = __2.2;
    let __temp0 = __action491(
        errors,
        db,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action295(
        errors,
        db,
        __0,
        __1,
        __temp0,
        __3,
        __4,
        __5,
        __6,
        __7,
        __8,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action496<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Ident>, Location),
    __1: (Location, Token<'input>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Token<'input>, Location),
    __4: (Location, Vec<Spanned<Ident>>, Location),
    __5: (Location, Token<'input>, Location),
    __6: (Location, Token<'input>, Location),
    __7: (Location, Spanned<Ident>, Location),
) -> Spanned<Prototype>
{
    let __start0 = __1.2;
    let __end0 = __2.0;
    let __temp0 = __action492(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action295(
        errors,
        db,
        __0,
        __1,
        __temp0,
        __2,
        __3,
        __4,
        __5,
        __6,
        __7,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action497<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Ident>, Location),
    __1: (Location, Token<'input>, Location),
    __2: (Location, alloc::vec::Vec<Spanned<FnArg>>, Location),
    __3: (Location, Spanned<FnArg>, Location),
    __4: (Location, Token<'input>, Location),
    __5: (Location, Token<'input>, Location),
    __6: (Location, Vec<Spanned<Ident>>, Location),
    __7: (Location, Token<'input>, Location),
    __8: (Location, Token<'input>, Location),
    __9: (Location, Spanned<Ident>, Location),
) -> Spanned<Prototype>
{
    let __start0 = __2.0;
    let __end0 = __3.2;
    let __temp0 = __action493(
        errors,
        db,
        __2,
        __3,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action295(
        errors,
        db,
        __0,
        __1,
        __temp0,
        __4,
        __5,
        __6,
        __7,
        __8,
        __9,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action498<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Ident>, Location),
    __1: (Location, Token<'input>, Location),
    __2: (Location, alloc::vec::Vec<Spanned<FnArg>>, Location),
    __3: (Location, Token<'input>, Location),
    __4: (Location, Token<'input>, Location),
    __5: (Location, Vec<Spanned<Ident>>, Location),
    __6: (Location, Token<'input>, Location),
    __7: (Location, Token<'input>, Location),
    __8: (Location, Spanned<Ident>, Location),
) -> Spanned<Prototype>
{
    let __start0 = __2.0;
    let __end0 = __2.2;
    let __temp0 = __action494(
        errors,
        db,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action295(
        errors,
        db,
        __0,
        __1,
        __temp0,
        __3,
        __4,
        __5,
        __6,
        __7,
        __8,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action499<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Ident>, Location),
    __1: (Location, Token<'input>, Location),
    __2: (Location, Spanned<FnArg>, Location),
    __3: (Location, Token<'input>, Location),
    __4: (Location, Token<'input>, Location),
    __5: (Location, Vec<Spanned<Ident>>, Location),
    __6: (Location, Token<'input>, Location),
) -> Spanned<Prototype>
{
    let __start0 = __2.0;
    let __end0 = __2.2;
    let __temp0 = __action491(
        errors,
        db,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action296(
        errors,
        db,
        __0,
        __1,
        __temp0,
        __3,
        __4,
        __5,
        __6,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action500<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Ident>, Location),
    __1: (Location, Token<'input>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Token<'input>, Location),
    __4: (Location, Vec<Spanned<Ident>>, Location),
    __5: (Location, Token<'input>, Location),
) -> Spanned<Prototype>
{
    let __start0 = __1.2;
    let __end0 = __2.0;
    let __temp0 = __action492(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action296(
        errors,
        db,
        __0,
        __1,
        __temp0,
        __2,
        __3,
        __4,
        __5,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action501<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Ident>, Location),
    __1: (Location, Token<'input>, Location),
    __2: (Location, alloc::vec::Vec<Spanned<FnArg>>, Location),
    __3: (Location, Spanned<FnArg>, Location),
    __4: (Location, Token<'input>, Location),
    __5: (Location, Token<'input>, Location),
    __6: (Location, Vec<Spanned<Ident>>, Location),
    __7: (Location, Token<'input>, Location),
) -> Spanned<Prototype>
{
    let __start0 = __2.0;
    let __end0 = __3.2;
    let __temp0 = __action493(
        errors,
        db,
        __2,
        __3,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action296(
        errors,
        db,
        __0,
        __1,
        __temp0,
        __4,
        __5,
        __6,
        __7,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action502<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Ident>, Location),
    __1: (Location, Token<'input>, Location),
    __2: (Location, alloc::vec::Vec<Spanned<FnArg>>, Location),
    __3: (Location, Token<'input>, Location),
    __4: (Location, Token<'input>, Location),
    __5: (Location, Vec<Spanned<Ident>>, Location),
    __6: (Location, Token<'input>, Location),
) -> Spanned<Prototype>
{
    let __start0 = __2.0;
    let __end0 = __2.2;
    let __temp0 = __action494(
        errors,
        db,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action296(
        errors,
        db,
        __0,
        __1,
        __temp0,
        __3,
        __4,
        __5,
        __6,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action503<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Ident>, Location),
) -> Vec<Spanned<Ident>>
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action114(
        errors,
        db,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action212(
        errors,
        db,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action504<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __lookbehind: &Location,
    __lookahead: &Location,
) -> Vec<Spanned<Ident>>
{
    let __start0 = *__lookbehind;
    let __end0 = *__lookahead;
    let __temp0 = __action115(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action212(
        errors,
        db,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action505<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, alloc::vec::Vec<Spanned<Ident>>, Location),
    __1: (Location, Spanned<Ident>, Location),
) -> Vec<Spanned<Ident>>
{
    let __start0 = __1.0;
    let __end0 = __1.2;
    let __temp0 = __action114(
        errors,
        db,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action213(
        errors,
        db,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action506<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, alloc::vec::Vec<Spanned<Ident>>, Location),
) -> Vec<Spanned<Ident>>
{
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action115(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action213(
        errors,
        db,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action507<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Ident>, Location),
) -> Vec<Spanned<Ident>>
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action114(
        errors,
        db,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action208(
        errors,
        db,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action508<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __lookbehind: &Location,
    __lookahead: &Location,
) -> Vec<Spanned<Ident>>
{
    let __start0 = *__lookbehind;
    let __end0 = *__lookahead;
    let __temp0 = __action115(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action208(
        errors,
        db,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action509<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, alloc::vec::Vec<Spanned<Ident>>, Location),
    __1: (Location, Spanned<Ident>, Location),
) -> Vec<Spanned<Ident>>
{
    let __start0 = __1.0;
    let __end0 = __1.2;
    let __temp0 = __action114(
        errors,
        db,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action209(
        errors,
        db,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action510<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, alloc::vec::Vec<Spanned<Ident>>, Location),
) -> Vec<Spanned<Ident>>
{
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action115(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action209(
        errors,
        db,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action511<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, &'input str, Location),
    __1: (Location, Token<'input>, Location),
    __2: (Location, Spanned<Ident>, Location),
    __3: (Location, Token<'input>, Location),
) -> Spanned<Ident>
{
    let __start0 = __2.0;
    let __end0 = __2.2;
    let __temp0 = __action503(
        errors,
        db,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action281(
        errors,
        db,
        __0,
        __1,
        __temp0,
        __3,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action512<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, &'input str, Location),
    __1: (Location, Token<'input>, Location),
    __2: (Location, Token<'input>, Location),
) -> Spanned<Ident>
{
    let __start0 = __1.2;
    let __end0 = __2.0;
    let __temp0 = __action504(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action281(
        errors,
        db,
        __0,
        __1,
        __temp0,
        __2,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action513<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, &'input str, Location),
    __1: (Location, Token<'input>, Location),
    __2: (Location, alloc::vec::Vec<Spanned<Ident>>, Location),
    __3: (Location, Spanned<Ident>, Location),
    __4: (Location, Token<'input>, Location),
) -> Spanned<Ident>
{
    let __start0 = __2.0;
    let __end0 = __3.2;
    let __temp0 = __action505(
        errors,
        db,
        __2,
        __3,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action281(
        errors,
        db,
        __0,
        __1,
        __temp0,
        __4,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action514<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, &'input str, Location),
    __1: (Location, Token<'input>, Location),
    __2: (Location, alloc::vec::Vec<Spanned<Ident>>, Location),
    __3: (Location, Token<'input>, Location),
) -> Spanned<Ident>
{
    let __start0 = __2.0;
    let __end0 = __2.2;
    let __temp0 = __action506(
        errors,
        db,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action281(
        errors,
        db,
        __0,
        __1,
        __temp0,
        __3,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action515<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Ident>, Location),
    __1: (Location, Token<'input>, Location),
    __2: (Location, Spanned<FnArg>, Location),
    __3: (Location, Token<'input>, Location),
    __4: (Location, Token<'input>, Location),
    __5: (Location, Spanned<Ident>, Location),
    __6: (Location, Token<'input>, Location),
    __7: (Location, Token<'input>, Location),
    __8: (Location, Spanned<Ident>, Location),
) -> Spanned<Prototype>
{
    let __start0 = __5.0;
    let __end0 = __5.2;
    let __temp0 = __action503(
        errors,
        db,
        __5,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action495(
        errors,
        db,
        __0,
        __1,
        __2,
        __3,
        __4,
        __temp0,
        __6,
        __7,
        __8,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action516<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Ident>, Location),
    __1: (Location, Token<'input>, Location),
    __2: (Location, Spanned<FnArg>, Location),
    __3: (Location, Token<'input>, Location),
    __4: (Location, Token<'input>, Location),
    __5: (Location, Token<'input>, Location),
    __6: (Location, Token<'input>, Location),
    __7: (Location, Spanned<Ident>, Location),
) -> Spanned<Prototype>
{
    let __start0 = __4.2;
    let __end0 = __5.0;
    let __temp0 = __action504(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action495(
        errors,
        db,
        __0,
        __1,
        __2,
        __3,
        __4,
        __temp0,
        __5,
        __6,
        __7,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action517<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Ident>, Location),
    __1: (Location, Token<'input>, Location),
    __2: (Location, Spanned<FnArg>, Location),
    __3: (Location, Token<'input>, Location),
    __4: (Location, Token<'input>, Location),
    __5: (Location, alloc::vec::Vec<Spanned<Ident>>, Location),
    __6: (Location, Spanned<Ident>, Location),
    __7: (Location, Token<'input>, Location),
    __8: (Location, Token<'input>, Location),
    __9: (Location, Spanned<Ident>, Location),
) -> Spanned<Prototype>
{
    let __start0 = __5.0;
    let __end0 = __6.2;
    let __temp0 = __action505(
        errors,
        db,
        __5,
        __6,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action495(
        errors,
        db,
        __0,
        __1,
        __2,
        __3,
        __4,
        __temp0,
        __7,
        __8,
        __9,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action518<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Ident>, Location),
    __1: (Location, Token<'input>, Location),
    __2: (Location, Spanned<FnArg>, Location),
    __3: (Location, Token<'input>, Location),
    __4: (Location, Token<'input>, Location),
    __5: (Location, alloc::vec::Vec<Spanned<Ident>>, Location),
    __6: (Location, Token<'input>, Location),
    __7: (Location, Token<'input>, Location),
    __8: (Location, Spanned<Ident>, Location),
) -> Spanned<Prototype>
{
    let __start0 = __5.0;
    let __end0 = __5.2;
    let __temp0 = __action506(
        errors,
        db,
        __5,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action495(
        errors,
        db,
        __0,
        __1,
        __2,
        __3,
        __4,
        __temp0,
        __6,
        __7,
        __8,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action519<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Ident>, Location),
    __1: (Location, Token<'input>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Token<'input>, Location),
    __4: (Location, Spanned<Ident>, Location),
    __5: (Location, Token<'input>, Location),
    __6: (Location, Token<'input>, Location),
    __7: (Location, Spanned<Ident>, Location),
) -> Spanned<Prototype>
{
    let __start0 = __4.0;
    let __end0 = __4.2;
    let __temp0 = __action503(
        errors,
        db,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action496(
        errors,
        db,
        __0,
        __1,
        __2,
        __3,
        __temp0,
        __5,
        __6,
        __7,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action520<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Ident>, Location),
    __1: (Location, Token<'input>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Token<'input>, Location),
    __4: (Location, Token<'input>, Location),
    __5: (Location, Token<'input>, Location),
    __6: (Location, Spanned<Ident>, Location),
) -> Spanned<Prototype>
{
    let __start0 = __3.2;
    let __end0 = __4.0;
    let __temp0 = __action504(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action496(
        errors,
        db,
        __0,
        __1,
        __2,
        __3,
        __temp0,
        __4,
        __5,
        __6,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action521<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Ident>, Location),
    __1: (Location, Token<'input>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Token<'input>, Location),
    __4: (Location, alloc::vec::Vec<Spanned<Ident>>, Location),
    __5: (Location, Spanned<Ident>, Location),
    __6: (Location, Token<'input>, Location),
    __7: (Location, Token<'input>, Location),
    __8: (Location, Spanned<Ident>, Location),
) -> Spanned<Prototype>
{
    let __start0 = __4.0;
    let __end0 = __5.2;
    let __temp0 = __action505(
        errors,
        db,
        __4,
        __5,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action496(
        errors,
        db,
        __0,
        __1,
        __2,
        __3,
        __temp0,
        __6,
        __7,
        __8,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action522<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Ident>, Location),
    __1: (Location, Token<'input>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Token<'input>, Location),
    __4: (Location, alloc::vec::Vec<Spanned<Ident>>, Location),
    __5: (Location, Token<'input>, Location),
    __6: (Location, Token<'input>, Location),
    __7: (Location, Spanned<Ident>, Location),
) -> Spanned<Prototype>
{
    let __start0 = __4.0;
    let __end0 = __4.2;
    let __temp0 = __action506(
        errors,
        db,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action496(
        errors,
        db,
        __0,
        __1,
        __2,
        __3,
        __temp0,
        __5,
        __6,
        __7,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action523<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Ident>, Location),
    __1: (Location, Token<'input>, Location),
    __2: (Location, alloc::vec::Vec<Spanned<FnArg>>, Location),
    __3: (Location, Spanned<FnArg>, Location),
    __4: (Location, Token<'input>, Location),
    __5: (Location, Token<'input>, Location),
    __6: (Location, Spanned<Ident>, Location),
    __7: (Location, Token<'input>, Location),
    __8: (Location, Token<'input>, Location),
    __9: (Location, Spanned<Ident>, Location),
) -> Spanned<Prototype>
{
    let __start0 = __6.0;
    let __end0 = __6.2;
    let __temp0 = __action503(
        errors,
        db,
        __6,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action497(
        errors,
        db,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __temp0,
        __7,
        __8,
        __9,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action524<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Ident>, Location),
    __1: (Location, Token<'input>, Location),
    __2: (Location, alloc::vec::Vec<Spanned<FnArg>>, Location),
    __3: (Location, Spanned<FnArg>, Location),
    __4: (Location, Token<'input>, Location),
    __5: (Location, Token<'input>, Location),
    __6: (Location, Token<'input>, Location),
    __7: (Location, Token<'input>, Location),
    __8: (Location, Spanned<Ident>, Location),
) -> Spanned<Prototype>
{
    let __start0 = __5.2;
    let __end0 = __6.0;
    let __temp0 = __action504(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action497(
        errors,
        db,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __temp0,
        __6,
        __7,
        __8,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action525<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Ident>, Location),
    __1: (Location, Token<'input>, Location),
    __2: (Location, alloc::vec::Vec<Spanned<FnArg>>, Location),
    __3: (Location, Spanned<FnArg>, Location),
    __4: (Location, Token<'input>, Location),
    __5: (Location, Token<'input>, Location),
    __6: (Location, alloc::vec::Vec<Spanned<Ident>>, Location),
    __7: (Location, Spanned<Ident>, Location),
    __8: (Location, Token<'input>, Location),
    __9: (Location, Token<'input>, Location),
    __10: (Location, Spanned<Ident>, Location),
) -> Spanned<Prototype>
{
    let __start0 = __6.0;
    let __end0 = __7.2;
    let __temp0 = __action505(
        errors,
        db,
        __6,
        __7,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action497(
        errors,
        db,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __temp0,
        __8,
        __9,
        __10,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action526<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Ident>, Location),
    __1: (Location, Token<'input>, Location),
    __2: (Location, alloc::vec::Vec<Spanned<FnArg>>, Location),
    __3: (Location, Spanned<FnArg>, Location),
    __4: (Location, Token<'input>, Location),
    __5: (Location, Token<'input>, Location),
    __6: (Location, alloc::vec::Vec<Spanned<Ident>>, Location),
    __7: (Location, Token<'input>, Location),
    __8: (Location, Token<'input>, Location),
    __9: (Location, Spanned<Ident>, Location),
) -> Spanned<Prototype>
{
    let __start0 = __6.0;
    let __end0 = __6.2;
    let __temp0 = __action506(
        errors,
        db,
        __6,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action497(
        errors,
        db,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __temp0,
        __7,
        __8,
        __9,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action527<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Ident>, Location),
    __1: (Location, Token<'input>, Location),
    __2: (Location, alloc::vec::Vec<Spanned<FnArg>>, Location),
    __3: (Location, Token<'input>, Location),
    __4: (Location, Token<'input>, Location),
    __5: (Location, Spanned<Ident>, Location),
    __6: (Location, Token<'input>, Location),
    __7: (Location, Token<'input>, Location),
    __8: (Location, Spanned<Ident>, Location),
) -> Spanned<Prototype>
{
    let __start0 = __5.0;
    let __end0 = __5.2;
    let __temp0 = __action503(
        errors,
        db,
        __5,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action498(
        errors,
        db,
        __0,
        __1,
        __2,
        __3,
        __4,
        __temp0,
        __6,
        __7,
        __8,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action528<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Ident>, Location),
    __1: (Location, Token<'input>, Location),
    __2: (Location, alloc::vec::Vec<Spanned<FnArg>>, Location),
    __3: (Location, Token<'input>, Location),
    __4: (Location, Token<'input>, Location),
    __5: (Location, Token<'input>, Location),
    __6: (Location, Token<'input>, Location),
    __7: (Location, Spanned<Ident>, Location),
) -> Spanned<Prototype>
{
    let __start0 = __4.2;
    let __end0 = __5.0;
    let __temp0 = __action504(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action498(
        errors,
        db,
        __0,
        __1,
        __2,
        __3,
        __4,
        __temp0,
        __5,
        __6,
        __7,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action529<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Ident>, Location),
    __1: (Location, Token<'input>, Location),
    __2: (Location, alloc::vec::Vec<Spanned<FnArg>>, Location),
    __3: (Location, Token<'input>, Location),
    __4: (Location, Token<'input>, Location),
    __5: (Location, alloc::vec::Vec<Spanned<Ident>>, Location),
    __6: (Location, Spanned<Ident>, Location),
    __7: (Location, Token<'input>, Location),
    __8: (Location, Token<'input>, Location),
    __9: (Location, Spanned<Ident>, Location),
) -> Spanned<Prototype>
{
    let __start0 = __5.0;
    let __end0 = __6.2;
    let __temp0 = __action505(
        errors,
        db,
        __5,
        __6,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action498(
        errors,
        db,
        __0,
        __1,
        __2,
        __3,
        __4,
        __temp0,
        __7,
        __8,
        __9,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action530<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Ident>, Location),
    __1: (Location, Token<'input>, Location),
    __2: (Location, alloc::vec::Vec<Spanned<FnArg>>, Location),
    __3: (Location, Token<'input>, Location),
    __4: (Location, Token<'input>, Location),
    __5: (Location, alloc::vec::Vec<Spanned<Ident>>, Location),
    __6: (Location, Token<'input>, Location),
    __7: (Location, Token<'input>, Location),
    __8: (Location, Spanned<Ident>, Location),
) -> Spanned<Prototype>
{
    let __start0 = __5.0;
    let __end0 = __5.2;
    let __temp0 = __action506(
        errors,
        db,
        __5,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action498(
        errors,
        db,
        __0,
        __1,
        __2,
        __3,
        __4,
        __temp0,
        __6,
        __7,
        __8,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action531<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Ident>, Location),
    __1: (Location, Token<'input>, Location),
    __2: (Location, Spanned<FnArg>, Location),
    __3: (Location, Token<'input>, Location),
    __4: (Location, Token<'input>, Location),
    __5: (Location, Spanned<Ident>, Location),
    __6: (Location, Token<'input>, Location),
) -> Spanned<Prototype>
{
    let __start0 = __5.0;
    let __end0 = __5.2;
    let __temp0 = __action503(
        errors,
        db,
        __5,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action499(
        errors,
        db,
        __0,
        __1,
        __2,
        __3,
        __4,
        __temp0,
        __6,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action532<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Ident>, Location),
    __1: (Location, Token<'input>, Location),
    __2: (Location, Spanned<FnArg>, Location),
    __3: (Location, Token<'input>, Location),
    __4: (Location, Token<'input>, Location),
    __5: (Location, Token<'input>, Location),
) -> Spanned<Prototype>
{
    let __start0 = __4.2;
    let __end0 = __5.0;
    let __temp0 = __action504(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action499(
        errors,
        db,
        __0,
        __1,
        __2,
        __3,
        __4,
        __temp0,
        __5,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action533<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Ident>, Location),
    __1: (Location, Token<'input>, Location),
    __2: (Location, Spanned<FnArg>, Location),
    __3: (Location, Token<'input>, Location),
    __4: (Location, Token<'input>, Location),
    __5: (Location, alloc::vec::Vec<Spanned<Ident>>, Location),
    __6: (Location, Spanned<Ident>, Location),
    __7: (Location, Token<'input>, Location),
) -> Spanned<Prototype>
{
    let __start0 = __5.0;
    let __end0 = __6.2;
    let __temp0 = __action505(
        errors,
        db,
        __5,
        __6,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action499(
        errors,
        db,
        __0,
        __1,
        __2,
        __3,
        __4,
        __temp0,
        __7,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action534<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Ident>, Location),
    __1: (Location, Token<'input>, Location),
    __2: (Location, Spanned<FnArg>, Location),
    __3: (Location, Token<'input>, Location),
    __4: (Location, Token<'input>, Location),
    __5: (Location, alloc::vec::Vec<Spanned<Ident>>, Location),
    __6: (Location, Token<'input>, Location),
) -> Spanned<Prototype>
{
    let __start0 = __5.0;
    let __end0 = __5.2;
    let __temp0 = __action506(
        errors,
        db,
        __5,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action499(
        errors,
        db,
        __0,
        __1,
        __2,
        __3,
        __4,
        __temp0,
        __6,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action535<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Ident>, Location),
    __1: (Location, Token<'input>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Token<'input>, Location),
    __4: (Location, Spanned<Ident>, Location),
    __5: (Location, Token<'input>, Location),
) -> Spanned<Prototype>
{
    let __start0 = __4.0;
    let __end0 = __4.2;
    let __temp0 = __action503(
        errors,
        db,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action500(
        errors,
        db,
        __0,
        __1,
        __2,
        __3,
        __temp0,
        __5,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action536<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Ident>, Location),
    __1: (Location, Token<'input>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Token<'input>, Location),
    __4: (Location, Token<'input>, Location),
) -> Spanned<Prototype>
{
    let __start0 = __3.2;
    let __end0 = __4.0;
    let __temp0 = __action504(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action500(
        errors,
        db,
        __0,
        __1,
        __2,
        __3,
        __temp0,
        __4,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action537<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Ident>, Location),
    __1: (Location, Token<'input>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Token<'input>, Location),
    __4: (Location, alloc::vec::Vec<Spanned<Ident>>, Location),
    __5: (Location, Spanned<Ident>, Location),
    __6: (Location, Token<'input>, Location),
) -> Spanned<Prototype>
{
    let __start0 = __4.0;
    let __end0 = __5.2;
    let __temp0 = __action505(
        errors,
        db,
        __4,
        __5,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action500(
        errors,
        db,
        __0,
        __1,
        __2,
        __3,
        __temp0,
        __6,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action538<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Ident>, Location),
    __1: (Location, Token<'input>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Token<'input>, Location),
    __4: (Location, alloc::vec::Vec<Spanned<Ident>>, Location),
    __5: (Location, Token<'input>, Location),
) -> Spanned<Prototype>
{
    let __start0 = __4.0;
    let __end0 = __4.2;
    let __temp0 = __action506(
        errors,
        db,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action500(
        errors,
        db,
        __0,
        __1,
        __2,
        __3,
        __temp0,
        __5,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action539<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Ident>, Location),
    __1: (Location, Token<'input>, Location),
    __2: (Location, alloc::vec::Vec<Spanned<FnArg>>, Location),
    __3: (Location, Spanned<FnArg>, Location),
    __4: (Location, Token<'input>, Location),
    __5: (Location, Token<'input>, Location),
    __6: (Location, Spanned<Ident>, Location),
    __7: (Location, Token<'input>, Location),
) -> Spanned<Prototype>
{
    let __start0 = __6.0;
    let __end0 = __6.2;
    let __temp0 = __action503(
        errors,
        db,
        __6,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action501(
        errors,
        db,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __temp0,
        __7,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action540<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Ident>, Location),
    __1: (Location, Token<'input>, Location),
    __2: (Location, alloc::vec::Vec<Spanned<FnArg>>, Location),
    __3: (Location, Spanned<FnArg>, Location),
    __4: (Location, Token<'input>, Location),
    __5: (Location, Token<'input>, Location),
    __6: (Location, Token<'input>, Location),
) -> Spanned<Prototype>
{
    let __start0 = __5.2;
    let __end0 = __6.0;
    let __temp0 = __action504(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action501(
        errors,
        db,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __temp0,
        __6,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action541<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Ident>, Location),
    __1: (Location, Token<'input>, Location),
    __2: (Location, alloc::vec::Vec<Spanned<FnArg>>, Location),
    __3: (Location, Spanned<FnArg>, Location),
    __4: (Location, Token<'input>, Location),
    __5: (Location, Token<'input>, Location),
    __6: (Location, alloc::vec::Vec<Spanned<Ident>>, Location),
    __7: (Location, Spanned<Ident>, Location),
    __8: (Location, Token<'input>, Location),
) -> Spanned<Prototype>
{
    let __start0 = __6.0;
    let __end0 = __7.2;
    let __temp0 = __action505(
        errors,
        db,
        __6,
        __7,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action501(
        errors,
        db,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __temp0,
        __8,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action542<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Ident>, Location),
    __1: (Location, Token<'input>, Location),
    __2: (Location, alloc::vec::Vec<Spanned<FnArg>>, Location),
    __3: (Location, Spanned<FnArg>, Location),
    __4: (Location, Token<'input>, Location),
    __5: (Location, Token<'input>, Location),
    __6: (Location, alloc::vec::Vec<Spanned<Ident>>, Location),
    __7: (Location, Token<'input>, Location),
) -> Spanned<Prototype>
{
    let __start0 = __6.0;
    let __end0 = __6.2;
    let __temp0 = __action506(
        errors,
        db,
        __6,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action501(
        errors,
        db,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __temp0,
        __7,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action543<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Ident>, Location),
    __1: (Location, Token<'input>, Location),
    __2: (Location, alloc::vec::Vec<Spanned<FnArg>>, Location),
    __3: (Location, Token<'input>, Location),
    __4: (Location, Token<'input>, Location),
    __5: (Location, Spanned<Ident>, Location),
    __6: (Location, Token<'input>, Location),
) -> Spanned<Prototype>
{
    let __start0 = __5.0;
    let __end0 = __5.2;
    let __temp0 = __action503(
        errors,
        db,
        __5,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action502(
        errors,
        db,
        __0,
        __1,
        __2,
        __3,
        __4,
        __temp0,
        __6,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action544<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Ident>, Location),
    __1: (Location, Token<'input>, Location),
    __2: (Location, alloc::vec::Vec<Spanned<FnArg>>, Location),
    __3: (Location, Token<'input>, Location),
    __4: (Location, Token<'input>, Location),
    __5: (Location, Token<'input>, Location),
) -> Spanned<Prototype>
{
    let __start0 = __4.2;
    let __end0 = __5.0;
    let __temp0 = __action504(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action502(
        errors,
        db,
        __0,
        __1,
        __2,
        __3,
        __4,
        __temp0,
        __5,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action545<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Ident>, Location),
    __1: (Location, Token<'input>, Location),
    __2: (Location, alloc::vec::Vec<Spanned<FnArg>>, Location),
    __3: (Location, Token<'input>, Location),
    __4: (Location, Token<'input>, Location),
    __5: (Location, alloc::vec::Vec<Spanned<Ident>>, Location),
    __6: (Location, Spanned<Ident>, Location),
    __7: (Location, Token<'input>, Location),
) -> Spanned<Prototype>
{
    let __start0 = __5.0;
    let __end0 = __6.2;
    let __temp0 = __action505(
        errors,
        db,
        __5,
        __6,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action502(
        errors,
        db,
        __0,
        __1,
        __2,
        __3,
        __4,
        __temp0,
        __7,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action546<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Ident>, Location),
    __1: (Location, Token<'input>, Location),
    __2: (Location, alloc::vec::Vec<Spanned<FnArg>>, Location),
    __3: (Location, Token<'input>, Location),
    __4: (Location, Token<'input>, Location),
    __5: (Location, alloc::vec::Vec<Spanned<Ident>>, Location),
    __6: (Location, Token<'input>, Location),
) -> Spanned<Prototype>
{
    let __start0 = __5.0;
    let __end0 = __5.2;
    let __temp0 = __action506(
        errors,
        db,
        __5,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action502(
        errors,
        db,
        __0,
        __1,
        __2,
        __3,
        __4,
        __temp0,
        __6,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action547<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Token<'input>, Location),
    __1: (Location, Spanned<Ident>, Location),
    __2: (Location, Token<'input>, Location),
) -> Spanned<Vec<Spanned<Ident>>>
{
    let __start0 = __1.0;
    let __end0 = __1.2;
    let __temp0 = __action503(
        errors,
        db,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action307(
        errors,
        db,
        __0,
        __temp0,
        __2,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action548<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Token<'input>, Location),
    __1: (Location, Token<'input>, Location),
) -> Spanned<Vec<Spanned<Ident>>>
{
    let __start0 = __0.2;
    let __end0 = __1.0;
    let __temp0 = __action504(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action307(
        errors,
        db,
        __0,
        __temp0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action549<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Token<'input>, Location),
    __1: (Location, alloc::vec::Vec<Spanned<Ident>>, Location),
    __2: (Location, Spanned<Ident>, Location),
    __3: (Location, Token<'input>, Location),
) -> Spanned<Vec<Spanned<Ident>>>
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action505(
        errors,
        db,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action307(
        errors,
        db,
        __0,
        __temp0,
        __3,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action550<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Token<'input>, Location),
    __1: (Location, alloc::vec::Vec<Spanned<Ident>>, Location),
    __2: (Location, Token<'input>, Location),
) -> Spanned<Vec<Spanned<Ident>>>
{
    let __start0 = __1.0;
    let __end0 = __1.2;
    let __temp0 = __action506(
        errors,
        db,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action307(
        errors,
        db,
        __0,
        __temp0,
        __2,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action551<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<KeywordAndVisibility>, Location),
    __1: (Location, Token<'input>, Location),
    __2: (Location, Spanned<Ident>, Location),
    __3: (Location, Token<'input>, Location),
    __4: (Location, Spanned<Keyword>, Location),
    __5: (Location, Spanned<Ident>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.0;
    let __end0 = __2.2;
    let __temp0 = __action503(
        errors,
        db,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action309(
        errors,
        db,
        __0,
        __1,
        __temp0,
        __3,
        __4,
        __5,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action552<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<KeywordAndVisibility>, Location),
    __1: (Location, Token<'input>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Spanned<Keyword>, Location),
    __4: (Location, Spanned<Ident>, Location),
) -> Spanned<Node>
{
    let __start0 = __1.2;
    let __end0 = __2.0;
    let __temp0 = __action504(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action309(
        errors,
        db,
        __0,
        __1,
        __temp0,
        __2,
        __3,
        __4,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action553<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<KeywordAndVisibility>, Location),
    __1: (Location, Token<'input>, Location),
    __2: (Location, alloc::vec::Vec<Spanned<Ident>>, Location),
    __3: (Location, Spanned<Ident>, Location),
    __4: (Location, Token<'input>, Location),
    __5: (Location, Spanned<Keyword>, Location),
    __6: (Location, Spanned<Ident>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.0;
    let __end0 = __3.2;
    let __temp0 = __action505(
        errors,
        db,
        __2,
        __3,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action309(
        errors,
        db,
        __0,
        __1,
        __temp0,
        __4,
        __5,
        __6,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action554<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<KeywordAndVisibility>, Location),
    __1: (Location, Token<'input>, Location),
    __2: (Location, alloc::vec::Vec<Spanned<Ident>>, Location),
    __3: (Location, Token<'input>, Location),
    __4: (Location, Spanned<Keyword>, Location),
    __5: (Location, Spanned<Ident>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.0;
    let __end0 = __2.2;
    let __temp0 = __action506(
        errors,
        db,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action309(
        errors,
        db,
        __0,
        __1,
        __temp0,
        __3,
        __4,
        __5,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action555<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<KeywordAndVisibility>, Location),
    __1: (Location, Spanned<Ident>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Spanned<Ident>, Location),
    __4: (Location, Token<'input>, Location),
    __5: (Location, Token<'input>, Location),
    __6: (Location, Spanned<Prototype>, Location),
    __7: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __3.0;
    let __end0 = __3.2;
    let __temp0 = __action507(
        errors,
        db,
        __3,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action375(
        errors,
        db,
        __0,
        __1,
        __2,
        __temp0,
        __4,
        __5,
        __6,
        __7,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action556<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<KeywordAndVisibility>, Location),
    __1: (Location, Spanned<Ident>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Token<'input>, Location),
    __4: (Location, Token<'input>, Location),
    __5: (Location, Spanned<Prototype>, Location),
    __6: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.2;
    let __end0 = __3.0;
    let __temp0 = __action508(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action375(
        errors,
        db,
        __0,
        __1,
        __2,
        __temp0,
        __3,
        __4,
        __5,
        __6,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action557<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<KeywordAndVisibility>, Location),
    __1: (Location, Spanned<Ident>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, alloc::vec::Vec<Spanned<Ident>>, Location),
    __4: (Location, Spanned<Ident>, Location),
    __5: (Location, Token<'input>, Location),
    __6: (Location, Token<'input>, Location),
    __7: (Location, Spanned<Prototype>, Location),
    __8: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __3.0;
    let __end0 = __4.2;
    let __temp0 = __action509(
        errors,
        db,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action375(
        errors,
        db,
        __0,
        __1,
        __2,
        __temp0,
        __5,
        __6,
        __7,
        __8,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action558<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<KeywordAndVisibility>, Location),
    __1: (Location, Spanned<Ident>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, alloc::vec::Vec<Spanned<Ident>>, Location),
    __4: (Location, Token<'input>, Location),
    __5: (Location, Token<'input>, Location),
    __6: (Location, Spanned<Prototype>, Location),
    __7: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __3.0;
    let __end0 = __3.2;
    let __temp0 = __action510(
        errors,
        db,
        __3,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action375(
        errors,
        db,
        __0,
        __1,
        __2,
        __temp0,
        __4,
        __5,
        __6,
        __7,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action559<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<KeywordAndVisibility>, Location),
    __1: (Location, Spanned<Ident>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Spanned<Ident>, Location),
    __4: (Location, Token<'input>, Location),
    __5: (Location, Token<'input>, Location),
    __6: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __3.0;
    let __end0 = __3.2;
    let __temp0 = __action507(
        errors,
        db,
        __3,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action376(
        errors,
        db,
        __0,
        __1,
        __2,
        __temp0,
        __4,
        __5,
        __6,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action560<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<KeywordAndVisibility>, Location),
    __1: (Location, Spanned<Ident>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Token<'input>, Location),
    __4: (Location, Token<'input>, Location),
    __5: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.2;
    let __end0 = __3.0;
    let __temp0 = __action508(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action376(
        errors,
        db,
        __0,
        __1,
        __2,
        __temp0,
        __3,
        __4,
        __5,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action561<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<KeywordAndVisibility>, Location),
    __1: (Location, Spanned<Ident>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, alloc::vec::Vec<Spanned<Ident>>, Location),
    __4: (Location, Spanned<Ident>, Location),
    __5: (Location, Token<'input>, Location),
    __6: (Location, Token<'input>, Location),
    __7: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __3.0;
    let __end0 = __4.2;
    let __temp0 = __action509(
        errors,
        db,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action376(
        errors,
        db,
        __0,
        __1,
        __2,
        __temp0,
        __5,
        __6,
        __7,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action562<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<KeywordAndVisibility>, Location),
    __1: (Location, Spanned<Ident>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, alloc::vec::Vec<Spanned<Ident>>, Location),
    __4: (Location, Token<'input>, Location),
    __5: (Location, Token<'input>, Location),
    __6: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __3.0;
    let __end0 = __3.2;
    let __temp0 = __action510(
        errors,
        db,
        __3,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action376(
        errors,
        db,
        __0,
        __1,
        __2,
        __temp0,
        __4,
        __5,
        __6,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action563<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<KeywordAndVisibility>, Location),
    __1: (Location, Spanned<Ident>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Spanned<Ident>, Location),
    __4: (Location, Token<'input>, Location),
    __5: (Location, Token<'input>, Location),
    __6: (Location, alloc::vec::Vec<Spanned<Prototype>>, Location),
    __7: (Location, Spanned<Prototype>, Location),
    __8: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __3.0;
    let __end0 = __3.2;
    let __temp0 = __action507(
        errors,
        db,
        __3,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action377(
        errors,
        db,
        __0,
        __1,
        __2,
        __temp0,
        __4,
        __5,
        __6,
        __7,
        __8,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action564<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<KeywordAndVisibility>, Location),
    __1: (Location, Spanned<Ident>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Token<'input>, Location),
    __4: (Location, Token<'input>, Location),
    __5: (Location, alloc::vec::Vec<Spanned<Prototype>>, Location),
    __6: (Location, Spanned<Prototype>, Location),
    __7: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.2;
    let __end0 = __3.0;
    let __temp0 = __action508(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action377(
        errors,
        db,
        __0,
        __1,
        __2,
        __temp0,
        __3,
        __4,
        __5,
        __6,
        __7,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action565<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<KeywordAndVisibility>, Location),
    __1: (Location, Spanned<Ident>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, alloc::vec::Vec<Spanned<Ident>>, Location),
    __4: (Location, Spanned<Ident>, Location),
    __5: (Location, Token<'input>, Location),
    __6: (Location, Token<'input>, Location),
    __7: (Location, alloc::vec::Vec<Spanned<Prototype>>, Location),
    __8: (Location, Spanned<Prototype>, Location),
    __9: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __3.0;
    let __end0 = __4.2;
    let __temp0 = __action509(
        errors,
        db,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action377(
        errors,
        db,
        __0,
        __1,
        __2,
        __temp0,
        __5,
        __6,
        __7,
        __8,
        __9,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action566<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<KeywordAndVisibility>, Location),
    __1: (Location, Spanned<Ident>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, alloc::vec::Vec<Spanned<Ident>>, Location),
    __4: (Location, Token<'input>, Location),
    __5: (Location, Token<'input>, Location),
    __6: (Location, alloc::vec::Vec<Spanned<Prototype>>, Location),
    __7: (Location, Spanned<Prototype>, Location),
    __8: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __3.0;
    let __end0 = __3.2;
    let __temp0 = __action510(
        errors,
        db,
        __3,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action377(
        errors,
        db,
        __0,
        __1,
        __2,
        __temp0,
        __4,
        __5,
        __6,
        __7,
        __8,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action567<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<KeywordAndVisibility>, Location),
    __1: (Location, Spanned<Ident>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Spanned<Ident>, Location),
    __4: (Location, Token<'input>, Location),
    __5: (Location, Token<'input>, Location),
    __6: (Location, alloc::vec::Vec<Spanned<Prototype>>, Location),
    __7: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __3.0;
    let __end0 = __3.2;
    let __temp0 = __action507(
        errors,
        db,
        __3,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action378(
        errors,
        db,
        __0,
        __1,
        __2,
        __temp0,
        __4,
        __5,
        __6,
        __7,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action568<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<KeywordAndVisibility>, Location),
    __1: (Location, Spanned<Ident>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Token<'input>, Location),
    __4: (Location, Token<'input>, Location),
    __5: (Location, alloc::vec::Vec<Spanned<Prototype>>, Location),
    __6: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.2;
    let __end0 = __3.0;
    let __temp0 = __action508(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action378(
        errors,
        db,
        __0,
        __1,
        __2,
        __temp0,
        __3,
        __4,
        __5,
        __6,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action569<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<KeywordAndVisibility>, Location),
    __1: (Location, Spanned<Ident>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, alloc::vec::Vec<Spanned<Ident>>, Location),
    __4: (Location, Spanned<Ident>, Location),
    __5: (Location, Token<'input>, Location),
    __6: (Location, Token<'input>, Location),
    __7: (Location, alloc::vec::Vec<Spanned<Prototype>>, Location),
    __8: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __3.0;
    let __end0 = __4.2;
    let __temp0 = __action509(
        errors,
        db,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action378(
        errors,
        db,
        __0,
        __1,
        __2,
        __temp0,
        __5,
        __6,
        __7,
        __8,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action570<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<KeywordAndVisibility>, Location),
    __1: (Location, Spanned<Ident>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, alloc::vec::Vec<Spanned<Ident>>, Location),
    __4: (Location, Token<'input>, Location),
    __5: (Location, Token<'input>, Location),
    __6: (Location, alloc::vec::Vec<Spanned<Prototype>>, Location),
    __7: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __3.0;
    let __end0 = __3.2;
    let __temp0 = __action510(
        errors,
        db,
        __3,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action378(
        errors,
        db,
        __0,
        __1,
        __2,
        __temp0,
        __4,
        __5,
        __6,
        __7,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action571<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<KeywordAndVisibility>, Location),
    __1: (Location, Spanned<Ident>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Spanned<Ident>, Location),
    __4: (Location, Token<'input>, Location),
    __5: (Location, Spanned<Prototype>, Location),
    __6: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __3.0;
    let __end0 = __3.2;
    let __temp0 = __action507(
        errors,
        db,
        __3,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action379(
        errors,
        db,
        __0,
        __1,
        __2,
        __temp0,
        __4,
        __5,
        __6,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action572<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<KeywordAndVisibility>, Location),
    __1: (Location, Spanned<Ident>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Token<'input>, Location),
    __4: (Location, Spanned<Prototype>, Location),
    __5: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.2;
    let __end0 = __3.0;
    let __temp0 = __action508(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action379(
        errors,
        db,
        __0,
        __1,
        __2,
        __temp0,
        __3,
        __4,
        __5,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action573<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<KeywordAndVisibility>, Location),
    __1: (Location, Spanned<Ident>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, alloc::vec::Vec<Spanned<Ident>>, Location),
    __4: (Location, Spanned<Ident>, Location),
    __5: (Location, Token<'input>, Location),
    __6: (Location, Spanned<Prototype>, Location),
    __7: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __3.0;
    let __end0 = __4.2;
    let __temp0 = __action509(
        errors,
        db,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action379(
        errors,
        db,
        __0,
        __1,
        __2,
        __temp0,
        __5,
        __6,
        __7,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action574<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<KeywordAndVisibility>, Location),
    __1: (Location, Spanned<Ident>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, alloc::vec::Vec<Spanned<Ident>>, Location),
    __4: (Location, Token<'input>, Location),
    __5: (Location, Spanned<Prototype>, Location),
    __6: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __3.0;
    let __end0 = __3.2;
    let __temp0 = __action510(
        errors,
        db,
        __3,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action379(
        errors,
        db,
        __0,
        __1,
        __2,
        __temp0,
        __4,
        __5,
        __6,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action575<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<KeywordAndVisibility>, Location),
    __1: (Location, Spanned<Ident>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Spanned<Ident>, Location),
    __4: (Location, Token<'input>, Location),
    __5: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __3.0;
    let __end0 = __3.2;
    let __temp0 = __action507(
        errors,
        db,
        __3,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action380(
        errors,
        db,
        __0,
        __1,
        __2,
        __temp0,
        __4,
        __5,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action576<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<KeywordAndVisibility>, Location),
    __1: (Location, Spanned<Ident>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Token<'input>, Location),
    __4: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.2;
    let __end0 = __3.0;
    let __temp0 = __action508(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action380(
        errors,
        db,
        __0,
        __1,
        __2,
        __temp0,
        __3,
        __4,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action577<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<KeywordAndVisibility>, Location),
    __1: (Location, Spanned<Ident>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, alloc::vec::Vec<Spanned<Ident>>, Location),
    __4: (Location, Spanned<Ident>, Location),
    __5: (Location, Token<'input>, Location),
    __6: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __3.0;
    let __end0 = __4.2;
    let __temp0 = __action509(
        errors,
        db,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action380(
        errors,
        db,
        __0,
        __1,
        __2,
        __temp0,
        __5,
        __6,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action578<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<KeywordAndVisibility>, Location),
    __1: (Location, Spanned<Ident>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, alloc::vec::Vec<Spanned<Ident>>, Location),
    __4: (Location, Token<'input>, Location),
    __5: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __3.0;
    let __end0 = __3.2;
    let __temp0 = __action510(
        errors,
        db,
        __3,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action380(
        errors,
        db,
        __0,
        __1,
        __2,
        __temp0,
        __4,
        __5,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action579<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<KeywordAndVisibility>, Location),
    __1: (Location, Spanned<Ident>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Spanned<Ident>, Location),
    __4: (Location, Token<'input>, Location),
    __5: (Location, alloc::vec::Vec<Spanned<Prototype>>, Location),
    __6: (Location, Spanned<Prototype>, Location),
    __7: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __3.0;
    let __end0 = __3.2;
    let __temp0 = __action507(
        errors,
        db,
        __3,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action381(
        errors,
        db,
        __0,
        __1,
        __2,
        __temp0,
        __4,
        __5,
        __6,
        __7,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action580<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<KeywordAndVisibility>, Location),
    __1: (Location, Spanned<Ident>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Token<'input>, Location),
    __4: (Location, alloc::vec::Vec<Spanned<Prototype>>, Location),
    __5: (Location, Spanned<Prototype>, Location),
    __6: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.2;
    let __end0 = __3.0;
    let __temp0 = __action508(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action381(
        errors,
        db,
        __0,
        __1,
        __2,
        __temp0,
        __3,
        __4,
        __5,
        __6,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action581<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<KeywordAndVisibility>, Location),
    __1: (Location, Spanned<Ident>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, alloc::vec::Vec<Spanned<Ident>>, Location),
    __4: (Location, Spanned<Ident>, Location),
    __5: (Location, Token<'input>, Location),
    __6: (Location, alloc::vec::Vec<Spanned<Prototype>>, Location),
    __7: (Location, Spanned<Prototype>, Location),
    __8: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __3.0;
    let __end0 = __4.2;
    let __temp0 = __action509(
        errors,
        db,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action381(
        errors,
        db,
        __0,
        __1,
        __2,
        __temp0,
        __5,
        __6,
        __7,
        __8,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action582<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<KeywordAndVisibility>, Location),
    __1: (Location, Spanned<Ident>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, alloc::vec::Vec<Spanned<Ident>>, Location),
    __4: (Location, Token<'input>, Location),
    __5: (Location, alloc::vec::Vec<Spanned<Prototype>>, Location),
    __6: (Location, Spanned<Prototype>, Location),
    __7: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __3.0;
    let __end0 = __3.2;
    let __temp0 = __action510(
        errors,
        db,
        __3,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action381(
        errors,
        db,
        __0,
        __1,
        __2,
        __temp0,
        __4,
        __5,
        __6,
        __7,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action583<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<KeywordAndVisibility>, Location),
    __1: (Location, Spanned<Ident>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Spanned<Ident>, Location),
    __4: (Location, Token<'input>, Location),
    __5: (Location, alloc::vec::Vec<Spanned<Prototype>>, Location),
    __6: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __3.0;
    let __end0 = __3.2;
    let __temp0 = __action507(
        errors,
        db,
        __3,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action382(
        errors,
        db,
        __0,
        __1,
        __2,
        __temp0,
        __4,
        __5,
        __6,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action584<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<KeywordAndVisibility>, Location),
    __1: (Location, Spanned<Ident>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, Token<'input>, Location),
    __4: (Location, alloc::vec::Vec<Spanned<Prototype>>, Location),
    __5: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __2.2;
    let __end0 = __3.0;
    let __temp0 = __action508(
        errors,
        db,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action382(
        errors,
        db,
        __0,
        __1,
        __2,
        __temp0,
        __3,
        __4,
        __5,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action585<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<KeywordAndVisibility>, Location),
    __1: (Location, Spanned<Ident>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, alloc::vec::Vec<Spanned<Ident>>, Location),
    __4: (Location, Spanned<Ident>, Location),
    __5: (Location, Token<'input>, Location),
    __6: (Location, alloc::vec::Vec<Spanned<Prototype>>, Location),
    __7: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __3.0;
    let __end0 = __4.2;
    let __temp0 = __action509(
        errors,
        db,
        __3,
        __4,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action382(
        errors,
        db,
        __0,
        __1,
        __2,
        __temp0,
        __5,
        __6,
        __7,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action586<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<KeywordAndVisibility>, Location),
    __1: (Location, Spanned<Ident>, Location),
    __2: (Location, Token<'input>, Location),
    __3: (Location, alloc::vec::Vec<Spanned<Ident>>, Location),
    __4: (Location, Token<'input>, Location),
    __5: (Location, alloc::vec::Vec<Spanned<Prototype>>, Location),
    __6: (Location, Token<'input>, Location),
) -> Spanned<Node>
{
    let __start0 = __3.0;
    let __end0 = __3.2;
    let __temp0 = __action510(
        errors,
        db,
        __3,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action382(
        errors,
        db,
        __0,
        __1,
        __2,
        __temp0,
        __4,
        __5,
        __6,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action587<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Token<'input>, Location),
) -> Spanned<FnArg>
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action297(
        errors,
        db,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action46(
        errors,
        db,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action588<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<FieldDef>, Location),
) -> Spanned<FnArg>
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action298(
        errors,
        db,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action47(
        errors,
        db,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action589<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Location, Token<'input>, &'static str>>,
    db: &dyn Db,
    __0: (Location, Spanned<Node>, Location),
) -> Spanned<Node>
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action299(
        errors,
        db,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action33(
        errors,
        db,
        __temp0,
    )
}
#[allow(clippy::type_complexity, dead_code)]

pub  trait __ToTriple<'input, 'err, >
{
    fn to_triple(value: Self) -> Result<(Location,Token<'input>,Location), __lalrpop_util::ParseError<Location, Token<'input>, &'static str>>;
}

impl<'input, 'err, > __ToTriple<'input, 'err, > for (Location, Token<'input>, Location)
{
    fn to_triple(value: Self) -> Result<(Location,Token<'input>,Location), __lalrpop_util::ParseError<Location, Token<'input>, &'static str>> {
        Ok(value)
    }
}
impl<'input, 'err, > __ToTriple<'input, 'err, > for Result<(Location, Token<'input>, Location), &'static str>
{
    fn to_triple(value: Self) -> Result<(Location,Token<'input>,Location), __lalrpop_util::ParseError<Location, Token<'input>, &'static str>> {
        match value {
            Ok(v) => Ok(v),
            Err(error) => Err(__lalrpop_util::ParseError::User { error }),
        }
    }
}
