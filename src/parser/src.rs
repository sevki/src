// auto-generated: "lalrpop 0.20.2"
// sha3: 2e5d7df4ee37da7ead63832fae0c620082a727acee5e3f7f70733e7a118bfb3d
use std::str::FromStr;
use crate::parser::string::apply_string_escapes;
use super::ast::*;
use lalrpop_util::{ErrorRecovery, ParseError};
use crate::lexer::{Position, Token, Word, Variable, Coord};
use okstd::prelude::*;
#[allow(unused_extern_crates)]
extern crate lalrpop_util as __lalrpop_util;
#[allow(unused_imports)]
use self::__lalrpop_util::state_machine as __state_machine;
extern crate core;
extern crate alloc;

#[rustfmt::skip]
#[allow(non_snake_case, non_camel_case_types, unused_mut, unused_variables, unused_imports, unused_parens, clippy::needless_lifetimes, clippy::type_complexity, clippy::needless_return, clippy::too_many_arguments, clippy::never_loop, clippy::match_single_binding, clippy::needless_raw_string_hashes)]
mod __parse__Source {

    use std::str::FromStr;
    use crate::parser::string::apply_string_escapes;
    use super::super::ast::*;
    use lalrpop_util::{ErrorRecovery, ParseError};
    use crate::lexer::{Position, Token, Word, Variable, Coord};
    use okstd::prelude::*;
    #[allow(unused_extern_crates)]
    extern crate lalrpop_util as __lalrpop_util;
    #[allow(unused_imports)]
    use self::__lalrpop_util::state_machine as __state_machine;
    extern crate core;
    extern crate alloc;
    use super::__ToTriple;
    #[allow(dead_code)]
    pub(crate) enum __Symbol<'input>
     {
        Variant0(Token<'input>),
        Variant1(&'input str),
        Variant2(f64),
        Variant3(i64),
        Variant4(__lalrpop_util::ErrorRecovery<Coord, Token<'input>, &'static str>),
        Variant5(alloc::vec::Vec<Token<'input>>),
        Variant6(core::option::Option<Token<'input>>),
        Variant7((Token<'input>, Ident)),
        Variant8(core::option::Option<(Token<'input>, Ident)>),
        Variant9((alloc::vec::Vec<Token<'input>>, Expression)),
        Variant10(alloc::vec::Vec<(alloc::vec::Vec<Token<'input>>, Expression)>),
        Variant11(Expression),
        Variant12(alloc::vec::Vec<Expression>),
        Variant13(Field),
        Variant14(alloc::vec::Vec<Field>),
        Variant15(FnArg),
        Variant16(alloc::vec::Vec<FnArg>),
        Variant17(Ident),
        Variant18(alloc::vec::Vec<Ident>),
        Variant19(Prototype),
        Variant20(alloc::vec::Vec<Prototype>),
        Variant21((Ident, Block<Expression>)),
        Variant22(alloc::vec::Vec<(Ident, Block<Expression>)>),
        Variant23(Value),
        Variant24(Block<Field>),
        Variant25(Block<Expression>),
        Variant26(Block<Prototype>),
        Variant27(Vec<Expression>),
        Variant28(Vec<FnArg>),
        Variant29(Vec<Ident>),
        Variant30(core::option::Option<Expression>),
        Variant31(core::option::Option<Field>),
        Variant32(core::option::Option<FnArg>),
        Variant33(core::option::Option<Ident>),
        Variant34(Vec<Field>),
        Variant35(Vec<Prototype>),
        Variant36(core::option::Option<Prototype>),
        Variant37(Module),
    }
    const __ACTION: &[i16] = &[
        // State 0
        65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 0, 0, 0, 0, 0, 67, 0, 0, 0, 0, 68, 0, 0, 0, 0, 0, 0, 0, 0, 69, 0, 70, 0, 0, 0, 0, 0, 0, 71,
        // State 1
        73, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 0, 0, 0, 0, 0, 67, 0, 0, 0, 0, 68, 0, 0, 0, 0, 0, 0, 0, 0, 69, 0, 70, 0, 0, 0, 0, 0, 0, 0,
        // State 2
        65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 0, 0, 0, 0, 0, 67, 0, 0, 0, 0, 68, 0, 0, 0, 0, 0, 0, 0, 0, 69, 0, 70, 0, 0, 0, 0, 0, 0, 0,
        // State 3
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 4
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 0, 0, 0, 0, 0, 0, 0, 0, 82, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 5
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 6
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 7
        73, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 0, 0, 0, 0, 0, 67, 0, 0, 0, 0, 68, 0, 0, 0, 0, 0, 0, 0, 0, 69, 0, 70, 0, 0, 0, 0, 0, 0, 0,
        // State 8
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0,
        // State 9
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 0, 0,
        // State 10
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0,
        // State 11
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -90, 0, 0,
        // State 12
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -156, 0, 0, 0, 0,
        // State 13
        0, 0, 0, 0, 0, 0, 0, -86, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 0, 0, 0, 0, 0, 0, 0, 0, 82, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 14
        -117, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -117, 0, 0, 0, 0, 0, -117, 0, 0, 0, 0, -117, 0, 0, 0, 0, 0, 0, 0, 0, -117, 0, -117, 95, 0, 0, 0, -117, 0, 0,
        // State 15
        30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 103, 0, 0, 0, 104, 0, 0, 0, 82, 0, 0, 0, 0, 0, 0, 0, 0, -151, 0, 0,
        // State 16
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -90, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 17
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 18
        33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -143, 0, 0,
        // State 19
        35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -139, 0, 0,
        // State 20
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -92, 0, 0, 0, -92, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -92, 0, 0,
        // State 21
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -158, 0, 0, 0, 0,
        // State 22
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 0, 0, 0, 0,
        // State 23
        0, 0, 0, 0, 0, 0, 0, -88, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 0, 0, 0, 0, 0, 0, 0, 0, 82, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 24
        -118, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -118, 0, 0, 0, 0, 0, -118, 0, 0, 0, 0, -118, 0, 0, 0, 0, 0, 0, 0, 0, -118, 0, -118, 95, 0, 0, 0, -118, 0, 0,
        // State 25
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 26
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 103, 0, 0, 0, 104, 0, 0, 0, 82, 0, 0, 0, 0, 0, 0, 0, 0, -153, 0, 0,
        // State 27
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 103, 0, 0, 0, 104, 0, 0, 0, 82, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 28
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 29
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 103, 0, 0, 0, 104, 0, 0, 0, 82, 0, 0, 0, 0, 0, 0, 0, 0, -151, 0, 0,
        // State 30
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 0, 0,
        // State 31
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -145, 0, 0,
        // State 32
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -143, 0, 0,
        // State 33
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -141, 0, 0,
        // State 34
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -139, 0, 0,
        // State 35
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 135, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 36
        45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 0, 0, 0, 0, 0, 0, 0, 0, 82, 0, 0, 0, 0, 0, 0, 0, 0, -147, 0, 0,
        // State 37
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 0, 0, 0, 0, 0, 0, 0, 0, 82, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 38
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0,
        // State 39
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 0, 0, 0, 0, 0, 0, 0, 0, 82, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 40
        0, 0, 0, 0, 0, 0, 48, -82, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 155, 0, 0, 0, 0, 81, 0, 0, 0, 156, 0, 0, 0, 0, 82, 157, 0, 158, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 41
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0,
        // State 42
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 43
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 0, 0, 0, 0, 0, 0, 0, 0, 82, 0, 0, 0, 0, 0, 0, 0, 0, -149, 0, 0,
        // State 44
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 0, 0, 0, 0, 0, 0, 0, 0, 82, 0, 0, 0, 0, 0, 0, 0, 0, -147, 0, 0,
        // State 45
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -90, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 46
        0, 0, 0, 0, 0, 0, 48, -84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 155, 0, 0, 0, 0, 81, 0, 0, 0, 156, 0, 0, 0, 0, 82, 157, 0, 158, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 47
        0, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 155, 0, 0, 0, 0, 81, 0, 0, 0, 156, 0, 0, 0, 0, 82, 157, 0, 158, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 48
        -132, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 174, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -132, 0, -132, 0, 0,
        // State 49
        0, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 155, 0, 0, 0, 0, 81, 0, 0, 0, 156, 0, 0, 0, 0, 82, 157, 0, 158, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 50
        0, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 155, 0, 0, 0, 0, 81, 0, 0, 0, 156, 0, 0, 0, 0, 82, 157, 0, 158, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 51
        0, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 155, 0, 0, 0, 0, 81, 0, 0, 0, 156, 0, 0, 0, 0, 82, 157, 0, 158, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 52
        0, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 155, 0, 0, 0, 0, 81, 0, 0, 0, 156, 0, 0, 0, 0, 82, 157, 0, 158, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 53
        0, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 155, 0, 0, 0, 0, 81, 0, 0, 0, 156, 0, 0, 0, 0, 82, 157, 0, 158, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 54
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0,
        // State 55
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 56
        -183, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -183, 0, 0, 0, 0, 0, -183, 0, 0, 0, 0, -183, 0, 0, 0, 0, 0, 0, 0, 0, -183, 0, -183, 0, 0, 0, 0, 0, 0, 0,
        // State 57
        -182, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -182, 0, 0, 0, 0, 0, -182, 0, 0, 0, 0, -182, 0, 0, 0, 0, 0, 0, 0, 0, -182, 0, -182, 0, 0, 0, 0, 0, 0, 0,
        // State 58
        -186, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -186, 0, 0, 0, 0, 0, -186, 0, 0, 0, 0, -186, 0, 0, 0, 0, 0, 0, 0, 0, -186, 0, -186, 0, 0, 0, 0, 0, 0, 0,
        // State 59
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 60
        -184, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -184, 0, 0, 0, 0, 0, -184, 0, 0, 0, 0, -184, 0, 0, 0, 0, 0, 0, 0, 0, -184, 0, -184, 0, 0, 0, 0, 0, 0, 0,
        // State 61
        -14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -14, 0, 0, 0, 0, 0, -14, 0, 0, 0, 0, -14, 0, 0, 0, 0, 0, 0, 0, 0, -14, 0, -14, 0, 0, 0, 0, 0, 0, 0,
        // State 62
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0,
        // State 63
        -185, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -185, 0, 0, 0, 0, 0, -185, 0, 0, 0, 0, -185, 0, 0, 0, 0, 0, 0, 0, 0, -185, 0, -185, 0, 0, 0, 0, 0, 0, 0,
        // State 64
        -3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -3, 0, 0, 0, 0, 0, -3, 0, 0, 0, 0, -3, 0, 0, 0, 0, 0, 0, 0, 0, -3, 0, -3, 0, 0, 0, 0, 0, 0, 0,
        // State 65
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 66
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -111, 0, 0, 0, 0, 0, 0, 0, 0, -111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 67
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -134, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 68
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -173, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 69
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -189, 0, 0, 0, 0,
        // State 70
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 71
        -15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -15, 0, 0, 0, 0, 0, -15, 0, 0, 0, 0, -15, 0, 0, 0, 0, 0, 0, 0, 0, -15, 0, -15, 0, 0, 0, 0, 0, 0, 0,
        // State 72
        -4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -4, 0, 0, 0, 0, 0, -4, 0, 0, 0, 0, -4, 0, 0, 0, 0, 0, 0, 0, 0, -4, 0, -4, 0, 0, 0, 0, 0, 0, 0,
        // State 73
        -16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -16, 0, 0, 0, 0, 0, -16, 0, 0, 0, 0, -16, 0, 0, 0, 0, 0, 0, 0, 0, -16, 0, -16, 0, 0, 0, 0, 0, 0, 0,
        // State 74
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 75
        -122, 0, 0, 0, 0, 0, 0, 0, 0, -122, -122, 0, 0, 0, 0, -122, 0, 0, -122, 0, -122, 0, 0, 0, -122, 0, 0, 0, -122, 0, 0, 0, 0, 0, -122, -122, 0, 0, 0, -122, 0, 0, 0, 0, 0, 0, 0, 0, -122, 0, -122, 0, 0, -122, 0, -122, 0, 0,
        // State 76
        -125, 0, 0, 0, 0, 0, -125, -125, 0, 0, -125, 0, 0, -125, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -125, 0, -125, 0, 0,
        // State 77
        0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 78
        -126, 0, 0, 0, 0, 0, -126, -126, 0, 0, -126, 0, 0, -126, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -126, 0, -126, 0, 0,
        // State 79
        -127, 0, 0, 0, 0, 0, -127, -127, 0, 0, -127, 0, 0, -127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -127, 0, -127, 0, 0,
        // State 80
        -122, 0, 0, 0, 0, 0, -122, -122, -122, -122, -122, -122, 0, -122, -122, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -122, 0, -122, 0, 0,
        // State 81
        -163, 0, 0, 0, 0, 0, -163, -163, 0, 0, -163, 0, 0, -163, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -163, 0, -163, 0, 0,
        // State 82
        -17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -17, 0, 0, 0, 0, 0, -17, 0, 0, 0, 0, -17, 0, 0, 0, 0, 0, 0, 0, 0, -17, 0, -17, 0, 0, 0, 0, 0, 0, 0,
        // State 83
        -136, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -136, 0, 0, 0, 0, 0, -136, 0, 0, 0, 0, -136, 0, 0, 0, 0, 0, 0, 0, 0, -136, 0, -136, 0, 0, 0, 0, 0, 0, 0,
        // State 84
        -174, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -174, 0, 0, 0, 0, 0, -174, 0, 0, 0, 0, -174, 0, 0, 0, 0, 0, 0, 0, 0, -174, 0, -174, 0, 0, 0, 0, 0, 0, 0,
        // State 85
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 0, 0,
        // State 86
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, -89, 0, 0, 0, -89, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -89, 0, 0,
        // State 87
        0, 0, 0, 0, 0, 0, 0, 0, 0, 113, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -155, 0, 0, 0, 0,
        // State 88
        0, 0, 0, 0, 0, 0, 0, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 89
        0, 0, 0, 0, 0, 0, 0, -113, 0, 0, -113, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 90
        0, 0, 0, 0, 0, 0, 0, -85, 0, 0, 117, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 91
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 92
        0, 0, 0, 0, 0, 0, 0, -112, 0, 0, -112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 93
        -66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -66, 0, 0, 0, 0, 0, -66, 0, 0, 0, 0, -66, 0, 0, 0, 0, 0, 0, 0, 0, -66, 0, -66, -66, 0, 0, 0, -66, 0, 0,
        // State 94
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 95
        -169, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -169, 0, -169, 0, 0,
        // State 96
        -129, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -129, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -129, 0, -129, 0, 0,
        // State 97
        -128, 0, 0, 0, 0, 0, 41, 0, 0, 0, 0, 0, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128, 0, -128, 0, 0,
        // State 98
        -110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -110, 0, -110, 0, 0,
        // State 99
        -168, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -168, 0, -168, 0, 0,
        // State 100
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 121, 0, 0,
        // State 101
        122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -150, 0, 0,
        // State 102
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -131, -131, 0, 0, 0, -131, 0, 0, 0, -131, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 103
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -137, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 104
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 105
        127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -142, 0, 0,
        // State 106
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0,
        // State 107
        131, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -138, 0, 0,
        // State 108
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 132, 0, 0,
        // State 109
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 134, 0, 0, 0, 0, 0, 0, 0, 0, 0, -91, 0, 0, 0, -91, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -91, 0, 0,
        // State 110
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -51, 0, 0, 0, -51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -51, 0, 0,
        // State 111
        0, 0, 0, 0, 0, 0, 0, 0, 0, 136, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -157, 0, 0, 0, 0,
        // State 112
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -46, 0, 0, 0, 0,
        // State 113
        -94, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -94, 0, 0, 0, 0, 0, -94, 0, 0, 0, 0, -94, 0, 0, 0, 0, 0, 0, 0, 0, -94, 0, -94, 0, 0, 0, 0, 0, 0, 0,
        // State 114
        0, 0, 0, 0, 0, 0, 0, -87, 0, 0, 139, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 115
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 116
        0, 0, 0, 0, 0, 0, 0, -36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -36, 0, 0, 0, 0, 0, 0, 0, 0, -36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 117
        -67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -67, 0, 0, 0, 0, 0, -67, 0, 0, 0, 0, -67, 0, 0, 0, 0, 0, 0, 0, 0, -67, 0, -67, -67, 0, 0, 0, -67, 0, 0,
        // State 118
        142, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -152, 0, 0,
        // State 119
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 120
        -80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -80, -80, 0, 0, 0, 0, -80, 0, 0, 0, 0, -80, 0, 0, 0, 0, 0, 0, 0, 0, -80, 0, -80, -80, 0, -80, 0, -80, 0, 0,
        // State 121
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -61, -61, 0, 0, 0, -61, 0, 0, 0, -61, 0, 0, 0, 0, 0, 0, 0, 0, -61, 0, 0,
        // State 122
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 159, 0, 0,
        // State 123
        -130, 0, 0, 0, 0, 0, -130, -130, 0, 0, -130, 0, 0, -130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -130, 0, -130, 0, 0,
        // State 124
        -135, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -135, 0, 0, 0, 0, 0, -135, 0, 0, 0, 0, -135, 0, 0, 0, 0, 0, 0, 0, 0, -135, 0, -135, 0, 0, 0, 0, 0, 0, 0,
        // State 125
        160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -144, 0, 0,
        // State 126
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -41, 0, 0,
        // State 127
        -76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -76, 0, 0, 0, 0, 0, -76, 0, 0, 0, 0, -76, 0, 0, 0, 0, 0, 0, 0, 0, -76, 0, -76, 0, 0, 0, 0, 0, 0, 0,
        // State 128
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 161, 0, 0,
        // State 129
        162, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -140, 0, 0,
        // State 130
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -31, 0, 0,
        // State 131
        -74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -74, 0, 0, 0, 0, 0, -74, 0, 0, 0, 0, -74, 0, 0, 0, 0, 0, 0, 0, 0, -74, 0, -74, 0, 0, 0, 0, 0, 0, 0,
        // State 132
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 163, 0, 0,
        // State 133
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -52, 0, 0, 0, -52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -52, 0, 0,
        // State 134
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -121, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 135
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -47, 0, 0, 0, 0,
        // State 136
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 166, 0, 0,
        // State 137
        167, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -146, 0, 0,
        // State 138
        0, 0, 0, 0, 0, 0, 0, -37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -37, 0, 0, 0, 0, 0, 0, 0, 0, -37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 139
        -106, 0, 0, 0, 0, 0, 0, -106, 0, 0, -106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -106, 0, 0,
        // State 140
        -192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -192, 0, 0, 0, 0, 0, -192, 0, 0, 0, 0, -192, 0, 0, 0, 0, 0, 0, 0, 0, -192, 0, -192, -192, 0, 0, 0, -192, 0, 0,
        // State 141
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -62, -62, 0, 0, 0, -62, 0, 0, 0, -62, 0, 0, 0, 0, 0, 0, 0, 0, -62, 0, 0,
        // State 142
        -109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -109, 0, -109, 0, 0,
        // State 143
        0, 0, 0, 0, 0, 0, 0, 171, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 144
        0, 0, 0, 0, 0, 0, 0, -81, 0, 51, 172, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 145
        -102, 0, 0, 0, 0, 0, 0, -102, -102, -102, -102, -102, 0, 0, -102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -102, 0, -102, 0, 0,
        // State 146
        -98, 0, 0, 0, 0, 0, 0, -98, 53, -98, -98, -98, 0, 0, 54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -98, 0, -98, 0, 0,
        // State 147
        -180, 0, 0, 0, 0, 0, 0, -180, -180, -180, -180, -180, 0, 0, -180, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -180, 0, -180, 0, 0,
        // State 148
        -178, 0, 0, 0, 0, 0, 0, -178, -178, -178, -178, -178, 0, 0, -178, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -178, 0, -178, 0, 0,
        // State 149
        -177, 0, 0, 0, 0, 0, -125, -177, -177, -177, -177, -177, 0, 0, -177, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -177, 0, -177, 0, 0,
        // State 150
        0, 0, 0, 0, 0, 0, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 151
        -175, 0, 0, 0, 0, 0, 0, -175, -175, -175, -175, -175, 0, 0, -175, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -175, 0, -175, 0, 0,
        // State 152
        -99, 0, 0, 0, 0, 0, 0, -99, -99, -99, -99, -99, 0, 0, -99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -99, 0, -99, 0, 0,
        // State 153
        -179, 0, 0, 0, 0, 0, 0, -179, -179, -179, -179, -179, 0, 0, -179, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -179, 0, -179, 0, 0,
        // State 154
        -105, 0, 0, 0, 0, 0, 0, -105, -105, -105, -105, -105, 0, 0, -105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -105, 0, -105, 0, 0,
        // State 155
        -176, 0, 0, 0, 0, 0, 0, -176, -176, -176, -176, -176, 0, 0, -176, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -176, 0, -176, 0, 0,
        // State 156
        -172, 0, 0, 0, 0, 0, 0, -172, -172, -172, -172, -172, 0, 0, -172, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -172, 0, -172, 0, 0,
        // State 157
        -187, 0, 0, 0, 0, 0, 0, -187, -187, -187, -187, -187, 0, 0, -187, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -187, 0, -187, 0, 0,
        // State 158
        -79, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -79, -79, 0, 0, 0, 0, -79, 0, 0, 0, 0, -79, 0, 0, 0, 0, 0, 0, 0, 0, -79, 0, -79, -79, 0, -79, 0, -79, 0, 0,
        // State 159
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -42, 0, 0,
        // State 160
        -75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -75, 0, 0, 0, 0, 0, -75, 0, 0, 0, 0, -75, 0, 0, 0, 0, 0, 0, 0, 0, -75, 0, -75, 0, 0, 0, 0, 0, 0, 0,
        // State 161
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -32, 0, 0,
        // State 162
        -73, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -73, 0, 0, 0, 0, 0, -73, 0, 0, 0, 0, -73, 0, 0, 0, 0, 0, 0, 0, 0, -73, 0, -73, 0, 0, 0, 0, 0, 0, 0,
        // State 163
        -190, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -190, 0, 0, 0, 0, 0, -190, 0, 0, 0, 0, -190, 0, 0, 0, 0, 0, 0, 0, 0, -190, 0, -190, 0, 0, 0, 0, 0, 0, 0,
        // State 164
        176, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -148, 0, 0,
        // State 165
        -78, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -78, 0, 0, 0, 0, 0, -78, 0, 0, 0, 0, -78, 0, 0, 0, 0, 0, 0, 0, 0, -78, 0, -78, 0, 0, 0, 0, 0, 0, 0,
        // State 166
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -56, 0, 0, 0, 0, 0, 0, 0, 0, -56, 0, 0, 0, 0, 0, 0, 0, 0, -56, 0, 0,
        // State 167
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 177, 0, 0,
        // State 168
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 178, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 169
        0, 0, 0, 0, 0, 0, 0, -83, 0, 51, 179, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 170
        -116, 0, 0, 0, 0, 0, 0, -116, -116, -116, -116, -116, 0, -116, -116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -116, 0, -116, 0, 0,
        // State 171
        0, 0, 0, 0, 0, 0, -26, -26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -26, 0, 0, 0, 0, -26, 0, 0, 0, -26, 0, 0, 0, 0, -26, -26, 0, -26, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 172
        0, 0, 0, 0, 0, 0, 0, 184, 0, 51, 0, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 173
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -95, 0, 0, 0, 0,
        // State 174
        -167, 0, 0, 0, 0, 0, 0, 0, 0, 51, 0, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -167, 0, -167, 0, 0,
        // State 175
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -57, 0, 0, 0, 0, 0, 0, 0, 0, -57, 0, 0, 0, 0, 0, 0, 0, 0, -57, 0, 0,
        // State 176
        -77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -77, 0, 0, 0, 0, 0, -77, 0, 0, 0, 0, -77, 0, 0, 0, 0, 0, 0, 0, 0, -77, 0, -77, 0, 0, 0, 0, 0, 0, 0,
        // State 177
        -160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -160, 0, -160, 0, 0,
        // State 178
        0, 0, 0, 0, 0, 0, -27, -27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -27, 0, 0, 0, 0, -27, 0, 0, 0, -27, 0, 0, 0, 0, -27, -27, 0, -27, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 179
        -96, 0, 0, 0, 0, 0, 0, -96, 53, -96, -96, -96, 0, 0, 54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -96, 0, -96, 0, 0,
        // State 180
        -97, 0, 0, 0, 0, 0, 0, -97, 53, -97, -97, -97, 0, 0, 54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -97, 0, -97, 0, 0,
        // State 181
        -100, 0, 0, 0, 0, 0, 0, -100, -100, -100, -100, -100, 0, 0, -100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -100, 0, -100, 0, 0,
        // State 182
        -101, 0, 0, 0, 0, 0, 0, -101, -101, -101, -101, -101, 0, 0, -101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -101, 0, -101, 0, 0,
        // State 183
        -181, 0, 0, 0, 0, 0, 0, -181, -181, -181, -181, -181, 0, 0, -181, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -181, 0, -181, 0, 0,
        // State 184
        -133, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -133, 0, -133, 0, 0,
        // State 185
        -159, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -159, 0, -159, 0, 0,
    ];
    fn __action(state: i16, integer: usize) -> i16 {
        __ACTION[(state as usize) * 58 + integer]
    }
    const __EOF_ACTION: &[i16] = &[
        // State 0
        -164,
        // State 1
        0,
        // State 2
        -165,
        // State 3
        0,
        // State 4
        0,
        // State 5
        0,
        // State 6
        0,
        // State 7
        0,
        // State 8
        0,
        // State 9
        0,
        // State 10
        0,
        // State 11
        0,
        // State 12
        0,
        // State 13
        0,
        // State 14
        -117,
        // State 15
        0,
        // State 16
        0,
        // State 17
        0,
        // State 18
        0,
        // State 19
        0,
        // State 20
        0,
        // State 21
        0,
        // State 22
        0,
        // State 23
        0,
        // State 24
        -118,
        // State 25
        0,
        // State 26
        0,
        // State 27
        0,
        // State 28
        0,
        // State 29
        0,
        // State 30
        0,
        // State 31
        0,
        // State 32
        0,
        // State 33
        0,
        // State 34
        0,
        // State 35
        0,
        // State 36
        0,
        // State 37
        0,
        // State 38
        0,
        // State 39
        0,
        // State 40
        0,
        // State 41
        0,
        // State 42
        0,
        // State 43
        0,
        // State 44
        0,
        // State 45
        0,
        // State 46
        0,
        // State 47
        0,
        // State 48
        0,
        // State 49
        0,
        // State 50
        0,
        // State 51
        0,
        // State 52
        0,
        // State 53
        0,
        // State 54
        0,
        // State 55
        0,
        // State 56
        -183,
        // State 57
        -182,
        // State 58
        -186,
        // State 59
        -194,
        // State 60
        -184,
        // State 61
        -14,
        // State 62
        0,
        // State 63
        -185,
        // State 64
        0,
        // State 65
        0,
        // State 66
        0,
        // State 67
        0,
        // State 68
        0,
        // State 69
        0,
        // State 70
        -166,
        // State 71
        -15,
        // State 72
        0,
        // State 73
        -16,
        // State 74
        0,
        // State 75
        -122,
        // State 76
        0,
        // State 77
        0,
        // State 78
        0,
        // State 79
        0,
        // State 80
        0,
        // State 81
        0,
        // State 82
        -17,
        // State 83
        -136,
        // State 84
        -174,
        // State 85
        0,
        // State 86
        0,
        // State 87
        0,
        // State 88
        0,
        // State 89
        0,
        // State 90
        0,
        // State 91
        0,
        // State 92
        0,
        // State 93
        -66,
        // State 94
        0,
        // State 95
        0,
        // State 96
        0,
        // State 97
        0,
        // State 98
        0,
        // State 99
        0,
        // State 100
        0,
        // State 101
        0,
        // State 102
        0,
        // State 103
        0,
        // State 104
        0,
        // State 105
        0,
        // State 106
        0,
        // State 107
        0,
        // State 108
        0,
        // State 109
        0,
        // State 110
        0,
        // State 111
        0,
        // State 112
        0,
        // State 113
        -94,
        // State 114
        0,
        // State 115
        0,
        // State 116
        0,
        // State 117
        -67,
        // State 118
        0,
        // State 119
        0,
        // State 120
        -80,
        // State 121
        0,
        // State 122
        0,
        // State 123
        0,
        // State 124
        -135,
        // State 125
        0,
        // State 126
        0,
        // State 127
        -76,
        // State 128
        0,
        // State 129
        0,
        // State 130
        0,
        // State 131
        -74,
        // State 132
        0,
        // State 133
        0,
        // State 134
        0,
        // State 135
        0,
        // State 136
        0,
        // State 137
        0,
        // State 138
        0,
        // State 139
        0,
        // State 140
        -192,
        // State 141
        0,
        // State 142
        0,
        // State 143
        0,
        // State 144
        0,
        // State 145
        0,
        // State 146
        0,
        // State 147
        0,
        // State 148
        0,
        // State 149
        0,
        // State 150
        0,
        // State 151
        0,
        // State 152
        0,
        // State 153
        0,
        // State 154
        0,
        // State 155
        0,
        // State 156
        0,
        // State 157
        0,
        // State 158
        -79,
        // State 159
        0,
        // State 160
        -75,
        // State 161
        0,
        // State 162
        -73,
        // State 163
        -190,
        // State 164
        0,
        // State 165
        -78,
        // State 166
        0,
        // State 167
        0,
        // State 168
        0,
        // State 169
        0,
        // State 170
        0,
        // State 171
        0,
        // State 172
        0,
        // State 173
        0,
        // State 174
        0,
        // State 175
        0,
        // State 176
        -77,
        // State 177
        0,
        // State 178
        0,
        // State 179
        0,
        // State 180
        0,
        // State 181
        0,
        // State 182
        0,
        // State 183
        0,
        // State 184
        0,
        // State 185
        0,
    ];
    fn __goto(state: i16, nt: usize) -> i16 {
        match nt {
            1 => match state {
                2 => 7,
                _ => 1,
            },
            7 => 2,
            13 => 46,
            16 => 33,
            19 => 23,
            22 => 31,
            25 => 21,
            28 => 20,
            31 => 43,
            34 => 26,
            37 => 24,
            40 => 84,
            41 => match state {
                30 => 124,
                _ => 83,
            },
            42 => 113,
            43 => match state {
                41 => 48,
                38 => 140,
                54 => 184,
                _ => 14,
            },
            44 => 143,
            45 => 88,
            46 => match state {
                16 => 104,
                45 => 168,
                _ => 85,
            },
            47 => 3,
            48 => 56,
            49 => 54,
            50 => match state {
                46 => 169,
                47 => 172,
                49 => 174,
                _ => 144,
            },
            51 => match state {
                52 => 181,
                53 => 182,
                _ => 145,
            },
            52 => match state {
                50 => 179,
                51 => 180,
                _ => 146,
            },
            54 => 147,
            55 => match state {
                19 | 34 => 107,
                33 => 129,
                _ => 89,
            },
            57 => 95,
            58 => 4,
            59 => match state {
                23 => 114,
                _ => 90,
            },
            61 => match state {
                40 | 46..=47 | 49..=53 => 148,
                _ => 96,
            },
            62 => match state {
                18 | 32 => 105,
                31 => 125,
                _ => 57,
            },
            64 => 42,
            65 => match state {
                5 => 9,
                6 => 10,
                17 => 30,
                25 => 38,
                3 => 74,
                11 | 16 | 45 => 86,
                12 => 87,
                13 | 19 | 23 | 33..=34 => 91,
                20 => 109,
                21 => 111,
                28 => 119,
                40 | 46..=47 | 49..=53 => 149,
                42 => 163,
                55 => 185,
                _ => 76,
            },
            67 => match state {
                4 | 36 | 43..=44 => 77,
                37 => 139,
                40 | 46..=47 | 49..=53 => 150,
                _ => 97,
            },
            68 => match state {
                39 => 142,
                _ => 98,
            },
            69 => 78,
            70 => 27,
            71 => 99,
            72 => 5,
            73 => 58,
            74 => 28,
            75 => match state {
                34 => 132,
                _ => 108,
            },
            76 => match state {
                32 => 128,
                _ => 106,
            },
            77 => match state {
                44 => 167,
                _ => 136,
            },
            78 => match state {
                29 => 122,
                _ => 100,
            },
            80 => 22,
            81 => match state {
                4 => 8,
                43 => 164,
                _ => 137,
            },
            83 => match state {
                13 | 23 => 92,
                _ => 79,
            },
            84 => 59,
            85 => match state {
                27 => 41,
                26 => 118,
                _ => 101,
            },
            87 => 151,
            88 => 6,
            89 => 60,
            90 => 152,
            91 => match state {
                1 => 71,
                2 => 73,
                7 => 82,
                _ => 61,
            },
            92 => 153,
            94 => 62,
            95 => 63,
            96 => 25,
            97 => match state {
                24 => 117,
                _ => 93,
            },
            _ => 0,
        }
    }
    const __TERMINAL: &[&str] = &[
        r###""\n""###,
        r###""!""###,
        r###""#!""###,
        r###""$""###,
        r###""%""###,
        r###""&""###,
        r###""(""###,
        r###"")""###,
        r###""*""###,
        r###""+""###,
        r###"",""###,
        r###""-""###,
        r###""->""###,
        r###"".""###,
        r###""/""###,
        r###"":""###,
        r###"";""###,
        r###""<""###,
        r###""=""###,
        r###""=>""###,
        r###"">""###,
        r###""?""###,
        r###""@""###,
        r###""[""###,
        r###""]""###,
        r###""^""###,
        r###""action""###,
        r###""comment""###,
        r###""effect""###,
        r###""else""###,
        r###""enum""###,
        r###""eof""###,
        r###""false""###,
        r###""float""###,
        r###""fn""###,
        r###""for""###,
        r###""from""###,
        r###""ident""###,
        r###""if""###,
        r###""impl""###,
        r###""import""###,
        r###""int""###,
        r###""let""###,
        r###""match""###,
        r###""none""###,
        r###""null""###,
        r###""self""###,
        r###""string""###,
        r###""struct""###,
        r###""true""###,
        r###""use""###,
        r###""when""###,
        r###""where""###,
        r###""{""###,
        r###""|""###,
        r###""}""###,
        r###""~""###,
    ];
    fn __expected_tokens(__state: i16) -> alloc::vec::Vec<alloc::string::String> {
        __TERMINAL.iter().enumerate().filter_map(|(index, terminal)| {
            let next_state = __action(__state, index);
            if next_state == 0 {
                None
            } else {
                Some(alloc::string::ToString::to_string(terminal))
            }
        }).collect()
    }
    fn __expected_tokens_from_states<
        'input,
        'err,
    >(
        __states: &[i16],
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> alloc::vec::Vec<alloc::string::String>
    where
        'input: 'err,
        'static: 'err,
    {
        __TERMINAL.iter().enumerate().filter_map(|(index, terminal)| {
            if __accepts(None, __states, Some(index), core::marker::PhantomData::<(&(), &())>) {
                Some(alloc::string::ToString::to_string(terminal))
            } else {
                None
            }
        }).collect()
    }
    struct __StateMachine<'input, 'err>
    where 'input: 'err, 'static: 'err
    {
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __phantom: core::marker::PhantomData<(&'input (), &'err ())>,
    }
    impl<'input, 'err> __state_machine::ParserDefinition for __StateMachine<'input, 'err>
    where 'input: 'err, 'static: 'err
    {
        type Location = Coord;
        type Error = &'static str;
        type Token = Token<'input>;
        type TokenIndex = usize;
        type Symbol = __Symbol<'input>;
        type Success = Module;
        type StateIndex = i16;
        type Action = i16;
        type ReduceIndex = i16;
        type NonterminalIndex = usize;

        #[inline]
        fn start_location(&self) -> Self::Location {
              Default::default()
        }

        #[inline]
        fn start_state(&self) -> Self::StateIndex {
              0
        }

        #[inline]
        fn token_to_index(&self, token: &Self::Token) -> Option<usize> {
            __token_to_integer(token, core::marker::PhantomData::<(&(), &())>)
        }

        #[inline]
        fn action(&self, state: i16, integer: usize) -> i16 {
            __action(state, integer)
        }

        #[inline]
        fn error_action(&self, state: i16) -> i16 {
            __action(state, 58 - 1)
        }

        #[inline]
        fn eof_action(&self, state: i16) -> i16 {
            __EOF_ACTION[state as usize]
        }

        #[inline]
        fn goto(&self, state: i16, nt: usize) -> i16 {
            __goto(state, nt)
        }

        fn token_to_symbol(&self, token_index: usize, token: Self::Token) -> Self::Symbol {
            __token_to_symbol(token_index, token, core::marker::PhantomData::<(&(), &())>)
        }

        fn expected_tokens(&self, state: i16) -> alloc::vec::Vec<alloc::string::String> {
            __expected_tokens(state)
        }

        fn expected_tokens_from_states(&self, states: &[i16]) -> alloc::vec::Vec<alloc::string::String> {
            __expected_tokens_from_states(states, core::marker::PhantomData::<(&(), &())>)
        }

        #[inline]
        fn uses_error_recovery(&self) -> bool {
            true
        }

        #[inline]
        fn error_recovery_symbol(
            &self,
            recovery: __state_machine::ErrorRecovery<Self>,
        ) -> Self::Symbol {
            __Symbol::Variant4(recovery)
        }

        fn reduce(
            &mut self,
            action: i16,
            start_location: Option<&Self::Location>,
            states: &mut alloc::vec::Vec<i16>,
            symbols: &mut alloc::vec::Vec<__state_machine::SymbolTriple<Self>>,
        ) -> Option<__state_machine::ParseResult<Self>> {
            __reduce(
                self.errors,
                action,
                start_location,
                states,
                symbols,
                core::marker::PhantomData::<(&(), &())>,
            )
        }

        fn simulate_reduce(&self, action: i16) -> __state_machine::SimulatedReduce<Self> {
            __simulate_reduce(action, core::marker::PhantomData::<(&(), &())>)
        }
    }
    fn __token_to_integer<
        'input,
        'err,
    >(
        __token: &Token<'input>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> Option<usize>
    {
        match *__token {
            Token::NewLine if true => Some(0),
            Token::Exclamation if true => Some(1),
            Token::Shebang if true => Some(2),
            Token::Dollar if true => Some(3),
            Token::Percent if true => Some(4),
            Token::Ampersand if true => Some(5),
            Token::LeftParen if true => Some(6),
            Token::RightParen if true => Some(7),
            Token::Multiply if true => Some(8),
            Token::Plus if true => Some(9),
            Token::Comma if true => Some(10),
            Token::Minus if true => Some(11),
            Token::Arrow if true => Some(12),
            Token::Dot if true => Some(13),
            Token::Divide if true => Some(14),
            Token::Colon if true => Some(15),
            Token::Semicolon if true => Some(16),
            Token::LessThan if true => Some(17),
            Token::Equals if true => Some(18),
            Token::FatArrow if true => Some(19),
            Token::GreaterThan if true => Some(20),
            Token::Question if true => Some(21),
            Token::At if true => Some(22),
            Token::LeftBracket if true => Some(23),
            Token::RightBracket if true => Some(24),
            Token::Caret if true => Some(25),
            Token::Word(Word::Action) if true => Some(26),
            Token::Comment(_) if true => Some(27),
            Token::Word(Word::Effect) if true => Some(28),
            Token::Word(Word::Else) if true => Some(29),
            Token::Word(Word::Enum) if true => Some(30),
            Token::Eof if true => Some(31),
            Token::Word(Word::False) if true => Some(32),
            Token::Float(_) if true => Some(33),
            Token::Word(Word::Fn) if true => Some(34),
            Token::Word(Word::For) if true => Some(35),
            Token::Word(Word::From) if true => Some(36),
            Token::Word(Word::Ident(_)) if true => Some(37),
            Token::Word(Word::If) if true => Some(38),
            Token::Word(Word::Impl) if true => Some(39),
            Token::Word(Word::Import) if true => Some(40),
            Token::Integer(_) if true => Some(41),
            Token::Word(Word::Let) if true => Some(42),
            Token::Word(Word::Match) if true => Some(43),
            Token::Word(Word::None) if true => Some(44),
            Token::Word(Word::Null) if true => Some(45),
            Token::Word(Word::Self_) if true => Some(46),
            Token::String(_) if true => Some(47),
            Token::Word(Word::Struct) if true => Some(48),
            Token::Word(Word::True) if true => Some(49),
            Token::Word(Word::Use) if true => Some(50),
            Token::Word(Word::When) if true => Some(51),
            Token::Word(Word::Where) if true => Some(52),
            Token::LeftBrace if true => Some(53),
            Token::Pipe if true => Some(54),
            Token::RightBrace if true => Some(55),
            Token::Tilde if true => Some(56),
            _ => None,
        }
    }
    fn __token_to_symbol<
        'input,
        'err,
    >(
        __token_index: usize,
        __token: Token<'input>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> __Symbol<'input>
    {
        #[allow(clippy::manual_range_patterns)]match __token_index {
            0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 28 | 29 | 30 | 31 | 32 | 34 | 35 | 36 | 38 | 39 | 40 | 42 | 43 | 44 | 45 | 46 | 48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 => __Symbol::Variant0(__token),
            27 | 37 | 47 => match __token {
                Token::Comment(__tok0) | Token::Word(Word::Ident(__tok0)) | Token::String(__tok0) if true => __Symbol::Variant1(__tok0),
                _ => unreachable!(),
            },
            33 => match __token {
                Token::Float(__tok0) if true => __Symbol::Variant2(__tok0),
                _ => unreachable!(),
            },
            41 => match __token {
                Token::Integer(__tok0) if true => __Symbol::Variant3(__tok0),
                _ => unreachable!(),
            },
            _ => unreachable!(),
        }
    }
    fn __simulate_reduce<
        'input,
        'err,
    >(
        __reduce_index: i16,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> __state_machine::SimulatedReduce<__StateMachine<'input, 'err>>
    where
        'input: 'err,
        'static: 'err,
    {
        match __reduce_index {
            0 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 0,
                }
            }
            1 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 0,
                }
            }
            2 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 1,
                }
            }
            3 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 1,
                }
            }
            4 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 2,
                }
            }
            5 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 2,
                }
            }
            6 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 3,
                }
            }
            7 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 4,
                }
            }
            8 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 4,
                }
            }
            9 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 5,
                }
            }
            10 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 5,
                }
            }
            11 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 6,
                }
            }
            12 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 6,
                }
            }
            13 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 7,
                }
            }
            14 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 7,
                }
            }
            15 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 7,
                }
            }
            16 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 7,
                }
            }
            17 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 8,
                }
            }
            18 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 8,
                }
            }
            19 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 9,
                }
            }
            20 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 10,
                }
            }
            21 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 10,
                }
            }
            22 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 11,
                }
            }
            23 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 12,
                }
            }
            24 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 12,
                }
            }
            25 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 13,
                }
            }
            26 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 13,
                }
            }
            27 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 14,
                }
            }
            28 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 15,
                }
            }
            29 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 15,
                }
            }
            30 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 16,
                }
            }
            31 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 16,
                }
            }
            32 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 17,
                }
            }
            33 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 18,
                }
            }
            34 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 18,
                }
            }
            35 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 19,
                }
            }
            36 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 19,
                }
            }
            37 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 20,
                }
            }
            38 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 21,
                }
            }
            39 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 21,
                }
            }
            40 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 22,
                }
            }
            41 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 22,
                }
            }
            42 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 23,
                }
            }
            43 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 24,
                }
            }
            44 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 24,
                }
            }
            45 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 25,
                }
            }
            46 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 25,
                }
            }
            47 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 26,
                }
            }
            48 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 27,
                }
            }
            49 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 27,
                }
            }
            50 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 28,
                }
            }
            51 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 28,
                }
            }
            52 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 29,
                }
            }
            53 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 30,
                }
            }
            54 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 30,
                }
            }
            55 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 31,
                }
            }
            56 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 31,
                }
            }
            57 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 32,
                }
            }
            58 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 33,
                }
            }
            59 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 33,
                }
            }
            60 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 34,
                }
            }
            61 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 34,
                }
            }
            62 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 35,
                }
            }
            63 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 36,
                }
            }
            64 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 36,
                }
            }
            65 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 37,
                }
            }
            66 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 37,
                }
            }
            67 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 38,
                }
            }
            68 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 38,
                }
            }
            69 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 39,
                }
            }
            70 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 39,
                }
            }
            71 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 39,
                }
            }
            72 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 40,
                }
            }
            73 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 40,
                }
            }
            74 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 41,
                }
            }
            75 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 41,
                }
            }
            76 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 42,
                }
            }
            77 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 42,
                }
            }
            78 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 43,
                }
            }
            79 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 43,
                }
            }
            80 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 44,
                }
            }
            81 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 44,
                }
            }
            82 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 44,
                }
            }
            83 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 44,
                }
            }
            84 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 45,
                }
            }
            85 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 45,
                }
            }
            86 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 45,
                }
            }
            87 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 45,
                }
            }
            88 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 46,
                }
            }
            89 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 46,
                }
            }
            90 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 46,
                }
            }
            91 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 46,
                }
            }
            92 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 47,
                }
            }
            93 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 48,
                }
            }
            94 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 49,
                }
            }
            95 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 50,
                }
            }
            96 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 50,
                }
            }
            97 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 50,
                }
            }
            98 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 51,
                }
            }
            99 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 52,
                }
            }
            100 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 52,
                }
            }
            101 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 52,
                }
            }
            102 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 53,
                }
            }
            103 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 53,
                }
            }
            104 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 54,
                }
            }
            105 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 55,
                }
            }
            106 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 56,
                }
            }
            107 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 56,
                }
            }
            108 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 57,
                }
            }
            109 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 57,
                }
            }
            110 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 58,
                }
            }
            111 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 59,
                }
            }
            112 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 59,
                }
            }
            113 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 60,
                }
            }
            114 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 60,
                }
            }
            115 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 61,
                }
            }
            116 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 62,
                }
            }
            117 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 62,
                }
            }
            118 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 63,
                }
            }
            119 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 63,
                }
            }
            120 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 64,
                }
            }
            121 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 65,
                }
            }
            122 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 66,
                }
            }
            123 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 66,
                }
            }
            124 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 67,
                }
            }
            125 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 67,
                }
            }
            126 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 67,
                }
            }
            127 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 68,
                }
            }
            128 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 68,
                }
            }
            129 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 69,
                }
            }
            130 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 70,
                }
            }
            131 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 71,
                }
            }
            132 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 71,
                }
            }
            133 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 72,
                }
            }
            134 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 73,
                }
            }
            135 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 73,
                }
            }
            136 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 74,
                }
            }
            137 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 75,
                }
            }
            138 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 75,
                }
            }
            139 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 75,
                }
            }
            140 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 75,
                }
            }
            141 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 76,
                }
            }
            142 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 76,
                }
            }
            143 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 76,
                }
            }
            144 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 76,
                }
            }
            145 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 77,
                }
            }
            146 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 77,
                }
            }
            147 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 77,
                }
            }
            148 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 77,
                }
            }
            149 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 78,
                }
            }
            150 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 78,
                }
            }
            151 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 78,
                }
            }
            152 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 78,
                }
            }
            153 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 79,
                }
            }
            154 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 80,
                }
            }
            155 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 80,
                }
            }
            156 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 80,
                }
            }
            157 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 80,
                }
            }
            158 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 9,
                    nonterminal_produced: 81,
                }
            }
            159 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 7,
                    nonterminal_produced: 81,
                }
            }
            160 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 82,
                }
            }
            161 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 82,
                }
            }
            162 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 83,
                }
            }
            163 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 84,
                }
            }
            164 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 84,
                }
            }
            165 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 84,
                }
            }
            166 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 85,
                }
            }
            167 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 85,
                }
            }
            168 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 85,
                }
            }
            169 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 86,
                }
            }
            170 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 86,
                }
            }
            171 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 87,
                }
            }
            172 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 88,
                }
            }
            173 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 89,
                }
            }
            174 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 90,
                }
            }
            175 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 90,
                }
            }
            176 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 90,
                }
            }
            177 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 90,
                }
            }
            178 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 90,
                }
            }
            179 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 90,
                }
            }
            180 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 90,
                }
            }
            181 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 91,
                }
            }
            182 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 91,
                }
            }
            183 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 91,
                }
            }
            184 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 91,
                }
            }
            185 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 91,
                }
            }
            186 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 92,
                }
            }
            187 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 93,
                }
            }
            188 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 94,
                }
            }
            189 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 6,
                    nonterminal_produced: 95,
                }
            }
            190 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 96,
                }
            }
            191 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 97,
                }
            }
            192 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 98,
                }
            }
            193 => __state_machine::SimulatedReduce::Accept,
            _ => panic!("invalid reduction index {}", __reduce_index)
        }
    }
    pub struct SourceParser {
        _priv: (),
    }

    impl Default for SourceParser { fn default() -> Self { Self::new() } }
    impl SourceParser {
        pub fn new() -> SourceParser {
            SourceParser {
                _priv: (),
            }
        }

        #[allow(dead_code)]
        pub fn parse<
            'input,
            'err,
            __TOKEN: __ToTriple<'input, 'err, >,
            __TOKENS: IntoIterator<Item=__TOKEN>,
        >(
            &self,
            errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
            __tokens0: __TOKENS,
        ) -> Result<Module, __lalrpop_util::ParseError<Coord, Token<'input>, &'static str>>
        {
            let __tokens = __tokens0.into_iter();
            let mut __tokens = __tokens.map(|t| __ToTriple::to_triple(t));
            __state_machine::Parser::drive(
                __StateMachine {
                    errors,
                    __phantom: core::marker::PhantomData::<(&(), &())>,
                },
                __tokens,
            )
        }
    }
    fn __accepts<
        'input,
        'err,
    >(
        __error_state: Option<i16>,
        __states: &[i16],
        __opt_integer: Option<usize>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> bool
    where
        'input: 'err,
        'static: 'err,
    {
        let mut __states = __states.to_vec();
        __states.extend(__error_state);
        loop {
            let mut __states_len = __states.len();
            let __top = __states[__states_len - 1];
            let __action = match __opt_integer {
                None => __EOF_ACTION[__top as usize],
                Some(__integer) => __action(__top, __integer),
            };
            if __action == 0 { return false; }
            if __action > 0 { return true; }
            let (__to_pop, __nt) = match __simulate_reduce(-(__action + 1), core::marker::PhantomData::<(&(), &())>) {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop, nonterminal_produced
                } => (states_to_pop, nonterminal_produced),
                __state_machine::SimulatedReduce::Accept => return true,
            };
            __states_len -= __to_pop;
            __states.truncate(__states_len);
            let __top = __states[__states_len - 1];
            let __next_state = __goto(__top, __nt);
            __states.push(__next_state);
        }
    }
    fn __reduce<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __action: i16,
        __lookahead_start: Option<&Coord>,
        __states: &mut alloc::vec::Vec<i16>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> Option<Result<Module,__lalrpop_util::ParseError<Coord, Token<'input>, &'static str>>>
    {
        let (__pop_states, __nonterminal) = match __action {
            0 => {
                __reduce0(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            1 => {
                __reduce1(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            2 => {
                __reduce2(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            3 => {
                __reduce3(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            4 => {
                __reduce4(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            5 => {
                __reduce5(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            6 => {
                __reduce6(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            7 => {
                __reduce7(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            8 => {
                __reduce8(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            9 => {
                __reduce9(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            10 => {
                __reduce10(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            11 => {
                __reduce11(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            12 => {
                __reduce12(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            13 => {
                __reduce13(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            14 => {
                __reduce14(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            15 => {
                __reduce15(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            16 => {
                __reduce16(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            17 => {
                __reduce17(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            18 => {
                __reduce18(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            19 => {
                __reduce19(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            20 => {
                __reduce20(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            21 => {
                __reduce21(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            22 => {
                __reduce22(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            23 => {
                __reduce23(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            24 => {
                __reduce24(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            25 => {
                __reduce25(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            26 => {
                __reduce26(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            27 => {
                __reduce27(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            28 => {
                __reduce28(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            29 => {
                __reduce29(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            30 => {
                __reduce30(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            31 => {
                __reduce31(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            32 => {
                __reduce32(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            33 => {
                __reduce33(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            34 => {
                __reduce34(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            35 => {
                __reduce35(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            36 => {
                __reduce36(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            37 => {
                __reduce37(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            38 => {
                __reduce38(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            39 => {
                __reduce39(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            40 => {
                __reduce40(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            41 => {
                __reduce41(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            42 => {
                __reduce42(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            43 => {
                __reduce43(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            44 => {
                __reduce44(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            45 => {
                __reduce45(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            46 => {
                __reduce46(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            47 => {
                __reduce47(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            48 => {
                __reduce48(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            49 => {
                __reduce49(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            50 => {
                __reduce50(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            51 => {
                __reduce51(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            52 => {
                __reduce52(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            53 => {
                __reduce53(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            54 => {
                __reduce54(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            55 => {
                __reduce55(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            56 => {
                __reduce56(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            57 => {
                __reduce57(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            58 => {
                __reduce58(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            59 => {
                __reduce59(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            60 => {
                __reduce60(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            61 => {
                __reduce61(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            62 => {
                __reduce62(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            63 => {
                __reduce63(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            64 => {
                __reduce64(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            65 => {
                __reduce65(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            66 => {
                __reduce66(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            67 => {
                __reduce67(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            68 => {
                __reduce68(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            69 => {
                __reduce69(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            70 => {
                __reduce70(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            71 => {
                __reduce71(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            72 => {
                __reduce72(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            73 => {
                __reduce73(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            74 => {
                __reduce74(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            75 => {
                __reduce75(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            76 => {
                __reduce76(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            77 => {
                __reduce77(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            78 => {
                __reduce78(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            79 => {
                __reduce79(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            80 => {
                __reduce80(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            81 => {
                __reduce81(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            82 => {
                __reduce82(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            83 => {
                __reduce83(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            84 => {
                __reduce84(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            85 => {
                __reduce85(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            86 => {
                __reduce86(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            87 => {
                __reduce87(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            88 => {
                __reduce88(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            89 => {
                __reduce89(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            90 => {
                __reduce90(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            91 => {
                __reduce91(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            92 => {
                __reduce92(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            93 => {
                __reduce93(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            94 => {
                __reduce94(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            95 => {
                __reduce95(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            96 => {
                __reduce96(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            97 => {
                __reduce97(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            98 => {
                __reduce98(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            99 => {
                __reduce99(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            100 => {
                __reduce100(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            101 => {
                __reduce101(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            102 => {
                __reduce102(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            103 => {
                __reduce103(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            104 => {
                __reduce104(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            105 => {
                __reduce105(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            106 => {
                __reduce106(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            107 => {
                __reduce107(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            108 => {
                __reduce108(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            109 => {
                __reduce109(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            110 => {
                __reduce110(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            111 => {
                __reduce111(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            112 => {
                __reduce112(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            113 => {
                __reduce113(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            114 => {
                __reduce114(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            115 => {
                __reduce115(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            116 => {
                __reduce116(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            117 => {
                __reduce117(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            118 => {
                __reduce118(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            119 => {
                __reduce119(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            120 => {
                __reduce120(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            121 => {
                __reduce121(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            122 => {
                __reduce122(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            123 => {
                __reduce123(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            124 => {
                __reduce124(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            125 => {
                __reduce125(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            126 => {
                __reduce126(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            127 => {
                __reduce127(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            128 => {
                __reduce128(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            129 => {
                __reduce129(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            130 => {
                __reduce130(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            131 => {
                __reduce131(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            132 => {
                __reduce132(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            133 => {
                __reduce133(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            134 => {
                __reduce134(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            135 => {
                __reduce135(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            136 => {
                __reduce136(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            137 => {
                __reduce137(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            138 => {
                __reduce138(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            139 => {
                __reduce139(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            140 => {
                __reduce140(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            141 => {
                __reduce141(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            142 => {
                __reduce142(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            143 => {
                __reduce143(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            144 => {
                __reduce144(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            145 => {
                __reduce145(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            146 => {
                __reduce146(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            147 => {
                __reduce147(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            148 => {
                __reduce148(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            149 => {
                __reduce149(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            150 => {
                __reduce150(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            151 => {
                __reduce151(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            152 => {
                __reduce152(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            153 => {
                __reduce153(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            154 => {
                __reduce154(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            155 => {
                __reduce155(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            156 => {
                __reduce156(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            157 => {
                __reduce157(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            158 => {
                __reduce158(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            159 => {
                __reduce159(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            160 => {
                __reduce160(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            161 => {
                __reduce161(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            162 => {
                __reduce162(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            163 => {
                __reduce163(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            164 => {
                __reduce164(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            165 => {
                __reduce165(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            166 => {
                __reduce166(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            167 => {
                __reduce167(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            168 => {
                __reduce168(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            169 => {
                __reduce169(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            170 => {
                __reduce170(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            171 => {
                __reduce171(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            172 => {
                __reduce172(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            173 => {
                __reduce173(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            174 => {
                __reduce174(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            175 => {
                __reduce175(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            176 => {
                __reduce176(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            177 => {
                __reduce177(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            178 => {
                __reduce178(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            179 => {
                __reduce179(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            180 => {
                __reduce180(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            181 => {
                __reduce181(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            182 => {
                __reduce182(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            183 => {
                __reduce183(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            184 => {
                __reduce184(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            185 => {
                __reduce185(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            186 => {
                __reduce186(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            187 => {
                __reduce187(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            188 => {
                __reduce188(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            189 => {
                __reduce189(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            190 => {
                __reduce190(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            191 => {
                __reduce191(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            192 => {
                __reduce192(errors, __lookahead_start, __symbols, core::marker::PhantomData::<(&(), &())>)
            }
            193 => {
                // __Source = Source => ActionFn(0);
                let __sym0 = __pop_Variant37(__symbols);
                let __start = __sym0.0;
                let __end = __sym0.2;
                let __nt = super::__action0::<>(errors, __sym0);
                return Some(Ok(__nt));
            }
            _ => panic!("invalid action code {}", __action)
        };
        let __states_len = __states.len();
        __states.truncate(__states_len - __pop_states);
        let __state = *__states.last().unwrap();
        let __next_state = __goto(__state, __nonterminal);
        __states.push(__next_state);
        None
    }
    #[inline(never)]
    fn __symbol_type_mismatch() -> ! {
        panic!("symbol type mismatch")
    }
    fn __pop_Variant21<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>
    ) -> (Coord, (Ident, Block<Expression>), Coord)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant21(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant7<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>
    ) -> (Coord, (Token<'input>, Ident), Coord)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant7(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant9<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>
    ) -> (Coord, (alloc::vec::Vec<Token<'input>>, Expression), Coord)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant9(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant25<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>
    ) -> (Coord, Block<Expression>, Coord)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant25(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant24<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>
    ) -> (Coord, Block<Field>, Coord)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant24(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant26<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>
    ) -> (Coord, Block<Prototype>, Coord)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant26(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant11<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>
    ) -> (Coord, Expression, Coord)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant11(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant13<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>
    ) -> (Coord, Field, Coord)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant13(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant15<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>
    ) -> (Coord, FnArg, Coord)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant15(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant17<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>
    ) -> (Coord, Ident, Coord)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant17(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant37<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>
    ) -> (Coord, Module, Coord)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant37(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant19<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>
    ) -> (Coord, Prototype, Coord)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant19(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant0<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>
    ) -> (Coord, Token<'input>, Coord)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant0(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant23<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>
    ) -> (Coord, Value, Coord)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant23(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant27<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>
    ) -> (Coord, Vec<Expression>, Coord)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant27(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant34<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>
    ) -> (Coord, Vec<Field>, Coord)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant34(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant28<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>
    ) -> (Coord, Vec<FnArg>, Coord)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant28(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant29<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>
    ) -> (Coord, Vec<Ident>, Coord)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant29(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant35<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>
    ) -> (Coord, Vec<Prototype>, Coord)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant35(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant4<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>
    ) -> (Coord, __lalrpop_util::ErrorRecovery<Coord, Token<'input>, &'static str>, Coord)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant4(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant22<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>
    ) -> (Coord, alloc::vec::Vec<(Ident, Block<Expression>)>, Coord)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant22(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant10<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>
    ) -> (Coord, alloc::vec::Vec<(alloc::vec::Vec<Token<'input>>, Expression)>, Coord)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant10(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant12<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>
    ) -> (Coord, alloc::vec::Vec<Expression>, Coord)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant12(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant14<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>
    ) -> (Coord, alloc::vec::Vec<Field>, Coord)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant14(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant16<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>
    ) -> (Coord, alloc::vec::Vec<FnArg>, Coord)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant16(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant18<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>
    ) -> (Coord, alloc::vec::Vec<Ident>, Coord)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant18(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant20<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>
    ) -> (Coord, alloc::vec::Vec<Prototype>, Coord)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant20(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant5<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>
    ) -> (Coord, alloc::vec::Vec<Token<'input>>, Coord)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant5(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant8<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>
    ) -> (Coord, core::option::Option<(Token<'input>, Ident)>, Coord)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant8(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant30<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>
    ) -> (Coord, core::option::Option<Expression>, Coord)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant30(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant31<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>
    ) -> (Coord, core::option::Option<Field>, Coord)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant31(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant32<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>
    ) -> (Coord, core::option::Option<FnArg>, Coord)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant32(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant33<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>
    ) -> (Coord, core::option::Option<Ident>, Coord)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant33(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant36<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>
    ) -> (Coord, core::option::Option<Prototype>, Coord)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant36(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant6<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>
    ) -> (Coord, core::option::Option<Token<'input>>, Coord)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant6(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant2<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>
    ) -> (Coord, f64, Coord)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant2(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant3<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>
    ) -> (Coord, i64, Coord)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant3(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant1<
      'input,
    >(
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>
    ) -> (Coord, &'input str, Coord)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant1(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __reduce0<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // "\n"* =  => ActionFn(72);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action72::<>(errors, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (0, 0)
    }
    fn __reduce1<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // "\n"* = "\n"+ => ActionFn(73);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action73::<>(errors, __sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 0)
    }
    fn __reduce2<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // "\n"+ = "\n" => ActionFn(118);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action118::<>(errors, __sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 1)
    }
    fn __reduce3<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // "\n"+ = "\n"+, "\n" => ActionFn(119);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action119::<>(errors, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (2, 1)
    }
    fn __reduce4<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // "\n"? = "\n" => ActionFn(116);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action116::<>(errors, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 2)
    }
    fn __reduce5<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // "\n"? =  => ActionFn(117);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action117::<>(errors, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (0, 2)
    }
    fn __reduce6<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // ("->" Ident) = "->", Ident => ActionFn(88);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant17(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action88::<>(errors, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (2, 3)
    }
    fn __reduce7<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // ("->" Ident)? = "->", Ident => ActionFn(162);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant17(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action162::<>(errors, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (2, 4)
    }
    fn __reduce8<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // ("->" Ident)? =  => ActionFn(87);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action87::<>(errors, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (0, 4)
    }
    fn __reduce9<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // ("\n"* TopLevel) = TopLevel => ActionFn(158);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action158::<>(errors, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 5)
    }
    fn __reduce10<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // ("\n"* TopLevel) = "\n"+, TopLevel => ActionFn(159);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action159::<>(errors, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (2, 5)
    }
    fn __reduce11<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // ("\n"* TopLevel)* =  => ActionFn(69);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action69::<>(errors, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (0, 6)
    }
    fn __reduce12<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // ("\n"* TopLevel)* = ("\n"* TopLevel)+ => ActionFn(70);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action70::<>(errors, __sym0);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (1, 6)
    }
    fn __reduce13<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // ("\n"* TopLevel)+ = TopLevel => ActionFn(165);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action165::<>(errors, __sym0);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (1, 7)
    }
    fn __reduce14<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // ("\n"* TopLevel)+ = "\n"+, TopLevel => ActionFn(166);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action166::<>(errors, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (2, 7)
    }
    fn __reduce15<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // ("\n"* TopLevel)+ = ("\n"* TopLevel)+, TopLevel => ActionFn(167);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action167::<>(errors, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (2, 7)
    }
    fn __reduce16<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // ("\n"* TopLevel)+ = ("\n"* TopLevel)+, "\n"+, TopLevel => ActionFn(168);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant5(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action168::<>(errors, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (3, 7)
    }
    fn __reduce17<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // ("\n"?) = "\n" => ActionFn(160);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action160::<>(errors, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 8)
    }
    fn __reduce18<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // ("\n"?) =  => ActionFn(161);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action161::<>(errors, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (0, 8)
    }
    fn __reduce19<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // ("for" Ident) = "for", Ident => ActionFn(77);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant17(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action77::<>(errors, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (2, 9)
    }
    fn __reduce20<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // ("for" Ident)? = "for", Ident => ActionFn(179);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant17(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action179::<>(errors, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (2, 10)
    }
    fn __reduce21<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // ("for" Ident)? =  => ActionFn(76);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action76::<>(errors, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (0, 10)
    }
    fn __reduce22<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<Expression> ",") = Expression, "," => ActionFn(103);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action103::<>(errors, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (2, 11)
    }
    fn __reduce23<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<Expression> ",")* =  => ActionFn(101);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action101::<>(errors, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (0, 12)
    }
    fn __reduce24<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<Expression> ",")* = (<Expression> ",")+ => ActionFn(102);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action102::<>(errors, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 12)
    }
    fn __reduce25<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<Expression> ",")+ = Expression, "," => ActionFn(182);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action182::<>(errors, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (2, 13)
    }
    fn __reduce26<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<Expression> ",")+ = (<Expression> ",")+, Expression, "," => ActionFn(183);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action183::<>(errors, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (3, 13)
    }
    fn __reduce27<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<Field> "\n") = Field, "\n" => ActionFn(131);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action131::<>(errors, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (2, 14)
    }
    fn __reduce28<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<Field> "\n")* =  => ActionFn(129);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action129::<>(errors, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (0, 15)
    }
    fn __reduce29<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<Field> "\n")* = (<Field> "\n")+ => ActionFn(130);
        let __sym0 = __pop_Variant14(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action130::<>(errors, __sym0);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (1, 15)
    }
    fn __reduce30<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<Field> "\n")+ = Field, "\n" => ActionFn(186);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action186::<>(errors, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (2, 16)
    }
    fn __reduce31<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<Field> "\n")+ = (<Field> "\n")+, Field, "\n" => ActionFn(187);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant13(__symbols);
        let __sym0 = __pop_Variant14(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action187::<>(errors, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (3, 16)
    }
    fn __reduce32<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<FnArg> ",") = FnArg, "," => ActionFn(98);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant15(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action98::<>(errors, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (2, 17)
    }
    fn __reduce33<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<FnArg> ",")* =  => ActionFn(96);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action96::<>(errors, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (0, 18)
    }
    fn __reduce34<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<FnArg> ",")* = (<FnArg> ",")+ => ActionFn(97);
        let __sym0 = __pop_Variant16(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action97::<>(errors, __sym0);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (1, 18)
    }
    fn __reduce35<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<FnArg> ",")+ = FnArg, "," => ActionFn(190);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant15(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action190::<>(errors, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (2, 19)
    }
    fn __reduce36<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<FnArg> ",")+ = (<FnArg> ",")+, FnArg, "," => ActionFn(191);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant15(__symbols);
        let __sym0 = __pop_Variant16(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action191::<>(errors, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (3, 19)
    }
    fn __reduce37<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<FnDef> "\n") = FnDef, "\n" => ActionFn(126);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action126::<>(errors, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (2, 20)
    }
    fn __reduce38<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<FnDef> "\n")* =  => ActionFn(124);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action124::<>(errors, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (0, 21)
    }
    fn __reduce39<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<FnDef> "\n")* = (<FnDef> "\n")+ => ActionFn(125);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action125::<>(errors, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 21)
    }
    fn __reduce40<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<FnDef> "\n")+ = FnDef, "\n" => ActionFn(194);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action194::<>(errors, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (2, 22)
    }
    fn __reduce41<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<FnDef> "\n")+ = (<FnDef> "\n")+, FnDef, "\n" => ActionFn(195);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action195::<>(errors, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (3, 22)
    }
    fn __reduce42<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<Ident> "+") = Ident, "+" => ActionFn(111);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant17(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action111::<>(errors, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (2, 23)
    }
    fn __reduce43<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<Ident> "+")* =  => ActionFn(109);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action109::<>(errors, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (0, 24)
    }
    fn __reduce44<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<Ident> "+")* = (<Ident> "+")+ => ActionFn(110);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action110::<>(errors, __sym0);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (1, 24)
    }
    fn __reduce45<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<Ident> "+")+ = Ident, "+" => ActionFn(198);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant17(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action198::<>(errors, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (2, 25)
    }
    fn __reduce46<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<Ident> "+")+ = (<Ident> "+")+, Ident, "+" => ActionFn(199);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant17(__symbols);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action199::<>(errors, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (3, 25)
    }
    fn __reduce47<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<Ident> ",") = Ident, "," => ActionFn(93);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant17(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action93::<>(errors, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (2, 26)
    }
    fn __reduce48<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<Ident> ",")* =  => ActionFn(91);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action91::<>(errors, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (0, 27)
    }
    fn __reduce49<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<Ident> ",")* = (<Ident> ",")+ => ActionFn(92);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action92::<>(errors, __sym0);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (1, 27)
    }
    fn __reduce50<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<Ident> ",")+ = Ident, "," => ActionFn(202);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant17(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action202::<>(errors, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (2, 28)
    }
    fn __reduce51<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<Ident> ",")+ = (<Ident> ",")+, Ident, "," => ActionFn(203);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant17(__symbols);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action203::<>(errors, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (3, 28)
    }
    fn __reduce52<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<Prototype> "\n") = Prototype, "\n" => ActionFn(136);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant19(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action136::<>(errors, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (2, 29)
    }
    fn __reduce53<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<Prototype> "\n")* =  => ActionFn(134);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action134::<>(errors, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (0, 30)
    }
    fn __reduce54<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<Prototype> "\n")* = (<Prototype> "\n")+ => ActionFn(135);
        let __sym0 = __pop_Variant20(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action135::<>(errors, __sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 30)
    }
    fn __reduce55<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<Prototype> "\n")+ = Prototype, "\n" => ActionFn(206);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant19(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action206::<>(errors, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (2, 31)
    }
    fn __reduce56<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<Prototype> "\n")+ = (<Prototype> "\n")+, Prototype, "\n" => ActionFn(207);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant19(__symbols);
        let __sym0 = __pop_Variant20(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action207::<>(errors, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (3, 31)
    }
    fn __reduce57<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<Statement> "\n") = Statement, "\n" => ActionFn(143);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action143::<>(errors, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (2, 32)
    }
    fn __reduce58<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<Statement> "\n")* =  => ActionFn(141);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action141::<>(errors, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (0, 33)
    }
    fn __reduce59<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<Statement> "\n")* = (<Statement> "\n")+ => ActionFn(142);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action142::<>(errors, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 33)
    }
    fn __reduce60<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<Statement> "\n")+ = Statement, "\n" => ActionFn(210);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action210::<>(errors, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (2, 34)
    }
    fn __reduce61<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<Statement> "\n")+ = (<Statement> "\n")+, Statement, "\n" => ActionFn(211);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action211::<>(errors, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (3, 34)
    }
    fn __reduce62<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // (WhenBlock) = WhenBlock => ActionFn(83);
        let __sym0 = __pop_Variant21(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action83::<>(errors, __sym0);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (1, 35)
    }
    fn __reduce63<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // (WhenBlock)* =  => ActionFn(81);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action81::<>(errors, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (0, 36)
    }
    fn __reduce64<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // (WhenBlock)* = (WhenBlock)+ => ActionFn(82);
        let __sym0 = __pop_Variant22(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action82::<>(errors, __sym0);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (1, 36)
    }
    fn __reduce65<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // (WhenBlock)+ = WhenBlock => ActionFn(214);
        let __sym0 = __pop_Variant21(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action214::<>(errors, __sym0);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (1, 37)
    }
    fn __reduce66<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // (WhenBlock)+ = (WhenBlock)+, WhenBlock => ActionFn(215);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant21(__symbols);
        let __sym0 = __pop_Variant22(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action215::<>(errors, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (2, 37)
    }
    fn __reduce67<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Atom = Ident => ActionFn(24);
        let __sym0 = __pop_Variant17(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action24::<>(errors, __sym0);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (1, 38)
    }
    fn __reduce68<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Atom = Atom0 => ActionFn(25);
        let __sym0 = __pop_Variant23(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action25::<>(errors, __sym0);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (1, 38)
    }
    fn __reduce69<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Atom0 = "int" => ActionFn(21);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action21::<>(errors, __sym0);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (1, 39)
    }
    fn __reduce70<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Atom0 = "float" => ActionFn(22);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action22::<>(errors, __sym0);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (1, 39)
    }
    fn __reduce71<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Atom0 = "string" => ActionFn(23);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action23::<>(errors, __sym0);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (1, 39)
    }
    fn __reduce72<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Block<Field> = "{", "\n", Lines<Field>, "}" => ActionFn(171);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant34(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action171::<>(errors, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (4, 40)
    }
    fn __reduce73<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Block<Field> = "{", Lines<Field>, "}" => ActionFn(172);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant34(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action172::<>(errors, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (3, 40)
    }
    fn __reduce74<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Block<FnDef> = "{", "\n", Lines<FnDef>, "}" => ActionFn(173);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action173::<>(errors, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (4, 41)
    }
    fn __reduce75<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Block<FnDef> = "{", Lines<FnDef>, "}" => ActionFn(174);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action174::<>(errors, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (3, 41)
    }
    fn __reduce76<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Block<Prototype> = "{", "\n", Lines<Prototype>, "}" => ActionFn(175);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant35(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action175::<>(errors, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (4, 42)
    }
    fn __reduce77<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Block<Prototype> = "{", Lines<Prototype>, "}" => ActionFn(176);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant35(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action176::<>(errors, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant26(__nt), __end));
        (3, 42)
    }
    fn __reduce78<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Block<Statement> = "{", "\n", Lines<Statement>, "}" => ActionFn(177);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action177::<>(errors, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (4, 43)
    }
    fn __reduce79<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Block<Statement> = "{", Lines<Statement>, "}" => ActionFn(178);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant27(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action178::<>(errors, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (3, 43)
    }
    fn __reduce80<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Comma<Expression> = Expression => ActionFn(218);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action218::<>(errors, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 44)
    }
    fn __reduce81<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Comma<Expression> =  => ActionFn(219);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action219::<>(errors, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (0, 44)
    }
    fn __reduce82<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Comma<Expression> = (<Expression> ",")+, Expression => ActionFn(220);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action220::<>(errors, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 44)
    }
    fn __reduce83<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Comma<Expression> = (<Expression> ",")+ => ActionFn(221);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action221::<>(errors, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 44)
    }
    fn __reduce84<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Comma<FnArg> = FnArg => ActionFn(226);
        let __sym0 = __pop_Variant15(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action226::<>(errors, __sym0);
        __symbols.push((__start, __Symbol::Variant28(__nt), __end));
        (1, 45)
    }
    fn __reduce85<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Comma<FnArg> =  => ActionFn(227);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action227::<>(errors, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant28(__nt), __end));
        (0, 45)
    }
    fn __reduce86<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Comma<FnArg> = (<FnArg> ",")+, FnArg => ActionFn(228);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant15(__symbols);
        let __sym0 = __pop_Variant16(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action228::<>(errors, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant28(__nt), __end));
        (2, 45)
    }
    fn __reduce87<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Comma<FnArg> = (<FnArg> ",")+ => ActionFn(229);
        let __sym0 = __pop_Variant16(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action229::<>(errors, __sym0);
        __symbols.push((__start, __Symbol::Variant28(__nt), __end));
        (1, 45)
    }
    fn __reduce88<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Comma<Ident> = Ident => ActionFn(234);
        let __sym0 = __pop_Variant17(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action234::<>(errors, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 46)
    }
    fn __reduce89<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Comma<Ident> =  => ActionFn(235);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action235::<>(errors, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (0, 46)
    }
    fn __reduce90<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Comma<Ident> = (<Ident> ",")+, Ident => ActionFn(236);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant17(__symbols);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action236::<>(errors, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (2, 46)
    }
    fn __reduce91<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Comma<Ident> = (<Ident> ",")+ => ActionFn(237);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action237::<>(errors, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 46)
    }
    fn __reduce92<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Effect = "effect" => ActionFn(5);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action5::<>(errors, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 47)
    }
    fn __reduce93<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // EffectDef = Effect, Ident, ":", Plus<Ident>, Block<Prototype> => ActionFn(53);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant26(__symbols);
        let __sym3 = __pop_Variant29(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant17(__symbols);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action53::<>(errors, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (5, 48)
    }
    fn __reduce94<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Else = "else" => ActionFn(12);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action12::<>(errors, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 49)
    }
    fn __reduce95<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Expression = Expression, "+", Expression2 => ActionFn(41);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action41::<>(errors, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (3, 50)
    }
    fn __reduce96<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Expression = Expression, "-", Expression2 => ActionFn(42);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action42::<>(errors, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (3, 50)
    }
    fn __reduce97<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Expression = Expression2 => ActionFn(43);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action43::<>(errors, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 50)
    }
    fn __reduce98<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Expression1 = Term => ActionFn(37);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action37::<>(errors, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 51)
    }
    fn __reduce99<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Expression2 = Expression2, "*", Expression1 => ActionFn(38);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action38::<>(errors, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (3, 52)
    }
    fn __reduce100<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Expression2 = Expression2, "/", Expression1 => ActionFn(39);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action39::<>(errors, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (3, 52)
    }
    fn __reduce101<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Expression2 = Expression1 => ActionFn(40);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action40::<>(errors, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 52)
    }
    fn __reduce102<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Expression? = Expression => ActionFn(99);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action99::<>(errors, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 53)
    }
    fn __reduce103<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Expression? =  => ActionFn(100);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action100::<>(errors, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (0, 53)
    }
    fn __reduce104<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // False = "false" => ActionFn(15);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action15::<>(errors, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 54)
    }
    fn __reduce105<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Field = Ident, ":", IdentOrIdentWithGenerics => ActionFn(44);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant17(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant17(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action44::<>(errors, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (3, 55)
    }
    fn __reduce106<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Field? = Field => ActionFn(127);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action127::<>(errors, __sym0);
        __symbols.push((__start, __Symbol::Variant31(__nt), __end));
        (1, 56)
    }
    fn __reduce107<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Field? =  => ActionFn(128);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action128::<>(errors, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant31(__nt), __end));
        (0, 56)
    }
    fn __reduce108<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // FieldAccess = FieldAccess, ".", IdentOrIdentWithGenericsOrFnCall => ActionFn(35);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant11(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action35::<>(errors, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (3, 57)
    }
    fn __reduce109<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // FieldAccess = IdentOrIdentWithGenericsOrFnCall => ActionFn(36);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action36::<>(errors, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 57)
    }
    fn __reduce110<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Fn = "fn" => ActionFn(3);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action3::<>(errors, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 58)
    }
    fn __reduce111<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // FnArg = Self_ => ActionFn(46);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action46::<>(errors, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 59)
    }
    fn __reduce112<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // FnArg = Field => ActionFn(47);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action47::<>(errors, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 59)
    }
    fn __reduce113<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // FnArg? = FnArg => ActionFn(94);
        let __sym0 = __pop_Variant15(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action94::<>(errors, __sym0);
        __symbols.push((__start, __Symbol::Variant32(__nt), __end));
        (1, 60)
    }
    fn __reduce114<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // FnArg? =  => ActionFn(95);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action95::<>(errors, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant32(__nt), __end));
        (0, 60)
    }
    fn __reduce115<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // FnCall = IdentOrIdentWithGenerics, "(", Comma<Expression>, ")" => ActionFn(50);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant27(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant17(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action50::<>(errors, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (4, 61)
    }
    fn __reduce116<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // FnDef = Fn, Prototype, Block<Statement> => ActionFn(216);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant25(__symbols);
        let __sym1 = __pop_Variant19(__symbols);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action216::<>(errors, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (3, 62)
    }
    fn __reduce117<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // FnDef = Fn, Prototype, Block<Statement>, (WhenBlock)+ => ActionFn(217);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant22(__symbols);
        let __sym2 = __pop_Variant25(__symbols);
        let __sym1 = __pop_Variant19(__symbols);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action217::<>(errors, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (4, 62)
    }
    fn __reduce118<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // FnDef? = FnDef => ActionFn(122);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action122::<>(errors, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 63)
    }
    fn __reduce119<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // FnDef? =  => ActionFn(123);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action123::<>(errors, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (0, 63)
    }
    fn __reduce120<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // From = "from" => ActionFn(9);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action9::<>(errors, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 64)
    }
    fn __reduce121<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Ident = "ident" => ActionFn(16);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action16::<>(errors, __sym0);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (1, 65)
    }
    fn __reduce122<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Ident? = Ident => ActionFn(107);
        let __sym0 = __pop_Variant17(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action107::<>(errors, __sym0);
        __symbols.push((__start, __Symbol::Variant33(__nt), __end));
        (1, 66)
    }
    fn __reduce123<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Ident? =  => ActionFn(108);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action108::<>(errors, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant33(__nt), __end));
        (0, 66)
    }
    fn __reduce124<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // IdentOrIdentWithGenerics = Ident => ActionFn(18);
        let __sym0 = __pop_Variant17(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action18::<>(errors, __sym0);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (1, 67)
    }
    fn __reduce125<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // IdentOrIdentWithGenerics = IdentWithGenerics => ActionFn(19);
        let __sym0 = __pop_Variant17(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action19::<>(errors, __sym0);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (1, 67)
    }
    fn __reduce126<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // IdentOrIdentWithGenerics = Self_ => ActionFn(20);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action20::<>(errors, __sym0);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (1, 67)
    }
    fn __reduce127<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // IdentOrIdentWithGenericsOrFnCall = IdentOrIdentWithGenerics => ActionFn(33);
        let __sym0 = __pop_Variant17(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action33::<>(errors, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 68)
    }
    fn __reduce128<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // IdentOrIdentWithGenericsOrFnCall = FnCall => ActionFn(34);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action34::<>(errors, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 68)
    }
    fn __reduce129<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // IdentWithGenerics = "ident", "<", Comma<Ident>, ">" => ActionFn(17);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant29(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action17::<>(errors, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (4, 69)
    }
    fn __reduce130<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // If = "if" => ActionFn(13);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action13::<>(errors, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 70)
    }
    fn __reduce131<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // IfDef = If, Statement, Block<Statement> => ActionFn(55);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant25(__symbols);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action55::<>(errors, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (3, 71)
    }
    fn __reduce132<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // IfDef = If, Statement, Block<Statement>, Else, Block<Statement> => ActionFn(56);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant25(__symbols);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant25(__symbols);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action56::<>(errors, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (5, 71)
    }
    fn __reduce133<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Impl = "impl" => ActionFn(7);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action7::<>(errors, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 72)
    }
    fn __reduce134<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // ImplDef = Impl, Ident, "for", Ident, Block<FnDef> => ActionFn(180);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant25(__symbols);
        let __sym3 = __pop_Variant17(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant17(__symbols);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0;
        let __end = __sym4.2;
        let __nt = super::__action180::<>(errors, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (5, 73)
    }
    fn __reduce135<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // ImplDef = Impl, Ident, Block<FnDef> => ActionFn(181);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant25(__symbols);
        let __sym1 = __pop_Variant17(__symbols);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action181::<>(errors, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (3, 73)
    }
    fn __reduce136<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Let = "let" => ActionFn(4);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action4::<>(errors, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 74)
    }
    fn __reduce137<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Lines<Field> = Field => ActionFn(222);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action222::<>(errors, __sym0);
        __symbols.push((__start, __Symbol::Variant34(__nt), __end));
        (1, 75)
    }
    fn __reduce138<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Lines<Field> =  => ActionFn(223);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action223::<>(errors, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant34(__nt), __end));
        (0, 75)
    }
    fn __reduce139<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Lines<Field> = (<Field> "\n")+, Field => ActionFn(224);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant13(__symbols);
        let __sym0 = __pop_Variant14(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action224::<>(errors, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant34(__nt), __end));
        (2, 75)
    }
    fn __reduce140<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Lines<Field> = (<Field> "\n")+ => ActionFn(225);
        let __sym0 = __pop_Variant14(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action225::<>(errors, __sym0);
        __symbols.push((__start, __Symbol::Variant34(__nt), __end));
        (1, 75)
    }
    fn __reduce141<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Lines<FnDef> = FnDef => ActionFn(230);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action230::<>(errors, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 76)
    }
    fn __reduce142<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Lines<FnDef> =  => ActionFn(231);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action231::<>(errors, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (0, 76)
    }
    fn __reduce143<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Lines<FnDef> = (<FnDef> "\n")+, FnDef => ActionFn(232);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action232::<>(errors, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 76)
    }
    fn __reduce144<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Lines<FnDef> = (<FnDef> "\n")+ => ActionFn(233);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action233::<>(errors, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 76)
    }
    fn __reduce145<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Lines<Prototype> = Prototype => ActionFn(242);
        let __sym0 = __pop_Variant19(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action242::<>(errors, __sym0);
        __symbols.push((__start, __Symbol::Variant35(__nt), __end));
        (1, 77)
    }
    fn __reduce146<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Lines<Prototype> =  => ActionFn(243);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action243::<>(errors, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant35(__nt), __end));
        (0, 77)
    }
    fn __reduce147<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Lines<Prototype> = (<Prototype> "\n")+, Prototype => ActionFn(244);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant19(__symbols);
        let __sym0 = __pop_Variant20(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action244::<>(errors, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant35(__nt), __end));
        (2, 77)
    }
    fn __reduce148<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Lines<Prototype> = (<Prototype> "\n")+ => ActionFn(245);
        let __sym0 = __pop_Variant20(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action245::<>(errors, __sym0);
        __symbols.push((__start, __Symbol::Variant35(__nt), __end));
        (1, 77)
    }
    fn __reduce149<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Lines<Statement> = Statement => ActionFn(246);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action246::<>(errors, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 78)
    }
    fn __reduce150<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Lines<Statement> =  => ActionFn(247);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action247::<>(errors, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (0, 78)
    }
    fn __reduce151<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Lines<Statement> = (<Statement> "\n")+, Statement => ActionFn(248);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action248::<>(errors, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (2, 78)
    }
    fn __reduce152<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Lines<Statement> = (<Statement> "\n")+ => ActionFn(249);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action249::<>(errors, __sym0);
        __symbols.push((__start, __Symbol::Variant27(__nt), __end));
        (1, 78)
    }
    fn __reduce153<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // None = "none" => ActionFn(1);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action1::<>(errors, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 79)
    }
    fn __reduce154<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Plus<Ident> = Ident => ActionFn(238);
        let __sym0 = __pop_Variant17(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action238::<>(errors, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 80)
    }
    fn __reduce155<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Plus<Ident> =  => ActionFn(239);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action239::<>(errors, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (0, 80)
    }
    fn __reduce156<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Plus<Ident> = (<Ident> "+")+, Ident => ActionFn(240);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant17(__symbols);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0;
        let __end = __sym1.2;
        let __nt = super::__action240::<>(errors, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (2, 80)
    }
    fn __reduce157<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Plus<Ident> = (<Ident> "+")+ => ActionFn(241);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action241::<>(errors, __sym0);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (1, 80)
    }
    fn __reduce158<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Prototype = IdentOrIdentWithGenerics, "(", Comma<FnArg>, ")", "[", Comma<Ident>, "]", "->", Ident => ActionFn(163);
        assert!(__symbols.len() >= 9);
        let __sym8 = __pop_Variant17(__symbols);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant29(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant28(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant17(__symbols);
        let __start = __sym0.0;
        let __end = __sym8.2;
        let __nt = super::__action163::<>(errors, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (9, 81)
    }
    fn __reduce159<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Prototype = IdentOrIdentWithGenerics, "(", Comma<FnArg>, ")", "[", Comma<Ident>, "]" => ActionFn(164);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant29(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant28(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant17(__symbols);
        let __start = __sym0.0;
        let __end = __sym6.2;
        let __nt = super::__action164::<>(errors, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (7, 81)
    }
    fn __reduce160<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Prototype? = Prototype => ActionFn(132);
        let __sym0 = __pop_Variant19(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action132::<>(errors, __sym0);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (1, 82)
    }
    fn __reduce161<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Prototype? =  => ActionFn(133);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action133::<>(errors, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant36(__nt), __end));
        (0, 82)
    }
    fn __reduce162<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Self_ = "self" => ActionFn(11);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action11::<>(errors, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 83)
    }
    fn __reduce163<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Source =  => ActionFn(169);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action169::<>(errors, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant37(__nt), __end));
        (0, 84)
    }
    fn __reduce164<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Source = ("\n"* TopLevel)+ => ActionFn(170);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action170::<>(errors, __sym0);
        __symbols.push((__start, __Symbol::Variant37(__nt), __end));
        (1, 84)
    }
    fn __reduce165<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Source = error => ActionFn(68);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action68::<>(errors, __sym0);
        __symbols.push((__start, __Symbol::Variant37(__nt), __end));
        (1, 84)
    }
    fn __reduce166<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Statement = Let, Ident, "=", Expression => ActionFn(57);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant11(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant17(__symbols);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0;
        let __end = __sym3.2;
        let __nt = super::__action57::<>(errors, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (4, 85)
    }
    fn __reduce167<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Statement = IfDef => ActionFn(58);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action58::<>(errors, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 85)
    }
    fn __reduce168<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Statement = FieldAccess => ActionFn(59);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action59::<>(errors, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 85)
    }
    fn __reduce169<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Statement? = Statement => ActionFn(139);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action139::<>(errors, __sym0);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (1, 86)
    }
    fn __reduce170<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Statement? =  => ActionFn(140);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2)).unwrap_or_default();
        let __end = __start;
        let __nt = super::__action140::<>(errors, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant30(__nt), __end));
        (0, 86)
    }
    fn __reduce171<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // String = "string" => ActionFn(49);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action49::<>(errors, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 87)
    }
    fn __reduce172<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Struct = "struct" => ActionFn(6);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action6::<>(errors, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 88)
    }
    fn __reduce173<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // StructDef = Struct, Ident, Block<Field> => ActionFn(54);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant24(__symbols);
        let __sym1 = __pop_Variant17(__symbols);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action54::<>(errors, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (3, 89)
    }
    fn __reduce174<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Term = String => ActionFn(26);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action26::<>(errors, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 90)
    }
    fn __reduce175<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Term = "int" => ActionFn(27);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action27::<>(errors, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 90)
    }
    fn __reduce176<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Term = Ident => ActionFn(28);
        let __sym0 = __pop_Variant17(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action28::<>(errors, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 90)
    }
    fn __reduce177<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Term = FnCall => ActionFn(29);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action29::<>(errors, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 90)
    }
    fn __reduce178<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Term = True => ActionFn(30);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action30::<>(errors, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 90)
    }
    fn __reduce179<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Term = False => ActionFn(31);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action31::<>(errors, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 90)
    }
    fn __reduce180<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Term = "(", Expression, ")" => ActionFn(32);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant11(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action32::<>(errors, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (3, 90)
    }
    fn __reduce181<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // TopLevel = FnDef => ActionFn(62);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action62::<>(errors, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 91)
    }
    fn __reduce182<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // TopLevel = EffectDef => ActionFn(63);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action63::<>(errors, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 91)
    }
    fn __reduce183<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // TopLevel = StructDef => ActionFn(64);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action64::<>(errors, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 91)
    }
    fn __reduce184<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // TopLevel = UseDef => ActionFn(65);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action65::<>(errors, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 91)
    }
    fn __reduce185<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // TopLevel = ImplDef => ActionFn(66);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action66::<>(errors, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 91)
    }
    fn __reduce186<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // True = "true" => ActionFn(14);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action14::<>(errors, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 92)
    }
    fn __reduce187<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // TypeParameters = "<", Comma<Ident>, ">" => ActionFn(45);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant29(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action45::<>(errors, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant29(__nt), __end));
        (3, 93)
    }
    fn __reduce188<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Use = "use" => ActionFn(8);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action8::<>(errors, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 94)
    }
    fn __reduce189<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // UseDef = Use, "{", Comma<Ident>, "}", From, Ident => ActionFn(60);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant17(__symbols);
        let __sym4 = __pop_Variant11(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant29(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0;
        let __end = __sym5.2;
        let __nt = super::__action60::<>(errors, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (6, 95)
    }
    fn __reduce190<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // When = "when" => ActionFn(2);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action2::<>(errors, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 96)
    }
    fn __reduce191<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // WhenBlock = When, Ident, Block<Statement> => ActionFn(51);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant25(__symbols);
        let __sym1 = __pop_Variant17(__symbols);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0;
        let __end = __sym2.2;
        let __nt = super::__action51::<>(errors, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (3, 97)
    }
    fn __reduce192<
        'input,
        'err,
    >(
        errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
        __lookahead_start: Option<&Coord>,
        __symbols: &mut alloc::vec::Vec<(Coord,__Symbol<'input>,Coord)>,
        _: core::marker::PhantomData<(&'input (), &'err ())>,
    ) -> (usize, usize)
    {
        // Where = "where" => ActionFn(10);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0;
        let __end = __sym0.2;
        let __nt = super::__action10::<>(errors, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 98)
    }
}
#[allow(unused_imports)]
pub use self::__parse__Source::SourceParser;

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action0<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, __0, _): (Coord, Module, Coord),
) -> Module
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action1<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, __0, _): (Coord, Token<'input>, Coord),
) -> Expression
{
    Expression::Keyword(Keyword::None)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action2<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, __0, _): (Coord, Token<'input>, Coord),
) -> Expression
{
    Expression::Keyword(Keyword::When)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action3<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, __0, _): (Coord, Token<'input>, Coord),
) -> Expression
{
    Expression::Keyword(Keyword::Fn)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action4<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, __0, _): (Coord, Token<'input>, Coord),
) -> Expression
{
    Expression::Keyword(Keyword::Let)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action5<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, __0, _): (Coord, Token<'input>, Coord),
) -> Expression
{
    Expression::Keyword(Keyword::Effect)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action6<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, __0, _): (Coord, Token<'input>, Coord),
) -> Expression
{
    Expression::Keyword(Keyword::Struct)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action7<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, __0, _): (Coord, Token<'input>, Coord),
) -> Expression
{
    Expression::Keyword(Keyword::Impl)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action8<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, __0, _): (Coord, Token<'input>, Coord),
) -> Expression
{
    Expression::Keyword(Keyword::Use)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action9<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, __0, _): (Coord, Token<'input>, Coord),
) -> Expression
{
    Expression::Keyword(Keyword::From)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action10<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, __0, _): (Coord, Token<'input>, Coord),
) -> Expression
{
    Expression::Keyword(Keyword::Where)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action11<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, __0, _): (Coord, Token<'input>, Coord),
) -> Expression
{
    Expression::Keyword(Keyword::Self_)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action12<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, __0, _): (Coord, Token<'input>, Coord),
) -> Expression
{
    Expression::Keyword(Keyword::Else)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action13<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, __0, _): (Coord, Token<'input>, Coord),
) -> Expression
{
    Expression::Keyword(Keyword::If)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action14<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, __0, _): (Coord, Token<'input>, Coord),
) -> Expression
{
    Expression::Bool(true)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action15<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, __0, _): (Coord, Token<'input>, Coord),
) -> Expression
{
    Expression::Bool(false)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action16<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, i, _): (Coord, &'input str, Coord),
) -> Ident
{
    Ident(i.to_string(), None)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action17<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, i, _): (Coord, &'input str, Coord),
    (_, _, _): (Coord, Token<'input>, Coord),
    (_, g, _): (Coord, Vec<Ident>, Coord),
    (_, _, _): (Coord, Token<'input>, Coord),
) -> Ident
{
    Ident(i.to_string(), Some(g))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action18<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, i, _): (Coord, Ident, Coord),
) -> Ident
{
    i
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action19<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, i, _): (Coord, Ident, Coord),
) -> Ident
{
    i
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action20<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, __0, _): (Coord, Expression, Coord),
) -> Ident
{
    Ident("self".to_string(), None)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action21<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, i, _): (Coord, i64, Coord),
) -> Value
{
    Value::Literal(Literal::Integer(i))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action22<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, f, _): (Coord, f64, Coord),
) -> Value
{
    Value::Literal(Literal::Float(f))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action23<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, s, _): (Coord, &'input str, Coord),
) -> Value
{
    {
        let start = 1;
        let end = s.len() - 1;
        Value::Literal(Literal::String(s.get(start..end).expect(format!("malformed string {s}, strings must be quoted").as_str()).to_string()))
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action24<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, i, _): (Coord, Ident, Coord),
) -> Value
{
    Value::Ident(i)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action25<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, __0, _): (Coord, Value, Coord),
) -> Value
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action26<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, s, _): (Coord, Expression, Coord),
) -> Expression
{
    s
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action27<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, val, _): (Coord, i64, Coord),
) -> Expression
{
    Expression::Integer(val)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action28<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, i, _): (Coord, Ident, Coord),
) -> Expression
{
    Expression::Ident(i)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action29<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, f, _): (Coord, Expression, Coord),
) -> Expression
{
    f
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action30<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, true_, _): (Coord, Expression, Coord),
) -> Expression
{
    true_
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action31<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, false_, _): (Coord, Expression, Coord),
) -> Expression
{
    false_
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action32<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, _, _): (Coord, Token<'input>, Coord),
    (_, __0, _): (Coord, Expression, Coord),
    (_, _, _): (Coord, Token<'input>, Coord),
) -> Expression
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action33<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, i, _): (Coord, Ident, Coord),
) -> Expression
{
    Expression::Ident(i)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action34<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, f, _): (Coord, Expression, Coord),
) -> Expression
{
    f
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action35<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, lhs, _): (Coord, Expression, Coord),
    (_, _, _): (Coord, Token<'input>, Coord),
    (_, rhs, _): (Coord, Expression, Coord),
) -> Expression
{
    Expression::FieldAccess(FieldAccess(Box::new(lhs), Box::new(rhs)))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action36<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, lhs, _): (Coord, Expression, Coord),
) -> Expression
{
    lhs
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action37<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, __0, _): (Coord, Expression, Coord),
) -> Expression
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action38<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, lhs, _): (Coord, Expression, Coord),
    (_, _, _): (Coord, Token<'input>, Coord),
    (_, rhs, _): (Coord, Expression, Coord),
) -> Expression
{
    {
        Expression::BinaryExpression(BinaryOperation {
            lhs: Box::new(lhs),
            op: Operator::Mul,
            rhs: Box::new(rhs)
        })
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action39<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, lhs, _): (Coord, Expression, Coord),
    (_, _, _): (Coord, Token<'input>, Coord),
    (_, rhs, _): (Coord, Expression, Coord),
) -> Expression
{
    {
        Expression::BinaryExpression(BinaryOperation {
            lhs: Box::new(lhs),
            op: Operator::Div,
            rhs: Box::new(rhs)
        })
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action40<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, __0, _): (Coord, Expression, Coord),
) -> Expression
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action41<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, lhs, _): (Coord, Expression, Coord),
    (_, _, _): (Coord, Token<'input>, Coord),
    (_, rhs, _): (Coord, Expression, Coord),
) -> Expression
{
    {
        Expression::BinaryExpression(BinaryOperation {
            lhs: Box::new(lhs),
            op: Operator::Add,
            rhs: Box::new(rhs)
        })
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action42<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, lhs, _): (Coord, Expression, Coord),
    (_, _, _): (Coord, Token<'input>, Coord),
    (_, rhs, _): (Coord, Expression, Coord),
) -> Expression
{
    {
        Expression::BinaryExpression(BinaryOperation {
            lhs: Box::new(lhs),
            op: Operator::Sub,
            rhs: Box::new(rhs)
        })
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action43<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, __0, _): (Coord, Expression, Coord),
) -> Expression
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action44<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, name, _): (Coord, Ident, Coord),
    (_, _, _): (Coord, Token<'input>, Coord),
    (_, ty, _): (Coord, Ident, Coord),
) -> Field
{
    Field(name, ty)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action45<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, _, _): (Coord, Token<'input>, Coord),
    (_, __0, _): (Coord, Vec<Ident>, Coord),
    (_, _, _): (Coord, Token<'input>, Coord),
) -> Vec<Ident>
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action46<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, self_, _): (Coord, Expression, Coord),
) -> FnArg
{
    FnArg::Reciever
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action47<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, field, _): (Coord, Field, Coord),
) -> FnArg
{
    FnArg::Field(field)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action48<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, name, _): (Coord, Ident, Coord),
    (_, _, _): (Coord, Token<'input>, Coord),
    (_, args, _): (Coord, Vec<FnArg>, Coord),
    (_, _, _): (Coord, Token<'input>, Coord),
    (_, _, _): (Coord, Token<'input>, Coord),
    (_, effects, _): (Coord, Vec<Ident>, Coord),
    (_, _, _): (Coord, Token<'input>, Coord),
    (_, ret, _): (Coord, core::option::Option<(Token<'input>, Ident)>, Coord),
) -> Prototype
{
    {
        let ret = match ret {
            None => None,
            Some(r) => Some(r.1),
        };
        Prototype{name, args, ret, effects}
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action49<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, s, _): (Coord, &'input str, Coord),
) -> Expression
{
    {
        let start = 1;
        let end = s.len() - 1;
        Expression::String(s.get(start..end).expect(format!("malformed string {s}, strings must be quoted").as_str()).to_string())
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action50<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, name, _): (Coord, Ident, Coord),
    (_, _, _): (Coord, Token<'input>, Coord),
    (_, args, _): (Coord, Vec<Expression>, Coord),
    (_, _, _): (Coord, Token<'input>, Coord),
) -> Expression
{
    Expression::FnCall(FnCall(name, args))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action51<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, _, _): (Coord, Expression, Coord),
    (_, i, _): (Coord, Ident, Coord),
    (_, lines, _): (Coord, Block<Expression>, Coord),
) -> (Ident, Block<Expression>)
{
    (i, lines)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action52<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, _, _): (Coord, Expression, Coord),
    (_, proto, _): (Coord, Prototype, Coord),
    (_, block, _): (Coord, Block<Expression>, Coord),
    (_, handlers, _): (Coord, alloc::vec::Vec<(Ident, Block<Expression>)>, Coord),
) -> Expression
{
    Expression::FnDef(FnDef(proto, block, handlers))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action53<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, _, _): (Coord, Expression, Coord),
    (_, i, _): (Coord, Ident, Coord),
    (_, _, _): (Coord, Token<'input>, Coord),
    (_, effects, _): (Coord, Vec<Ident>, Coord),
    (_, block, _): (Coord, Block<Prototype>, Coord),
) -> Expression
{
    Expression::EffectDef(EffectDef(i, effects,block))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action54<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, _, _): (Coord, Expression, Coord),
    (_, i, _): (Coord, Ident, Coord),
    (_, fields, _): (Coord, Block<Field>, Coord),
) -> Expression
{
    Expression::StructDef(StructDef(i, fields))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action55<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, _, _): (Coord, Expression, Coord),
    (_, cond, _): (Coord, Expression, Coord),
    (_, if_, _): (Coord, Block<Expression>, Coord),
) -> Expression
{
    {
        let branch = Branch (
            Box::new(cond),
            vec![
                (Expression::Bool(true), if_),
            ]
        );
        Expression::Branch(branch)
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action56<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, _, _): (Coord, Expression, Coord),
    (_, cond, _): (Coord, Expression, Coord),
    (_, if_, _): (Coord, Block<Expression>, Coord),
    (_, _, _): (Coord, Expression, Coord),
    (_, else_, _): (Coord, Block<Expression>, Coord),
) -> Expression
{
    {
        let branch = Branch (
            Box::new(cond),
            vec![
                (Expression::Bool(true), if_),
                (Expression::Bool(false), else_),
            ]
        );
        Expression::Branch(branch)
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action57<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, _, _): (Coord, Expression, Coord),
    (_, name, _): (Coord, Ident, Coord),
    (_, _, _): (Coord, Token<'input>, Coord),
    (_, value, _): (Coord, Expression, Coord),
) -> Expression
{
    Expression::Binding(Binding(name, Box::new(value)))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action58<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, __0, _): (Coord, Expression, Coord),
) -> Expression
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action59<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, __0, _): (Coord, Expression, Coord),
) -> Expression
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action60<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, _, _): (Coord, Expression, Coord),
    (_, _, _): (Coord, Token<'input>, Coord),
    (_, imports, _): (Coord, Vec<Ident>, Coord),
    (_, _, _): (Coord, Token<'input>, Coord),
    (_, _, _): (Coord, Expression, Coord),
    (_, i, _): (Coord, Ident, Coord),
) -> Expression
{
    Expression::UseDef(UseDef(imports, i))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action61<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, _, _): (Coord, Expression, Coord),
    (_, i, _): (Coord, Ident, Coord),
    (_, t, _): (Coord, core::option::Option<(Token<'input>, Ident)>, Coord),
    (_, lines, _): (Coord, Block<Expression>, Coord),
) -> Expression
{
    Expression::ImplDef(ImplDef(i, t.map(|t| t.1), lines))
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action62<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, __0, _): (Coord, Expression, Coord),
) -> Expression
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action63<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, __0, _): (Coord, Expression, Coord),
) -> Expression
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action64<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, __0, _): (Coord, Expression, Coord),
) -> Expression
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action65<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, __0, _): (Coord, Expression, Coord),
) -> Expression
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action66<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, __0, _): (Coord, Expression, Coord),
) -> Expression
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action67<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, expr, _): (Coord, alloc::vec::Vec<(alloc::vec::Vec<Token<'input>>, Expression)>, Coord),
) -> Module
{
    Module(expr.into_iter().map(|e| e.1).collect())
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action68<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, __0, _): (Coord, __lalrpop_util::ErrorRecovery<Coord, Token<'input>, &'static str>, Coord),
) -> Module
{
    {
        errors.push(__0);
        Module(vec![])
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action69<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __lookbehind: &Coord,
    __lookahead: &Coord,
) -> alloc::vec::Vec<(alloc::vec::Vec<Token<'input>>, Expression)>
{
    alloc::vec![]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action70<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, v, _): (Coord, alloc::vec::Vec<(alloc::vec::Vec<Token<'input>>, Expression)>, Coord),
) -> alloc::vec::Vec<(alloc::vec::Vec<Token<'input>>, Expression)>
{
    v
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action71<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, __0, _): (Coord, alloc::vec::Vec<Token<'input>>, Coord),
    (_, __1, _): (Coord, Expression, Coord),
) -> (alloc::vec::Vec<Token<'input>>, Expression)
{
    (__0, __1)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action72<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __lookbehind: &Coord,
    __lookahead: &Coord,
) -> alloc::vec::Vec<Token<'input>>
{
    alloc::vec![]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action73<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, v, _): (Coord, alloc::vec::Vec<Token<'input>>, Coord),
) -> alloc::vec::Vec<Token<'input>>
{
    v
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action74<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, _, _): (Coord, Token<'input>, Coord),
    (_, _, _): (Coord, core::option::Option<Token<'input>>, Coord),
    (_, lines, _): (Coord, Vec<Expression>, Coord),
    (_, _, _): (Coord, Token<'input>, Coord),
) -> Block<Expression>
{
    Block(lines)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action75<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, __0, _): (Coord, (Token<'input>, Ident), Coord),
) -> core::option::Option<(Token<'input>, Ident)>
{
    Some(__0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action76<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __lookbehind: &Coord,
    __lookahead: &Coord,
) -> core::option::Option<(Token<'input>, Ident)>
{
    None
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action77<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, __0, _): (Coord, Token<'input>, Coord),
    (_, __1, _): (Coord, Ident, Coord),
) -> (Token<'input>, Ident)
{
    (__0, __1)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action78<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, _, _): (Coord, Token<'input>, Coord),
    (_, _, _): (Coord, core::option::Option<Token<'input>>, Coord),
    (_, lines, _): (Coord, Vec<Field>, Coord),
    (_, _, _): (Coord, Token<'input>, Coord),
) -> Block<Field>
{
    Block(lines)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action79<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, _, _): (Coord, Token<'input>, Coord),
    (_, _, _): (Coord, core::option::Option<Token<'input>>, Coord),
    (_, lines, _): (Coord, Vec<Prototype>, Coord),
    (_, _, _): (Coord, Token<'input>, Coord),
) -> Block<Prototype>
{
    Block(lines)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action80<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, mut v, _): (Coord, alloc::vec::Vec<Ident>, Coord),
    (_, e, _): (Coord, core::option::Option<Ident>, Coord),
) -> Vec<Ident>
{
    match e { // (1)
        None=> v,
        Some(e) => {
            v.push(e);
            v
        }
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action81<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __lookbehind: &Coord,
    __lookahead: &Coord,
) -> alloc::vec::Vec<(Ident, Block<Expression>)>
{
    alloc::vec![]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action82<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, v, _): (Coord, alloc::vec::Vec<(Ident, Block<Expression>)>, Coord),
) -> alloc::vec::Vec<(Ident, Block<Expression>)>
{
    v
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action83<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, __0, _): (Coord, (Ident, Block<Expression>), Coord),
) -> (Ident, Block<Expression>)
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action84<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, _, _): (Coord, Token<'input>, Coord),
    (_, _, _): (Coord, core::option::Option<Token<'input>>, Coord),
    (_, lines, _): (Coord, Vec<Expression>, Coord),
    (_, _, _): (Coord, Token<'input>, Coord),
) -> Block<Expression>
{
    Block(lines)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action85<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, mut v, _): (Coord, alloc::vec::Vec<Expression>, Coord),
    (_, e, _): (Coord, core::option::Option<Expression>, Coord),
) -> Vec<Expression>
{
    match e { // (1)
        None=> v,
        Some(e) => {
            v.push(e);
            v
        }
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action86<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, __0, _): (Coord, (Token<'input>, Ident), Coord),
) -> core::option::Option<(Token<'input>, Ident)>
{
    Some(__0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action87<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __lookbehind: &Coord,
    __lookahead: &Coord,
) -> core::option::Option<(Token<'input>, Ident)>
{
    None
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action88<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, __0, _): (Coord, Token<'input>, Coord),
    (_, __1, _): (Coord, Ident, Coord),
) -> (Token<'input>, Ident)
{
    (__0, __1)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action89<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, mut v, _): (Coord, alloc::vec::Vec<FnArg>, Coord),
    (_, e, _): (Coord, core::option::Option<FnArg>, Coord),
) -> Vec<FnArg>
{
    match e { // (1)
        None=> v,
        Some(e) => {
            v.push(e);
            v
        }
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action90<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, mut v, _): (Coord, alloc::vec::Vec<Ident>, Coord),
    (_, e, _): (Coord, core::option::Option<Ident>, Coord),
) -> Vec<Ident>
{
    match e { // (1)
        None=> v,
        Some(e) => {
            v.push(e);
            v
        }
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action91<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __lookbehind: &Coord,
    __lookahead: &Coord,
) -> alloc::vec::Vec<Ident>
{
    alloc::vec![]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action92<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, v, _): (Coord, alloc::vec::Vec<Ident>, Coord),
) -> alloc::vec::Vec<Ident>
{
    v
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action93<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, __0, _): (Coord, Ident, Coord),
    (_, _, _): (Coord, Token<'input>, Coord),
) -> Ident
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action94<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, __0, _): (Coord, FnArg, Coord),
) -> core::option::Option<FnArg>
{
    Some(__0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action95<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __lookbehind: &Coord,
    __lookahead: &Coord,
) -> core::option::Option<FnArg>
{
    None
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action96<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __lookbehind: &Coord,
    __lookahead: &Coord,
) -> alloc::vec::Vec<FnArg>
{
    alloc::vec![]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action97<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, v, _): (Coord, alloc::vec::Vec<FnArg>, Coord),
) -> alloc::vec::Vec<FnArg>
{
    v
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action98<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, __0, _): (Coord, FnArg, Coord),
    (_, _, _): (Coord, Token<'input>, Coord),
) -> FnArg
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action99<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, __0, _): (Coord, Expression, Coord),
) -> core::option::Option<Expression>
{
    Some(__0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action100<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __lookbehind: &Coord,
    __lookahead: &Coord,
) -> core::option::Option<Expression>
{
    None
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action101<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __lookbehind: &Coord,
    __lookahead: &Coord,
) -> alloc::vec::Vec<Expression>
{
    alloc::vec![]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action102<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, v, _): (Coord, alloc::vec::Vec<Expression>, Coord),
) -> alloc::vec::Vec<Expression>
{
    v
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action103<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, __0, _): (Coord, Expression, Coord),
    (_, _, _): (Coord, Token<'input>, Coord),
) -> Expression
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action104<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, mut v, _): (Coord, alloc::vec::Vec<Expression>, Coord),
    (_, e, _): (Coord, core::option::Option<Expression>, Coord),
) -> Vec<Expression>
{
    match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action105<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, __0, _): (Coord, (Ident, Block<Expression>), Coord),
) -> alloc::vec::Vec<(Ident, Block<Expression>)>
{
    alloc::vec![__0]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action106<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, v, _): (Coord, alloc::vec::Vec<(Ident, Block<Expression>)>, Coord),
    (_, e, _): (Coord, (Ident, Block<Expression>), Coord),
) -> alloc::vec::Vec<(Ident, Block<Expression>)>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action107<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, __0, _): (Coord, Ident, Coord),
) -> core::option::Option<Ident>
{
    Some(__0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action108<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __lookbehind: &Coord,
    __lookahead: &Coord,
) -> core::option::Option<Ident>
{
    None
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action109<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __lookbehind: &Coord,
    __lookahead: &Coord,
) -> alloc::vec::Vec<Ident>
{
    alloc::vec![]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action110<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, v, _): (Coord, alloc::vec::Vec<Ident>, Coord),
) -> alloc::vec::Vec<Ident>
{
    v
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action111<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, __0, _): (Coord, Ident, Coord),
    (_, _, _): (Coord, Token<'input>, Coord),
) -> Ident
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action112<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, mut v, _): (Coord, alloc::vec::Vec<Prototype>, Coord),
    (_, e, _): (Coord, core::option::Option<Prototype>, Coord),
) -> Vec<Prototype>
{
    match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action113<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, mut v, _): (Coord, alloc::vec::Vec<Field>, Coord),
    (_, e, _): (Coord, core::option::Option<Field>, Coord),
) -> Vec<Field>
{
    match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action114<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, mut v, _): (Coord, alloc::vec::Vec<Expression>, Coord),
    (_, e, _): (Coord, core::option::Option<Expression>, Coord),
) -> Vec<Expression>
{
    match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action115<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, __0, _): (Coord, core::option::Option<Token<'input>>, Coord),
) -> core::option::Option<Token<'input>>
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action116<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, __0, _): (Coord, Token<'input>, Coord),
) -> core::option::Option<Token<'input>>
{
    Some(__0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action117<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __lookbehind: &Coord,
    __lookahead: &Coord,
) -> core::option::Option<Token<'input>>
{
    None
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action118<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, __0, _): (Coord, Token<'input>, Coord),
) -> alloc::vec::Vec<Token<'input>>
{
    alloc::vec![__0]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action119<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, v, _): (Coord, alloc::vec::Vec<Token<'input>>, Coord),
    (_, e, _): (Coord, Token<'input>, Coord),
) -> alloc::vec::Vec<Token<'input>>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action120<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, __0, _): (Coord, (alloc::vec::Vec<Token<'input>>, Expression), Coord),
) -> alloc::vec::Vec<(alloc::vec::Vec<Token<'input>>, Expression)>
{
    alloc::vec![__0]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action121<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, v, _): (Coord, alloc::vec::Vec<(alloc::vec::Vec<Token<'input>>, Expression)>, Coord),
    (_, e, _): (Coord, (alloc::vec::Vec<Token<'input>>, Expression), Coord),
) -> alloc::vec::Vec<(alloc::vec::Vec<Token<'input>>, Expression)>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action122<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, __0, _): (Coord, Expression, Coord),
) -> core::option::Option<Expression>
{
    Some(__0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action123<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __lookbehind: &Coord,
    __lookahead: &Coord,
) -> core::option::Option<Expression>
{
    None
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action124<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __lookbehind: &Coord,
    __lookahead: &Coord,
) -> alloc::vec::Vec<Expression>
{
    alloc::vec![]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action125<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, v, _): (Coord, alloc::vec::Vec<Expression>, Coord),
) -> alloc::vec::Vec<Expression>
{
    v
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action126<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, __0, _): (Coord, Expression, Coord),
    (_, _, _): (Coord, Token<'input>, Coord),
) -> Expression
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action127<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, __0, _): (Coord, Field, Coord),
) -> core::option::Option<Field>
{
    Some(__0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action128<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __lookbehind: &Coord,
    __lookahead: &Coord,
) -> core::option::Option<Field>
{
    None
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action129<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __lookbehind: &Coord,
    __lookahead: &Coord,
) -> alloc::vec::Vec<Field>
{
    alloc::vec![]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action130<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, v, _): (Coord, alloc::vec::Vec<Field>, Coord),
) -> alloc::vec::Vec<Field>
{
    v
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action131<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, __0, _): (Coord, Field, Coord),
    (_, _, _): (Coord, Token<'input>, Coord),
) -> Field
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action132<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, __0, _): (Coord, Prototype, Coord),
) -> core::option::Option<Prototype>
{
    Some(__0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action133<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __lookbehind: &Coord,
    __lookahead: &Coord,
) -> core::option::Option<Prototype>
{
    None
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action134<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __lookbehind: &Coord,
    __lookahead: &Coord,
) -> alloc::vec::Vec<Prototype>
{
    alloc::vec![]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action135<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, v, _): (Coord, alloc::vec::Vec<Prototype>, Coord),
) -> alloc::vec::Vec<Prototype>
{
    v
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action136<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, __0, _): (Coord, Prototype, Coord),
    (_, _, _): (Coord, Token<'input>, Coord),
) -> Prototype
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action137<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, __0, _): (Coord, Ident, Coord),
) -> alloc::vec::Vec<Ident>
{
    alloc::vec![__0]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action138<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, v, _): (Coord, alloc::vec::Vec<Ident>, Coord),
    (_, e, _): (Coord, Ident, Coord),
) -> alloc::vec::Vec<Ident>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action139<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, __0, _): (Coord, Expression, Coord),
) -> core::option::Option<Expression>
{
    Some(__0)
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action140<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __lookbehind: &Coord,
    __lookahead: &Coord,
) -> core::option::Option<Expression>
{
    None
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action141<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __lookbehind: &Coord,
    __lookahead: &Coord,
) -> alloc::vec::Vec<Expression>
{
    alloc::vec![]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action142<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, v, _): (Coord, alloc::vec::Vec<Expression>, Coord),
) -> alloc::vec::Vec<Expression>
{
    v
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action143<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, __0, _): (Coord, Expression, Coord),
    (_, _, _): (Coord, Token<'input>, Coord),
) -> Expression
{
    __0
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action144<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, __0, _): (Coord, Expression, Coord),
) -> alloc::vec::Vec<Expression>
{
    alloc::vec![__0]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action145<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, v, _): (Coord, alloc::vec::Vec<Expression>, Coord),
    (_, e, _): (Coord, Expression, Coord),
) -> alloc::vec::Vec<Expression>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action146<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, __0, _): (Coord, FnArg, Coord),
) -> alloc::vec::Vec<FnArg>
{
    alloc::vec![__0]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action147<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, v, _): (Coord, alloc::vec::Vec<FnArg>, Coord),
    (_, e, _): (Coord, FnArg, Coord),
) -> alloc::vec::Vec<FnArg>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action148<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, __0, _): (Coord, Ident, Coord),
) -> alloc::vec::Vec<Ident>
{
    alloc::vec![__0]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action149<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, v, _): (Coord, alloc::vec::Vec<Ident>, Coord),
    (_, e, _): (Coord, Ident, Coord),
) -> alloc::vec::Vec<Ident>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action150<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, __0, _): (Coord, Expression, Coord),
) -> alloc::vec::Vec<Expression>
{
    alloc::vec![__0]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action151<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, v, _): (Coord, alloc::vec::Vec<Expression>, Coord),
    (_, e, _): (Coord, Expression, Coord),
) -> alloc::vec::Vec<Expression>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action152<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, __0, _): (Coord, Prototype, Coord),
) -> alloc::vec::Vec<Prototype>
{
    alloc::vec![__0]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action153<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, v, _): (Coord, alloc::vec::Vec<Prototype>, Coord),
    (_, e, _): (Coord, Prototype, Coord),
) -> alloc::vec::Vec<Prototype>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action154<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, __0, _): (Coord, Field, Coord),
) -> alloc::vec::Vec<Field>
{
    alloc::vec![__0]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action155<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, v, _): (Coord, alloc::vec::Vec<Field>, Coord),
    (_, e, _): (Coord, Field, Coord),
) -> alloc::vec::Vec<Field>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action156<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, __0, _): (Coord, Expression, Coord),
) -> alloc::vec::Vec<Expression>
{
    alloc::vec![__0]
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes, clippy::just_underscores_and_digits)]
fn __action157<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    (_, v, _): (Coord, alloc::vec::Vec<Expression>, Coord),
    (_, e, _): (Coord, Expression, Coord),
) -> alloc::vec::Vec<Expression>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action158<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __0: (Coord, Expression, Coord),
) -> (alloc::vec::Vec<Token<'input>>, Expression)
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action72(
        errors,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action71(
        errors,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action159<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __0: (Coord, alloc::vec::Vec<Token<'input>>, Coord),
    __1: (Coord, Expression, Coord),
) -> (alloc::vec::Vec<Token<'input>>, Expression)
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action73(
        errors,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action71(
        errors,
        __temp0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action160<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __0: (Coord, Token<'input>, Coord),
) -> core::option::Option<Token<'input>>
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action116(
        errors,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action115(
        errors,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action161<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __lookbehind: &Coord,
    __lookahead: &Coord,
) -> core::option::Option<Token<'input>>
{
    let __start0 = *__lookbehind;
    let __end0 = *__lookahead;
    let __temp0 = __action117(
        errors,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action115(
        errors,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action162<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __0: (Coord, Token<'input>, Coord),
    __1: (Coord, Ident, Coord),
) -> core::option::Option<(Token<'input>, Ident)>
{
    let __start0 = __0.0;
    let __end0 = __1.2;
    let __temp0 = __action88(
        errors,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action86(
        errors,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action163<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __0: (Coord, Ident, Coord),
    __1: (Coord, Token<'input>, Coord),
    __2: (Coord, Vec<FnArg>, Coord),
    __3: (Coord, Token<'input>, Coord),
    __4: (Coord, Token<'input>, Coord),
    __5: (Coord, Vec<Ident>, Coord),
    __6: (Coord, Token<'input>, Coord),
    __7: (Coord, Token<'input>, Coord),
    __8: (Coord, Ident, Coord),
) -> Prototype
{
    let __start0 = __7.0;
    let __end0 = __8.2;
    let __temp0 = __action162(
        errors,
        __7,
        __8,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action48(
        errors,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action164<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __0: (Coord, Ident, Coord),
    __1: (Coord, Token<'input>, Coord),
    __2: (Coord, Vec<FnArg>, Coord),
    __3: (Coord, Token<'input>, Coord),
    __4: (Coord, Token<'input>, Coord),
    __5: (Coord, Vec<Ident>, Coord),
    __6: (Coord, Token<'input>, Coord),
) -> Prototype
{
    let __start0 = __6.2;
    let __end0 = __6.2;
    let __temp0 = __action87(
        errors,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action48(
        errors,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action165<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __0: (Coord, Expression, Coord),
) -> alloc::vec::Vec<(alloc::vec::Vec<Token<'input>>, Expression)>
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action158(
        errors,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action120(
        errors,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action166<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __0: (Coord, alloc::vec::Vec<Token<'input>>, Coord),
    __1: (Coord, Expression, Coord),
) -> alloc::vec::Vec<(alloc::vec::Vec<Token<'input>>, Expression)>
{
    let __start0 = __0.0;
    let __end0 = __1.2;
    let __temp0 = __action159(
        errors,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action120(
        errors,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action167<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __0: (Coord, alloc::vec::Vec<(alloc::vec::Vec<Token<'input>>, Expression)>, Coord),
    __1: (Coord, Expression, Coord),
) -> alloc::vec::Vec<(alloc::vec::Vec<Token<'input>>, Expression)>
{
    let __start0 = __1.0;
    let __end0 = __1.2;
    let __temp0 = __action158(
        errors,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action121(
        errors,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action168<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __0: (Coord, alloc::vec::Vec<(alloc::vec::Vec<Token<'input>>, Expression)>, Coord),
    __1: (Coord, alloc::vec::Vec<Token<'input>>, Coord),
    __2: (Coord, Expression, Coord),
) -> alloc::vec::Vec<(alloc::vec::Vec<Token<'input>>, Expression)>
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action159(
        errors,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action121(
        errors,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action169<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __lookbehind: &Coord,
    __lookahead: &Coord,
) -> Module
{
    let __start0 = *__lookbehind;
    let __end0 = *__lookahead;
    let __temp0 = __action69(
        errors,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action67(
        errors,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action170<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __0: (Coord, alloc::vec::Vec<(alloc::vec::Vec<Token<'input>>, Expression)>, Coord),
) -> Module
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action70(
        errors,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action67(
        errors,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action171<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __0: (Coord, Token<'input>, Coord),
    __1: (Coord, Token<'input>, Coord),
    __2: (Coord, Vec<Field>, Coord),
    __3: (Coord, Token<'input>, Coord),
) -> Block<Field>
{
    let __start0 = __1.0;
    let __end0 = __1.2;
    let __temp0 = __action160(
        errors,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action78(
        errors,
        __0,
        __temp0,
        __2,
        __3,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action172<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __0: (Coord, Token<'input>, Coord),
    __1: (Coord, Vec<Field>, Coord),
    __2: (Coord, Token<'input>, Coord),
) -> Block<Field>
{
    let __start0 = __0.2;
    let __end0 = __1.0;
    let __temp0 = __action161(
        errors,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action78(
        errors,
        __0,
        __temp0,
        __1,
        __2,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action173<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __0: (Coord, Token<'input>, Coord),
    __1: (Coord, Token<'input>, Coord),
    __2: (Coord, Vec<Expression>, Coord),
    __3: (Coord, Token<'input>, Coord),
) -> Block<Expression>
{
    let __start0 = __1.0;
    let __end0 = __1.2;
    let __temp0 = __action160(
        errors,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action74(
        errors,
        __0,
        __temp0,
        __2,
        __3,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action174<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __0: (Coord, Token<'input>, Coord),
    __1: (Coord, Vec<Expression>, Coord),
    __2: (Coord, Token<'input>, Coord),
) -> Block<Expression>
{
    let __start0 = __0.2;
    let __end0 = __1.0;
    let __temp0 = __action161(
        errors,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action74(
        errors,
        __0,
        __temp0,
        __1,
        __2,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action175<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __0: (Coord, Token<'input>, Coord),
    __1: (Coord, Token<'input>, Coord),
    __2: (Coord, Vec<Prototype>, Coord),
    __3: (Coord, Token<'input>, Coord),
) -> Block<Prototype>
{
    let __start0 = __1.0;
    let __end0 = __1.2;
    let __temp0 = __action160(
        errors,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action79(
        errors,
        __0,
        __temp0,
        __2,
        __3,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action176<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __0: (Coord, Token<'input>, Coord),
    __1: (Coord, Vec<Prototype>, Coord),
    __2: (Coord, Token<'input>, Coord),
) -> Block<Prototype>
{
    let __start0 = __0.2;
    let __end0 = __1.0;
    let __temp0 = __action161(
        errors,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action79(
        errors,
        __0,
        __temp0,
        __1,
        __2,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action177<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __0: (Coord, Token<'input>, Coord),
    __1: (Coord, Token<'input>, Coord),
    __2: (Coord, Vec<Expression>, Coord),
    __3: (Coord, Token<'input>, Coord),
) -> Block<Expression>
{
    let __start0 = __1.0;
    let __end0 = __1.2;
    let __temp0 = __action160(
        errors,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action84(
        errors,
        __0,
        __temp0,
        __2,
        __3,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action178<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __0: (Coord, Token<'input>, Coord),
    __1: (Coord, Vec<Expression>, Coord),
    __2: (Coord, Token<'input>, Coord),
) -> Block<Expression>
{
    let __start0 = __0.2;
    let __end0 = __1.0;
    let __temp0 = __action161(
        errors,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action84(
        errors,
        __0,
        __temp0,
        __1,
        __2,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action179<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __0: (Coord, Token<'input>, Coord),
    __1: (Coord, Ident, Coord),
) -> core::option::Option<(Token<'input>, Ident)>
{
    let __start0 = __0.0;
    let __end0 = __1.2;
    let __temp0 = __action77(
        errors,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action75(
        errors,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action180<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __0: (Coord, Expression, Coord),
    __1: (Coord, Ident, Coord),
    __2: (Coord, Token<'input>, Coord),
    __3: (Coord, Ident, Coord),
    __4: (Coord, Block<Expression>, Coord),
) -> Expression
{
    let __start0 = __2.0;
    let __end0 = __3.2;
    let __temp0 = __action179(
        errors,
        __2,
        __3,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action61(
        errors,
        __0,
        __1,
        __temp0,
        __4,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action181<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __0: (Coord, Expression, Coord),
    __1: (Coord, Ident, Coord),
    __2: (Coord, Block<Expression>, Coord),
) -> Expression
{
    let __start0 = __1.2;
    let __end0 = __2.0;
    let __temp0 = __action76(
        errors,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action61(
        errors,
        __0,
        __1,
        __temp0,
        __2,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action182<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __0: (Coord, Expression, Coord),
    __1: (Coord, Token<'input>, Coord),
) -> alloc::vec::Vec<Expression>
{
    let __start0 = __0.0;
    let __end0 = __1.2;
    let __temp0 = __action103(
        errors,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action144(
        errors,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action183<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __0: (Coord, alloc::vec::Vec<Expression>, Coord),
    __1: (Coord, Expression, Coord),
    __2: (Coord, Token<'input>, Coord),
) -> alloc::vec::Vec<Expression>
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action103(
        errors,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action145(
        errors,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action184<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __0: (Coord, core::option::Option<Expression>, Coord),
) -> Vec<Expression>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action101(
        errors,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action85(
        errors,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action185<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __0: (Coord, alloc::vec::Vec<Expression>, Coord),
    __1: (Coord, core::option::Option<Expression>, Coord),
) -> Vec<Expression>
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action102(
        errors,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action85(
        errors,
        __temp0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action186<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __0: (Coord, Field, Coord),
    __1: (Coord, Token<'input>, Coord),
) -> alloc::vec::Vec<Field>
{
    let __start0 = __0.0;
    let __end0 = __1.2;
    let __temp0 = __action131(
        errors,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action154(
        errors,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action187<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __0: (Coord, alloc::vec::Vec<Field>, Coord),
    __1: (Coord, Field, Coord),
    __2: (Coord, Token<'input>, Coord),
) -> alloc::vec::Vec<Field>
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action131(
        errors,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action155(
        errors,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action188<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __0: (Coord, core::option::Option<Field>, Coord),
) -> Vec<Field>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action129(
        errors,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action113(
        errors,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action189<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __0: (Coord, alloc::vec::Vec<Field>, Coord),
    __1: (Coord, core::option::Option<Field>, Coord),
) -> Vec<Field>
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action130(
        errors,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action113(
        errors,
        __temp0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action190<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __0: (Coord, FnArg, Coord),
    __1: (Coord, Token<'input>, Coord),
) -> alloc::vec::Vec<FnArg>
{
    let __start0 = __0.0;
    let __end0 = __1.2;
    let __temp0 = __action98(
        errors,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action146(
        errors,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action191<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __0: (Coord, alloc::vec::Vec<FnArg>, Coord),
    __1: (Coord, FnArg, Coord),
    __2: (Coord, Token<'input>, Coord),
) -> alloc::vec::Vec<FnArg>
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action98(
        errors,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action147(
        errors,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action192<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __0: (Coord, core::option::Option<FnArg>, Coord),
) -> Vec<FnArg>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action96(
        errors,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action89(
        errors,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action193<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __0: (Coord, alloc::vec::Vec<FnArg>, Coord),
    __1: (Coord, core::option::Option<FnArg>, Coord),
) -> Vec<FnArg>
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action97(
        errors,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action89(
        errors,
        __temp0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action194<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __0: (Coord, Expression, Coord),
    __1: (Coord, Token<'input>, Coord),
) -> alloc::vec::Vec<Expression>
{
    let __start0 = __0.0;
    let __end0 = __1.2;
    let __temp0 = __action126(
        errors,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action156(
        errors,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action195<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __0: (Coord, alloc::vec::Vec<Expression>, Coord),
    __1: (Coord, Expression, Coord),
    __2: (Coord, Token<'input>, Coord),
) -> alloc::vec::Vec<Expression>
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action126(
        errors,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action157(
        errors,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action196<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __0: (Coord, core::option::Option<Expression>, Coord),
) -> Vec<Expression>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action124(
        errors,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action114(
        errors,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action197<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __0: (Coord, alloc::vec::Vec<Expression>, Coord),
    __1: (Coord, core::option::Option<Expression>, Coord),
) -> Vec<Expression>
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action125(
        errors,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action114(
        errors,
        __temp0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action198<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __0: (Coord, Ident, Coord),
    __1: (Coord, Token<'input>, Coord),
) -> alloc::vec::Vec<Ident>
{
    let __start0 = __0.0;
    let __end0 = __1.2;
    let __temp0 = __action111(
        errors,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action137(
        errors,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action199<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __0: (Coord, alloc::vec::Vec<Ident>, Coord),
    __1: (Coord, Ident, Coord),
    __2: (Coord, Token<'input>, Coord),
) -> alloc::vec::Vec<Ident>
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action111(
        errors,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action138(
        errors,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action200<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __0: (Coord, core::option::Option<Ident>, Coord),
) -> Vec<Ident>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action109(
        errors,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action80(
        errors,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action201<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __0: (Coord, alloc::vec::Vec<Ident>, Coord),
    __1: (Coord, core::option::Option<Ident>, Coord),
) -> Vec<Ident>
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action110(
        errors,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action80(
        errors,
        __temp0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action202<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __0: (Coord, Ident, Coord),
    __1: (Coord, Token<'input>, Coord),
) -> alloc::vec::Vec<Ident>
{
    let __start0 = __0.0;
    let __end0 = __1.2;
    let __temp0 = __action93(
        errors,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action148(
        errors,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action203<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __0: (Coord, alloc::vec::Vec<Ident>, Coord),
    __1: (Coord, Ident, Coord),
    __2: (Coord, Token<'input>, Coord),
) -> alloc::vec::Vec<Ident>
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action93(
        errors,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action149(
        errors,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action204<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __0: (Coord, core::option::Option<Ident>, Coord),
) -> Vec<Ident>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action91(
        errors,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action90(
        errors,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action205<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __0: (Coord, alloc::vec::Vec<Ident>, Coord),
    __1: (Coord, core::option::Option<Ident>, Coord),
) -> Vec<Ident>
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action92(
        errors,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action90(
        errors,
        __temp0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action206<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __0: (Coord, Prototype, Coord),
    __1: (Coord, Token<'input>, Coord),
) -> alloc::vec::Vec<Prototype>
{
    let __start0 = __0.0;
    let __end0 = __1.2;
    let __temp0 = __action136(
        errors,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action152(
        errors,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action207<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __0: (Coord, alloc::vec::Vec<Prototype>, Coord),
    __1: (Coord, Prototype, Coord),
    __2: (Coord, Token<'input>, Coord),
) -> alloc::vec::Vec<Prototype>
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action136(
        errors,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action153(
        errors,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action208<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __0: (Coord, core::option::Option<Prototype>, Coord),
) -> Vec<Prototype>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action134(
        errors,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action112(
        errors,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action209<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __0: (Coord, alloc::vec::Vec<Prototype>, Coord),
    __1: (Coord, core::option::Option<Prototype>, Coord),
) -> Vec<Prototype>
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action135(
        errors,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action112(
        errors,
        __temp0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action210<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __0: (Coord, Expression, Coord),
    __1: (Coord, Token<'input>, Coord),
) -> alloc::vec::Vec<Expression>
{
    let __start0 = __0.0;
    let __end0 = __1.2;
    let __temp0 = __action143(
        errors,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action150(
        errors,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action211<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __0: (Coord, alloc::vec::Vec<Expression>, Coord),
    __1: (Coord, Expression, Coord),
    __2: (Coord, Token<'input>, Coord),
) -> alloc::vec::Vec<Expression>
{
    let __start0 = __1.0;
    let __end0 = __2.2;
    let __temp0 = __action143(
        errors,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action151(
        errors,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action212<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __0: (Coord, core::option::Option<Expression>, Coord),
) -> Vec<Expression>
{
    let __start0 = __0.0;
    let __end0 = __0.0;
    let __temp0 = __action141(
        errors,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action104(
        errors,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action213<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __0: (Coord, alloc::vec::Vec<Expression>, Coord),
    __1: (Coord, core::option::Option<Expression>, Coord),
) -> Vec<Expression>
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action142(
        errors,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action104(
        errors,
        __temp0,
        __1,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action214<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __0: (Coord, (Ident, Block<Expression>), Coord),
) -> alloc::vec::Vec<(Ident, Block<Expression>)>
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action83(
        errors,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action105(
        errors,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action215<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __0: (Coord, alloc::vec::Vec<(Ident, Block<Expression>)>, Coord),
    __1: (Coord, (Ident, Block<Expression>), Coord),
) -> alloc::vec::Vec<(Ident, Block<Expression>)>
{
    let __start0 = __1.0;
    let __end0 = __1.2;
    let __temp0 = __action83(
        errors,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action106(
        errors,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action216<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __0: (Coord, Expression, Coord),
    __1: (Coord, Prototype, Coord),
    __2: (Coord, Block<Expression>, Coord),
) -> Expression
{
    let __start0 = __2.2;
    let __end0 = __2.2;
    let __temp0 = __action81(
        errors,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action52(
        errors,
        __0,
        __1,
        __2,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action217<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __0: (Coord, Expression, Coord),
    __1: (Coord, Prototype, Coord),
    __2: (Coord, Block<Expression>, Coord),
    __3: (Coord, alloc::vec::Vec<(Ident, Block<Expression>)>, Coord),
) -> Expression
{
    let __start0 = __3.0;
    let __end0 = __3.2;
    let __temp0 = __action82(
        errors,
        __3,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action52(
        errors,
        __0,
        __1,
        __2,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action218<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __0: (Coord, Expression, Coord),
) -> Vec<Expression>
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action99(
        errors,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action184(
        errors,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action219<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __lookbehind: &Coord,
    __lookahead: &Coord,
) -> Vec<Expression>
{
    let __start0 = *__lookbehind;
    let __end0 = *__lookahead;
    let __temp0 = __action100(
        errors,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action184(
        errors,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action220<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __0: (Coord, alloc::vec::Vec<Expression>, Coord),
    __1: (Coord, Expression, Coord),
) -> Vec<Expression>
{
    let __start0 = __1.0;
    let __end0 = __1.2;
    let __temp0 = __action99(
        errors,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action185(
        errors,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action221<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __0: (Coord, alloc::vec::Vec<Expression>, Coord),
) -> Vec<Expression>
{
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action100(
        errors,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action185(
        errors,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action222<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __0: (Coord, Field, Coord),
) -> Vec<Field>
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action127(
        errors,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action188(
        errors,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action223<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __lookbehind: &Coord,
    __lookahead: &Coord,
) -> Vec<Field>
{
    let __start0 = *__lookbehind;
    let __end0 = *__lookahead;
    let __temp0 = __action128(
        errors,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action188(
        errors,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action224<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __0: (Coord, alloc::vec::Vec<Field>, Coord),
    __1: (Coord, Field, Coord),
) -> Vec<Field>
{
    let __start0 = __1.0;
    let __end0 = __1.2;
    let __temp0 = __action127(
        errors,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action189(
        errors,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action225<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __0: (Coord, alloc::vec::Vec<Field>, Coord),
) -> Vec<Field>
{
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action128(
        errors,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action189(
        errors,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action226<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __0: (Coord, FnArg, Coord),
) -> Vec<FnArg>
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action94(
        errors,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action192(
        errors,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action227<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __lookbehind: &Coord,
    __lookahead: &Coord,
) -> Vec<FnArg>
{
    let __start0 = *__lookbehind;
    let __end0 = *__lookahead;
    let __temp0 = __action95(
        errors,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action192(
        errors,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action228<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __0: (Coord, alloc::vec::Vec<FnArg>, Coord),
    __1: (Coord, FnArg, Coord),
) -> Vec<FnArg>
{
    let __start0 = __1.0;
    let __end0 = __1.2;
    let __temp0 = __action94(
        errors,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action193(
        errors,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action229<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __0: (Coord, alloc::vec::Vec<FnArg>, Coord),
) -> Vec<FnArg>
{
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action95(
        errors,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action193(
        errors,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action230<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __0: (Coord, Expression, Coord),
) -> Vec<Expression>
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action122(
        errors,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action196(
        errors,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action231<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __lookbehind: &Coord,
    __lookahead: &Coord,
) -> Vec<Expression>
{
    let __start0 = *__lookbehind;
    let __end0 = *__lookahead;
    let __temp0 = __action123(
        errors,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action196(
        errors,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action232<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __0: (Coord, alloc::vec::Vec<Expression>, Coord),
    __1: (Coord, Expression, Coord),
) -> Vec<Expression>
{
    let __start0 = __1.0;
    let __end0 = __1.2;
    let __temp0 = __action122(
        errors,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action197(
        errors,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action233<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __0: (Coord, alloc::vec::Vec<Expression>, Coord),
) -> Vec<Expression>
{
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action123(
        errors,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action197(
        errors,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action234<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __0: (Coord, Ident, Coord),
) -> Vec<Ident>
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action107(
        errors,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action204(
        errors,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action235<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __lookbehind: &Coord,
    __lookahead: &Coord,
) -> Vec<Ident>
{
    let __start0 = *__lookbehind;
    let __end0 = *__lookahead;
    let __temp0 = __action108(
        errors,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action204(
        errors,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action236<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __0: (Coord, alloc::vec::Vec<Ident>, Coord),
    __1: (Coord, Ident, Coord),
) -> Vec<Ident>
{
    let __start0 = __1.0;
    let __end0 = __1.2;
    let __temp0 = __action107(
        errors,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action205(
        errors,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action237<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __0: (Coord, alloc::vec::Vec<Ident>, Coord),
) -> Vec<Ident>
{
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action108(
        errors,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action205(
        errors,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action238<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __0: (Coord, Ident, Coord),
) -> Vec<Ident>
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action107(
        errors,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action200(
        errors,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action239<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __lookbehind: &Coord,
    __lookahead: &Coord,
) -> Vec<Ident>
{
    let __start0 = *__lookbehind;
    let __end0 = *__lookahead;
    let __temp0 = __action108(
        errors,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action200(
        errors,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action240<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __0: (Coord, alloc::vec::Vec<Ident>, Coord),
    __1: (Coord, Ident, Coord),
) -> Vec<Ident>
{
    let __start0 = __1.0;
    let __end0 = __1.2;
    let __temp0 = __action107(
        errors,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action201(
        errors,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action241<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __0: (Coord, alloc::vec::Vec<Ident>, Coord),
) -> Vec<Ident>
{
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action108(
        errors,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action201(
        errors,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action242<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __0: (Coord, Prototype, Coord),
) -> Vec<Prototype>
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action132(
        errors,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action208(
        errors,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action243<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __lookbehind: &Coord,
    __lookahead: &Coord,
) -> Vec<Prototype>
{
    let __start0 = *__lookbehind;
    let __end0 = *__lookahead;
    let __temp0 = __action133(
        errors,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action208(
        errors,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action244<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __0: (Coord, alloc::vec::Vec<Prototype>, Coord),
    __1: (Coord, Prototype, Coord),
) -> Vec<Prototype>
{
    let __start0 = __1.0;
    let __end0 = __1.2;
    let __temp0 = __action132(
        errors,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action209(
        errors,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action245<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __0: (Coord, alloc::vec::Vec<Prototype>, Coord),
) -> Vec<Prototype>
{
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action133(
        errors,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action209(
        errors,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action246<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __0: (Coord, Expression, Coord),
) -> Vec<Expression>
{
    let __start0 = __0.0;
    let __end0 = __0.2;
    let __temp0 = __action139(
        errors,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action212(
        errors,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action247<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __lookbehind: &Coord,
    __lookahead: &Coord,
) -> Vec<Expression>
{
    let __start0 = *__lookbehind;
    let __end0 = *__lookahead;
    let __temp0 = __action140(
        errors,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action212(
        errors,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action248<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __0: (Coord, alloc::vec::Vec<Expression>, Coord),
    __1: (Coord, Expression, Coord),
) -> Vec<Expression>
{
    let __start0 = __1.0;
    let __end0 = __1.2;
    let __temp0 = __action139(
        errors,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action213(
        errors,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
#[allow(clippy::too_many_arguments, clippy::needless_lifetimes,
    clippy::just_underscores_and_digits)]
fn __action249<
    'input,
    'err,
>(
    errors: &'err mut Vec<ErrorRecovery<Coord, Token<'input>, &'static str>>,
    __0: (Coord, alloc::vec::Vec<Expression>, Coord),
) -> Vec<Expression>
{
    let __start0 = __0.2;
    let __end0 = __0.2;
    let __temp0 = __action140(
        errors,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action213(
        errors,
        __0,
        __temp0,
    )
}
#[allow(clippy::type_complexity, dead_code)]

pub  trait __ToTriple<'input, 'err, >
{
    fn to_triple(value: Self) -> Result<(Coord,Token<'input>,Coord), __lalrpop_util::ParseError<Coord, Token<'input>, &'static str>>;
}

impl<'input, 'err, > __ToTriple<'input, 'err, > for (Coord, Token<'input>, Coord)
{
    fn to_triple(value: Self) -> Result<(Coord,Token<'input>,Coord), __lalrpop_util::ParseError<Coord, Token<'input>, &'static str>> {
        Ok(value)
    }
}
impl<'input, 'err, > __ToTriple<'input, 'err, > for Result<(Coord, Token<'input>, Coord), &'static str>
{
    fn to_triple(value: Self) -> Result<(Coord,Token<'input>,Coord), __lalrpop_util::ParseError<Coord, Token<'input>, &'static str>> {
        match value {
            Ok(v) => Ok(v),
            Err(error) => Err(__lalrpop_util::ParseError::User { error }),
        }
    }
}
